"use strict";

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};(function (f) {
  if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object" && typeof module !== "undefined") {
    module.exports = f();
  } else if (typeof define === "function" && define.amd) {
    define([], f);
  } else {
    var g;if (typeof window !== "undefined") {
      g = window;
    } else if (typeof global !== "undefined") {
      g = global;
    } else if (typeof self !== "undefined") {
      g = self;
    } else {
      g = this;
    }g.GitHubCalendar = f();
  }
})(function () {
  var define, module, exports;return function e(t, n, r) {
    function s(o, u) {
      if (!n[o]) {
        if (!t[o]) {
          var a = typeof require == "function" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;
        }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
          var n = t[o][1][e];return s(n ? n : e);
        }, l, l.exports, e, t, n, r);
      }return n[o].exports;
    }var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) {
      s(r[o]);
    }return s;
  }({ 1: [function (require, module, exports) {
      "use strict";
      var parse = require("github-calendar-parser"),
          $ = require("elly"),
          addSubtractDate = require("add-subtract-date"),
          formatoid = require("formatoid");var DATE_FORMAT1 = "MMM D, YYYY",
          DATE_FORMAT2 = "MMMM D";module.exports = function GitHubCalendar(container, username, options) {
        container = $(container);options = options || {};options.summary_text = options.summary_text || 'Summary of pull requests, issues opened, and commits made by <a href="https://github.com/' + username + '" target="blank">@' + username + "</a>";if (options.global_stats === false) {
          container.style.minHeight = "175px";
        }options.proxy = options.proxy || function (url) {
          return "https://urlreq.appspot.com/req?method=GET&url=" + url;
        };var fetchCalendar = function fetchCalendar() {
          return fetch(options.proxy("https://github.com/" + username)).then(function (response) {
            return response.text();
          }).then(function (body) {
            var div = document.createElement("div");div.innerHTML = body;var cal = div.querySelector("#contributions-calendar");cal.querySelector(".float-left.text-gray").innerHTML = options.summary_text;if (cal.querySelector("include-fragment")) {
              setTimeout(fetchCalendar, 500);
            } else {
              if (options.global_stats !== false) {
                var parsed = parse($("svg", cal).outerHTML),
                    currentStreakInfo = parsed.current_streak ? formatoid(parsed.current_streak_range[0], DATE_FORMAT2) + " – " + formatoid(parsed.current_streak_range[1], DATE_FORMAT2) : parsed.last_contributed ? "Last contributed in " + formatoid(parsed.last_contributed, DATE_FORMAT2) + "." : "Rock - Hard Place",
                    longestStreakInfo = parsed.longest_streak ? formatoid(parsed.longest_streak_range[0], DATE_FORMAT2) + " – " + formatoid(parsed.longest_streak_range[1], DATE_FORMAT2) : parsed.last_contributed ? "Last contributed in " + formatoid(parsed.last_contributed, DATE_FORMAT2) + "." : "Rock - Hard Place",
                    firstCol = $("<div>", { "class": "contrib-column contrib-column-first table-column", html: '<span class="text-muted">Contributions in the last year</span>\n                               <span class="contrib-number">' + parsed.last_year + ' total</span>\n                               <span class="text-muted">' + formatoid(addSubtractDate.subtract(new Date(), 1, "year"), DATE_FORMAT1) + " – " + formatoid(new Date(), DATE_FORMAT1) + "</span>" }),
                    secondCol = $("<div>", { "class": "contrib-column table-column", html: '<span class="text-muted">Longest streak</span>\n                               <span class="contrib-number">' + parsed.longest_streak + ' days</span>\n                               <span class="text-muted">' + longestStreakInfo + "</span>" }),
                    thirdCol = $("<div>", { "class": "contrib-column table-column", html: '<span class="text-muted">Current streak</span>\n                               <span class="contrib-number">' + parsed.current_streak + ' days</span>\n                               <span class="text-muted">' + currentStreakInfo + "</span>" });cal.appendChild(firstCol);cal.appendChild(secondCol);cal.appendChild(thirdCol);
              }container.innerHTML = cal.innerHTML;
            }
          }).catch(function (e) {
            return console.error(e);
          });
        };return fetchCalendar();
      };
    }, { "add-subtract-date": 2, elly: 3, formatoid: 6, "github-calendar-parser": 12 }], 2: [function (require, module, exports) {
      "use strict";
      function gen(add) {
        return function _(d, count, what) {
          count = add * count;switch (what) {case "years":case "year":
              d.setFullYear(d.getFullYear() + count);break;case "months":case "month":
              d.setMonth(d.getMonth() + count);break;case "weeks":case "week":
              return _(d, count * 7, "days");break;case "days":case "day":
              d.setDate(d.getDate() + count);break;case "hours":case "hour":
              d.setHours(d.getHours() + count);break;case "minutes":case "minute":
              d.setMinutes(d.getMinutes() + count);break;case "seconds":case "second":
              d.setSeconds(d.getSeconds() + count);break;case "milliseconds":case "millisecond":
              d.setMilliseconds(d.getMilliseconds() + count);break;default:
              throw new Error("Invalid range: " + what);}return d;
        };
      }module.exports = { add: gen(1), subtract: gen(-1) };
    }, {}], 3: [function (require, module, exports) {
      "use strict";
      var iterateObj = require("iterate-object"),
          sliced = require("sliced");function $(input, contextOrAttributes) {
        if (typeof input === "string") {
          if (input.charAt(0) === "<") {
            input = document.createElement(input.slice(1, -1));iterateObj(contextOrAttributes || {}, function (value, name) {
              switch (name) {case "text":
                  input.textContent = value;return;case "html":
                  input.innerHTML = value;return;}input.setAttribute(name, value);
            });return input;
          } else {
            contextOrAttributes = contextOrAttributes || document;return contextOrAttributes.querySelector(input);
          }
        }return input;
      }$.$$ = function (selector, context) {
        context = context || document;return sliced(context.querySelectorAll(selector));
      };module.exports = $;
    }, { "iterate-object": 4, sliced: 5 }], 4: [function (require, module, exports) {
      function iterateObject(obj, fn) {
        var i = 0,
            keys = [];if (Array.isArray(obj)) {
          for (; i < obj.length; ++i) {
            if (fn(obj[i], i, obj) === false) {
              break;
            }
          }
        } else if ((typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" && obj !== null) {
          keys = Object.keys(obj);for (; i < keys.length; ++i) {
            if (fn(obj[keys[i]], keys[i], obj) === false) {
              break;
            }
          }
        }
      }module.exports = iterateObject;
    }, {}], 5: [function (require, module, exports) {
      module.exports = function (args, slice, sliceEnd) {
        var ret = [];var len = args.length;if (0 === len) return ret;var start = slice < 0 ? Math.max(0, slice + len) : slice || 0;if (sliceEnd !== undefined) {
          len = sliceEnd < 0 ? sliceEnd + len : sliceEnd;
        }while (len-- > start) {
          ret[len - start] = args[len];
        }return ret;
      };
    }, {}], 6: [function (require, module, exports) {
      "use strict";
      var months = require("months"),
          days = require("days"),
          fillo = require("fillo"),
          ParseIt = require("parse-it").Parser;var parser = new ParseIt({ YYYY: function YYYY(i) {
          return i.getFullYear();
        }, YY: function YY(i) {
          return i.getFullYear() % 100;
        }, MMMM: function MMMM(i) {
          return months[i.getMonth()];
        }, MMM: function MMM(i) {
          return months.abbr[i.getMonth()];
        }, MM: function MM(i) {
          return fillo(i.getMonth() + 1);
        }, M: function M(i) {
          return i.getMonth() + 1;
        }, dddd: function dddd(i) {
          return days[i.getDay()];
        }, ddd: function ddd(i) {
          return days.abbr[i.getDay()];
        }, dd: function dd(i) {
          return days.short[i.getDay()];
        }, d: function d(i) {
          return i.getDay();
        }, DD: function DD(i) {
          return fillo(i.getDate());
        }, D: function D(i) {
          return i.getDate();
        }, A: function A(i) {
          return i.getHours() >= 12 ? "PM" : "AM";
        }, a: function a(i) {
          return i.getHours() >= 12 ? "pm" : "am";
        }, hh: function hh(i) {
          return fillo(i.getHours() % 12 || 12);
        }, h: function h(i) {
          return i.getHours() % 12 || 12;
        }, HH: function HH(i) {
          return fillo(i.getHours());
        }, H: function H(i) {
          return i.getHours();
        }, mm: function mm(i) {
          return fillo(i.getMinutes());
        }, m: function m(i) {
          return i.getMinutes();
        }, ss: function ss(i) {
          return fillo(i.getSeconds());
        }, s: function s(i) {
          return i.getSeconds();
        } });module.exports = function formatoid(i, f) {
        return parser.run(f, [i]);
      };
    }, { days: 7, fillo: 8, months: 9, "parse-it": 10 }], 7: [function (require, module, exports) {
      module.exports = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];module.exports.abbr = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];module.exports.short = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"];
    }, {}], 8: [function (require, module, exports) {
      "use strict";
      module.exports = function fillo(what, size, ch) {
        size = size || 2;ch = ch || "0";what = what.toString();var howMany = size - what.length;return (howMany <= 0 ? "" : ch.repeat(howMany)) + what;
      };
    }, {}], 9: [function (require, module, exports) {
      module.exports = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];module.exports.abbr = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    }, {}], 10: [function (require, module, exports) {
      "use strict";
      var _createClass = function () {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
          }
        }return function (Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
        };
      }();function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }var regexEscape = require("regex-escape");var ParseIt = function () {
        function ParseIt(obj) {
          _classCallCheck(this, ParseIt);this.obj = obj || {};this.re = new RegExp("^(" + Object.keys(obj).map(regexEscape).join("|") + ")");
        }_createClass(ParseIt, [{ key: "run", value: function run(format, args) {
            var result = "";args = args || [];do {
              var arr = format.match(this.re),
                  field = arr && arr[1],
                  c = field || format.charAt(0);if (field) {
                var value = this.obj[field];if (typeof value === "function") {
                  value = value.apply(this, args);
                }result += value;
              } else {
                result += c;
              }format = format.substring(c.length);
            } while (format);return result;
          } }]);return ParseIt;
      }();function parseIt(format, obj, args) {
        return new ParseIt(obj).run(format, args);
      }parseIt.Parser = ParseIt;module.exports = parseIt;
    }, { "regex-escape": 11 }], 11: [function (require, module, exports) {
      "use strict";
      function RegexEscape(input) {
        return input.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
      }RegexEscape.proto = function () {
        RegExp.escape = RegexEscape;return RegexEscape;
      };module.exports = RegexEscape;
    }, {}], 12: [function (require, module, exports) {
      "use strict";
      var githubCalendarLegend = require("github-calendar-legend");module.exports = function parseGitHubCalendarSvg(input) {
        var data = { last_year: 0, longest_streak: -1, longest_streak_range: [], current_streak: 0, current_streak_range: [], weeks: [], days: [], last_contributed: null },
            lastWeek = [],
            updateLongestStreak = function updateLongestStreak() {
          if (data.current_streak > data.longest_streak) {
            data.longest_streak = data.current_streak;data.longest_streak_range[0] = data.current_streak_range[0];data.longest_streak_range[1] = data.current_streak_range[1];
          }
        };input.split("\n").slice(2).map(function (c) {
          return c.trim();
        }).forEach(function (c) {
          if (c.startsWith("<g transform")) {
            return lastWeek.length && data.weeks.push(lastWeek) && (lastWeek = []);
          }var fill = c.match(/fill="(#[a-z0-9]+)"/),
              date = c.match(/data-date="([0-9\-]+)"/),
              count = c.match(/data-count="([0-9]+)"/),
              level = null;fill = fill && fill[1];date = date && date[1];count = count && +count[1];if (!fill) {
            return;
          }var obj = { fill: fill, date: new Date(date), count: count, level: githubCalendarLegend.indexOf(fill) };if (data.current_streak === 0) {
            data.current_streak_range[0] = obj.date;
          }if (obj.count) {
            ++data.current_streak;data.last_year += obj.count;data.last_contributed = obj.date;data.current_streak_range[1] = obj.date;
          } else {
            updateLongestStreak();data.current_streak = 0;
          }lastWeek.push(obj);data.days.push(obj);
        });updateLongestStreak();return data;
      };
    }, { "github-calendar-legend": 13 }], 13: [function (require, module, exports) {
      "use strict";
      module.exports = ["#eee", "#d6e685", "#8cc665", "#44a340", "#1e6823"];
    }, {}] }, {}, [1])(1);
});