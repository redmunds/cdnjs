function parseFile(e,t){return 65279==e.charCodeAt(0)&&(e=e.slice(1)),(new ts.Parser).quickParse(new ts.StringSourceText(e),t)}function lookup(e,t){for(;t;t=t.prev)if(t.name==e)return t.value}function buildPath(e){for(var t="";e;e=e.prev)e.enter&&(t=t?e.enter+"."+t:e.enter);return t}function functionType(e,t){for(var r="fn(",n=e.arguments.members,a=e.returnTypeAnnotation,i=0,o=n.length-(e.variableArgList?1:0);i<o;++i){i&&(r+=", ");var u=n[i],l=u.id.text;u.isOptional&&(l+="?"),r+=l+": "+flat(u.typeExpr,{enter:l,prev:t})}return r+=")",!a||26==a.nodeType&&"void"==a.term.text||(r+=" -> "+flat(a,{enter:"!ret",prev:t})),r}function objType(e,t){for(var r={},n=e.members,a=0;a<n.length;++a){var i,o=n[a];if(o.nodeType==nt.ImportDeclaration)t={name:o.id.text,value:o.alias.text.replace(/"/g,""),prev:t};else if(i=o.name||o.id){var u=o.nodeType==nt.ModuleDefinition?i.text:i.text.replace(/"/g,"");r[u]=walk(o,{enter:u,prev:t})}else r["!type"]||(r["!type"]=walk(o,t))}return r}function walk(e,t){if(!e)return"?";switch(e.nodeType){case nt.List:return objType(e,t);case nt.Name:return lookup(e.text,t)||e.text;case nt.VarDecl:return walk(e.typeExpr,t);case nt.TypeRef:if(!e.arrayCount)return walk(e.term,t);for(var r=flat(e.term,{enter:"<i>",prev:t}),n=0;n<e.arrayCount;++n)r="["+r+"]";return r;case nt.ModuleDeclaration:case nt.ClassDeclaration:case nt.InterfaceDeclaration:return objType(e.members,t);case nt.FuncDecl:return functionType(e,t);case nt.Dot:return flat(e.operand1,t)+"."+flat(e.operand2,t);default:throw new Error("Unrecognized type: "+nt._map[e.nodeType])}}function flat(e,t){var r=walk(e,t);if("string"==typeof r)return r;for(var n=buildPath(t),a=0;;++a){var i=n+(a||"");if(!definitions.hasOwnProperty(i)){n=i;break}}return definitions[n]=r,n}var fs=require("fs"),ts=new Function(fs.readFileSync(__dirname+"/../node_modules/typescript/bin/typescript.js","utf8")+";return TypeScript;")(),nt=ts.NodeType,definitions,defaultCx={name:"any",value:"?",prev:{name:"null",value:"?",prev:null}};exports.translate=function(e,t){definitions={};var r=parseFile(e,t).Script.bod,n=walk(r,defaultCx);n["!name"]=t;var a=!1;for(var i in definitions){a=!0;break}return a&&(n["!define"]=definitions),n};
//# sourceMappingURL=typescript.min.js.map