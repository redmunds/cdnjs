{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///koto.js","webpack:///webpack/bootstrap b97ccec77da028093ee8","webpack:///./chart.js","webpack:///external \"babel-polyfill\"","webpack:///external \"d3\"","webpack:///./assert.js","webpack:///./layer.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_1__","__WEBPACK_EXTERNAL_MODULE_2__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_classCallCheck","instance","Constructor","_typeof","Symbol","iterator","_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","Array","isArray","_createClass","defineProperties","target","props","descriptor","defineProperty","key","protoProps","staticProps","_d2","_d3","_assert","_assert2","_layer2","_layer3","Chart","selection","_this","base","hasDrawn","merge","configs","_len","arguments","args","_key","assign","apply","concat","accessors","_len2","_key2","promise","_layers","Map","_attached","_events","config","a","accessor","data","name","layer","_chart","options","_layer","_Chart","get","set","remove","attachmentName","chart","rawData","attachmentData","_this2","promises","Promise","resolve","transform","then","preDraw","trigger","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","values","draw","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","entries","_step2$value","attachment","demux","all","postDraw","postTransition","callback","context","events","has","Set","add","_once","off","on","clear","forEach","event","clone","map","_len3","_key3","_event$callback","nameOrObject","setPercentage","calculatePercentage","initialValue","min","Math","definition","constrain","percentage","hasOwnProperty","setter","console","warn","getter","item","init","_ref","_this3","getPrototypeOf","initialize","Layer","kotoAssert","test","message","Error","_base","_handlers","_lifecycleRe","dataBind","insert","eventName","handler","idx","handlers","splice","endall","transition","n","size","each","promiseCallback","bound","entering","method","len","tidx","tlen","enter","exit","l","empty"],"mappings":"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","file":"koto.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babel-polyfill\"), require(\"d3\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"babel-polyfill\", \"d3\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Koto\"] = factory(require(\"babel-polyfill\"), require(\"d3\"));\n\telse\n\t\troot[\"Koto\"] = factory(root[\"babel-polyfill\"], root[\"d3\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babel-polyfill\"), require(\"d3\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"babel-polyfill\", \"d3\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Koto\"] = factory(require(\"babel-polyfill\"), require(\"d3\"));\n\telse\n\t\troot[\"Koto\"] = factory(root[\"babel-polyfill\"], root[\"d3\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(1);\n\t\n\tvar _d2 = __webpack_require__(2);\n\t\n\tvar _d3 = _interopRequireDefault(_d2);\n\t\n\tvar _assert = __webpack_require__(3);\n\t\n\tvar _assert2 = _interopRequireDefault(_assert);\n\t\n\tvar _layer2 = __webpack_require__(4);\n\t\n\tvar _layer3 = _interopRequireDefault(_layer2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// d3 is required\n\t(0, _assert2.default)(_d3.default, 'd3 js is required.');\n\t/**\n\t * Create a koto chart\n\t *\n\t * @constructor\n\t *\n\t * @param {d3.selection} selection The chart's \"base\" DOM node. This should\n\t *        contain any nodes that the chart generates.\n\t */\n\t\n\tvar Chart = function () {\n\t  function Chart(selection) {\n\t    var _this = this;\n\t\n\t    _classCallCheck(this, Chart);\n\t\n\t    this.base = selection; // Container for chart @type {d3.selection}.\n\t    this.hasDrawn = false; // Has this chart been drawn at least once?\n\t\n\t    this.merge = {};\n\t    this.merge.configs = function () {\n\t      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t        args[_key] = arguments[_key];\n\t      }\n\t\n\t      _this.configs = Object.assign.apply(Object, [{}, _this.configs].concat(args));\n\t      return _this.configs;\n\t    };\n\t    this.merge.accessors = function () {\n\t      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t        args[_key2] = arguments[_key2];\n\t      }\n\t\n\t      _this.accessors = Object.assign.apply(Object, [{}, _this.accessors].concat(args));\n\t      return _this.accessors;\n\t    };\n\t\n\t    // exposed properties\n\t    this.configs = {};\n\t    this.accessors = {};\n\t    this.promise = null;\n\t\n\t    // private\n\t    this._layers = new Map();\n\t    this._attached = new Map();\n\t    this._events = new Map();\n\t\n\t    // alias\n\t    this.c = this.config;\n\t    this.a = this.accessor;\n\t  }\n\t\n\t  /**\n\t   * A \"hook\" method that you may define to modify input data before it is used\n\t   * to draw the chart's layers and attachments. This method will be used by all\n\t   * sub-classes. You may optionally return a promise if your data transformation\n\t   * is asynchronous (i.e. you're using web workers).\n\t   *\n\t   * Note: you will most likely never call this method directly, but rather\n\t   * include it as part of a chart definition, and then rely on koto to\n\t   * invoke it when you draw the chart with {@link Chart#draw}.\n\t   *\n\t   * @param {Array} data Input data provided to @link Chart#draw}.\n\t   * @returns {mixed} Data to be used in drawing the chart's layers and\n\t   *                  attachments.\n\t   */\n\t\n\t\n\t  _createClass(Chart, [{\n\t    key: 'transform',\n\t    value: function transform(data) {\n\t      return data;\n\t    }\n\t\n\t    /**\n\t     * A \"hook\" method that you may define to choose which mutation of the input\n\t     * data is sent to which of the attached charts (by name). This method will\n\t     * be used by all sub-classes. This only applies to charts that use the\n\t     * {@link Chart#attach} method.\n\t     *\n\t     * Note: you will most likely never call this method directly, but rather\n\t     * include it as part of a chart definition, and then rely on koto to\n\t     * invoke it when you draw the chart with {@link Chart#draw}.\n\t     *\n\t     * @param {String} data Name of attached chart defined in {@link Chart#attach}.\n\t     * @param {Array} data Input data provided to {@link Chart#draw}.\n\t     * @returns {mixed} Data to be used in drawing the chart's layers and\n\t     *                  attachments.\n\t     */\n\t\n\t  }, {\n\t    key: 'demux',\n\t    value: function demux(name, data) {\n\t      return data;\n\t    }\n\t\n\t    /**\n\t     * A \"hook\" method that will allow you to run some arbitrary code before\n\t     * {@link Chart#draw}. This will run every time {@link Chart#draw} is called.\n\t     *\n\t     * Note: you will most likely never call this method directly, but rather\n\t     * include it as part of a chart definition, and then rely on koto to\n\t     * invoke it when you draw the chart with {@link Chart#draw}.\n\t     *\n\t     * Note 2: a `postDraw` event is also fired when appropriate;\n\t     *\n\t     * @param  {[type]} data [description]\n\t     * @return {[type]}      [description]\n\t     */\n\t\n\t  }, {\n\t    key: 'preDraw',\n\t    value: function preDraw() {}\n\t\n\t    /**\n\t     * A \"hook\" method that will allow you to run some arbitrary code after\n\t     * {@link Chart#draw}. This will run every time {@link Chart#draw} is called.\n\t     *\n\t     * Note: you will most likely never call this method directly, but rather\n\t     * include it as part of a chart definition, and then rely on koto to\n\t     * invoke it when you draw the chart with {@link Chart#draw}.\n\t     *\n\t     * @param  {[type]} data [description]\n\t     */\n\t\n\t  }, {\n\t    key: 'postDraw',\n\t    value: function postDraw() {}\n\t\n\t    /**\n\t     * A \"hook\" method that will allow you to run some arbitrary code after\n\t     * {@link Chart#draw} is called AND after all transitions for all layers\n\t     * and attached charts have been completed. This will run every time\n\t     * {@link Chart#draw} is called.\n\t     *\n\t     * Note: you will most likely never call this method directly, but rather\n\t     * include it as part of a chart definition, and then rely on koto to\n\t     * invoke it when you draw the chart with {@link Chart#draw}.\n\t     *\n\t     * Note 2: a `postTransition` event is also fired when appropriate;\n\t     *\n\t     * @param  {[type]} data\n\t     */\n\t\n\t  }, {\n\t    key: 'postTransition',\n\t    value: function postTransition() {}\n\t\n\t    /**\n\t     * Remove a layer from the chart.\n\t     *\n\t     * @param {String} name The name of the layer to remove.\n\t     * @returns {Layer} The layer removed by this operation.\n\t     */\n\t\n\t  }, {\n\t    key: 'unlayer',\n\t    value: function unlayer(name) {\n\t      var layer = this.layer(name);\n\t\n\t      this._layers.delete(name);\n\t      delete layer._chart;\n\t\n\t      return layer;\n\t    }\n\t\n\t    /**\n\t     * Interact with the chart's {@link Layer|layers}.\n\t     *\n\t     * If only a `name` is provided, simply return the layer registered to that\n\t     * name (if any).\n\t     *\n\t     * If a `name` and `selection` are provided, treat the `selection` as a\n\t     * previously-created layer and attach it to the chart with the specified\n\t     * `name`.\n\t     *\n\t     * If all three arguments are specified, initialize a new {@link Layer} using\n\t     * the specified `selection` as a base passing along the specified `options`.\n\t     *\n\t     * The {@link Layer.draw} method of attached layers will be invoked\n\t     * whenever this chart's {@link Chart#draw} is invoked and will receive the\n\t     * data (optionally modified by the chart's {@link Chart#transform} method.\n\t     *\n\t     * @param {String} name Name of the layer to attach or retrieve.\n\t     * @param {d3.selection|Layer} [selection] The layer's base or a\n\t     *        previously-created {@link Layer}.\n\t     * @param {Object} [options] Options to be forwarded to {@link Layer|the Layer\n\t     *        constructor}\n\t     *\n\t     * @returns {Layer}\n\t     */\n\t\n\t  }, {\n\t    key: 'layer',\n\t    value: function layer(name, selection, options) {\n\t      var _Chart = this;\n\t      var _layer;\n\t\n\t      if (arguments.length === 1) {\n\t        return this._layers.get(name);\n\t      }\n\t\n\t      // we are reattaching a previous layer, which the\n\t      // selection argument is now set to.\n\t      if (arguments.length === 2) {\n\t\n\t        if (selection instanceof _layer3.default) {\n\t          selection._chart = this;\n\t          this._layers.set(name, selection);\n\t          return this._layers.get(name);\n\t        } else {\n\t          (0, _assert2.default)(false, 'When reattaching a layer, the second argument must be a koto layer');\n\t        }\n\t      }\n\t\n\t      selection._chart = this;\n\t\n\t      _layer = new _layer3.default(selection, options);\n\t\n\t      _layer.remove = function () {\n\t        _Chart._layers.delete(name);\n\t        return this;\n\t      };\n\t\n\t      this._layers.set(name, _layer);\n\t\n\t      return _layer;\n\t    }\n\t\n\t    /**\n\t     * Register or retrieve an \"attachment\" Chart. The \"attachment\" chart's `draw`\n\t     * method will be invoked whenever the containing chart's `draw` method is\n\t     * invoked.\n\t     *\n\t     * @param {String} attachmentName Name of the attachment\n\t     * @param {Chart} [chart] koto to register as a mix in of this chart. When\n\t     *        unspecified, this method will return the attachment previously\n\t     *        registered with the specified `attachmentName` (if any).\n\t     *\n\t     * @returns {Chart} Reference to this chart (chainable).\n\t     */\n\t\n\t  }, {\n\t    key: 'attach',\n\t    value: function attach(attachmentName, chart) {\n\t      if (arguments.length === 1) {\n\t        return this._attached.get(attachmentName);\n\t      }\n\t\n\t      this._attached.set(attachmentName, chart);\n\t      return chart;\n\t    }\n\t\n\t    /**\n\t     * Update the chart's representation in the DOM, drawing all of its layers and\n\t     * any \"attachment\" charts (as attached via {@link Chart#attach}).\n\t     *\n\t     * Note: The first time you call this method, the property `hasDrawn` will be\n\t     * set to true. This is helpful if you want to only run some code on the first\n\t     * time the chart is drawn.\n\t     *\n\t     * @param {Object} data Data to pass to the {@link Layer#draw|draw method} of\n\t     *        this cart's {@link Layer|layers} (if any) and the {@link\n\t     *        Chart#draw|draw method} of this chart's attachments (if any).\n\t     */\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(rawData) {\n\t      var _this2 = this;\n\t\n\t      var layer,\n\t          attachmentData,\n\t          promises = [];\n\t\n\t      return Promise.resolve(this.transform(rawData)).then(function (data) {\n\t        _this2.preDraw(data);\n\t        _this2.trigger('preDraw', data);\n\t\n\t        var _iteratorNormalCompletion = true;\n\t        var _didIteratorError = false;\n\t        var _iteratorError = undefined;\n\t\n\t        try {\n\t          for (var _iterator = _this2._layers.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t            layer = _step.value;\n\t\n\t            layer.draw(data);\n\t            promises.push(layer.promise);\n\t          }\n\t        } catch (err) {\n\t          _didIteratorError = true;\n\t          _iteratorError = err;\n\t        } finally {\n\t          try {\n\t            if (!_iteratorNormalCompletion && _iterator.return) {\n\t              _iterator.return();\n\t            }\n\t          } finally {\n\t            if (_didIteratorError) {\n\t              throw _iteratorError;\n\t            }\n\t          }\n\t        }\n\t\n\t        var _iteratorNormalCompletion2 = true;\n\t        var _didIteratorError2 = false;\n\t        var _iteratorError2 = undefined;\n\t\n\t        try {\n\t          for (var _iterator2 = _this2._attached.entries()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t            var _step2$value = _slicedToArray(_step2.value, 2);\n\t\n\t            var attachmentName = _step2$value[0];\n\t            var attachment = _step2$value[1];\n\t\n\t            attachmentData = _this2.demux ? _this2.demux(attachmentName, data) : data;\n\t            attachment.draw(attachmentData);\n\t            promises.push(attachment.promise);\n\t          }\n\t        } catch (err) {\n\t          _didIteratorError2 = true;\n\t          _iteratorError2 = err;\n\t        } finally {\n\t          try {\n\t            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t              _iterator2.return();\n\t            }\n\t          } finally {\n\t            if (_didIteratorError2) {\n\t              throw _iteratorError2;\n\t            }\n\t          }\n\t        }\n\t\n\t        _this2.hasDrawn = true;\n\t\n\t        _this2.promise = Promise.all(promises);\n\t\n\t        _this2.postDraw();\n\t        _this2.trigger('postDraw', data);\n\t\n\t        _this2.promise.then(function () {\n\t          _this2.postTransition(data);\n\t          _this2.trigger('postTransition', data);\n\t        });\n\t\n\t        return data;\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Subscribe a callback function to an event triggered on the chart. See {@link\n\t     * Chart#once} to subscribe a callback function to an event for one occurrence.\n\t     *\n\t     * @externalExample {runnable} chart-on\n\t     *\n\t     * @param {String} name Name of the event\n\t     * @param {ChartEventHandler} callback Function to be invoked when the event\n\t     *        occurs\n\t     * @param {Object} [context] Value to set as `this` when invoking the\n\t     *        `callback`. Defaults to the chart instance.\n\t     *\n\t     * @returns {Chart} A reference to this chart (chainable).\n\t     */\n\t\n\t  }, {\n\t    key: 'on',\n\t    value: function on(name, callback, context) {\n\t      var events;\n\t      if (this._events.has(name)) {\n\t        events = this._events.get(name);\n\t      } else {\n\t        events = new Set();\n\t      }\n\t\n\t      events.add({\n\t        callback: callback,\n\t        context: context || this,\n\t        _chart: this\n\t      });\n\t\n\t      this._events.set(name, events);\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * Subscribe a callback function to an event triggered on the chart. This\n\t     * function will be invoked at the next occurrence of the event and immediately\n\t     * unsubscribed. See {@link Chart#on} to subscribe a callback function to an\n\t     * event indefinitely.\n\t     *\n\t     * @externalExample {runnable} chart-once\n\t     *\n\t     * @param {String} name Name of the event\n\t     * @param {ChartEventHandler} callback Function to be invoked when the event\n\t     *        occurs\n\t     * @param {Object} [context] Value to set as `this` when invoking the\n\t     *        `callback`. Defaults to the chart instance\n\t     *\n\t     * @returns {Chart} A reference to this chart (chainable)\n\t     */\n\t\n\t  }, {\n\t    key: 'once',\n\t    value: function once(name, callback, context) {\n\t      var self = this;\n\t      var _once = function _once() {\n\t        self.off(name, _once);\n\t        callback.apply(this, arguments);\n\t      };\n\t      return this.on(name, _once, context);\n\t    }\n\t\n\t    /**\n\t     * Unsubscribe one or more callback functions from an event triggered on the\n\t     * chart. When no arguments are specified, *all* handlers will be unsubscribed.\n\t     * When only a `name` is specified, all handlers subscribed to that event will\n\t     * be unsubscribed. When a `name` and `callback` are specified, only that\n\t     * function will be unsubscribed from that event. When a `name` and `context`\n\t     * are specified (but `callback` is omitted), all events bound to the given\n\t     * event with the given context will be unsubscribed.\n\t     *\n\t     * @externalExample {runnable} chart-off\n\t     *\n\t     * @param {String} [name] Name of the event to be unsubscribed\n\t     * @param {ChartEventHandler} [callback] Function to be unsubscribed\n\t     * @param {Object} [context] Contexts to be unsubscribed\n\t     *\n\t     * @returns {Chart} A reference to this chart (chainable).\n\t     */\n\t\n\t  }, {\n\t    key: 'off',\n\t    value: function off(name, callback, context) {\n\t\n\t      // remove all events\n\t      if (arguments.length === 0) {\n\t        this._events.clear();\n\t        return this;\n\t      }\n\t\n\t      // remove all events for a specific name\n\t      if (arguments.length === 1) {\n\t        if (this._events.has(name)) {\n\t          this._events.get(name).clear();\n\t        }\n\t        return this;\n\t      }\n\t\n\t      // remove all events that match whatever combination of name, context\n\t      // and callback.\n\t\n\t      this._events.get(name).forEach(function (event, clone, map) {\n\t        if (callback && callback === clone.callback || context && context === clone.context) {\n\t          map.delete(event);\n\t        }\n\t      });\n\t\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * Publish an event on this chart with the given `name`.\n\t     *\n\t     * @externalExample {runnable} chart-trigger\n\t     *\n\t     * @param {String} name Name of the event to publish\n\t     * @param {...*} arguments Values with which to invoke the registered\n\t     *        callbacks.\n\t     *\n\t     * @returns {Chart} A reference to this chart (chainable).\n\t     */\n\t\n\t  }, {\n\t    key: 'trigger',\n\t    value: function trigger(name) {\n\t      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n\t        args[_key3 - 1] = arguments[_key3];\n\t      }\n\t\n\t      if (this._events.has(name)) {\n\t        this._events.get(name).forEach(function (event) {\n\t          var _event$callback;\n\t\n\t          (_event$callback = event.callback).call.apply(_event$callback, [event.context].concat(args));\n\t        });\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * Get and set chart options (or configs)\n\t     *\n\t     * @param  {mixed} nameOrObject Name of item getting or setting\n\t     *                              or an object with key-value pairs.\n\t     * @param  {mixed} value The value for config item with that name.\n\t     * @return {mixed} if getting: the value. if setting: the chart instance.\n\t     */\n\t\n\t  }, {\n\t    key: 'config',\n\t    value: function config(nameOrObject, value) {\n\t      var key;\n\t      var definition;\n\t      var _Chart = this;\n\t\n\t      function setPercentage() {\n\t        function calculatePercentage(arr, initialValue) {\n\t          var min = Math.min.call(null, arr.map(function (name) {\n\t            return _Chart.config(name);\n\t          }));\n\t          return initialValue / min;\n\t        }\n\t\n\t        if (definition.constrain === true) {\n\t          definition.percentage = calculatePercentage(['width', 'height'], definition.value);\n\t        } else if (Array.isArray(definition.constrain)) {\n\t          definition.percentage = calculatePercentage(definition.constrain, definition.value);\n\t        } else {\n\t          definition.percentage = calculatePercentage([definition.constrain], definition.value);\n\t        }\n\t      }\n\t\n\t      if (arguments.length === 0) {\n\t        return this.configs;\n\t      }\n\t\n\t      if (arguments.length === 1) {\n\t        if ((typeof nameOrObject === 'undefined' ? 'undefined' : _typeof(nameOrObject)) === 'object') {\n\t          for (key in nameOrObject) {\n\t            if (this.configs.hasOwnProperty(key)) {\n\t              definition = this.configs[key];\n\t              if (definition.hasOwnProperty('setter')) {\n\t                definition.value = definition.setter.call(definition, nameOrObject[key]);\n\t              } else {\n\t                definition.value = nameOrObject[key];\n\t              }\n\t              if (definition.hasOwnProperty('constrain')) {\n\t                setPercentage();\n\t              }\n\t              this.configs[key] = definition;\n\t            } else {\n\t              console.warn('config with name ' + nameOrObject + ' is not defined.');\n\t            }\n\t          }\n\t          return this;\n\t        }\n\t\n\t        (0, _assert2.default)(this.configs.hasOwnProperty(nameOrObject), nameOrObject + ' is not a valid option.');\n\t        definition = this.configs[nameOrObject];\n\t        if (definition.hasOwnProperty('getter')) {\n\t          return definition.getter.call(definition);\n\t        }\n\t        return definition.value;\n\t      }\n\t\n\t      if (arguments.length === 2) {\n\t        if (this.configs.hasOwnProperty(nameOrObject)) {\n\t          definition = this.configs[nameOrObject];\n\t          if (definition.hasOwnProperty('setter')) {\n\t            definition.value = definition.setter.call(definition, value);\n\t          } else {\n\t            definition.value = value;\n\t          }\n\t          if (definition.hasOwnProperty('constrain')) {\n\t            setPercentage();\n\t          }\n\t          this.configs[nameOrObject] = definition;\n\t        } else {\n\t          console.warn('config with name ' + nameOrObject + ' is not defined.');\n\t        }\n\t        return this;\n\t      }\n\t    }\n\t\n\t    /**\n\t     * This will get or set any of the chart's accessors.\n\t     *\n\t     * @param  {String or Object} item If string, it will return the function for that accessor item.\n\t     *                                 If object, it will update that accessor with set function.\n\t     * @param  {function} [value] The function to update accessor item with.\n\t     * @return {object} The chart to preserve chainability.\n\t     */\n\t\n\t  }, {\n\t    key: 'accessor',\n\t    value: function accessor(item, value) {\n\t      var key;\n\t      if (arguments.length === 0) {\n\t        return this.accessors;\n\t      }\n\t\n\t      if (arguments.length === 1) {\n\t        if (typeof item === 'string') {\n\t          (0, _assert2.default)(this.accessors.hasOwnProperty(item), item + ' is not a valid accessor.');\n\t          return this.accessors[item];\n\t        } else {\n\t          for (key in item) {\n\t            this.accessors[key] = item[key];\n\t          }\n\t        }\n\t      } else {\n\t        this.accessors[item] = value;\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * This will extend a chart by passing in an object of initialize function.\n\t     * @param  {Object || function} init Initialize function of object with initialize method.\n\t     * @return {Construtor}      Chart constructor\n\t     */\n\t\n\t  }], [{\n\t    key: 'extend',\n\t    value: function extend(init) {\n\t      var chart = function (_ref) {\n\t        _inherits(chart, _ref);\n\t\n\t        function chart(selection) {\n\t          _classCallCheck(this, chart);\n\t\n\t          var key;\n\t\n\t          var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(chart).call(this, selection));\n\t\n\t          if (typeof init === 'function') {\n\t            init.call(_this3);\n\t          } else {\n\t            for (key in init) {\n\t              _this3[key] = init[key];\n\t            }\n\t            _this3.initialize.call(_this3);\n\t          }\n\t\n\t          return _this3;\n\t        }\n\t\n\t        return chart;\n\t      }(this);\n\t\n\t      return chart;\n\t    }\n\t  }]);\n\t\n\t  return Chart;\n\t}();\n\t\n\t/**\n\t* Expose the Layer class so that it can be subclassed.\n\t*/\n\t\n\t\n\tChart.Layer = _layer3.default;\n\t\n\t// run tests if on test environment\n\tif (false) {\n\t  require('./assert.spec.js')(_assert2.default);\n\t  require('./layer.spec.js')(_layer3.default, Chart);\n\t  require('./chart.spec.js')(Chart);\n\t}\n\t\n\tmodule.exports = Chart;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Simple Assertion function\n\t * @param  {anything} test    Anything that will evaluate to true of false.\n\t * @param  {string} message The error message to send if `test` is false\n\t */\n\tfunction kotoAssert(test, message) {\n\t  if (test) {\n\t    return;\n\t  }\n\t  throw new Error(\"[koto] \" + message);\n\t}\n\t\n\texports.default = kotoAssert;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _assert = __webpack_require__(3);\n\t\n\tvar _assert2 = _interopRequireDefault(_assert);\n\t\n\tvar _d = __webpack_require__(2);\n\t\n\tvar _d2 = _interopRequireDefault(_d);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * Create a layer using the provided `base` selection. \n\t *\n\t * @class\n\t *\n\t * @param {d3.selection} base The containing DOM node for the layer.\n\t * @param {Object} options Overrides for databind, insert and event methods.\n\t * @param {Function} options.databind databind override\n\t * @param {Function} options.insert insert override\n\t * @param {Function} [options.events] life-cycle event handler overrides.\n\t *                                  Possible values are [enter, update, merge, exit] \n\t *                                  with or without the 'transition postfix'.\n\t */\n\t\n\tvar Layer = function () {\n\t  function Layer(base, options) {\n\t    _classCallCheck(this, Layer);\n\t\n\t    this._base = base;\n\t    this._handlers = {};\n\t    this._lifecycleRe = /^(enter|update|merge|exit)(:transition)?$/;\n\t\n\t    if (options) {\n\t      // Set layer methods (required)\n\t      this.dataBind = options.dataBind;\n\t      this.insert = options.insert;\n\t\n\t      // Bind events (optional)\n\t      if ('events' in options) {\n\t        for (var eventName in options.events) {\n\t          this.on(eventName, options.events[eventName]);\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  /**\n\t   * Invoked by {@link Layer#draw} to join data with this layer's DOM nodes. This\n\t   * implementation is \"virtual\"--it *must* be overridden by Layer instances.\n\t   *\n\t   * @param {Array} data Value passed to {@link Layer#draw}\n\t   * @param {Object} [context] the instance of this layers\n\t   */\n\t\n\t\n\t  _createClass(Layer, [{\n\t    key: 'dataBind',\n\t    value: function dataBind() {\n\t      (0, _assert2.default)(false, 'Layers must specify a dataBind method.');\n\t    }\n\t\n\t    /**\n\t     * Invoked by {@link Layer#draw} in order to insert new DOM nodes into this\n\t     * layer's `base`. This implementation is \"virtual\"--it *must* be overridden by\n\t     * Layer instances.\n\t     */\n\t\n\t  }, {\n\t    key: 'insert',\n\t    value: function insert() {\n\t      (0, _assert2.default)(false, 'Layers must specify an `insert` method.');\n\t    }\n\t\n\t    /**\n\t     * Subscribe a handler to a lifecycle event. These events (and only these\n\t     * events) are triggered when {@link Layer#draw} is invoked--see that method\n\t     * for more details on lifecycle events.\n\t     *\n\t     * @param {String} eventName Identifier for the lifecycle event for which to\n\t     *        subscribe.\n\t     * @param {Function} handler Callback function\n\t     *\n\t     * @returns {Chart} Reference to the layer instance (for chaining).\n\t     */\n\t\n\t  }, {\n\t    key: 'on',\n\t    value: function on(eventName, handler, options) {\n\t      options = options || {};\n\t\n\t      (0, _assert2.default)(this._lifecycleRe.test(eventName), 'Unrecognized lifecycle event name specified to \\'Layer#on\\': \\'' + eventName + '\\'.');\n\t\n\t      if (!(eventName in this._handlers)) {\n\t        this._handlers[eventName] = [];\n\t      }\n\t      this._handlers[eventName].push({\n\t        callback: handler,\n\t        chart: options.chart || null\n\t      });\n\t\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * Unsubscribe the specified handler from the specified event. If no handler is\n\t     * supplied, remove *all* handlers from the event.\n\t     *\n\t     * @param {String} eventName Identifier for event from which to remove\n\t     *        unsubscribe\n\t     * @param {Function} handler Callback to remove from the specified event\n\t     *\n\t     * @returns {Chart} Reference to the layer instance (for chaining).\n\t     */\n\t\n\t  }, {\n\t    key: 'off',\n\t    value: function off(eventName, handler) {\n\t      var handlers = this._handlers[eventName];\n\t      var idx;\n\t\n\t      (0, _assert2.default)(this._lifecycleRe.test(eventName), 'Unrecognized lifecycle event name specified to \\'Layer#on\\': \\'' + eventName + '\\'.');\n\t\n\t      if (!handlers) {\n\t        return this;\n\t      }\n\t\n\t      if (arguments.length === 1) {\n\t        handlers.length = 0;\n\t        return this;\n\t      }\n\t\n\t      for (idx = handlers.length - 1; idx > -1; --idx) {\n\t        if (handlers[idx].callback === handler) {\n\t          handlers.splice(idx, 1);\n\t        }\n\t      }\n\t\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * Render the layer according to the input data. Bind the data to the layer\n\t     * (according to {@link Layer#dataBind}, insert new elements (according to\n\t     * {@link Layer#insert}, make lifecycle selections, and invoke all relevant\n\t     * handlers (as attached via {@link Layer#on}) with the lifecycle selections.\n\t     *\n\t     * - update\n\t     * - update:transition\n\t     * - enter\n\t     * - enter:transition\n\t     * - exit\n\t     * - exit:transition\n\t     *\n\t     * @param {Array} data Data to drive the rendering.\n\t     */\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(data) {\n\t      var bound,\n\t          entering,\n\t          events,\n\t          selection,\n\t          method,\n\t          handlers,\n\t          eventName,\n\t          idx,\n\t          len,\n\t          tidx,\n\t          tlen,\n\t          promises = [];\n\t\n\t      function endall(transition, callback) {\n\t        var n = 0;\n\t        if (transition.size() === 0) {\n\t          callback();\n\t        } else {\n\t          transition.each(function () {\n\t            ++n;\n\t          }).each('interrupt.promise', function () {\n\t            callback.apply(this, arguments);\n\t          }).each('end.promise', function () {\n\t            if (! --n) {\n\t              callback.apply(this, arguments);\n\t            }\n\t          });\n\t        }\n\t      }\n\t\n\t      function promiseCallback(resolve) {\n\t        selection.call(endall, function () {\n\t          resolve(true);\n\t        });\n\t      }\n\t\n\t      bound = this.dataBind.call(this._base, data, this);\n\t\n\t      (0, _assert2.default)(bound instanceof _d2.default.selection, 'Invalid selection defined by `Layer#dataBind` method.');\n\t      (0, _assert2.default)(bound.enter, 'Layer selection not properly bound.');\n\t\n\t      entering = bound.enter();\n\t      entering._chart = this._base._chart;\n\t\n\t      events = [{\n\t        name: 'update',\n\t        selection: bound\n\t      }, {\n\t        name: 'enter',\n\t        selection: entering,\n\t        method: this.insert\n\t      }, {\n\t        name: 'merge',\n\t        // Although the `merge` lifecycle event shares its selection object\n\t        // with the `update` lifecycle event, the object's contents will be\n\t        // modified when koto invokes the user-supplied `insert` method\n\t        // when triggering the `enter` event.\n\t        selection: bound\n\t      }, {\n\t        name: 'exit',\n\t        // Although the `exit` lifecycle event shares its selection object\n\t        // with the `update` and `merge` lifecycle events, the object's\n\t        // contents will be modified when koto invokes\n\t        // `d3.selection.exit`.\n\t        selection: bound,\n\t        method: bound.exit\n\t      }];\n\t\n\t      for (var i = 0, l = events.length; i < l; ++i) {\n\t        eventName = events[i].name;\n\t        selection = events[i].selection;\n\t        method = events[i].method;\n\t\n\t        // Some lifecycle selections modify shared state, so they must be\n\t        // deferred until just prior to handler invocation.\n\t        if (typeof method === 'function') {\n\t          selection = method.call(selection, selection);\n\t        }\n\t\n\t        if (selection.empty()) {\n\t          continue;\n\t        }\n\t\n\t        (0, _assert2.default)(selection && selection instanceof _d2.default.selection, 'Invalid selection defined for ' + eventName + ' lifecycle event.');\n\t\n\t        handlers = this._handlers[eventName];\n\t\n\t        if (handlers) {\n\t          for (idx = 0, len = handlers.length; idx < len; ++idx) {\n\t            // Attach a reference to the parent chart so the selection's\n\t            // `chart` method will function correctly.\n\t            selection._chart = handlers[idx].chart || this._base._chart;\n\t            // selection.call(handlers[idx].callback);\n\t            handlers[idx].callback.call(selection, selection);\n\t          }\n\t        }\n\t\n\t        handlers = this._handlers[eventName + ':transition'];\n\t\n\t        if (handlers && handlers.length) {\n\t          selection = selection.transition();\n\t          for (tlen = handlers.length, tidx = 0; tidx < tlen; ++tidx) {\n\t            selection._chart = handlers[tidx].chart || this._base._chart;\n\t            // selection.call(handlers[tidx].callback);\n\t            handlers[tidx].callback.call(selection, selection);\n\t            promises.push(new Promise(promiseCallback));\n\t          }\n\t        }\n\t        this.promise = Promise.all(promises);\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Layer;\n\t}();\n\t\n\texports.default = Layer;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** koto.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap b97ccec77da028093ee8\n **/","import 'babel-polyfill';\nimport d3 from 'd3';\nimport kotoAssert from './assert.js';\nimport Layer from './layer.js';\n\n// d3 is required\nkotoAssert(d3, 'd3 js is required.');\n/**\n * Create a koto chart\n *\n * @constructor\n *\n * @param {d3.selection} selection The chart's \"base\" DOM node. This should\n *        contain any nodes that the chart generates.\n */\nclass Chart {\n  constructor(selection) {\n    this.base = selection; // Container for chart @type {d3.selection}.\n    this.hasDrawn = false; // Has this chart been drawn at least once?\n\n    this.merge = {};\n    this.merge.configs = (...args) => {\n      this.configs = Object.assign({}, this.configs, ...args);\n      return this.configs;\n    };\n    this.merge.accessors = (...args) => {\n      this.accessors = Object.assign({}, this.accessors, ...args);\n      return this.accessors;\n    };\n\n    // exposed properties\n    this.configs = {};\n    this.accessors = {};\n    this.promise = null;\n\n    // private\n    this._layers = new Map();\n    this._attached = new Map();\n    this._events = new Map();\n\n    // alias\n    this.c = this.config;\n    this.a = this.accessor;\n  }\n\n  /**\n   * A \"hook\" method that you may define to modify input data before it is used\n   * to draw the chart's layers and attachments. This method will be used by all\n   * sub-classes. You may optionally return a promise if your data transformation\n   * is asynchronous (i.e. you're using web workers).\n   *\n   * Note: you will most likely never call this method directly, but rather\n   * include it as part of a chart definition, and then rely on koto to\n   * invoke it when you draw the chart with {@link Chart#draw}.\n   *\n   * @param {Array} data Input data provided to @link Chart#draw}.\n   * @returns {mixed} Data to be used in drawing the chart's layers and\n   *                  attachments.\n   */\n  transform(data) { return data; }\n\n  /**\n   * A \"hook\" method that you may define to choose which mutation of the input\n   * data is sent to which of the attached charts (by name). This method will\n   * be used by all sub-classes. This only applies to charts that use the\n   * {@link Chart#attach} method.\n   *\n   * Note: you will most likely never call this method directly, but rather\n   * include it as part of a chart definition, and then rely on koto to\n   * invoke it when you draw the chart with {@link Chart#draw}.\n   *\n   * @param {String} data Name of attached chart defined in {@link Chart#attach}.\n   * @param {Array} data Input data provided to {@link Chart#draw}.\n   * @returns {mixed} Data to be used in drawing the chart's layers and\n   *                  attachments.\n   */\n  demux(name, data) { return data; }\n\n  /**\n   * A \"hook\" method that will allow you to run some arbitrary code before\n   * {@link Chart#draw}. This will run every time {@link Chart#draw} is called.\n   *\n   * Note: you will most likely never call this method directly, but rather\n   * include it as part of a chart definition, and then rely on koto to\n   * invoke it when you draw the chart with {@link Chart#draw}.\n   *\n   * Note 2: a `postDraw` event is also fired when appropriate;\n   *\n   * @param  {[type]} data [description]\n   * @return {[type]}      [description]\n   */\n  preDraw() {}\n\n  /**\n   * A \"hook\" method that will allow you to run some arbitrary code after\n   * {@link Chart#draw}. This will run every time {@link Chart#draw} is called.\n   *\n   * Note: you will most likely never call this method directly, but rather\n   * include it as part of a chart definition, and then rely on koto to\n   * invoke it when you draw the chart with {@link Chart#draw}.\n   *\n   * @param  {[type]} data [description]\n   */\n  postDraw() {}\n\n  /**\n   * A \"hook\" method that will allow you to run some arbitrary code after\n   * {@link Chart#draw} is called AND after all transitions for all layers\n   * and attached charts have been completed. This will run every time\n   * {@link Chart#draw} is called.\n   *\n   * Note: you will most likely never call this method directly, but rather\n   * include it as part of a chart definition, and then rely on koto to\n   * invoke it when you draw the chart with {@link Chart#draw}.\n   *\n   * Note 2: a `postTransition` event is also fired when appropriate;\n   *\n   * @param  {[type]} data\n   */\n  postTransition() {}\n\n  /**\n   * Remove a layer from the chart.\n   *\n   * @param {String} name The name of the layer to remove.\n   * @returns {Layer} The layer removed by this operation.\n   */\n  unlayer(name) {\n    var layer = this.layer(name);\n\n    this._layers.delete(name);\n    delete layer._chart;\n\n    return layer;\n  }\n\n  /**\n   * Interact with the chart's {@link Layer|layers}.\n   *\n   * If only a `name` is provided, simply return the layer registered to that\n   * name (if any).\n   *\n   * If a `name` and `selection` are provided, treat the `selection` as a\n   * previously-created layer and attach it to the chart with the specified\n   * `name`.\n   *\n   * If all three arguments are specified, initialize a new {@link Layer} using\n   * the specified `selection` as a base passing along the specified `options`.\n   *\n   * The {@link Layer.draw} method of attached layers will be invoked\n   * whenever this chart's {@link Chart#draw} is invoked and will receive the\n   * data (optionally modified by the chart's {@link Chart#transform} method.\n   *\n   * @param {String} name Name of the layer to attach or retrieve.\n   * @param {d3.selection|Layer} [selection] The layer's base or a\n   *        previously-created {@link Layer}.\n   * @param {Object} [options] Options to be forwarded to {@link Layer|the Layer\n   *        constructor}\n   *\n   * @returns {Layer}\n   */\n  layer(name, selection, options) {\n    var _Chart = this;\n    var _layer;\n\n    if (arguments.length === 1) {\n      return this._layers.get(name);\n    }\n\n    // we are reattaching a previous layer, which the\n    // selection argument is now set to.\n    if (arguments.length === 2) {\n\n      if (selection instanceof Layer) {\n        selection._chart = this;\n        this._layers.set(name, selection);\n        return this._layers.get(name);\n\n      } else {\n        kotoAssert(false, 'When reattaching a layer, the second argument must be a koto layer');\n      }\n    }\n\n    selection._chart = this;\n\n    _layer = new Layer(selection, options);\n\n    _layer.remove = function () {\n      _Chart._layers.delete(name);\n      return this;\n    };\n\n    this._layers.set(name, _layer);\n\n    return _layer;\n  }\n\n  /**\n   * Register or retrieve an \"attachment\" Chart. The \"attachment\" chart's `draw`\n   * method will be invoked whenever the containing chart's `draw` method is\n   * invoked.\n   *\n   * @param {String} attachmentName Name of the attachment\n   * @param {Chart} [chart] koto to register as a mix in of this chart. When\n   *        unspecified, this method will return the attachment previously\n   *        registered with the specified `attachmentName` (if any).\n   *\n   * @returns {Chart} Reference to this chart (chainable).\n   */\n  attach(attachmentName, chart) {\n    if (arguments.length === 1) {\n      return this._attached.get(attachmentName);\n    }\n\n    this._attached.set(attachmentName, chart);\n    return chart;\n  }\n\n  /**\n   * Update the chart's representation in the DOM, drawing all of its layers and\n   * any \"attachment\" charts (as attached via {@link Chart#attach}).\n   *\n   * Note: The first time you call this method, the property `hasDrawn` will be\n   * set to true. This is helpful if you want to only run some code on the first\n   * time the chart is drawn.\n   *\n   * @param {Object} data Data to pass to the {@link Layer#draw|draw method} of\n   *        this cart's {@link Layer|layers} (if any) and the {@link\n   *        Chart#draw|draw method} of this chart's attachments (if any).\n   */\n  draw(rawData) {\n    var layer, attachmentData, promises = [];\n\n    return Promise.resolve(this.transform(rawData))\n      .then((data) => {\n        this.preDraw(data);\n        this.trigger('preDraw', data);\n\n        for (layer of this._layers.values()) {\n          layer.draw(data);\n          promises.push(layer.promise);\n        }\n\n        for (var [attachmentName, attachment] of this._attached.entries()) {\n          attachmentData = this.demux ? this.demux(attachmentName, data) : data;\n          attachment.draw(attachmentData);\n          promises.push(attachment.promise);\n        }\n\n        this.hasDrawn = true;\n\n        this.promise = Promise.all(promises);\n\n        this.postDraw();\n        this.trigger('postDraw', data);\n\n        this.promise.then(() => {\n          this.postTransition(data);\n          this.trigger('postTransition', data);\n        });\n\n        return data;\n      });\n  }\n\n  /**\n   * Subscribe a callback function to an event triggered on the chart. See {@link\n   * Chart#once} to subscribe a callback function to an event for one occurrence.\n   *\n   * @externalExample {runnable} chart-on\n   *\n   * @param {String} name Name of the event\n   * @param {ChartEventHandler} callback Function to be invoked when the event\n   *        occurs\n   * @param {Object} [context] Value to set as `this` when invoking the\n   *        `callback`. Defaults to the chart instance.\n   *\n   * @returns {Chart} A reference to this chart (chainable).\n   */\n  on(name, callback, context) {\n    var events;\n    if (this._events.has(name)) {\n      events = this._events.get(name);\n    } else {\n      events = new Set();\n    }\n\n    events.add({\n      callback: callback,\n      context: context || this,\n      _chart: this\n    });\n\n    this._events.set(name, events);\n    return this;\n  }\n\n  /**\n   * Subscribe a callback function to an event triggered on the chart. This\n   * function will be invoked at the next occurrence of the event and immediately\n   * unsubscribed. See {@link Chart#on} to subscribe a callback function to an\n   * event indefinitely.\n   *\n   * @externalExample {runnable} chart-once\n   *\n   * @param {String} name Name of the event\n   * @param {ChartEventHandler} callback Function to be invoked when the event\n   *        occurs\n   * @param {Object} [context] Value to set as `this` when invoking the\n   *        `callback`. Defaults to the chart instance\n   *\n   * @returns {Chart} A reference to this chart (chainable)\n   */\n  once(name, callback, context) {\n    var self = this;\n    var _once = function() {\n      self.off(name, _once);\n      callback.apply(this, arguments);\n    };\n    return this.on(name, _once, context);\n  }\n\n  /**\n   * Unsubscribe one or more callback functions from an event triggered on the\n   * chart. When no arguments are specified, *all* handlers will be unsubscribed.\n   * When only a `name` is specified, all handlers subscribed to that event will\n   * be unsubscribed. When a `name` and `callback` are specified, only that\n   * function will be unsubscribed from that event. When a `name` and `context`\n   * are specified (but `callback` is omitted), all events bound to the given\n   * event with the given context will be unsubscribed.\n   *\n   * @externalExample {runnable} chart-off\n   *\n   * @param {String} [name] Name of the event to be unsubscribed\n   * @param {ChartEventHandler} [callback] Function to be unsubscribed\n   * @param {Object} [context] Contexts to be unsubscribed\n   *\n   * @returns {Chart} A reference to this chart (chainable).\n   */\n  off(name, callback, context) {\n\n    // remove all events\n    if (arguments.length === 0) {\n      this._events.clear();\n      return this;\n    }\n\n    // remove all events for a specific name\n    if (arguments.length === 1) {\n      if (this._events.has(name)) {\n        this._events.get(name).clear();\n      }\n      return this;\n    }\n\n    // remove all events that match whatever combination of name, context\n    // and callback.\n\n    this._events.get(name).forEach((event, clone, map) => {\n      if ((callback && callback === clone.callback) ||\n          (context && context === clone.context)) {\n        map.delete(event);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Publish an event on this chart with the given `name`.\n   *\n   * @externalExample {runnable} chart-trigger\n   *\n   * @param {String} name Name of the event to publish\n   * @param {...*} arguments Values with which to invoke the registered\n   *        callbacks.\n   *\n   * @returns {Chart} A reference to this chart (chainable).\n   */\n  trigger(name, ...args) {\n    if (this._events.has(name)) {\n      this._events.get(name).forEach((event) => {\n        event.callback.call(event.context, ...args);\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Get and set chart options (or configs)\n   *\n   * @param  {mixed} nameOrObject Name of item getting or setting\n   *                              or an object with key-value pairs.\n   * @param  {mixed} value The value for config item with that name.\n   * @return {mixed} if getting: the value. if setting: the chart instance.\n   */\n  config(nameOrObject, value) {\n    var key;\n    var definition;\n    var _Chart = this;\n\n    function setPercentage () {\n      function calculatePercentage (arr, initialValue) {\n        var min = Math.min.call(null, arr.map(function (name) { return _Chart.config(name); }));\n        return initialValue / min;\n      }\n\n      if (definition.constrain === true) {\n        definition.percentage = calculatePercentage(['width', 'height'], definition.value);\n      } else if (Array.isArray(definition.constrain)) {\n        definition.percentage = calculatePercentage(definition.constrain, definition.value);\n      } else {\n        definition.percentage = calculatePercentage([definition.constrain], definition.value);\n      }\n    }\n\n    if (arguments.length === 0) {\n      return this.configs;\n    }\n\n    if (arguments.length === 1) {\n      if (typeof nameOrObject === 'object') {\n        for (key in nameOrObject) {\n          if(this.configs.hasOwnProperty(key)) {\n            definition = this.configs[key];\n            if (definition.hasOwnProperty('setter')) {\n              definition.value = definition.setter.call(definition, nameOrObject[key]);\n            } else {\n              definition.value = nameOrObject[key];\n            }\n            if (definition.hasOwnProperty('constrain')) {\n              setPercentage();\n            }\n            this.configs[key] = definition;\n          } else {\n            console.warn(`config with name ${nameOrObject} is not defined.`);\n          }\n        }\n        return this;\n      }\n\n      kotoAssert(this.configs.hasOwnProperty(nameOrObject), `${nameOrObject} is not a valid option.`);\n      definition = this.configs[nameOrObject];\n      if (definition.hasOwnProperty('getter')) {\n        return definition.getter.call(definition);\n      }\n      return definition.value;\n    }\n\n    if(arguments.length === 2) {\n      if (this.configs.hasOwnProperty(nameOrObject)) {\n        definition = this.configs[nameOrObject];\n        if (definition.hasOwnProperty('setter')) {\n          definition.value = definition.setter.call(definition, value);\n        } else {\n          definition.value = value;\n        }\n        if (definition.hasOwnProperty('constrain')) {\n          setPercentage();\n        }\n        this.configs[nameOrObject] = definition;\n      } else {\n        console.warn(`config with name ${nameOrObject} is not defined.`);\n      }\n      return this;\n    }\n  }\n\n  /**\n   * This will get or set any of the chart's accessors.\n   *\n   * @param  {String or Object} item If string, it will return the function for that accessor item.\n   *                                 If object, it will update that accessor with set function.\n   * @param  {function} [value] The function to update accessor item with.\n   * @return {object} The chart to preserve chainability.\n   */\n  accessor (item, value) {\n    var key;\n    if (arguments.length === 0) {\n      return this.accessors;\n    }\n\n    if (arguments.length === 1) {\n      if (typeof item === 'string') {\n        kotoAssert(this.accessors.hasOwnProperty(item), `${item} is not a valid accessor.`);\n        return this.accessors[item];\n      } else {\n        for (key in item) {\n          this.accessors[key] = item[key];\n        }\n      }\n    } else {\n      this.accessors[item] = value;\n    }\n    return this;\n  }\n\n  /**\n   * This will extend a chart by passing in an object of initialize function.\n   * @param  {Object || function} init Initialize function of object with initialize method.\n   * @return {Construtor}      Chart constructor\n   */\n  static extend(init) {\n    class chart extends this {\n      constructor(selection) {\n        var key;\n        super(selection);\n\n        if (typeof init === 'function') {\n          init.call(this);\n        } else {\n          for (key in init) {\n            this[key] = init[key];\n          }\n          this.initialize.call(this);\n        }\n\n      }\n    }\n    return chart;\n  }\n\n}\n\n/**\n* Expose the Layer class so that it can be subclassed.\n*/\nChart.Layer = Layer;\n\n// run tests if on test environment\nif (ON_TEST) {\n  require('./assert.spec.js')(kotoAssert);\n  require('./layer.spec.js')(Layer, Chart);\n  require('./chart.spec.js')(Chart);\n}\n\nmodule.exports = Chart;\n\n\n\n/** WEBPACK FOOTER **\n ** ./chart.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"babel-polyfill\"\n ** module id = 1\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"d3\"\n ** module id = 2\n ** module chunks = 0\n **/","/**\n * Simple Assertion function\n * @param  {anything} test    Anything that will evaluate to true of false.\n * @param  {string} message The error message to send if `test` is false\n */\nfunction kotoAssert(test, message) {\n  if (test) {\n    return;\n  }\n  throw new Error(`[koto] ${message}`);\n}\n\nexport default kotoAssert;\n\n\n\n/** WEBPACK FOOTER **\n ** ./assert.js\n **/","import kotoAssert from './assert.js';\nimport d3 from 'd3';\n\n/**\n * Create a layer using the provided `base` selection. \n *\n * @class\n *\n * @param {d3.selection} base The containing DOM node for the layer.\n * @param {Object} options Overrides for databind, insert and event methods.\n * @param {Function} options.databind databind override\n * @param {Function} options.insert insert override\n * @param {Function} [options.events] life-cycle event handler overrides.\n *                                  Possible values are [enter, update, merge, exit] \n *                                  with or without the 'transition postfix'.\n */\nclass Layer {\n  constructor(base, options) {\n    this._base = base;\n    this._handlers = {};\n    this._lifecycleRe = /^(enter|update|merge|exit)(:transition)?$/;\n\n    if (options) {\n      // Set layer methods (required)\n      this.dataBind = options.dataBind;\n      this.insert = options.insert;\n\n      // Bind events (optional)\n      if ('events' in options) {\n        for (var eventName in options.events) {\n          this.on(eventName, options.events[eventName]);\n        }\n      }\n    }\n  }\n\n  /**\n   * Invoked by {@link Layer#draw} to join data with this layer's DOM nodes. This\n   * implementation is \"virtual\"--it *must* be overridden by Layer instances.\n   *\n   * @param {Array} data Value passed to {@link Layer#draw}\n   * @param {Object} [context] the instance of this layers\n   */\n  dataBind() {\n    kotoAssert(false, 'Layers must specify a dataBind method.');\n  }\n\n  /**\n   * Invoked by {@link Layer#draw} in order to insert new DOM nodes into this\n   * layer's `base`. This implementation is \"virtual\"--it *must* be overridden by\n   * Layer instances.\n   */\n  insert() {\n    kotoAssert(false, 'Layers must specify an `insert` method.');\n  }\n\n  /**\n   * Subscribe a handler to a lifecycle event. These events (and only these\n   * events) are triggered when {@link Layer#draw} is invoked--see that method\n   * for more details on lifecycle events.\n   *\n   * @param {String} eventName Identifier for the lifecycle event for which to\n   *        subscribe.\n   * @param {Function} handler Callback function\n   *\n   * @returns {Chart} Reference to the layer instance (for chaining).\n   */\n  on(eventName, handler, options) {\n    options = options || {};\n\n    kotoAssert(this._lifecycleRe.test(eventName),\n      `Unrecognized lifecycle event name specified to 'Layer#on': '${eventName}'.`);\n\n    if (!(eventName in this._handlers)) {\n      this._handlers[eventName] = [];\n    }\n    this._handlers[eventName].push({\n      callback: handler,\n      chart: options.chart || null\n    });\n\n    return this;\n  }\n\n  /**\n   * Unsubscribe the specified handler from the specified event. If no handler is\n   * supplied, remove *all* handlers from the event.\n   *\n   * @param {String} eventName Identifier for event from which to remove\n   *        unsubscribe\n   * @param {Function} handler Callback to remove from the specified event\n   *\n   * @returns {Chart} Reference to the layer instance (for chaining).\n   */\n  off(eventName, handler) {\n    var handlers = this._handlers[eventName];\n    var idx;\n\n    kotoAssert(this._lifecycleRe.test(eventName),\n      `Unrecognized lifecycle event name specified to 'Layer#on': '${eventName}'.`);\n\n    if (!handlers) {\n      return this;\n    }\n\n    if (arguments.length === 1) {\n      handlers.length = 0;\n      return this;\n    }\n\n    for (idx = handlers.length - 1; idx > -1; --idx) {\n      if (handlers[idx].callback === handler) {\n        handlers.splice(idx, 1);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Render the layer according to the input data. Bind the data to the layer\n   * (according to {@link Layer#dataBind}, insert new elements (according to\n   * {@link Layer#insert}, make lifecycle selections, and invoke all relevant\n   * handlers (as attached via {@link Layer#on}) with the lifecycle selections.\n   *\n   * - update\n   * - update:transition\n   * - enter\n   * - enter:transition\n   * - exit\n   * - exit:transition\n   *\n   * @param {Array} data Data to drive the rendering.\n   */\n  draw(data) {\n    var bound,\n      entering,\n      events,\n      selection,\n      method,\n      handlers,\n      eventName,\n      idx,\n      len,\n      tidx,\n      tlen,\n      promises = [];\n\n    function endall(transition, callback) {\n      var n = 0;\n      if (transition.size() === 0) {\n        callback();\n      } else {\n        transition\n          .each(function() {\n            ++n;\n          })\n          .each('interrupt.promise', function () {\n            callback.apply(this, arguments);\n          })\n          .each('end.promise', function () {\n            if (!--n) {\n              callback.apply(this, arguments);\n            }\n          });\n      }\n    }\n\n    function promiseCallback (resolve) {\n      selection.call(endall, function() {\n        resolve(true);\n      });\n    }\n\n    bound = this.dataBind.call(this._base, data, this);\n\n    kotoAssert(bound instanceof d3.selection,\n      'Invalid selection defined by `Layer#dataBind` method.');\n    kotoAssert(bound.enter, 'Layer selection not properly bound.');\n\n    entering = bound.enter();\n    entering._chart = this._base._chart;\n\n    events = [\n      {\n        name: 'update',\n        selection: bound\n      },\n      {\n        name: 'enter',\n        selection: entering,\n        method: this.insert\n      },\n      {\n        name: 'merge',\n        // Although the `merge` lifecycle event shares its selection object\n        // with the `update` lifecycle event, the object's contents will be\n        // modified when koto invokes the user-supplied `insert` method\n        // when triggering the `enter` event.\n        selection: bound\n      },\n      {\n        name: 'exit',\n        // Although the `exit` lifecycle event shares its selection object\n        // with the `update` and `merge` lifecycle events, the object's\n        // contents will be modified when koto invokes\n        // `d3.selection.exit`.\n        selection: bound,\n        method: bound.exit\n      }\n    ];\n\n    for (var i = 0, l = events.length; i < l; ++i) {\n      eventName = events[i].name;\n      selection = events[i].selection;\n      method = events[i].method;\n\n      // Some lifecycle selections modify shared state, so they must be\n      // deferred until just prior to handler invocation.\n      if (typeof method === 'function') {\n        selection = method.call(selection, selection);\n      }\n\n      if (selection.empty()) {\n        continue;\n      }\n\n      kotoAssert(selection && selection instanceof d3.selection,\n        `Invalid selection defined for ${eventName} lifecycle event.`);\n\n      handlers = this._handlers[eventName];\n\n      if (handlers) {\n        for (idx = 0, len = handlers.length; idx < len; ++idx) {\n          // Attach a reference to the parent chart so the selection's\n          // `chart` method will function correctly.\n          selection._chart = handlers[idx].chart || this._base._chart;\n          // selection.call(handlers[idx].callback);\n          handlers[idx].callback.call(selection, selection);\n        }\n      }\n\n      handlers = this._handlers[eventName + ':transition'];\n\n      if (handlers && handlers.length) {\n        selection = selection.transition();\n        for (tlen = handlers.length, tidx = 0; tidx < tlen; ++tidx) {\n          selection._chart = handlers[tidx].chart || this._base._chart;\n          // selection.call(handlers[tidx].callback);\n          handlers[tidx].callback.call(selection, selection);\n          promises.push(new Promise(promiseCallback));\n        }\n      }\n      this.promise = Promise.all(promises);\n    }\n  }\n}\n\nexport default Layer;\n\n\n\n/** WEBPACK FOOTER **\n ** ./layer.js\n **/"],"sourceRoot":""}