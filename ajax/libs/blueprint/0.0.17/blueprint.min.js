!function(exports){var merge=function(t){for(var e=1;e<arguments.length;e++)for(var i in arguments[e])t[i]=arguments[e][i];return t},Blueprint=function(){};Blueprint.prototype.init=function(){this.emit("init")},Blueprint.prototype.extend=function(t){return merge(this,t)},Blueprint.prototype.toObject=function(){return merge({},this)},Blueprint.extend=function(name){var parent=this,js="function "+name+"(){return this.init.apply(this,arguments)};"+name,ctor=eval(js),parents=[this];ctor.prototype=Object.create(parents[0].prototype);for(var i=1;i<arguments.length;i+=1){var proto=arguments[i];"function"==typeof proto&&(parents.push(proto),proto=proto.prototype),merge(ctor.prototype,proto)}for(var i=0;i<parents.length;i+=1)merge(ctor,parents[i]);return ctor.prototype.constructor=ctor,ctor.prototype.constructor.parents=parents,this.emit("extend",ctor),ctor},Blueprint.Events={on:function(t,e){return this._listeners||(this._listeners={}),this._listeners[t]||(this._listeners[t]=[]),this._listeners[t].push(e),this},off:function(t,e){if(!this._listeners)return this;if(!this._listeners[t])return this;for(var i=0;-1!==(i=this._listeners[t].indexOf(e));)this._listeners[t].splice(i,1);return this},emit:function(t){if(!this._listeners)return this;if(!this._listeners[t])return this;for(var e=[].slice.call(arguments,1),i=0;i<this._listeners[t].length;i+=1)this._listeners[t][i].apply(this,e);return this}},merge(Blueprint.prototype,Blueprint.Events),merge(Blueprint,Blueprint.Events);var Model=Blueprint.extend("Model",{validate:function(){this.emit("validate");var t=this.constructor.schema();for(var e in t)t[e].validate(this[e])},save:function(){return this.validate(),this.constructor.datastore().save(this),this},load:function(){return this.constructor.datastore().load(this),this},remove:function(){return this.constructor.datastore().remove(this),this}});Model.find=function(t){return this.datastore().find(this,t)},Model.datastore=function(t){if(0==arguments.length){var t=this.prototype._datastore;if(!t)throw new Error("No datastore has been assigned");return t}return null===t?delete this.prototype._datastore:this.prototype._datastore=t,this},Model.on("extend",function(t){var e={};for(var i in t.prototype)if(t.prototype.hasOwnProperty(i)){var r=t.prototype[i];r===String?r=new StringField:r===Number?r=new NumberField:r===Array&&(r=new ListField),r instanceof ModelField&&(r.property=i,t.prototype[i]=r.default,e[i]=r)}t.schema=function(){return e}});var ModelField=Blueprint.extend("Field",{name:null,required:!0,default:null,init:function(t){this.extend(t)},assert:function(t,e){if(!t){var e="Validation Error ("+this.property+"): "+e,i=new Error(e);throw i.property=this.property,i.validator=this.constructor,i}},validate:function(t){this.required&&this.assert("undefined"!=typeof t&&null!=t,"required")}}),StringField=ModelField.extend("String",{min:null,max:null,regexp:null,validate:function(t){ModelField.prototype.validate.apply(this,arguments),this.assert("string"==typeof t,"not a string"),this.max&&this.assert(t.length<=this.max,"Maximum "+this.max+" characters"),this.min&&this.assert(t.length>=this.min,"Minimum "+this.max+" characters"),this.regexp&&this.assert(null!=t.match(this.regexp),"doesn't match regexp: "+this.regexp)}}),NumberField=ModelField.extend("Number",{min:null,max:null,validate:function(t){ModelField.prototype.validate.apply(this,arguments),this.assert(t instanceof Number||"number"==typeof t,"not a number"),null!==this.min&&this.assert(t>=this.min,"Minimum is "+this.min),null!==this.max&&this.assert(t<=this.max,"Maximum is "+this.max)}}),BooleanField=ModelField.extend("Boolean",{validate:function(t){ModelField.prototype.validate.apply(this,arguments),this.assert(t===!0||t===!1,"not a boolean")}}),ListField=ModelField.extend("List",{max:null,min:null,of:null,validate:function(t){if(ModelField.prototype.validate.apply(this,arguments),this.assert(t instanceof Array,"not a list or array"),null!==this.max&&this.assert(t.length<=this.max,"maximum of "+this.max+" items"),null!==this.min&&this.assert(t.length>=this.min,"minimum of "+this.min+" items"),null!==this.of&&this.of instanceof ModelField)for(var e=0;e<t.length;e+=1)this.of.validate(t[e])}}),Datastore=Blueprint.extend("Datastore",{init:function(t){this.map=t||{},Datastore.__id=0},key:function(t){return t.constructor.name+"."+t.id},save:function(t){return t.id||(Datastore.__id+=1,t.id=Datastore.__id),this.map[this.key(t)]=t.toObject(),t.emit("saved"),this},load:function(t){var e=this.map[this.key(t)];if(!e){var i=new Error("Unable to load model: not found");return t.emit("error",i)}return t.extend(e),t.emit("loaded"),this},remove:function(t){return delete this.map[this.key(t)],t.emit("removed"),this}});merge(exports,{Blueprint:Blueprint,Model:Model,Datastore:Datastore,Field:ModelField,String:StringField,Number:NumberField,Boolean:BooleanField,Array:ListField,List:ListField})}("undefined"==typeof exports?this.blueprint={}:exports);
//# sourceMappingURL=blueprint.min.js.map