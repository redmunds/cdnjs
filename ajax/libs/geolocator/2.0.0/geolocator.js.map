{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 4dfa89810b510dae651d","webpack:///./src/index.js","webpack:///./src/core/geolocator.js","webpack:///./src/lib/utils.js","webpack:///./src/lib/fetch.js","webpack:///./src/core/geo.helper.js","webpack:///./src/core/geo.error.js","webpack:///./src/core/geo.watcher.js","webpack:///./src/core/enums.js"],"names":[],"mappings":"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","file":"geolocator.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"geolocator\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"geolocator\"] = factory();\n\telse\n\t\troot[\"geolocator\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 4dfa89810b510dae651d\n **/","import geolocator from './core/geolocator';\n// export default geolocator;\n// http://stackoverflow.com/a/33683495/112731\nmodule.exports = geolocator;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","/* eslint no-nested-ternary:0 */\n\nimport utils from '../lib/utils';\nimport fetch from '../lib/fetch';\nimport geoHelper from './geo.helper';\nimport GeoError from './geo.error';\nimport GeoWatcher from './geo.watcher';\nimport enums from './enums';\n\n/**\n * Radius of earth in kilometers.\n * @private\n * @type {Number}\n */\nconst EARTH_RADIUS_KM = 6371;\n\n/**\n * Radius of earth in miles.\n * @private\n * @type {Number}\n */\nconst EARTH_RADIUS_MI = 3959;\n\n/**\n * Enumerates API endpoints used within Geolocator core.\n *\n * @enum {String}\n * @readonly\n * @private\n */\nconst URL = {\n    /**\n     *  Public IP retrieval (free) service.\n     *  @type {String}\n     *  @private\n     */\n    IP: '//api.ipify.org',\n    /**\n     *  Country SVG flags.\n     *  e.g. <url>/tr.svg for Turkey flag.\n     *  @type {String}\n     *  @private\n     */\n    FLAG: '//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/',\n    /**\n     * Google Maps API bootstrap endpoint that loads all of the main\n     * Javascript objects and symbols for use in the Maps API.\n     * Some Maps API features are also available in self-contained\n     * libraries which are not loaded unless you specifically request them.\n     * See {@link https://developers.google.com/maps/documentation/javascript/libraries|details}.\n     * @type {String}\n     * @private\n     */\n    GOOGLE_MAPS_API: '//maps.googleapis.com/maps/api/js',\n    /**\n     * Google Geolocation API endpoint.\n     * @type {String}\n     * @private\n     */\n    GOOGLE_GEOLOCATION: '//www.googleapis.com/geolocation/v1/geolocate',\n    /**\n     * Google Geocode API endpoint.\n     * @type {String}\n     * @private\n     */\n    GOOGLE_GEOCODE: '//maps.googleapis.com/maps/api/geocode/json',\n    /**\n     * Google TimeZone API endpoint.\n     * @type {String}\n     * @private\n     */\n    GOOGLE_TIMEZONE: '//maps.googleapis.com/maps/api/timezone/json',\n    /**\n     * Google Distance Matrix API endpoint.\n     * @type {String}\n     * @private\n     */\n    GOOGLE_DISTANCE_MATRIX: '//maps.googleapis.com/maps/api/distancematrix/json'\n};\n\n/**\n * Storage for Geolocator default configuration.\n *\n * @readonly\n * @private\n */\nconst defaultConfig = {\n    language: 'en',\n    https: true,\n    google: {\n        version: '3', // latest 3.x\n        key: ''\n    }\n};\n\n/**\n * Geolocator library that provides methods for getting geo-location information,\n * geocoding, address look-ups, distance & durations, timezone information and more...\n * This library makes use of HTML5 position feautures, implements Google APIs\n * and other services.\n *\n * <b>Important Notes:</b>\n *\n * Although some calls might work without a key, it is generally required by\n * most {@link https://developers.google.com/maps/faq#using-google-maps-apis|Goolge APIs}\n * (such as Time Zone API). To get a free (or premium) key,\n * {@link https://developers.google.com/maps/documentation/javascript/|click here}.\n * After getting a key, you can enable multiple APIs for it. Make sure you\n * {@link https://console.developers.google.com|enable}\n * all the APIs supported by Geolocator.\n *\n * Note that browser API keys cannot have referer restrictions when used\n * with some Google APIs.\n *\n * Make sure your doctype is HTML5 and you're calling Geolocation APIs from an\n * HTTPS page. Geolocation API is removed from unsecured origins in Chrome 50.\n * Other browsers are expected to follow.\n *\n * @license MIT\n * @copyright 2016, Onur Yıldırım (onur@cutepilot.com)\n */\nclass geolocator {\n\n    // ---------------------------\n    // PROPERTIES\n    // ---------------------------\n\n    /**\n     * Geolocator Error class that provides a common type of error object for\n     * the various APIs implemented in Geolocator. All callbacks of Geolocator\n     * will include an instance of this object as the first argument; if the\n     * corresponding operation fails. Also all thrown errors will be an instance\n     * of this object.\n     *\n     * This object also enumerates\n     * {@link ?api=geolocator-error#GeoError.Code|Geolocator Error codes}.\n     *\n     * @see {@link ?api=geolocator-error|`GeoError` documentation}\n     * @type {GeoError}\n     * @readonly\n     */\n    static get Error() {\n        return GeoError;\n    }\n\n    /**\n     * Documented in separately in enums.js\n     * @private\n     */\n    static get MapTypeId() {\n        return enums.MapTypeId;\n    }\n\n    /**\n     * Documented in separately in enums.js\n     * @private\n     */\n    static get LocationType() {\n        return enums.LocationType;\n    }\n\n    /**\n     * Documented in separately in enums.js\n     * @private\n     */\n    static get TravelMode() {\n        return enums.TravelMode;\n    }\n\n    /**\n     * Documented in separately in enums.js\n     * @private\n     */\n    static get UnitSystem() {\n        return enums.UnitSystem;\n    }\n\n    /**\n     * Documented in separately in enums.js\n     * @private\n     */\n    static get RadioType() {\n        return enums.RadioType;\n    }\n\n    /**\n     * Documented in separately in enums.js\n     * @private\n     */\n    static get DistanceFormula() {\n        return enums.DistanceFormula;\n    }\n\n    // ---------------------------\n    // STATIC METHODS\n    // ---------------------------\n\n    /**\n     * Sets or gets the geolocator configuration object.\n     * Make sure you configure Geolocator before calling other methods that\n     * require a Google API key.\n     *\n     * @param {Object} [options]\n     *        Configuration object. If omitted, this method returns the current\n     *        configuration.\n     *     @param {String} [options.language=\"en\"]\n     *            Language to be used for API requests that supports language\n     *            configurations. This is generally used for Google APIs.\n     *            See {@link https://developers.google.com/maps/faq#languagesupport|supported languages}.\n     *     @param {Boolean} [options.https=true]\n     *            As Google recommends; using HTTPS encryption makes your site\n     *            more secure, and more resistant to snooping or tampering.\n     *            If set to `true`, the API calls are made over HTTPS, at all\n     *            times. Setting to `false` will switch to HTTP (even if the\n     *            page is on HTTPS). And if set to `null`, current protocol will\n     *            be used. Note that some APIs might not work with HTTP such as\n     *            Google Maps TimeZone API.\n     *     @param {Object} [options.google]\n     *            Google specific options.\n     *         @param {String} [options.google.version=\"3\"]\n     *                Google Maps API version to be used (with\n     *                `geolocator.createMap()`) method. The default version\n     *                value is tested and works with Geolocator. You can set a\n     *                greater value or the latest version number and it should\n     *                work; but it's not guaranteed. Find out the\n     *                {@link https://developers.google.com/maps/documentation/javascript/versions|latest version here}.\n     *         @param {String} [options.google.key=\"\"]\n     *                API key to be used with Google API calls. Although some\n     *                calls might work without a key, it is generally required\n     *                by most Goolge APIs. To get a free (or premium) key,\n     *                {@link https://developers.google.com/maps/documentation/javascript/|click here}.\n     *\n     * @returns {Object} - Returns the current or updated configuration object.\n     *\n     * @example\n     * geolocator.config({\n     *     language: \"en\",\n     *     google: {\n     *     \t   version: \"3\",\n     *         key: \"YOUR-GOOGLE-API-KEY\"\n     *     }\n     * });\n     */\n    static config(options) {\n        if (options) {\n            geolocator._.config = utils.extend(defaultConfig, options);\n        }\n        return geolocator._.config;\n    }\n\n    /**\n     * Creates a Google Map within the given element.\n     * @see {@link https://developers.google.com/maps/documentation/javascript/reference|Google Maps JavaScript API}\n     * @see {@link https://developers.google.com/maps/documentation/javascript/usage|Usage Limits}\n     *\n     * @param {Object|String|HTMLElement|Map} options\n     *        Either map options object with the following properties or; the ID\n     *        of a DOM element, or element itself which the map will be\n     *        created within; or a previously created `google.maps.Map` instance.\n     *        If a map instance is set, this only will apply the options without\n     *        re-creating it.\n     *     @param {String|HTMLElement|Map} options.element\n     *            Either the ID of a DOM element or the element itself;\n     *            which the map will be created within; or a previously created\n     *            `google.maps.Map` instance. If a map instance is set, this\n     *            only will apply the options without re-creating it.\n     *     @param {Object} options.center\n     *            Center coordinates for the map to be created.\n     *         @param {Number} options.center.latitude\n     *                Latitude of the center point coordinates.\n     *         @param {Number} options.center.longitude\n     *                Longitude of the center point coordinates.\n     *     @param {String} [options.mapTypeId=\"roadmap\"]\n     *            Type of the map to be created.\n     *            See {@link #geolocator.MapTypeId|`geolocator.MapTypeId` enumeration}\n     *            for possible values.\n     *     @param {String} [options.title]\n     *            Title text to be displayed within an `InfoWindow`, when the\n     *            marker is clicked. This only take effect if `marker` is\n     *            enabled.\n     *     @param {Boolean} [options.marker=true]\n     *            Whether to place a marker at the given coordinates.\n     *            If `title` is set, an `InfoWindow` will be opened when the\n     *            marker is clicked.\n     *     @param {Number} [options.zoom=9]\n     *            Zoom level to be set for the map.\n     *\n     * @param {Function} callback\n     *        Callback function to be executed when the map is created.\n     *        This takes 2 arguments: `function (err, map) { ... }`.\n     *        See {@link #geolocator~MapData|`geolocator~MapData` type} for details.\n     *\n     * @returns {void}\n     *\n     * @example\n     * var options = {\n     *     element: \"my-map\",\n     * \t   center: {\n     * \t       latitude: 48.8534100,\n     *         longitude: 2.3488000\n     * \t   },\n     * \t   marker: true,\n     * \t   title: \"Paris, France\",\n     * \t   zoom: 12\n     * };\n     * geolocator.createMap(options, function (err, map) {\n     * \t   if (map && map.infoWindow) {\n     * \t\t   map.infoWindow.open(map.instance, map.marker);\n     * \t   }\n     * });\n     */\n    static createMap(options, callback) {\n        // if options is not a plain object, consider element ID, `HTMLElement`,\n        // `jQuery` instance or `google.maps.Map` instance.\n        if (!utils.isPlainObject(options)) {\n            options = { element: options };\n        }\n\n        options = utils.extend({\n            element: null,\n            mapTypeId: enums.MapTypeId.ROADMAP,\n            title: undefined,\n            marker: true,\n            zoom: 9\n        }, options);\n\n        let e = options.element,\n            elem;\n        if (utils.isString(e)) {\n            elem = document.getElementById(e);\n        } else if (utils.isJQueryObject(e)) {\n            elem = e[0];\n        } else if (geolocator.isGoogleLoaded() && e instanceof google.maps.Map) {\n            elem = e.getDiv();\n        }\n\n        if (!utils.isElement(elem) && !utils.isNode(elem)) {\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS,\n                'A valid DOM element or element ID is required to create a map.');\n        }\n\n        if (!utils.isPlainObject(options.center)\n                || !utils.isNumber(options.center.latitude)\n                || !utils.isNumber(options.center.longitude)) {\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS,\n                'Center coordinates are required to create a map.');\n        }\n\n        options.element = elem;\n\n        let key = geolocator._.config.google.key;\n        geolocator.ensureGoogleLoaded(key, err => {\n            if (err) {\n                throw new GeoError(GeoError.Code.GOOGLE_API_FAILED, String(err.message || err));\n            }\n\n            let mapData = configCreateMap(options);\n            callback(null, mapData);\n        });\n    }\n\n    /**\n     * Locates the user's location via HTML5 geolocation. This may\n     * require/prompt for user's permission. If the permission is granted we'll\n     * get the most accurate location information. Otherwise, we'll fallback to\n     * locating via user's IP (if enabled).\n     *\n     * For better accuracy, Geolocator implements a different approach than the\n     * `getCurrentPosition` API; which generally triggers before the device's\n     * GPS hardware can provide anything accurate. Thanks to\n     * {@link https://github.com/gwilson/getAccurateCurrentPosition#background|Greg Wilson}\n     * for the idea.\n     *\n     * Also note that HTML5 Geolocation feature no more allows insecure origins.\n     * See {@link https://goo.gl/rStTGz|this} for more details.\n     * This means if you don't call this method from an HTTPS page, it will\n     * fail. And if `options.fallbackToIP` is enabled, this will locate by IP.\n     *\n     * @param {Object} [options]\n     *        HTML5 geo-location settings with some additional options.\n     *     @param {Boolean} [options.enableHighAccuracy=true]\n     *            Specifies whether the device should provide the most accurate\n     *            position it can. Note that setting this to `true` might\n     *            consume more CPU and/or battery power; and result in slower\n     *            response times.\n     *     @param {Number} [options.timeout=6000]\n     *            HTML5 position timeout setting in milliseconds. Setting this\n     *            to `Infinity` means that Geolocator won't return until the\n     *            position is available.\n     *     @param {Number} [options.maximumAge=0]\n     *            HTML5 position maximum age. Indicates the maximum age in\n     *            milliseconds of a possible cached position that is acceptable\n     *            to return. `0` means, the device cannot use a cached position\n     *            and must attempt to retrieve the real current position. If set\n     *            to `Infinity` the device must return a cached position\n     *            regardless of its age. Note that if `enableHighAccuracy` is\n     *            set to `true`, `maximumAge` will be forced to `0`.\n     *     @param {Number} [options.desiredAccuracy=30]\n     *            Minimum accuracy desired, in meters. Position will not be\n     *            returned until this is met, before the timeout. This only\n     *            takes effect if `enableHighAccuracy` is set to `true`.\n     *     @param {Boolean} [options.fallbackToIP=false]\n     *            Specifies whether to fallback to IP geolocation if the HTML5\n     *            geolocation fails (e.g. user rejection).\n     *     @param {Boolean} [options.addressLookup=false]\n     *            Specifies whether to run a reverse-geocode operation for the\n     *            fetched coordinates to retrieve detailed address information.\n     *            Note that this means an additional request which requires a\n     *            Google API key to be set in the Geolocator configuration.\n     *            See {@link #geolocator.config|`geolocator.config()`}.\n     *     @param {Boolean} [options.timezone=false]\n     *            Specifies whether to also fetch the time zone information for\n     *            the receieved coordinates. Note that this means an additional\n     *            request which requires a Google API key to be set in the\n     *            Geolocator configuration.\n     *            See {@link #geolocator.config|`geolocator.config()`}.\n     *     @param {String|Object} [options.map]\n     *            In order to create a map from the fetched location coordinates;\n     *            either set this to map options object or; the ID of a DOM\n     *            element or DOM element itself which the map will be created\n     *            within.\n     *\n     * @param {Function} callback\n     *        Callback function to be executed when the request completes.\n     *        This takes 2 arguments: `function (err, location) { ... }`.\n     *        See {@link #geolocator~Location|`geolocator~Location` type} for details.\n     *\n     * @returns {void}\n     *\n     * @example\n     * var options = {\n     *     enableHighAccuracy: true,\n     *     timeout: 6000,\n     *     maximumAge: 0,\n     *     desiredAccuracy: 30,\n     *     fallbackToIP: true,\n     *     addressLookup: true,\n     *     timezone: true,\n     *     map: \"my-map\"\n     * };\n     * geolocator.locate(options, function (err, location) {\n     *     console.log(err || location);\n     * });\n     *\n     * @example\n     * // location result:\n     * {\n     *     coords: {\n     *         latitude: 37.4224764,\n     *         longitude: -122.0842499,\n     *         accuracy: 30,\n     *         altitude: null,\n     *         altitudeAccuracy: null,\n     *         heading: null,\n     *         speed: null\n     *     },\n     *     address: {\n     *         commonName: \"\",\n     *         street: \"Amphitheatre Pkwy\",\n     *         route: \"Amphitheatre Pkwy\",\n     *         streetNumber: \"1600\",\n     *         neighborhood: \"\",\n     *         town: \"\",\n     *         city: \"Mountain View\",\n     *         region: \"Santa Clara County\",\n     *         state: \"California\",\n     *         stateCode: \"CA\",\n     *         postalCode: \"94043\",\n     *         country: \"United States\",\n     *         countryCode: \"US\"\n     *     },\n     *     formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n     *     type: \"ROOFTOP\",\n     *     placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n     *     timezone: {\n     *         id: \"America/Los_Angeles\",\n     *         name: \"Pacific Standard Time\",\n     *         abbr: \"PST\",\n     *         dstOffset: 0,\n     *         rawOffset: -28800\n     *     },\n     *     flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/us.svg\",\n     *     map: {\n     *     \t   element: HTMLElement,\n     *     \t   instance: Object, // google.maps.Map\n     *     \t   marker: Object, // google.maps.Marker\n     *     \t   infoWindow: Object, // google.maps.InfoWindow\n     *     \t   options: Object // map options\n     *     },\n     *     timestamp: 1456795956380\n     * }\n     */\n    static locate(options, callback) {\n        options = utils.extend({\n            enableHighAccuracy: true,\n            timeout: 6000,\n            maximumAge: 0,\n            desiredAccuracy: 30,\n            fallbackToIP: false,\n            addressLookup: false,\n            timezone: false,\n            map: undefined\n        }, options);\n\n        // force disable cache if high-accuracy is enabled\n        if (options.enableHighAccuracy) options.maximumAge = 0;\n        // check options and Google key\n        checkGoogleKey(options);\n\n        let cb = callbackMap(options, callback);\n\n        function fallbackToIP(error) {\n            if (options.fallbackToIP) {\n                return geolocator.locateByIP(options, (err, location) => {\n                    if (err) return cb(err, null);\n                    return cb(null, location);\n                });\n            }\n            cb(error, null);\n        }\n        function onPositionReceived(location) {\n            fetchAddressAndTimezone(location, options, cb);\n        }\n        function onPositionError(err) {\n            err = GeoError.create(err);\n            fallbackToIP(err);\n        }\n\n        if (geolocator.isGeolocationSupported()) {\n            if (options.enableHighAccuracy) {\n                locateAccurate(options, onPositionReceived, onPositionError);\n            } else {\n                navigator.geolocation.getCurrentPosition(onPositionReceived, onPositionError, options);\n            }\n        } else {\n            let err = new GeoError(GeoError.Code.GEOLOCATION_NOT_SUPPORTED);\n            fallbackToIP(err);\n        }\n    }\n\n    /**\n     * Returns a location and accuracy radius based on information about cell\n     * towers and WiFi nodes that the mobile client can detect; via the Google\n     * Maps Geolocation API.\n     * @see {@link https://developers.google.com/maps/documentation/geolocation/intro|Google Maps Geolocation API}\n     * @see {@link https://developers.google.com/maps/documentation/geolocation/usage-limits|Usage Limits}\n     *\n     * @param {Object} [options]\n     *        Geolocation options.\n     *     @param {Number} [options.homeMobileCountryCode]\n     *            The mobile country code (MCC) for the device's home network.\n     *     @param {Number} [options.homeMobileNetworkCode]\n     *            The mobile network code (MNC) for the device's home network.\n     *     @param {String} [options.radioType]\n     *            The mobile radio type.\n     *            See {@link #geolocator.RadioType|`geolocator.RadioType` enumeration}\n     *            for possible values. While this field is optional, it should\n     *            be included if a value is available, for more accurate results.\n     *     @param {string} [options.carrier]\n     *            The carrier name. e.g. \"Vodafone\"\n     *     @param {Boolean} [options.fallbackToIP=false]\n     *            Specifies whether to fallback to IP geolocation if wifi and\n     *            cell tower signals are not available. Note that the IP address\n     *            in the request header may not be the IP of the device. Set\n     *            `fallbackToIP` to `false` to disable fall back.\n     *     @param {Array} [options.cellTowers]\n     *            An array of cell tower objects.\n     *            See {@link https://developers.google.com/maps/documentation/geolocation/intro#cell_tower_object|Cell tower objects} for details.\n     *     @param {Array} [options.wifiAccessPoints]\n     *            An array of WiFi access point objects.\n     *            See {@link https://developers.google.com/maps/documentation/geolocation/intro#wifi_access_point_object|WiFi access point objects} for details.\n     *     @param {Boolean} [options.addressLookup=false]\n     *            Specifies whether to run a reverse-geocode operation for the\n     *            fetched coordinates to retrieve detailed address information.\n     *            Note that this means an additional request which requires a\n     *            Google API key to be set in the Geolocator configuration.\n     *            See {@link #geolocator.config|`geolocator.config()`}.\n     *     @param {Boolean} [options.timezone=false]\n     *            Specifies whether to also fetch the time zone information for\n     *            the receieved coordinates. Note that this means an additional\n     *            request which requires a Google API key to be set in the\n     *            Geolocator configuration.\n     *            See {@link #geolocator.config|`geolocator.config()`}.\n     *     @param {String|Object} [options.map]\n     *            In order to create a map from the fetched location coordinates;\n     *            either set this to map options object or; the ID of a DOM\n     *            element or DOM element itself which the map will be created\n     *            within.\n     *     @param {Boolean} [options.raw=false]\n     *     \t      Whether to return the raw Google API result.\n     * @param {Function} callback\n     *        Callback function to be executed when the request completes.\n     *        This takes 2 arguments: `function (err, location) { ... }`.\n     *        See {@link #geolocator~Location|`geolocator~Location` type} for details.\n     *\n     * @returns {void}\n     *\n     * @example\n     * var options = {\n     *     homeMobileCountryCode: 310,\n     *     homeMobileNetworkCode: 410,\n     *     carrier: 'Vodafone',\n     *     radioType: geolocator.RadioType.GSM,\n     *     fallbackToIP: true,\n     *     addressLookup: false,\n     *     timezone: false,\n     *     map: \"my-map\"\n     * };\n     * geolocator.locateByMobile(options, function (err, location) {\n     *     console.log(err || location);\n     * });\n     */\n    static locateByMobile(options, callback) {\n        if (!utils.isPlainObject(options)) {\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS);\n        }\n\n        let cb = callbackMap(options, callback);\n\n        options = utils.extend({\n            homeMobileCountryCode: undefined,\n            homeMobileNetworkCode: undefined,\n            radioType: undefined,\n            carrier: undefined,\n            fallbackToIP: false,\n            cellTowers: undefined,\n            wifiAccessPoints: undefined,\n            addressLookup: false,\n            timezone: false,\n            map: undefined,\n            raw: false\n        }, options);\n\n        options.considerIp = options.fallbackToIP;\n        // check Google key\n        checkGoogleKey();\n\n        let conf = geolocator._.config,\n            key = conf.google.key || '',\n            url = utils.setProtocol(URL.GOOGLE_GEOLOCATION, conf.https),\n            xhrOpts = {\n                url: `${url}?key=${key}`,\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                data: JSON.stringify(options)\n            };\n        // console.log(xhrOpts.data);\n\n        fetch.post(xhrOpts, (err, xhr) => {\n            let response = Boolean(xhr) && utils.safeJsonParse(xhr.responseText);\n\n            if (err) {\n                let gErr = GeoError.fromGoogleResponse(response);\n                if (gErr.code === GeoError.Code.UNKNOWN_ERROR) {\n                    throw new GeoError(GeoError.Code.INTERNAL_ERROR, err.message);\n                }\n                return cb(gErr, null);\n            }\n\n            if (!response) {\n                err = new GeoError(GeoError.Code.INVALID_RESPONSE);\n                return cb(err, null);\n            }\n\n            response = options.raw ? response : {\n                coords: {\n                    latitude: response.location.lat,\n                    longitude: response.location.lng,\n                    accuracy: response.accuracy\n                },\n                timestamp: utils.time()\n            };\n\n            fetchAddressAndTimezone(response, options, cb);\n\n            // e.g. raw response\n            // {\n            //     \"location\": {\n            //         \"lat\": 51.0,\n            //         \"lng\": -0.1\n            //     },\n            //     \"accuracy\": 1200.4\n            // }\n        });\n    }\n\n    /**\n     * Locates the user's location by the client's IP.\n     *\n     * This method uses Wikimedia's Geo-IP lookup service, by default.\n     * In order to change the source provider, you can use\n     * {@link #geolocator.setGeoIPSource|`geolocator.setGeoIPSource()` method}.\n     *\n     * @param {Object} [options]\n     *        Locate options.\n     *     @param {Boolean} [options.addressLookup=false]\n     *            Specifies whether to run a reverse-geocode operation for the\n     *            fetched coordinates to retrieve detailed address information.\n     *            Since no precise address can be fetched from an IP addres; you\n     *            should only enable this if the Geo-IP Source returns no useful\n     *            address information other than coordinates. Also, note that\n     *            this means an additional request which requires a Google API\n     *            key to be set in the Geolocator configuration.\n     *            See {@link #geolocator.config|`geolocator.config()`}.\n     *     @param {Boolean} [options.timezone=false]\n     *            Specifies whether to also fetch the time zone information for\n     *            the receieved coordinates. Note that this means an additional\n     *            request which requires a Google API key to be set in the\n     *            Geolocator configuration.\n     *            See {@link #geolocator.config|`geolocator.config()`}.\n     *     @param {String|Object} [options.map]\n     *            In order to create a map from the fetched location coordinates;\n     *            either set this to map options object or; the ID of a DOM\n     *            element or DOM element itself which the map will be created\n     *            within.\n     * @param {Function} callback\n     *        Callback function to be executed when the request completes.\n     *        This takes 2 arguments: `function (err, location) { ... }`.\n     *        See {@link #geolocator~Location|`geolocator~Location` type} for details.\n     *\n     * @returns {void}\n     *\n     * @example\n     * var options = {\n     * \t   addressLookup: true,\n     * \t   timezone: true,\n     * \t   map: \"my-map\"\n     * };\n     * geolocator.locateByIp(options, function (err, location) {\n     * \t   console.log(err || location);\n     * });\n     *\n     * @example\n     * // location result:\n     * {\n     *     coords: {\n     *         latitude: 37.4224764,\n     *         longitude: -122.0842499,\n     *     },\n     *     address: {\n     *         city: \"Istanbul\",\n     *         region: \"34\",\n     *         state: \"34\",\n     *         country: \"TR\",\n     *         countryCode: \"TR\"\n     *     },\n     *     formattedAddress: \"Demirtaş, Tesviyeci Sk. No:7, 34134 Fatih/İstanbul, Turkey\",\n     *     type: \"ROOFTOP\",\n     *     placeId: \"ChIJ-ZRLfO25yhQRBi5YJxX80Q0\",\n     *     timezone: {\n     *         id: \"Europe/Istanbul\",\n     *         name: \"Eastern European Summer Time\",\n     *         abbr: \"EEST\",\n     *         dstOffset: 3600,\n     *         rawOffset: 7200\n     *     },\n     *     flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/tr.svg\",\n     *     map: {\n     *     \t   element: HTMLElement,\n     *     \t   instance: Object, // google.maps.Map\n     *     \t   marker: Object, // google.maps.Marker\n     *     \t   infoWindow: Object, // google.maps.InfoWindow\n     *     \t   options: Object // map options\n     *     },\n     *     provider: \"wikimedia\",\n     *     timestamp: 1466216325223\n     * }\n     */\n    static locateByIP(options, callback) {\n        // passed source can be a string or object\n        let source = geolocator._.geoIpSource;\n\n        if (!utils.isPlainObject(source)) {\n            throw new GeoError(\n                GeoError.Code.INVALID_GEO_IP_SOURCE,\n                'Please set a valid Geo-IP Source via geolocator.setGeoIPSource(options).'\n            );\n        }\n\n        // check options and Google key\n        checkGoogleKey(options || {});\n\n        let jsonpOpts = {\n            url: source.url,\n            async: true,\n            clean: true\n            // params: {}\n        };\n        if (source.callbackParam) {\n            jsonpOpts.callbackParam = source.callbackParam;\n            jsonpOpts.rootName = 'geolocator._.cb';\n        } else if (!source.globalVar) {\n            throw new GeoError(\n                GeoError.Code.INVALID_GEO_IP_SOURCE,\n                'Either callbackParam or globalVar should be set for Geo-IP source.'\n            );\n        }\n        return fetch.jsonp(jsonpOpts, (err, response) => {\n            if (err) {\n                return callback(GeoError.create(err), null);\n            }\n            if (source.globalVar) {\n                if (window[source.globalVar]) {\n                    response = utils.clone(window[source.globalVar]);\n                    delete window[source.globalVar];\n                } else {\n                    response = null;\n                }\n            }\n            if (!response) {\n                err = new GeoError(GeoError.Code.INVALID_RESPONSE);\n                return callback(err, null);\n            }\n            if (utils.isPlainObject(source.schema)) {\n                response = utils.mapToSchema(response, source.schema);\n            }\n            response.provider = source.provider || 'unknown';\n            setFlagURL(response);\n            if (response.coords) {\n                response.coords.latitude = Number(response.coords.latitude);\n                response.coords.longitude = Number(response.coords.longitude);\n            }\n            let cb = callbackMap(options, callback);\n            fetchAddressAndTimezone(response, options, cb);\n        });\n    }\n\n    /**\n     * Sets the Geo-IP source to be used for fetching location information\n     * by user's IP; which is internally used by\n     * {@link #geolocator.locateByIP|`geolocator.locateByIP()` method}.\n     *\n     * By default, Geolocator uses Wikimedia as the Geo-IP source provider.\n     * You can use this method to change this; or you can choose from\n     * ready-to-use\n     * {@link https://github.com/onury/geolocator/tree/master/src/geo-ip-sources|Geo-IP sources}.\n     *\n     * @param {Object} options\n     *        Geo-IP Source options.\n     *     @param {String} [options.provider]\n     *            Source or service provider's name.\n     *     @param {String} options.url\n     *            Source URL without the callback query parameter. The callback\n     *            name (if supported) should be set via `options.callbackParam`.\n     *            Also, make sure the service supports the protocol you use in\n     *            the URL. If it supports both HTTP and HTTPS, you can omit the\n     *            protocol. In this case, it will be determined via Geolocator\n     *            configuration.\n     *            See {@link #geolocator.config|`geolocator.config()`}.\n     *            NOTE: Do not forget to include your API key in the query\n     *            parameters of the URL, if you have one.\n     *     @param {String} [options.callbackParam]\n     *            If JSON callback is supported, pass the name of the callback\n     *            parameter, defined by the provider.\n     *     @param {Object} [options.globalVar]\n     *            Set this instead of `options.callbackParam` if the service\n     *            does not support JSON callbacks, but weirdly set a global\n     *            variable in the document. For example, if the response is\n     *            `Geo = { lat, lng }`, you should set this to `\"Geo\"`.\n     *     @param {Object} [options.schema]\n     *            Schema object to be used to re-structure the response returned\n     *            from the service. Set the response object's keys as values of\n     *            a custom object to map the format to the `location` object.\n     *            For example; if the service returns a response like\n     *            `{ lat: 40.112233, lng: 10.112233, otherProp: 'hello' }`.\n     *            Then you should set the following schema:\n     *            `{ coords: { latitude: 'lat', longitude: 'lng' } }`.\n     *\n     * @return {geolocator}\n     */\n    static setGeoIPSource(options) {\n        if (!utils.isPlainObject(options)) {\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS, 'Geo-IP source options is invalid.');\n        }\n        if (!utils.isStringSet(options.url)) {\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS, 'Geo-IP source should have a valid URI.');\n        }\n        // if (!utils.isStringSet(options.callbackParam) && !utils.isStringSet(options.globalVar)) {\n        //     throw new GeoError(GeoError.Code.INVALID_PARAMETERS, 'No \\'callbackParam\\' or \\'globalVar\\' is provided for the Geo-IP Source options.');\n        // }\n        geolocator._.geoIpSource = Object.freeze(options);\n    }\n\n    /**\n     * Registers a handler for watching the user's location via HTML5\n     * geolocation; that is triggered each time the position of the device\n     * changes. This may require/prompt for user's permission.\n     *\n     * @param {Object} [options]\n     *        HTML5 geo-location settings.\n     *     @param {Boolean} [options.enableHighAccuracy=true]\n     *            Specifies whether the device should provide the most accurate\n     *            position it can. Note that setting this to `true` might consume\n     *            more CPU and/or battery power; and result in slower response\n     *            times.\n     *     @param {Number} [options.timeout=6000]\n     *            HTML5 position timeout setting in milliseconds. Setting this\n     *            to `Infinity` means that Geolocator won't return until the\n     *            position is available.\n     *     @param {Number} [options.maximumAge=0]\n     *            HTML5 position maximum age. Indicates the maximum age in\n     *            milliseconds of a possible cached position that is acceptable\n     *            to return. `0` means, the device cannot use a cached position\n     *            and must attempt to retrieve the real current position. If set\n     *            to `Infinity` the device must return a cached position\n     *            regardless of its age.\n     *     @param {Boolean} [options.clearOnError=false]\n     *            Specifies whether to clear the watcher on first error so that\n     *            it does not execute any more callbacks.\n     *     @param {Object} [options.target]\n     *            Object that defines the target location and settings; that\n     *            when the location is reached, the watcher will auto-clear\n     *            itself and invoke the callback.\n     *     @param {Number} options.target.latitude\n     *            The `latitude` of the target location.\n     *     @param {Number} options.target.longitude\n     *            The `longitude` of the target location.\n     *     @param {Number} [options.target.radius=0.5]\n     *            The radius, in other words; the minimum distance (in\n     *            kilometers or miles) to the target point that should be\n     *            reached.\n     *     @param {Number} [options.target.unitSystem=0]\n     *            Unit system to be used for target radius.\n     *            See {@link #geolocator.UnitSystem|`geolocator.UnitSystem` enumeration}\n     *            for possible values.\n     * @param {Function} callback\n     *        Callback function to be executed when the request completes.\n     *        This takes 2 arguments: `function (err, location) { ... }`.\n     *        If `options.target` is set, `location` will also\n     *        include a `targetReached:Boolean` property.\n     *        See {@link #geolocator~Location|`geolocator~Location` type} for details.\n     *\n     * @returns {GeoWatcher} - A watcher object that provides a\n     * `.clear(delay:Number, callback:Function)` method to clear the watcher\n     * when needed. Optional `delay` argument can be set (in milliseconds) to\n     * clear in a later time. Omitting this argument will clear the watcher\n     * immediately. You should always call this method, except if you've set up\n     * a target; which will auto-clear the watcher when reached.\n     *\n     * @example\n     * // Watch my position for 5 minutes.\n     * var options = { enableHighAccuracy: true, timeout: 6000, maximumAge: 0 };\n     * var watcher = geolocator.watch(options, function (err, location) {\n     *     console.log(err || location);\n     * });\n     * console.log(watcher.id); // ID of the watcher\n     * watcher.clear(300000); // clear after 5 minutes.\n     *\n     * @example\n     * // Watch my position until I'm 350 meters near Disneyland Park.\n     * options.target = {\n     *     latitude: 33.8120918,\n     *     longitude: -117.9233569,\n     *     radius: 0.35,\n     *     unitSystem: geolocator.UnitSystem.METRIC\n     * };\n     * watcher = geolocator.watch(options, function (err, location) {\n     *     if (err) {\n     *         console.log(err);\n     *         return;\n     *     }\n     *     if (location.targetReached) {\n     *         console.log(watcher.isCleared); // true\n     *         console.log(watcher.cycle); // 15 — target reached after 15 cycles\n     *     } else {\n     *         console.log(watcher.isCleared); // false — watcher is active.\n     *     }\n     * });\n     */\n    static watch(options, callback) {\n        if (!geolocator.isGeolocationSupported()) {\n            callback(new GeoError(GeoError.Code.GEOLOCATION_NOT_SUPPORTED), null);\n            return {};\n        }\n\n        let watcher, target;\n\n        options = utils.extend({\n            enableHighAccuracy: true,\n            timeout: 6000,\n            maximumAge: 0,\n            clearOnError: false\n        }, options);\n\n        if (utils.isPlainObject(options.target)) {\n            target = utils.extend({\n                radius: 0.5,\n                unitSystem: geolocator.UnitSystem.METRIC\n            }, options.target);\n        }\n\n        function onPositionChanged(location) {\n            let pos = utils.clone(location, { own: false });\n            if (target) {\n                let distance = geolocator.calcDistance({\n                    from: location.coords,\n                    to: target,\n                    formula: geolocator.DistanceFormula.HAVERSINE,\n                    unitSystem: target.unitSystem\n                });\n                pos.targetReached = distance <= target.radius;\n                if (watcher && pos.targetReached) {\n                    watcher.clear(() => {\n                        return callback(null, pos);\n                    });\n                }\n            }\n            return callback(null, pos);\n        }\n        function onPositionError(err) {\n            callback(GeoError.create(err), null);\n        }\n        return new GeoWatcher(onPositionChanged, onPositionError, options);\n    }\n\n    /**\n     * Converts a given address (or address components) into geographic\n     * coordinates (i.e. latitude, longitude); and gets detailed address\n     * information.\n     * @see {@link https://developers.google.com/maps/documentation/geocoding/intro|Google Maps Geocoding API}\n     * @see {@link https://developers.google.com/maps/documentation/geocoding/usage-limits|Usage Limits}\n     *\n     * @param {String|Object} options\n     *        Either the address to geocode or geocoding options with the\n     *        following properties.\n     *     @param {String} options.address\n     *            The street address to geocode, in the format used by the\n     *            national postal service of the country concerned. Additional\n     *            address elements such as business names and unit, suite or\n     *            floor numbers should be avoided. Note that any address\n     *            component (route, locality, administrativeArea, postalCode and\n     *            country) should be specified either in address or the\n     *            corresponding property - not both. Doing so may result in\n     *            `ZERO_RESULTS`.\n     *     @param {String} [options.route]\n     *     \t      Long or short name of a route.\n     *     @param {String} [options.locality]\n     *     \t      Locality and sublocality of the location.\n     *     @param {String} [options.administrativeArea]\n     *     \t      Administrative area of the location.\n     *     @param {String} [options.postalCode]\n     *     \t      Postal code of the location.\n     *     @param {String} [options.country]\n     *     \t      A country name or a two letter ISO 3166-1 country code.\n     *     @param {String} [options.region]\n     *     \t      The region code, specified as a ccTLD (\"top-level domain\")\n     *     \t      two-character value. e.g.: `\"fr\"` for France.\n     *     @param {Array|Object} [options.bounds]\n     *     \t      The bounding box of the viewport within which to bias geocode\n     *     \t      results more prominently. e.g.:\n     *     \t      `[ southwestLat:Number, southwestLng:Number, northeastLat:Number, northeastLng:Number ]`\n     *     @param {String|Object} [options.map]\n     *            In order to create a map from the fetched location coordinates;\n     *            either set this to map options object or; the ID of a DOM\n     *            element or DOM element itself which the map will be created\n     *            within.\n     *     @param {Boolean} [options.raw=false]\n     *     \t      Whether to return the raw Google API result.\n     * @param {Function} callback\n     *        Callback function to be executed when the request completes.\n     *        This takes 2 arguments: `function (err, location) { ... }`.\n     *        See {@link #geolocator~Location|`geolocator~Location` type} for details.\n     *\n     * @returns {void}\n     *\n     * @example\n     * var address = '1600 Amphitheatre Parkway, CA';\n     * geolocator.geocode(address, function (err, location) {\n     *     console.log(err || location);\n     * });\n     *\n     * @example\n     * // location result:\n     * {\n     *     coords: {\n     *         latitude: 37.4224764,\n     *         longitude: -122.0842499\n     *     },\n     *     address: {\n     *         commonName: \"\",\n     *         street: \"Amphitheatre Pkwy\",\n     *         route: \"Amphitheatre Pkwy\",\n     *         streetNumber: \"1600\",\n     *         neighborhood: \"\",\n     *         town: \"\",\n     *         city: \"Mountain View\",\n     *         region: \"Santa Clara County\",\n     *         state: \"California\",\n     *         stateCode: \"CA\",\n     *         postalCode: \"94043\",\n     *         country: \"United States\",\n     *         countryCode: \"US\"\n     *     },\n     *     formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n     *     type: \"ROOFTOP\",\n     *     placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n     *     flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/us.svg\",\n     *     map: {\n     *     \t   element: HTMLElement,\n     *     \t   instance: Object, // google.maps.Map\n     *     \t   marker: Object, // google.maps.Marker\n     *     \t   infoWindow: Object, // google.maps.InfoWindow\n     *     \t   options: Object // map options\n     *     },\n     *     timestamp: 1456795956380\n     * }\n     */\n    static geocode(options, callback) {\n        if (utils.isString(options)) {\n            options = { address: options };\n        } else if (!utils.isPlainObject(options)) {\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS);\n        }\n\n        checkGoogleKey();\n\n        let conf = geolocator._.config;\n        options = utils.extend({\n            key: conf.google.key || '',\n            language: conf.language || 'en',\n            raw: false\n        }, options);\n\n        let query = geoHelper.buildGeocodeParams(options, false),\n            url = utils.setProtocol(URL.GOOGLE_GEOCODE, conf.https),\n            xhrOpts = {\n                url: `${url}?${query}`\n            },\n            cb = callbackMap(options, callback);\n        geoHelper.geocode(xhrOpts, options.raw, cb);\n    }\n\n    /**\n     * Converts the given geographic coordinates into a human-readable address\n     * information.\n     * @see {@link https://developers.google.com/maps/documentation/geocoding/intro#ReverseGeocoding|Google Maps (Reverse) Geocoding API}\n     * @see {@link https://developers.google.com/maps/documentation/geocoding/usage-limits|Usage Limits}\n     * @alias geolocator.addressLookup\n     *\n     * @param {Object|String} options\n     *        Either the `placeId` of the location or Reverse Geocoding options\n     *        with the following properties.\n     *     @param {Number} options.latitude\n     *     Latitude of the target location.\n     *     @param {Number} options.longitude\n     *     Longitude of the target location.\n     *     @param {String} [options.placeId]\n     *            Required if `latitude` and `longitude` are omitted. The place\n     *            ID of the place for which you wish to obtain the\n     *            human-readable address. The place ID is a unique identifier\n     *            that can be used with other Google APIs. Note that if\n     *            `placeId` is set, `latitude` and `longitude` are ignored.\n     *     @param {String|Object} [options.map]\n     *            In order to create a map from the given location coordinates;\n     *            either set this to map options object or; the ID of a DOM\n     *            element or DOM element itself which the map will be created\n     *            within.\n     *     @param {Boolean} [options.raw=false]\n     *            Whether to return the raw Google API result.\n     * @param {Function} callback\n     *        Callback function to be executed when the request completes.\n     *        This takes 2 arguments: `function (err, location) { ... }`\n     *        See {@link #geolocator~Location|`geolocator~Location` type} for details.\n     *\n     * @returns {void}\n     *\n     * @example\n     * var coords = {\n     *     latitude: 37.4224764,\n     *     longitude: -122.0842499\n     * };\n     *\n     * geolocator.reverseGeocode(coords, function (err, location) {\n     *     console.log(err || location);\n     * });\n     *\n     * @example\n     * // location result:\n     * {\n     *     coords: {\n     *         latitude: 37.4224764,\n     *         longitude: -122.0842499\n     *     },\n     *     address: {\n     *         commonName: \"\",\n     *         street: \"Amphitheatre Pkwy\",\n     *         route: \"Amphitheatre Pkwy\",\n     *         streetNumber: \"1600\",\n     *         neighborhood: \"\",\n     *         town: \"\",\n     *         city: \"Mountain View\",\n     *         region: \"Santa Clara County\",\n     *         state: \"California\",\n     *         stateCode: \"CA\",\n     *         postalCode: \"94043\",\n     *         country: \"United States\",\n     *         countryCode: \"US\"\n     *     },\n     *     formattedAddress: \"1600 Amphitheatre Parkway, Mountain View, CA 94043, USA\",\n     *     type: \"ROOFTOP\",\n     *     placeId: \"ChIJ2eUgeAK6j4ARbn5u_wAGqWA\",\n     *     flag: \"//cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.3.1/flags/4x3/us.svg\",\n     *     map: {\n     *     \t   element: HTMLElement,\n     *     \t   instance: Object, // google.maps.Map\n     *     \t   marker: Object, // google.maps.Marker\n     *     \t   infoWindow: Object, // google.maps.InfoWindow\n     *     \t   options: Object // map options\n     *     },\n     *     timestamp: 1456795956380\n     * }\n     */\n    static reverseGeocode(options, callback) {\n        if (utils.isString(options)) {\n            options = { placeId: options };\n        } else if (!utils.isPlainObject(options)) {\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS);\n        }\n\n        let coordsSet = utils.isNumber(options.latitude)\n            && utils.isNumber(options.longitude);\n\n        if (!utils.isString(options.placeId) && !coordsSet) {\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS);\n        }\n\n        checkGoogleKey();\n\n        let conf = geolocator._.config;\n        options = utils.extend({\n            key: conf.google.key || '',\n            language: conf.language || 'en',\n            raw: false\n        }, options);\n\n        let query = geoHelper.buildGeocodeParams(options, true),\n            url = utils.setProtocol(URL.GOOGLE_GEOCODE, conf.https),\n            xhrOpts = {\n                url: `${url}?${query}`\n            },\n            cb = callbackMap(options, callback);\n        geoHelper.geocode(xhrOpts, options.raw, cb);\n    }\n\n    /**\n     *  Alias for `geolocator.reverseGeocode`\n     *  @private\n     */\n    static addressLookup(options, callback) {\n        geolocator.reverseGeocode(options, callback);\n    }\n\n    /**\n     * Gets timezone information for the given coordinates.\n     * Note: Google Browser API keys cannot have referer restrictions when used with this API.\n     * @see {@link https://developers.google.com/maps/documentation/timezone/intro|Google Maps TimeZone API}\n     * @see {@link https://developers.google.com/maps/documentation/timezone/usage-limits|Usage Limits}\n     *\n     * @param {Object} options\n     *        Time zone options.\n     *     @param {Number} options.latitude\n     *            Latitude of location.\n     *     @param {Number} options.longitude\n     *            Longitude of location.\n     *     @param {Number} [options.timestamp=Date.now()]\n     *            Specifies the desired time as seconds since midnight, January\n     *            1, 1970 UTC. This is used to determine whether or not Daylight\n     *            Savings should be applied.\n     *     @param {Boolean} [options.raw=false]\n     *            Whether to return the raw Google API result.\n     * @param {Function} callback\n     *        Callback function to be executed when the request completes, in\n     *        the following signature: `function (err, timezone) { ... }`.\n     *        See {@link #geolocator~TimeZone|`geolocator~TimeZone` type} for\n     *        details.\n     *\n     * @returns {void}\n     *\n     * @example\n     * var options = {\n     *     latitude: 48.8534100,\n     *     longitude: 2.3488000\n     * };\n     * geolocator.getTimeZone(options, function (err, timezone) {\n     *     console.log(err || timezone);\n     * });\n     *\n     * @example\n     * // timezone result:\n     * {\n     *     id: \"Europe/Paris\",\n     *     name: \"Central European Standard Time\",\n     *     abbr: \"CEST\",\n     *     dstOffset: 0,\n     *     rawOffset: 3600,\n     *     timestamp: 1455733120\n     * }\n     */\n    static getTimeZone(options, callback) {\n        if (!utils.isPlainObject(options)\n                || !utils.isNumber(options.latitude)\n                || !utils.isNumber(options.longitude)) {\n            throw new GeoError(GeoError.Code.INVALID_PARAMETERS);\n        }\n\n        checkGoogleKey();\n\n        let conf = geolocator._.config;\n        options = utils.extend({\n            key: conf.google.key || '',\n            language: conf.language || 'en',\n            timestamp: utils.time(true),\n            raw: false\n        }, options);\n\n        let url = utils.setProtocol(URL.GOOGLE_TIMEZONE, conf.https),\n            xhrOpts = {\n                url: `${url}?location=${options.latitude},${options.longitude}&timestamp=${options.timestamp}&language=${options.language}&key=${options.key}`\n            };\n\n        fetch.xhr(xhrOpts, (err, xhr) => {\n            let response = Boolean(xhr) && utils.safeJsonParse(xhr.responseText);\n\n            if (err) {\n                let gErr = GeoError.fromGoogleResponse(response);\n                if (gErr.code === GeoError.Code.UNKNOWN_ERROR) {\n                    throw new GeoError(GeoError.Code.INTERNAL_ERROR, err.message);\n                }\n                return callback(gErr, null);\n            }\n\n            if (!response) {\n                err = new GeoError(GeoError.Code.INVALID_RESPONSE);\n                return callback(err, null);\n            }\n\n            if (response.status !== 'OK') {\n                err = GeoError.fromGoogleResponse(response);\n                return callback(err, null);\n            }\n\n            response = options.raw ? response : {\n                id: response.timeZoneId,\n                name: response.timeZoneName,\n                abbr: utils.abbr(response.timeZoneName, { dots: false }),\n                dstOffset: response.dstOffset,\n                rawOffset: response.rawOffset,\n                timestamp: options.timestamp\n            };\n            callback(err, response);\n        });\n    }\n\n    /**\n     * Gets the distance and duration values based on the recommended route\n     * between start and end points.\n     * @see {@link https://developers.google.com/maps/documentation/distance-matrix/intro|Google Maps Distance Matrix API}\n     * @see {@link https://developers.google.com/maps/documentation/distance-matrix/usage-limits|Usage Limits}\n     *\n     * @param {Object} options\n     *        Distance matrix options.\n     *     @param {String|Object|Array} options.origins\n     *            One or more addresses and/or an object of latitude/longitude\n     *            values, from which to calculate distance and time. If you pass\n     *            an address as a string, the service will geocode the string\n     *            and convert it to a latitude/longitude coordinate to calculate\n     *            distances. Following are valid examples:\n     * <pre><code>options.origins = 'London';\n     * options.origins = ['London', 'Paris'];\n     * options.origins = { latitude: 51.5085300, longitude: -0.1257400 };\n     * options.origins = [\n     *     { latitude: 51.5085300, longitude: -0.1257400 },\n     *     { latitude: 48.8534100, longitude: 2.3488000 }\n     * ];\n     * </code></pre>\n     *     @param {String|Object|Array} options.destinations\n     *            One or more addresses and/or an object of latitude/longitude\n     *            values, from which to calculate distance and time. If you pass\n     *            an address as a string, the service will geocode the string\n     *            and convert it to a latitude/longitude coordinate to calculate\n     *            distances.\n     *     @param {String} [options.travelMode=\"DRIVING\"]\n     *            Type of routing requested.\n     *            See {@link #geolocator.TravelMode|`geolocator.TravelMode` enumeration}\n     *            for possible values.\n     *     @param {Boolean} [options.avoidFerries]\n     *            If true, instructs the Distance Matrix service to avoid\n     *            ferries where possible.\n     *     @param {Boolean} [options.avoidHighways]\n     *            If true, instructs the Distance Matrix service to avoid\n     *            highways where possible.\n     *     @param {Boolean} [options.avoidTolls]\n     *            If true, instructs the Distance Matrix service to avoid toll\n     *            roads where possible.\n     *     @param {Number} [options.unitSystem=0]\n     *            Preferred unit system to use when displaying distance.\n     *            See {@link #geolocator.UnitSystem|`geolocator.UnitSystem` enumeration}\n     *            for possible values.\n     *     @param {String} [options.region]\n     *            Region code used as a bias for geocoding requests.\n     * @param {Boolean} [options.raw=false]\n     *        Whether to return the raw Google API result.\n     * @param {Function} callback\n     *        Callback function to be executed when the request completes,\n     *        in the following signature: `function (err, result) { ... }`\n     *\n     * @returns {void}\n     *\n     * @example\n     * var options = {\n     *     origins: [{ latitude: 51.5085300, longitude: -0.1257400 }],\n     *     destinations: [{ latitude: 48.8534100, longitude: 2.3488000 }],\n     *     travelMode: geolocator.TravelMode.DRIVING,\n     *     unitSystem: geolocator.UnitSystem.METRIC\n     * };\n     * geolocator.getDistanceMatrix(options, function (err, result) {\n     *     console.log(err || result);\n     * });\n     *\n     * @example\n     * // result:\n     * [\n     * \t{\n     * \t\tfrom: \"449 Duncannon St, London WC2R 0DZ, UK\",\n     * \t\tto: \"1 Parvis Notre-Dame - Pl. Jean-Paul II, 75004 Paris-4E-Arrondissement, France\",\n     * \t\tdistance: {\n     * \t\t\tvalue: 475104,\n     * \t\t\ttext: \"475 km\"\n     * \t\t},\n     * \t\tduration: {\n     * \t\t\tvalue: 20193,\n     * \t\t\ttext: \"5 hours 37 mins\"\n     * \t\t},\n     * \t\tfare: undefined,\n     * \t\ttimestamp: 1456795956380\n     * \t}\n     * ]\n     */\n    static getDistanceMatrix(options, callback) {\n        checkGoogleKey();\n\n        let key = geolocator._.config.google.key;\n        geolocator.ensureGoogleLoaded(key, err => {\n            if (err) {\n                throw new GeoError(GeoError.Code.GOOGLE_API_FAILED, String(err.message || err));\n            }\n\n            let o = options.origins || options.origin || options.from,\n                d = options.destinations || options.destination || options.to;\n            if (!utils.isPlainObject(options)\n                    || (!utils.isString(o) && !utils.isArray(o) && !utils.isPlainObject(o))\n                    || (!utils.isString(d) && !utils.isArray(d) && !utils.isPlainObject(d))) {\n                throw new GeoError(GeoError.Code.INVALID_PARAMETERS);\n            }\n\n            options.origins = geoHelper.toPointList(o);\n            options.destinations = geoHelper.toPointList(d);\n\n            options = utils.extend({\n                travelMode: google.maps.TravelMode.DRIVING,\n                avoidFerries: undefined,\n                avoidHighways: undefined,\n                avoidTolls: undefined,\n                unitSystem: google.maps.UnitSystem.METRIC\n            }, options);\n\n            let service = new google.maps.DistanceMatrixService();\n            service.getDistanceMatrix(options, (response, status) => {\n                let err = null;\n                if (status !== google.maps.DistanceMatrixStatus.OK) {\n                    err = GeoError.fromGoogleResponse(status);\n                    response = null;\n                } else {\n                    response = options.raw ? response : geoHelper.formatDistanceResults(response);\n                }\n                callback(err, response);\n            });\n        });\n    }\n\n    /**\n     * Calculates the distance between two geographic points.\n     *\n     * @param {Object} options\n     *        Calculation and display options.\n     *     @param {Object} options.from\n     *            Object containing the `latitude` and `longitude` of original\n     *            location.\n     *     @param {Object} options.to\n     *            Object containing the `latitude` and `longitude` of destination.\n     *     @param {String} [options.formula=\"haversine\"]\n     *            The algorithm or formula to calculate the distance.\n     *            See {@link #geolocator.DistanceFormula|`geolocator.DistanceFormula` enumeration}.\n     *     @param {Number} [options.unitSystem=0]\n     *            Preferred unit system to use when displaying distance.\n     *            See {@link #geolocator.UnitSystem|`geolocator.UnitSystem` enumeration}.\n     *\n     * @returns {Number} - The calculated distance.\n     *\n     * @example\n     * // Calculate distance from London to Paris.\n     * var result = geolocator.calcDistance({\n     *     from: {\n     *         latitude: 51.5085300,\n     *         longitude: -0.1257400\n     *     },\n     *     to: {\n     *         latitude: 48.8534100,\n     *         longitude: 2.3488000\n     *     },\n     *     formula: geolocator.DistanceFormula.HAVERSINE,\n     *     unitSystem: geolocator.UnitSystem.METRIC\n     * });\n     * // result: 366.41656039126093 (kilometers)\n     */\n    static calcDistance(options) {\n        options = utils.extend({\n            formula: geolocator.DistanceFormula.HAVERSINE,\n            unitSystem: geolocator.UnitSystem.METRIC\n        }, options);\n\n        let from = options.from,\n            to = options.to,\n            radius = options.unitSystem === geolocator.UnitSystem.METRIC\n                ? EARTH_RADIUS_KM : EARTH_RADIUS_MI;\n\n        if (options.formula === geolocator.DistanceFormula.HAVERSINE) {\n            let dLat = geolocator.degToRad(to.latitude - from.latitude),\n                dLng = geolocator.degToRad(to.longitude - from.longitude),\n                a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                    Math.cos(geolocator.degToRad(from.latitude)) *\n                    Math.cos(geolocator.degToRad(to.longitude)) *\n                    Math.sin(dLng / 2) * Math.sin(dLng / 2),\n                c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n            return radius * c;\n        }\n        // geolocator.DistanceFormula.PYTHAGOREAN\n        let latA = geolocator.degToRad(from.latitude),\n            latB = geolocator.degToRad(to.latitude),\n            lngA = geolocator.degToRad(from.longitude),\n            lngB = geolocator.degToRad(to.longitude),\n            x = (lngB - lngA) * Math.cos((latA + latB) / 2),\n            y = (latB - latA);\n        return Math.sqrt(x * x + y * y) * radius;\n    }\n\n    /**\n     * Gets the current public IP of the client.\n     *\n     * @param {Function} callback\n     *        Callback function to be executed when the request completes, in\n     *        the following signature: `function (err, result) { ... }`\n     *\n     * @returns {void}\n     *\n     * @example\n     * geolocator.getIP(function (err, result) {\n     *     console.log(err || result);\n     * });\n     *\n     * @example\n     * // result:\n     * {\n     *     ip: \"176.232.71.155\",\n     *     timestamp: 1457573683427\n     * }\n     */\n    static getIP(callback) {\n        let conf = geolocator._.config;\n\n        let jsonpOpts = {\n            url: utils.setProtocol(URL.IP, conf.https),\n            async: true,\n            clean: true,\n            params: {\n                format: 'jsonp'\n            },\n            callbackParam: 'callback',\n            rootName: 'geolocator._.cb'\n        };\n        return fetch.jsonp(jsonpOpts, (err, response) => {\n            if (err) {\n                return callback(GeoError.create(err), null);\n            }\n            if (!response) {\n                err = new GeoError(GeoError.Code.INVALID_RESPONSE);\n                return callback(err, null);\n            }\n            if (typeof response === 'object') response.timestamp = utils.time();\n            callback(null, response);\n        });\n    }\n\n    /**\n     * Ensures Google Maps API is loaded. If not, this will load all of the\n     * main Javascript objects and symbols for use in the Maps API.\n     *\n     * Note that, Google Maps API is loaded only when needed. For example,\n     * the DistanceMatrix API does not support Web Service requests and\n     * requires this API to be loaded. However, the TimeZone API requests are\n     * made throught the Web Service without requiring a `google` object\n     * within DOM.\n     *\n     * Also note that this will not re-load the API if `google.maps` object\n     * already exists. In this case, the `callback` is still executed and\n     * no errors are passed.\n     *\n     * You can use the following overload to omit the `key` argument altogether:\n     *\n     * `geolocator.ensureGoogleLoaded(callback)`\n     *\n     * @param {String} [key]\n     *        Google API key.\n     * @param {Function} callback\n     *        Callback function to be executed when the operation ends.\n     *\n     * @returns {void}\n     *\n     * @example\n     * geolocator.ensureGoogleLoaded(function (err) {\n     * \t   if (err) return;\n     * \t   console.log('google' in window); // true\n     * });\n     */\n    static ensureGoogleLoaded(key, callback) {\n        let k;\n        if (utils.isFunction(key)) {\n            callback = key;\n        } else {\n            k = key;\n        }\n        if (!geolocator.isGoogleLoaded()) {\n            let jsonpOpts = {\n                url: URL.GOOGLE_MAPS_API,\n                async: true,\n                callbackParam: 'callback',\n                params: {\n                    key: k || ''\n                    // callback: ''\n                },\n                rootName: 'geolocator._.cb'\n            };\n            return fetch.jsonp(jsonpOpts, callback);\n        }\n        callback();\n    }\n\n    /**\n     * Checks whether the Google Maps API is loaded.\n     *\n     * @returns {Boolean} - Returns `true` if already loaded.\n     */\n    static isGoogleLoaded() {\n        return ('google' in window) && google.maps;\n    }\n\n    /**\n     * Checks whether the type of the given object is an HTML5 `PositionError`.\n     *\n     * @param {*} obj - Object to be checked.\n     * @return {Boolean}\n     */\n    static isPositionError(obj) {\n        return utils.isPositionError(obj);\n    }\n\n    /**\n     * Checks whether the given value is an instance of `GeoError`.\n     *\n     * @param {*} obj - Object to be checked.\n     * @return {Boolean}\n     */\n    static isGeoError(obj) {\n        return GeoError.isGeoError(obj);\n    }\n\n    /**\n     * Checks whether HTML5 Geolocation API is supported.\n     *\n     * @return {Boolean}\n     */\n    static isGeolocationSupported() {\n        return navigator && ('geolocation' in navigator);\n    }\n\n    /**\n     * Converts kilometers to miles.\n     *\n     * @param {Number} km - Kilometers to be converted.\n     * @returns {Number} - Miles.\n     */\n    static kmToMi(km) {\n        return km * 0.621371;\n    }\n\n    /**\n     * Converts miles to kilometers.\n     *\n     * @param {Number} mi - Miles to be converted.\n     * @returns {Number} - Kilometers.\n     */\n    static miToKm(mi) {\n        return mi / 0.621371;\n    }\n\n    /**\n     * Converts degrees to radians.\n     *\n     * @param {Number} deg - Degrees to be converted.\n     * @returns {Number} - Radians.\n     */\n    static degToRad(degrees) {\n        return degrees * (Math.PI / 180);\n    }\n\n    /**\n     * Converts radians to degrees.\n     *\n     * @param {Number} rad - Radians to be converted.\n     * @returns {Number} - Degrees.\n     */\n    static radToDeg(radians) {\n        return radians * (180 / Math.PI);\n    }\n\n    /**\n     * Converts decimal coordinates (either lat or lng) to degrees, minutes, seconds.\n     *\n     * @param {Number} dec\n     *        Decimals to be converted.\n     * @param {Boolean} [isLng=false]\n     *        Indicates whether the given decimals is longitude.\n     *\n     * @returns {String} - Degrees, minutes, seconds.\n     */\n    static decToDegMinSec(dec, isLng = false) {\n        // Degrees Latitude must be in the range of -90. to 90.\n        // Degrees Longitude must be in the range of -180 to 180.\n        // +Latitude is North, -Latitude is South\n        // +Longitude is East, -Longitude is West\n        let sign = dec < 0 ? -1 : 1,\n            sn = dec < 0 ? 'S' : 'N',\n            we = dec < 0 ? 'W' : 'E',\n            nsew = !isLng ? sn : we,\n            absValue = Math.abs(Math.round(dec * 1000000.0));\n        return ((Math.floor(absValue / 1000000) * sign) + '° ' + Math.floor(((absValue / 1000000) - Math.floor(absValue / 1000000)) * 60) + '\\' ' +\n                (Math.floor(((((absValue / 1000000) - Math.floor(absValue / 1000000)) * 60) - Math.floor(((absValue / 1000000) - Math.floor(absValue / 1000000)) * 60)) * 100000) * 60 / 100000) + '\" ') + nsew;\n    }\n\n}\n\n// ---------------------------\n// HELPER METHODS\n// ---------------------------\n\n/**\n *  Checks the given options and determines if Google key is required.\n *  Throws if key is required but not set or valid.\n *  @private\n *\n *  @param {Object} [options]\n *         Options to be checked. If `undefined`, directly checks Googke key.\n */\nfunction checkGoogleKey(options) {\n    if (!options || (options.addressLookup || options.timezone || options.map)) {\n        if (!geolocator._.config.google.key) {\n            throw new GeoError(GeoError.Code.GOOGLE_KEY_INVALID, 'A Google API key is required but it\\'s not set or valid.');\n        }\n    }\n}\n\n/**\n *  Checks and adds necessary properties to map options from the given location\n *  result object. This is used with methods that support `map` option; to\n *  create a map from the result coordinates; such as locate() method.\n *  @private\n *\n *  @param {Object|String} options\n *         Original options object.\n *  @param {Object} location\n *         Location result object.\n *\n *  @returns {Object} - Final map options object.\n */\nfunction getMapOpts(mapOptions, location) {\n    if (utils.isObject(mapOptions)) {\n        mapOptions.center = location.coords;\n    } else {\n        mapOptions = {\n            element: mapOptions,\n            center: location.coords\n        };\n    }\n    // this will enable infoWindow\n    if (location.formattedAddress) {\n        mapOptions.title = location.formattedAddress;\n    }\n    // if location has accuracy, (and zoom is not set) we can zoom in a bit more\n    if (!mapOptions.zoom\n            && location.coords\n            && utils.isNumber(location.coords.accuracy)\n            && location.coords.accuracy < 1500) {\n        mapOptions.zoom = 15;\n    }\n    return mapOptions;\n}\n\n/**\n *  Checks the HTMLElement to see whether a previous map and related objects\n *  (marker, infoWindow) are created for it; by checking our private property\n *  `_geolocatorMapData`. If there is a map, this does not re-create it (which\n *  will break the map) but only re-adjust center, zoom and re-create the marker\n *  if needed. We use this approach bec. Google maps has no feature to destroy\n *  a map. This is considered a bug by Google developers.\n *  @private\n *\n *  @param {Object} options\n *         Options for creating a map.\n */\nfunction configCreateMap(options) {\n    let elem = options.element,\n        // when geolocator creates a map, it will set a `_geolocatorMapData`\n        // property on the element. So we can use this map instance later,\n        // when the same HTMLElement is passed to create a map. So check if\n        // we have it here.\n        mapData = elem._geolocatorMapData,\n        map = (mapData && mapData.instance) || null,\n        marker = (mapData && mapData.marker) || null,\n        infoWindow = (mapData && mapData.infoWindow) || null,\n        center = new google.maps.LatLng(options.center.latitude, options.center.longitude),\n        mapOptions = {\n            mapTypeId: options.mapTypeId,\n            center: center,\n            zoom: options.zoom\n        };\n\n    // if we have a map, we'll just configure it. otherwise, we'll create\n    // one.\n    if (map) {\n        map.setMapTypeId(mapOptions.mapTypeId);\n        map.setCenter(mapOptions.center);\n        map.setZoom(mapOptions.zoom);\n    } else {\n        map = new google.maps.Map(options.element, mapOptions);\n    }\n\n    // destroy marker and infoWindow if previously created for this element.\n    if (infoWindow) infoWindow = null;\n    if (marker && marker instanceof google.maps.Marker) {\n        google.maps.event.clearInstanceListeners(marker);\n        marker.setMap(null);\n        marker = null;\n    }\n\n    // check the new options to see if we need to re-create a marker for\n    // this.\n    if (options.marker) {\n        marker = new google.maps.Marker({\n            position: mapOptions.center,\n            map: map\n        });\n        if (options.title) {\n            infoWindow = new google.maps.InfoWindow();\n            infoWindow.setContent(options.title);\n            // infoWindow.open(map, marker);\n            google.maps.event.addListener(marker, 'click', () => {\n                infoWindow.open(map, marker);\n            });\n        }\n    }\n\n    mapData = {\n        element: elem,\n        instance: map,\n        marker: marker,\n        infoWindow: infoWindow,\n        options: mapOptions\n    };\n    // set the reference on the element for later use, if needed.\n    elem._geolocatorMapData = mapData;\n    return mapData;\n}\n\n/**\n *  Sets the `flag` property of the given location.\n *  @private\n *\n *  @param {Object} location\n */\nfunction setFlagURL(location) {\n    if (!location || !location.address) return;\n    let cc,\n        address = location.address;\n    if (utils.isString(address.countryCode) && address.countryCode.length === 2) {\n        cc = address.countryCode;\n    } else if (utils.isString(address.country) && address.country.length === 2) {\n        cc = address.country;\n    }\n    if (!cc) return;\n    location.flag = URL.FLAG + cc.toLowerCase() + '.svg';\n}\n\n/**\n *  Nests `createMap` callback within the given callback.\n *  @private\n *\n *  @param {Object} options\n *         Method options.\n *  @param {Function} callback\n *         Parent callback.\n *\n *  @returns {Function} - Nested callback.\n */\nfunction callbackMap(options, callback) {\n    return function cb(err, location) {\n        if (err) return callback(GeoError.create(err), null);\n        setFlagURL(location);\n        if (!options.map) return callback(null, location);\n        options.map = getMapOpts(options.map, location);\n        geolocator.createMap(options.map, (error, map) => {\n            if (error) return callback(error, null);\n            location.map = map;\n            return callback(null, location);\n        });\n    };\n}\n\n/**\n *  Runs both an address and a timezone look-up for the given location.\n *  @private\n *\n *  @param {Object} location\n *         Location object.\n *  @param {Object} options\n *         Method options.\n *  @param {Function} callback\n *         Parent callback.\n */\nfunction fetchAddressAndTimezone(location, options, callback) {\n    let loc = utils.clone(location, { own: false });\n    if (!options.addressLookup && !options.timezone) {\n        return callback(null, loc);\n    }\n    function getTZ(cb) {\n        geolocator.getTimeZone(loc.coords, (err, timezone) => {\n            if (err) {\n                return cb(err, null);\n            }\n            delete timezone.timestamp;\n            loc.timezone = timezone;\n            loc.timestamp = utils.time(); // update timestamp\n            cb(null, loc);\n        });\n    }\n    if (options.addressLookup) {\n        geolocator.reverseGeocode(loc.coords, (err, result) => {\n            if (err) return callback(err, null);\n            loc = utils.extend({}, result, loc);\n            loc.address = result.address;\n            loc.timestamp = utils.time(); // update timestamp\n            if (!options.timezone) {\n                callback(err, loc);\n            } else {\n                getTZ(callback);\n            }\n        });\n    } else if (options.timezone) {\n        getTZ(callback);\n    } else {\n        callback(null, loc);\n    }\n}\n\n/**\n *  Gets the position with better accuracy.\n *  See https://github.com/gwilson/getAccurateCurrentPosition#background\n *  @private\n *\n *  @param {Object} options\n *         Locate options.\n *  @param {Function} onPositionReceived\n *         Success callback.\n *  @param {Function} onPositionError\n *         Error callback.\n */\nfunction locateAccurate(options, onPositionReceived, onPositionError) {\n    let loc, watcher;\n\n    function complete() {\n        if (!loc) {\n            onPositionError(new GeoError(GeoError.Code.POSITION_UNAVAILABLE));\n        } else {\n            onPositionReceived(loc);\n        }\n    }\n\n    watcher = geolocator.watch(options, (err, location) => {\n        if (err) {\n            return watcher.clear(() => {\n                onPositionError(err);\n            });\n        }\n        if (!loc || (location.coords.accuracy <= loc.coords.accuracy)) {\n            loc = location;\n        }\n        // ignore the first event if not the only result; for more accuracy.\n        if ((watcher.cycle > 1) && (loc.coords.accuracy <= options.desiredAccuracy)) {\n            watcher.clear(complete);\n        }\n    });\n    watcher.clear(options.timeout, complete);\n}\n\n// ---------------------------\n// INITIALIZE\n// ---------------------------\n\n/**\n *  @private\n *  @type {Object}\n */\ngeolocator._ = {\n    config: utils.extend({}, defaultConfig),\n    // Storage for global callbacks.\n    cb: {}\n};\n\n// setting default Geo-IP source, Wikimedia\ngeolocator.setGeoIPSource({\n    provider: 'wikimedia',\n    url: 'https://bits.wikimedia.org/geoiplookup',\n    callbackParam: null,\n    globalVar: 'Geo',\n    schema: {\n        ip: 'IP',\n        coords: {\n            latitude: 'lat',\n            longitude: 'lon'\n        },\n        address: {\n            city: 'city',\n            state: 'region',\n            stateCode: 'region',\n            postalCode: '',\n            countryCode: 'country',\n            country: 'country',\n            region: 'region'\n        }\n    }\n});\n\n// ---------------------------\n// EXPORT\n// ---------------------------\n\nexport default geolocator;\n\n// ---------------------------\n// ADDITIONAL DOCUMENTATION\n// ---------------------------\n\n/**\n *  Specifies the geographic location of the device. The location is expressed\n *  as a set of geographic coordinates together with information about heading\n *  and speed.\n *\n *  @typedef geolocator~Coordinates\n *  @type Object\n *\n *  @property {Number} latitude\n *         Specifies the latitude estimate in decimal degrees. The value\n *         range is [-90.00, +90.00].\n *  @property {Number} longitude\n *         Specifies the longitude estimate in decimal degrees. The value\n *         range is [-180.00, +180.00].\n *  @property {Number} altitude\n *         Specifies the altitude estimate in meters above the WGS 84\n *         ellipsoid.\n *  @property {Number} accuracy\n *         Specifies the accuracy of the latitude and longitude estimates in\n *         meters.\n *  @property {Number} altitudeAccuracy\n *         Specifies the accuracy of the altitude estimate in meters.\n *  @property {Number} heading\n *         Specifies the device's current direction of movement in degrees\n *         counting clockwise relative to true north.\n *  @property {Number} speed\n *         Specifies the device's current ground speed in meters per second.\n */\n\n/**\n *\tSpecifies the address of the fetched location. The address is expressed\n *\tas a set of political and locality components.\n *\n *  @typedef geolocator~Address\n *  @type Object\n *\n *  @property {String} commonName\n *         Indicates a point of interest, a premise or colloquial area name for\n *         the fetched location, if any.\n *  @property {String} streetNumber\n *         Indicates the precise street number of the fetched location, if any.\n *  @property {String} street\n *         Indicates the street name of the fetched location, if any.\n *  @property {String} route\n *         Indicates the route name of the fetched location, if any.\n *  @property {String} neighborhood\n *         Indicates the neighborhood name of the fetched location, if any.\n *  @property {String} town\n *         Indictes the town of the fetched location, if any.\n *  @property {String} city\n *         Indicates the city of the fetched location.\n *  @property {String} region\n *         Indicates the political region name of the fetched location, if any.\n *  @property {String} postalCode\n *         Indicates the postal code of the fetched location, if any.\n *  @property {String} state\n *         Indicates the state of the fetched location, if any.\n *  @property {String} stateCode\n *         Indicates the state code of the fetched location, if any.\n *  @property {String} country\n *         Indicates the national political entity of the fetched location.\n *  @property {String} countryCode\n *         Indicates the ISO alpha-2 country code of the fetched location.\n */\n\n/**\n *\tSpecifies time offset data for the fetched location on the surface of the\n *\tearth.\n *\n *  @typedef geolocator~TimeZone\n *  @type Object\n *\n *  @property {String} id\n *         The ID of the time zone, such as `\"America/Los_Angeles\"` or\n *         `\"Australia/Sydney\"`. These IDs are defined in the\n *         {@link http://www.iana.org/time-zones|IANA Time Zone Database},\n *         which is also available in searchable format in Wikipedia's\n *         {@link http://en.wikipedia.org/wiki/List_of_tz_database_time_zones|List of tz database time zones}.\n *  @property {String} name\n *         The long form name of the time zone. This field will be localized if\n *         the Geolocator `language` is configured. e.g. `\"Pacific Daylight Time\"`\n *         or `\"Australian Eastern Daylight Time\"`.\n *  @property {String} abbr\n *         The abbreviation of the time zone.\n *  @property {Number} dstOffset\n *         The offset for daylight-savings time in seconds. This will be zero\n *         if the time zone is not in Daylight Savings Time during the specified\n *         timestamp.\n *  @property {Number} rawOffset\n *         The offset from UTC (in seconds) for the given location. This does\n *         not take into effect daylight savings.\n */\n\n/**\n *\tProvides references to the components of a created Google Maps `Map` and\n *\tthe containing DOM element.\n *\n *  @typedef geolocator~MapData\n *  @type Object\n *\n *  @property {HTMLElement} element\n *         DOM element which a (Google) map is created within.\n *  @property {google.maps.Map} instance\n *         Instance of a Google Maps `Map` object.\n *  @property {google.maps.Marker} marker\n *         Instance of a Google Maps `Marker` object, if any.\n *  @property {google.maps.InfoWindow} infoWindow\n *         Instance of a Google Maps `InfoWindow` object, if any.\n *  @property {Object} options\n *         Arbitrary object of applied map options.\n */\n\n/**\n *\tSpecifies geographic coordinates, address and time zone information\n *\tfor the fetched location.\n *\n *  This result object is passed to the callbacks of the corresponding\n *  asynchronous Geolocator methods, as the second argument. The contents of\n *  this object will differ for various Geolocator methods, depending on the\n *  configured method options.\n *\n *  @typedef geolocator~Location\n *  @type Object\n *\n *  @property {Coordinates} coords\n *         Specifies the geographic location of the device. The location is\n *         expressed as a set of geographic coordinates together with\n *         information about heading and speed.\n *         See {@link #geolocator~Coordinates|`geolocator~Coordinates` type}\n *         for details.\n *  @property {Address} address\n *         Specifies the address of the fetched location. The address is\n *         expressed as a set of political and locality components.\n *         This property might be `undefined` if `addressLookup` option is not\n *         enabled for the corresponding method.\n *         See {@link #geolocator~Address|`geolocator~Address` type}\n *         for details.\n *  @property {String} formattedAddress\n *         The human-readable address of this location. Often this address is\n *         equivalent to the \"postal address,\" which sometimes differs from\n *         country to country.\n *  @property {Boolean} targetReached\n *         Specifies whether the defined target coordinates is reached.\n *         This property is only available for\n *         {@link #geolocator.watch|`geolocator.watch()`} method when `target`\n *         option is defined.\n *  @property {String} type\n *         Type of the location. See\n *         {@link #geolcoator.LocationType|`geolcoator.LocationType` enumeration}\n *         for details.\n *  @property {String} placeId\n *         A unique identifier that can be used with other Google APIs.\n *  @property {String} flag\n *         URL of the country flag image, in SVG format. This property exists\n *         only if address information is available.\n *  @property {TimeZone} timezone\n *         Specifies time offset data for the fetched location on the surface of\n *         the earth. See {@link #geolocator~TimeZone|`geolocator~TimeZone` type}\n *         for details.\n *  @property {MapData} map\n *         Provides references to the components of a created Google Maps `Map`\n *         and the containing DOM element. See\n *         {@link #geolocator~MapData|`geolocator~MapData` type} for details.\n *  @property {Number} timestamp\n *         Specifies the time when the location information was retrieved and\n *         the `Location` object created.\n */\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/geolocator.js\n **/","\nlet _toString = Object.prototype.toString;\n\n/**\n * Simple utility methods; internally used within Geolocator core;\n * made publically accessible.\n * @type {Object}\n * @readonly\n *\n * @license MIT\n * @copyright 2016, Onur Yıldırım (onur@cutepilot.com)\n */\nconst utils = {\n\n    noop() {},\n\n    // ---------------------------\n    // Validation\n    // ---------------------------\n\n    /**\n     * Checks if the type of the given value is `String`.\n     * @memberof utils\n     *\n     * @param {*} value - Value to be checked.\n     * @returns {Boolean}\n     */\n    isString(value) {\n        return typeof value === 'string';\n    },\n\n    isStringSet(value) {\n        return typeof value === 'string' && value.trim().length > 0;\n    },\n\n    /**\n     * Checks if the type of the given value is `Number`.\n     * @memberof utils\n     *\n     * @param {*} value - Value to be checked.\n     * @returns {Boolean}\n     */\n    isNumber(value) {\n        return typeof value === 'number';\n    },\n\n    /**\n     * Checks if the type of the given value is an `Object` or `Function`.\n     * @memberof utils\n     *\n     * @param {*} value - Value to be checked.\n     * @returns {Boolean}\n     */\n    isObject(value) {\n        let type = typeof value;\n        return Boolean(value) && (type === 'object' || type === 'function');\n    },\n\n    /**\n     * Checks if the type of the given value is `Function`.\n     * @memberof utils\n     *\n     * @param {*} value - Value to be checked.\n     * @returns {Boolean}\n     */\n    isFunction(value) {\n        return typeof value === 'function';\n    },\n\n    /**\n     * Checks if the type of the given value is `Array`.\n     * @memberof utils\n     *\n     * @param {*} value - Value to be checked.\n     * @returns {Boolean}\n     */\n    isArray(value) {\n        return Boolean(value) && _toString.call(value) === '[object Array]';\n    },\n\n    /**\n     * Checks if the given value is a plain `Object`.\n     * @memberof utils\n     *\n     * @param {*} value - Value to be checked.\n     * @returns {Boolean}\n     */\n    isPlainObject(value) {\n        return Boolean(value)\n            && typeof value === 'object'\n            && _toString.call(value) === '[object Object]';\n    },\n\n    /**\n     * Checks if the given value is a `Date`.\n     * @memberof utils\n     *\n     * @param {*} value - Value to be checked.\n     * @returns {Boolean}\n     */\n    isDate(value) {\n        return Boolean(value) && _toString.call(value) === '[object Date]';\n    },\n\n    /**\n     * Checks if the given object is a DOM element.\n     * @memberof utils\n     *\n     * @param {Object} object - Object to be checked.\n     * @returns {Boolean}\n     */\n    isElement(object) {\n        if (!object) return false;\n        return object instanceof HTMLElement\n            || (typeof object === 'object' && object.nodeType === 1);\n    },\n\n    /**\n     * Checks if the given object is a DOM node.\n     * @memberof utils\n     *\n     * @param {Object} object - Object to be checked.\n     * @returns {Boolean}\n     */\n    isNode(object) {\n        if (!object) return false;\n        return object instanceof Node\n            || (typeof object === 'object' && typeof object.nodeType === 'number');\n    },\n\n    /**\n     * Checks if the given object is a jQuery instance.\n     * This will still return `false` if the jQuery instance has no items.\n     * @memberof utils\n     *\n     * @param {Object} object - Object to be checked.\n     * @returns {Boolean}\n     */\n    isJQueryObject(object) {\n        if (!object) return false;\n        return ('jQuery' in window && object instanceof window.jQuery && Boolean(object[0]));\n            // http://api.jquery.com/jquery-2/\n            // || (typeof object === 'object' && Boolean(object.jquery));\n    },\n\n    /**\n     * Checks if the type of the given value is an HTML5 `PositionError`.\n     * @memberof utils\n     *\n     * @param {*} value - Value to be checked.\n     * @returns {Boolean}\n     */\n    isPositionError(value) {\n        return Boolean(value) && _toString.call(value) === '[object PositionError]';\n    },\n\n    /**\n     * Checks if the given value is an instance of `Error` or HTML5 `PositionError`.\n     * @memberof utils\n     *\n     * @param {*} value - Value to be checked.\n     * @returns {Boolean}\n     */\n    isError(value) {\n        return (value instanceof Error) || utils.isPositionError(value);\n    },\n\n    // ---------------------------\n    // String\n    // ---------------------------\n\n    /**\n     * Removes the query string portion from the given URL string.\n     * @memberof utils\n     *\n     * @param {String} str - String to be processed.\n     * @returns {String} - Returns the rest of the string.\n     */\n    removeQuery(str) {\n        return str.replace(/\\?.*$/, '');\n    },\n\n    /**\n     * Removes the protocol portion from the given URL string.\n     * @memberof utils\n     *\n     * @param {String} str - String to be processed.\n     * @returns {String} - Returns the rest of the string.\n     */\n    removeProtocol(str) {\n        return str.replace(/^(.*:)?\\/\\//, '');\n    },\n\n    /**\n     * Sets the protocol of the given URL.\n     * @memberof utils\n     *\n     * @param {String} url - The URL to be modified.\n     * @param {Boolean} https - Optional. Default: `undefined`\n     * Specifies whether to set the protocol to HTTPS.\n     * If omitted, current page protocol will be used.\n     * @returns {String} - The modified URL string.\n     */\n    setProtocol(url, https) {\n        let p;\n        if (https === undefined || https === null) {\n            p = window.location.protocol;\n        } else {\n            p = https ? 'https:' : 'http:';\n        }\n        url = utils.removeProtocol(url);\n        return `${p}//${url}`;\n    },\n\n    /**\n     * Removes both the leading and trailing dots from the given string.\n     * @memberof utils\n     *\n     * @param {String} str - String to be processed.\n     * @returns {String} - Returns the rest of the string.\n     */\n    trimDots(str) {\n        return str.replace(/^\\.+?(.*?)\\.+?$/g, '$1');\n    },\n\n    /**\n     * URL-Encodes the given string. Note that the encoding is done Google's\n     * way; that is, spaces are replaced with `+` instead of `%20`.\n     * @memberof utils\n     *\n     * @param {String} str - String to be processed.\n     * @returns {String} - Returns the encoded string.\n     */\n    encodeURI(str) {\n        return encodeURIComponent(str).replace(/%20/g, '+');\n    },\n\n    /**\n     * URL-Decodes the given string. This is the reverse of `utils.encodeURI()`;\n     * so pluses (`+`) are replaced with spaces.\n     * @memberof utils\n     *\n     * @param {String} str - String to be processed.\n     * @returns {String} - Returns the decoded string.\n     */\n    decodeURI(str) {\n        return decodeURIComponent(str.replace(/\\+/g, '%20'));\n    },\n\n    /**\n     * Converts the given value to string.\n     * null and undefined converts to empty string.\n     * If value is a function, it's native `toString()` method is used.\n     * Otherwise, value is coerced.\n     * @memberof utils\n     *\n     * @param {*} value - String to be converted.\n     * @returns {String} - Returns the result string.\n     */\n    toString(value) {\n        if (value === null || value === undefined) return '';\n        if (value.toString && utils.isFunction(value.toString)) {\n            return value.toString();\n        }\n        return String(value);\n    },\n\n    /**\n     * Generates a random string with the number of characters.\n     * @memberof utils\n     *\n     * @param {Number} len - Optional. Default: `1`.\n     * Length of the string.\n     * @returns {String} - Returns a random string.\n     */\n    randomString(len) {\n        if (!len || !utils.isNumber(len)) len = 1;\n        len = -Math.abs(len);\n        return Math.random().toString(36).slice(len);\n    },\n\n    /**\n     * Gets the abbreviation of the given phrase.\n     * @memberof utils\n     *\n     * @param {String} str - String to abbreviate.\n     * @param {Object} options - Abbreviation options.\n     *     @param {Boolean} options.upper - Whether to convert to upper-case.\n     *     @param {Boolean} options.dots - Whether to add dots after each abbreviation.\n     *\n     * @returns {String} - Returns the abbreviation of the given phrase.\n     */\n    abbr(str, options) {\n        options = utils.extend({\n            upper: true,\n            dots: true\n        }, options);\n        let d = options.dots ? '.' : '',\n            s = str.match(/(\\b\\w)/gi).join(d) + d;\n        return options.upper ? s.toUpperCase() : s;\n    },\n\n    /**\n     * Builds URI parameters from the given object.\n     * Note: This does not iterate deep objects.\n     * @memberof utils\n     *\n     * @param {Object} obj - Object to be processed.\n     * @param {Object} options - Parameterize options.\n     *     @param {Boolean} options.encode - Optional. Default: `true`.\n     *     Whether to encode URI components.\n     *     @param {String} options.operator - Optional. Default: `\"=\"`.\n     *     @param {String} options.separator - Optional. Default: `\"&\"`.\n     *     @param {Array} options.include - Optional. Default: `undefined`.\n     *     Keys to be included in the output params. If defined,\n     *     `options.exclude` is ignored.\n     *     @param {Array} options.exclude - Optional. Default: `undefined`.\n     *     Keys to be excluded from the output params.\n     *\n     * @returns {String} - URI parameters string.\n     */\n    params(obj, options) {\n        if (!utils.isPlainObject(obj) || Object.keys(obj).length === 0) {\n            return '';\n        }\n\n        options = utils.extend({\n            encode: true,\n            operator: '=',\n            separator: '&',\n            include: undefined,\n            exclude: undefined\n        }, options);\n\n        let params = [],\n            inc = utils.isArray(options.include) ? options.include : null,\n            exc = !inc && utils.isArray(options.exclude) ? options.exclude : null;\n        utils.forIn(obj, (value, key) => {\n            if ((!inc || inc.indexOf(key) >= 0)\n                    && (!exc || exc.indexOf(key) < 0)) {\n                let v = utils.toString(value);\n                v = options.encode ? utils.encodeURI(v) : v;\n                let k = options.encode ? utils.encodeURI(key) : key;\n                params.push(k + options.operator + v);\n            }\n        });\n\n        return params.join(options.separator);\n    },\n\n    /**\n     * Gets the object from the given object notation string.\n     * @private\n     *\n     * @param {String} notation - Object notation.\n     * @returns {*} - Any existing object.\n     */\n    notateGlobalObj(notation) {\n        notation = utils.trimDots(notation);\n        let levels = notation.split('.'),\n            o = window;\n        if (levels[0] === 'window' || levels[0] === 'document') {\n            levels.shift();\n        }\n        levels.forEach(note => {\n            o = o[note];\n        });\n        return o;\n    },\n\n    // ---------------------------\n    // Object\n    // ---------------------------\n\n    /**\n     * Iterates over own properties of an object invoking a callback for each\n     * property.\n     * @memberof utils\n     *\n     * @param {Object} obj - Object to be processed.\n     * @param {Function} callback - Callback function with the following\n     * signature: `function (value, key, object) { ... }`.\n     * Explicitly returning `false` will exit the iteration early.\n     * @returns {void}\n     */\n    forIn(obj, callback) {\n        let k;\n        for (k in obj) {\n            // if (obj.hasOwnProperty(k)) {} // Do this inside callback if needed.\n            if (callback(obj[k], k, obj) === false) break;\n        }\n    },\n\n    /**\n     * Extends the given object with the specified sources.\n     * Right most source overwrites the previous.\n     * NOTE: This is not a full implementation. Use with caution.\n     * @memberof utils\n     *\n     * @param {Object} destination - Destionation Object that will be extended\n     * and holds the default values.\n     * @param {...Object} sources - Source objects to be merged.\n     * @returns {Object} - Returns the extended object.\n     */\n    extend(destination, ...sources) {\n        if (!utils.isObject(destination)) return {};\n        let key, value;\n        sources.forEach(source => {\n            for (key in source) { // eslint-disable-line\n                value = source[key];\n                if (utils.isArray(value)) {\n                    destination[key] = value.concat();\n                } else if (utils.isDate(value)) {\n                    destination[key] = new Date(value);\n                } else if (utils.isObject(value)) {\n                    destination[key] = utils.extend({}, value);\n                } else {\n                    destination[key] = value;\n                }\n            }\n        });\n        return destination;\n    },\n\n    /**\n     * Clones the given object.\n     * NOTE: This is not a full implementation. Use with caution.\n     * @memberof utils\n     *\n     * @param {Object} obj - Target Object to be cloned.\n     * @param {Object|Array} options - Optional. Clone options or array of keys\n     * to be cloned.\n     *     @param {Array} options.keys - Optional. Default: `undefined`.\n     *     Keys of the properties to be cloned.\n     *     @param {Boolean} options.own - Optional. Default: `true`.\n     *     Whether to clone own properties only. This is only effective if\n     *     `keys` is not defined.\n     * @returns {Object} - Returns the cloned object.\n     */\n    clone(obj, options) {\n        if (!obj) return {};\n\n        if (utils.isArray(options)) {\n            options = { keys: options };\n        }\n        options = utils.extend({\n            keys: null,\n            own: true\n        }, options);\n\n        let include,\n            cloned = {};\n\n        utils.forIn(obj, (value, key) => {\n            include = options.keys\n                ? options.keys.indexOf(key) >= 0\n                : (options.own && obj.hasOwnProperty(key)) || !options.own;\n            if (include) {\n                if (utils.isObject(value)) {\n                    cloned[key] = utils.clone(value, options);\n                } else {\n                    cloned[key] = value;\n                }\n            }\n        });\n        return cloned;\n    },\n\n    /**\n     *  Maps the values of the given object to a schema to re-structure a new\n     *  object.\n     *  @memberof utils\n     *\n     *  @param {Object} obj - Original object to be mapped.\n     *  @param {Object} schema - Schema to be used to map the object.\n     *  @returns {Object} - Mapped object.\n     */\n    mapToSchema(obj, schema) {\n        let mapped = {};\n        utils.forIn(schema, (value, key) => {\n            if (utils.isPlainObject(value)) {\n                // TODO: dot notation in schema values???\n                mapped[key] = utils.mapToSchema(obj, value);\n            } else {\n                mapped[key] = obj[value];\n            }\n        });\n        return mapped;\n    },\n\n    // ---------------------------\n    // Misc\n    // ---------------------------\n\n    /**\n     * Safely parses the given JSON `String` into an `Object`.\n     * The only difference from `JSON.parse()` is that this method does not\n     * throw for invalid input. Instead, returns `null`.\n     * @memberof utils\n     *\n     * @param {String} str - JSON string to be parsed\n     * @returns {Object|null} - Returns the parsed `Object` or `null` if the\n     * input is invalid.\n     */\n    safeJsonParse(str) {\n        let o = null;\n        try {\n            o = JSON.parse(str);\n        } catch (e) {}\n        return o;\n    },\n\n    /**\n     * Gets a timestamp that is seconds or milliseconds since midnight,\n     * January 1, 1970 UTC.\n     * @memberof utils\n     *\n     * @param {Boolean} seconds - Optional. Default: `false`.\n     * Specifies whether seconds should be returned instead of milliseconds.\n     * @returns {Number} - Returns seconds or milliseconds since midnight,\n     * January 1, 1970 UTC.\n     */\n    time(seconds) {\n        let ts = Date.now();\n        return seconds ? parseInt(ts / 1000, 10) : ts;\n    }\n\n};\n\nexport default utils;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/utils.js\n **/","import utils from './utils';\n\n/**\n * Utility for making `XMLHttpRequest` and `JSONP` requests.\n *\n * @license MIT\n * @copyright 2016, Onur Yıldırım (onur@cutepilot.com)\n */\nclass fetch {\n\n    // https://html.spec.whatwg.org/multipage/scripting.html#script\n\n    /**\n     * Makes a JSONP (GET) request by injecting a script tag in the browser.\n     * Note that using JSONP has some security implications. As JSONP is really\n     * javascript, it can do everything else javascript can do, so you need to\n     * trust the provider of the JSONP data.\n     * @see https://en.wikipedia.org/wiki/JSONP\n     * @memberof fetch\n     *\n     * @param {Object|String} options - Required. Either the URL string which\n     *     will set other options to defaults or an options object with the\n     *     following properties.\n     *     @param {String} options.url - Required. Source URL to be called.\n     *     @param {String} options.type - Optional. Default: `undefined`.\n     *     The MIME type that identifies the scripting language of the code\n     *     referenced within the script element. e.g. `\"text/javascript\"`\n     *     @param {String} options.charset - Optional. Default: `undefined`.\n     *     Indicates the character encoding of the external resource. e.g. `\"utf-8\"`.\n     *     @param {Boolean} options.async - Optional. Default: `true`.\n     *     Indicates whether or not to perform the operation asynchronously.\n     *     See {@link http://caniuse.com/#feat=script-async|browser support}.\n     *     @param {Boolean} options.defer - Optional. Default: `false`.\n     *     Indicates whether the script should be executed when the page has\n     *     finished parsing. See {@link http://caniuse.com/#feat=script-defer|browser support}.\n     *     @param {String} options.crossorigin - Optional. Default: `undefined`.\n     *     Indicates the CORS setting for the script element being injected.\n     *     Note that this attribute is not widely supported.\n     *     Valid values: `\"anonymous\"`, `\"use-credentials\"`.\n     *     See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes|CORS settings}.\n     *     @param {Number} options.timeout - Optional. Default: `0` (no timeout).\n     *     The number of milliseconds a request can take before automatically\n     *     being terminated.\n     *     @param {Boolean} options.clean - Optional. Default: `false`.\n     *     Whether to remove the loaded script from DOM when the operation ends.\n     *     Note that the initial source might load additional sources which are\n     *     not deteceted or removed. Only the initial source is removed.\n     *     @param {Object} options.params - Optional. Default: `undefined`.\n     *     Optional query parameters to be appended at the end of the URL.\n     *     e.g. `{ key: \"MY-KEY\" }`\n     *     You can also include the JSONP callback name parameter here but\n     *     if you want the object to be passed to the callback argument of this\n     *     method, use `options.callbackParam` to set the callback parameter.\n     *     @param {String} options.callbackParam - Optional. Default: `undefined`.\n     *     If the endpoint supports JSONP callbacks, you can set the callback\n     *     parameter with this setting. This will enable a second `obj` argument\n     *     in the callback of this method which is useful if the JSONP source\n     *     invokes the callback with an argument.\n     *     @param {String} options.rootName - Optional. Default: `undefined`.\n     *     The name (or notation) of the object that the generated JSONP\n     *     callback function should be assigned to. By default, this is the\n     *     `window` object but you can set this to a custom object notation;\n     *     for example, to prevent global namespace polution. Note that this\n     *     root object has to be globally accessible for this to work.\n     *     e.g. `\"window.myObject\"` (as string)\n     * @param {Function} callback - Optional. The callback function that will be\n     * executed when the script is loaded. This callback has the following\n     * signature: `function (err, obj) { ... }`. Note that the second argument\n     * `obj` will always be `undefined` if the source endpoint does not support\n     * JSONP callbacks or a callback param is not set explicitly via\n     * `options.callbackParam` (or if the source does not invoke the jsonp with an\n     * argument). However, the function will always execute when the script\n     * loads or an error occurs.\n     *\n     * @returns {void}\n     *\n     * @example\n     * var opts1 = {\n     * \turl: 'some/api',\n     * \tcallbackParam: 'jsonCallback',\n     * \tparams: { key: 'MY-KEY' }\n     * };\n     * // This will load the following source:\n     * // some/api?jsonCallback={auto-generated-fn-name}&key=MY-KEY\n     * fetch.jsonp(opts1, function (err, obj) {\n     * \tconsole.log(obj); // some object\n     * });\n     *\n     * var opts2 = {\n     * \turl: 'some/api',\n     * \tparams: {\n     * \t\tkey: 'MY-KEY',\n     * \t\tjsonCallback: 'my-fn-name'\n     * \t}\n     * };\n     * // This will load the following source:\n     * // some/api?jsonCallback=my-fn-name&key=MY-KEY\n     * fetch.jsonp(options, function (err, obj) {\n     * \tconsole.log(obj); // undefined\n     * \t// still executes, catch errors here\n     * });\n     * // JSON callback should be explicitly set.\n     * window['my-fn-name'] = function (obj) {\n     * \tconsole.log(obj); // some object\n     * };\n     */\n    static jsonp(options, callback) {\n        let timeout;\n\n        callback = utils.isFunction(callback)\n            ? callback\n            : utils.noop;\n\n        if (utils.isString(options)) {\n            options = { url: options };\n        }\n\n        if (utils.isPlainObject(options)) {\n            options = utils.extend({\n                // type: undefined,\n                async: true,\n                defer: false,\n                // crossorigin: undefined,\n                timeout: 0,\n                params: {},\n                // callbackParam: undefined,\n                // rootName: undefined,\n                clean: true\n            }, options);\n        } else {\n            return callback(new Error('No options or target URL is provided.'));\n        }\n\n        if (utils.isString(options.url) === false || options.url.trim() === '') {\n            return callback(new Error('No target URL is provided.'));\n        }\n\n        let script = document.createElement('script'),\n            cbParamSet = utils.isString(options.callbackParam)\n                && options.callbackParam.trim() !== '',\n            cbFnName,\n            root,\n            rootNameSet = utils.isString(options.rootName)\n                && options.rootName !== 'window'\n                && options.rootName !== 'document'\n                && options.rootName.trim() !== '';\n\n        if (cbParamSet) {\n            cbFnName = '_jsonp_' + utils.randomString(10);\n            options.params[options.callbackParam] = rootNameSet\n                ? `${options.rootName}.${cbFnName}`\n                : cbFnName;\n        }\n        let query = utils.params(options.params) || '',\n            qMark = options.url.indexOf('?') >= 0 ? '&' : '?',\n            url = query ? `${options.url}${qMark}${query}` : options.url;\n        // console.log(url);\n\n        function execCb(err, timeUp, obj) {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n            if ((timeUp || options.clean) && script.parentNode) {\n                script.parentNode.removeChild(script);\n            }\n            // delete the jsonp callback function\n            if (rootNameSet) {\n                delete root[cbFnName];\n            }\n            callback(err, obj);\n        }\n\n        if (cbFnName) {\n            let fn = obj => {\n                execCb(null, false, obj);\n            };\n            root = rootNameSet\n                // ? window[options.rootName][cbFnName] = fn;\n                ? utils.notateGlobalObj(options.rootName) // if rootName is dot-notation.\n                : window;\n            root[cbFnName] = fn;\n        } else if (script.readyState) { // IE < 11\n            script.onreadystatechange = () => {\n                if (script.readyState === 'loaded'\n                        || script.readyState === 'complete') {\n                    script.onreadystatechange = null;\n                    execCb(null);\n                }\n            };\n        } else { // IE 11+\n            script.onload = () => {\n                execCb(null);\n            };\n        }\n\n        script.onerror = error => {\n            let errMsg = 'Could not load source at ' + utils.removeQuery(options.url);\n            if (error) {\n                errMsg += '\\n' + (error.message || error);\n            }\n            execCb(new Error(errMsg));\n        };\n\n        if (options.type) {\n            script.type = options.type;\n        }\n        if (options.charset) {\n            script.charset = options.charset;\n        }\n        if (options.async) {\n            script.async = true;\n        }\n        if (options.defer) {\n            script.defer = true;\n        }\n        if (options.crossorigin) {\n            script.crossorigin = options.crossorigin;\n        }\n\n        script.src = url;\n        document.getElementsByTagName('head')[0].appendChild(script);\n\n        // Timeout\n        if (utils.isNumber(options.timeout) && options.timeout > 0) {\n            timeout = setTimeout(() => {\n                script.src = '';\n                execCb(new Error('Operation timed out.'), true);\n            }, options.timeout);\n        }\n    }\n\n    /**\n     * Makes an XMLHttpRequest with the given parameters.\n     * Note that `\"Access-Control-Allow-Origin\"` header should be present on\n     * the requested resource. Otherwise, the request will not be allowed.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest|XMLHttpRequest}.\n     * @memberof fetch\n     *\n     * @param {Object|String} options - Required. Either the URL string which\n     *     will set other options to defaults or the full options object.\n     *     @param {String} options.url - Required. Target URL to be called.\n     *     @param {String} options.method - Default: `\"GET\"`. HTTP method.\n     *     @param {*} options.data - Optional. Default: `undefined`.\n     *     Data to be sent with the request, if the HTTP method is set to \"POST\".\n     *     @param {Number} options.timeout - Optional. Default: `0` (no timeout).\n     *     The number of milliseconds a request can take before automatically\n     *     being terminated.\n     *     @param {Boolean} options.withCredentials - Optional. Default: `false`.\n     *     Indicates whether or not cross-site Access-Control requests should\n     *     be made using credentials such as cookies or authorization headers.\n     *     @param {Boolean} options.async - Optional. Default: `true`.\n     *     Indicating whether or not to perform the operation asynchronously.\n     *     If this value is false, the `send()` method does not return until\n     *     the response is received. If `true`, notification of a completed\n     *     transaction is provided using event listeners. This must be `true`\n     *     if the multipart attribute is `true`, or an exception will be thrown.\n     *     @param {String} options.mimeType - Optional. Default: `undefined`.\n     *     If set, overrides the MIME type returned by the server. This may be\n     *     used, for example, to force a stream to be treated and parsed as\n     *     `text/xml`, even if the server does not report it as such.\n     *     @param {Object} options.headers - Optional. Default: `undefined`.\n     *     Sets the HTTP request headers. Each key should be a header name\n     *     with a value. e.g. `{ 'Content-Length': 50 }`. For security reasons,\n     *     some headers cannot be set and can only be controlled by the user agent.\n     *     @param {String} options.username - Optional. Default: `\"\"`.\n     *     User name to use for authentication purposes.\n     *     @param {String} options.password - Optional. Default: `\"\"`.\n     *     Password to use for authentication purposes.\n     * @param {Function} callback - Optional. The callback function in the\n     *     following signature: `function (err, xhr) { ... }`\n     *     Note that `xhr` object is always passed regardless of an error.\n     *\n     * @returns {void}\n     */\n    static xhr(options, callback) {\n        let xhr, err;\n\n        if ('XMLHttpRequest' in window) {\n            xhr = new XMLHttpRequest();\n        } else {\n            throw new Error('XMLHttpRequest is not supported!');\n        }\n\n        let hasCallback = utils.isFunction(callback);\n        callback = hasCallback\n            ? callback\n            : utils.noop;\n\n        if (utils.isString(options)) {\n            options = { url: options };\n        }\n\n        if (utils.isPlainObject(options)) {\n            options = utils.extend({\n                method: 'GET',\n                data: undefined,\n                async: true,\n                timeout: 0, // no timeout\n                withCredentials: false,\n                mimeType: undefined,\n                username: '',\n                password: ''\n            }, options);\n        } else {\n            callback(new Error('No options or target URL is provided.'));\n        }\n\n        if (utils.isString(options.url) === false) {\n            callback(new Error('No target URL is provided.'));\n        }\n\n        options.username = String(options.username);\n        options.password = String(options.password);\n        options.method = options.method.toUpperCase();\n        if (options.method !== 'POST' && options.method !== 'PUT') {\n            options.data = undefined;\n        }\n        // console.log(JSON.stringify(options));\n\n        if (hasCallback) {\n            xhr.onreadystatechange = () => {\n                if (xhr.readyState === fetch.XHR_READY_STATE.DONE) {\n                    if (xhr.status === 200) {\n                        callback(null, xhr);\n                    } else {\n                        // let response = utils.safeJsonParse(xhr.responseText);\n                        // if (response && response.error)\n                        let crossDomain = xhr.status === 0\n                            ? '. Make sure you have permission if this is a cross-domain request.'\n                            : '';\n                        err = new Error(`The request returned status: ${xhr.status}${crossDomain}`);\n                        // console.log(xhr);\n                        callback(err, xhr);\n                    }\n                }\n            };\n\n            if (utils.isNumber(options.timeout) && options.timeout > 0) {\n                xhr.timeout = options.timeout;\n                xhr.ontimeout = () => {\n                    // xhr.abort();\n                    err = new Error('The request had timed out.');\n                    callback(err, xhr);\n                };\n            }\n        }\n        // console.log(options);\n        xhr.open(options.method, options.url, options.async, options.username, options.password);\n\n        // xhr.setRequestHeader() method should b called œafter open(), but\n        // before send().\n        if (utils.isPlainObject(options.headers)) {\n            Object.keys(options.headers).forEach(key => {\n                let value = options.headers[key];\n                xhr.setRequestHeader(key, value);\n            });\n        }\n\n        // xhr.overrideMimeType() method must be called before send().\n        if (options.mimeType) {\n            xhr.overrideMimeType(options.mimeType);\n        }\n\n        xhr.send(options.data);\n    }\n\n    /**\n     * Alias of `fetch.xhr()` with request method set to `\"GET\"` by default.\n     * @memberof fetch\n     *\n     * @param {Object} options - Required. Either the URL string which\n     * will set other options to defaults or the full options object.\n     * See `fetch.xhr()` method options for details.\n     * @param {Function} callback - Optional. The callback function in the\n     * following signature: `function (err, xhr) { ... }`\n     * Note that `xhr` object is always passed regardless of an error.\n     * @returns {void}\n     */\n    static get(options, callback) {\n        return fetch.xhr(options, callback);\n    }\n\n    /**\n     * Alias of `fetch.xhr()` with request method set to `\"POST\"` by default.\n     * @memberof fetch\n     *\n     * @param {Object} options - Required. Either the URL string which\n     * will set other options to defaults or the full options object.\n     * See `fetch.xhr()` method options for details.\n     * @param {Function} callback - Optional. The callback function in the\n     * following signature: `function (err, xhr) { ... }`\n     * Note that `xhr` object is always passed regardless of an error.\n     * @returns {void}\n     */\n    static post(options, callback) {\n        options = utils.isString(options)\n            ? { url: options }\n            : options || {};\n        options.method = 'POST';\n        return fetch.xhr(options, callback);\n    }\n\n    /**\n     * Alias of `fetch.xhr()` with request method set to `\"PUT\"` by default.\n     * @memberof fetch\n     *\n     * @param {Object} options - Required. Either the URL string which\n     * will set other options to defaults or the full options object.\n     * See `fetch.xhr()` method options for details.\n     * @param {Function} callback - Optional. The callback function in the\n     * following signature: `function (err, xhr) { ... }`\n     * Note that `xhr` object is always passed regardless of an error.\n     * @returns {void}\n     */\n    static put(options, callback) {\n        options = utils.isString(options)\n            ? { url: options }\n            : options || {};\n        options.method = 'PUT';\n        return fetch.xhr(options, callback);\n    }\n\n    /**\n     * Alias of `fetch.xhr()` with request method set to `\"DELETE\"` by default.\n     * @memberof fetch\n     *\n     * @param {Object} options - Required. Either the URL string which\n     * will set other options to defaults or the full options object.\n     * See `fetch.xhr()` method options for details.\n     * @param {Function} callback - Optional. The callback function in the\n     * following signature: `function (err, xhr) { ... }`\n     * Note that `xhr` object is always passed regardless of an error.\n     * @returns {void}\n     */\n    static delete(options, callback) {\n        options = utils.isString(options)\n            ? { url: options }\n            : options || {};\n        options.method = 'DELETE';\n        return fetch.xhr(options, callback);\n    }\n}\n\n/**\n * Enumerates `XMLHttpRequest` ready states.\n * Not to be confused with `script.readyState`.\n * @memberof fetch\n *\n * @enum {Number}\n */\nfetch.XHR_READY_STATE = {\n    /**\n     * `xhr.open()` has not been called yet.\n     * @type {Number}\n     */\n    UNSENT: 0,\n    /**\n     * `xhr.send()` has been called.\n     * @type {Number}\n     */\n    OPENED: 1,\n    /**\n     * `xhr.send()` has been called, and headers and status are available.\n     * @type {Number}\n     */\n    HEADERS_RECEIVED: 2,\n    /**\n     * Downloading; responseText holds partial data.\n     * @type {Number}\n     */\n    LOADING: 3,\n    /**\n     * The operation is complete.\n     * @type {Number}\n     */\n    DONE: 4\n};\n\n// aliases\n// fetch.script = fetch.jsonp;\n// fetch.ajax = fetch.xhr;\n\nexport default fetch;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/fetch.js\n **/","import utils from '../lib/utils';\nimport fetch from '../lib/fetch';\nimport GeoError from './geo.error';\n\n/**\n *  Helper methods.\n *\n *  @license MIT\n *  @copyright 2016, Onur Yıldırım (onur@cutepilot.com)\n *  @type {Object}\n *  @private\n */\nconst geoHelper = {\n\n    toGoogleCoords(coords) {\n        return {\n            lat: coords.lat || coords.latitude,\n            lng: coords.lng || coords.longitude\n        };\n    },\n\n    fromGoogleCoords(coords) {\n        return {\n            latitude: coords.latitude || coords.lat,\n            longitude: coords.longitude || coords.lng\n        };\n    },\n\n    // used for distance matrix origins and destinations\n    toPointList(arr) {\n        arr = utils.isArray(arr) ? arr : [arr];\n        return arr.map(o => {\n            return utils.isString(o) ? o : geoHelper.toGoogleCoords(o);\n        });\n    },\n\n    getGeocodeComps(comp) {\n        return {\n            route: comp.route,\n            locality: comp.locality,\n            administrative_area: comp.administrativeArea, // eslint-disable-line camelcase\n            postal_code: comp.postalCode, // eslint-disable-line camelcase\n            country: comp.country,\n            region: comp.region\n        };\n    },\n\n    // Geocode examples:\n    // address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&key=API_KEY\n    // address=Winnetka&bounds=34.172684,-118.604794|34.236144,-118.500938&key=API_KEY\n    // address=santa+cruz&components=country:ES&key=API_KEY\n    // components=administrative_area:TX|country:US&key=API_KEY\n    // Reverse Geocode examples:\n    // latlng=40.714224,-73.961452&key=API_KEY\n    // place_id=ChIJd8BlQ2BZwokRAFUEcm_qrcA&key=API_KEY\n    buildGeocodeParams(options, reverse) {\n        let params = [],\n            e = utils.encodeURI;\n\n        if (reverse) {\n            if (options.placeId) {\n                params.push(`place_id=${options.placeId}`);\n            } else if (options.latitude && options.longitude) {\n                params.push(`latlng=${options.latitude},${options.longitude}`);\n            }\n        } else {\n            if (options.address) {\n                params.push(`address=${e(options.address)}`);\n            }\n\n            let geoComps = geoHelper.getGeocodeComps(options);\n            geoComps = utils.params(geoComps, { operator: ':', separator: '|' });\n            params.push(`components=${geoComps}`);\n\n            let b = options.bounds;\n            if (utils.isArray(b) && b.length === 4) {\n                params.push(`bounds=${b[0]},${b[1]}|${b[2]},${b[3]}`);\n            } else if (utils.isPlainObject(b) && Object.keys(b).length === 4) {\n                params.push(`bounds=${b.southwestLat},${b.southwestLng}|${b.northeastLat},${b.northeastLng}`);\n            }\n        }\n\n        params.push(`language=${options.language}`);\n        params.push(`key=${options.key}`);\n        return params.join('&');\n    },\n\n    // See https://developers.google.com/maps/documentation/geocoding/intro\n    formatGeocodeResults(results) {\n        if (!utils.isArray(results) || results.length <= 0) {\n            return {\n                location: null,\n                address: null,\n                formattedAddress: '',\n                type: null, // locationType\n                placeId: ''\n            };\n        }\n\n        let i, c,\n            o = {},\n            data = results[0],\n            comps = data.address_components;\n\n        for (i = 0; i < comps.length; i += 1) {\n            c = comps[i];\n            if (c.types && c.types.length > 0) {\n                o[c.types[0]] = c.long_name;\n                o[c.types[0] + '_s'] = c.short_name;\n            }\n        }\n\n        let isUS = o.country_s === 'US',\n            geometry = data.geometry;\n        return {\n            coords: geometry && geometry.location ? {\n                latitude: geometry.location.lat,\n                longitude: geometry.location.lng\n            } : null,\n            address: {\n                commonName: o.point_of_interest\n                    || o.premise\n                    || o.subpremise\n                    || o.colloquial_area\n                    || '',\n                streetNumber: o.street_number || '',\n                street: o.administrative_area_level_4\n                    || o.administrative_area_level_3\n                    || o.route\n                    || '',\n                route: o.route || '',\n                neighborhood: o.neighborhood\n                    || o.administrative_area_level_5\n                    || o.administrative_area_level_4\n                    || '',\n                town: o.sublocality || o.administrative_area_level_2 || '',\n                city: o.locality || o.administrative_area_level_1 || '',\n                region: o.administrative_area_level_2\n                    || o.administrative_area_level_1\n                    || '',\n                postalCode: o.postal_code || '',\n                state: isUS\n                    ? (o.administrative_area_level_1 || '')\n                    : '',\n                stateCode: isUS\n                    ? (o.administrative_area_level_1_s || '')\n                    : '',\n                country: o.country || '',\n                countryCode: o.country_s || ''\n            },\n            formattedAddress: data.formatted_address,\n            type: geometry.location_type || '',\n            placeId: data.place_id,\n            timestamp: utils.time()\n        };\n    },\n\n    geocode(xhrOpts, raw, callback) {\n        // console.log(xhrOpts.url);\n        fetch.xhr(xhrOpts, (err, xhr) => {\n            let response = utils.safeJsonParse(xhr.responseText);\n            if (response === null) {\n                if (err === null) {\n                    err = new GeoError(GeoError.Code.INVALID_RESPONSE);\n                }\n            } else if (response.status !== 'OK') {\n                err = GeoError.fromGoogleResponse(response);\n                response = null;\n            } else {\n                response = raw\n                    ? response\n                    : geoHelper.formatGeocodeResults(response.results);\n            }\n            callback(err, response);\n        });\n    },\n\n    // See https://developers.google.com/maps/documentation/distance-matrix/intro\n    // Raw Result Example:\n    // {\n    //    \"destination_addresses\" : [ \"San Francisco, CA, USA\", \"Victoria, BC, Canada\" ],\n    //    \"origin_addresses\" : [ \"Vancouver, BC, Canada\", \"Seattle, WA, USA\" ],\n    //    \"rows\" : [\n    //       {\n    //          \"elements\" : [\n    //             {\n    //                \"distance\" : { \"text\" : \"1,704 km\", \"value\" : 1704324 },\n    //                \"duration\" : { \"text\" : \"3 days 19 hours\", \"value\" : 327061\n    //                },\n    //                \"status\" : \"OK\"\n    //             },\n    //             {\n    //                \"distance\" : { \"text\" : \"138 km\", \"value\" : 138295 },\n    //                \"duration\" : { \"text\" : \"6 hours 44 mins\", \"value\" : 24236 },\n    //                \"status\" : \"OK\"\n    //             }\n    //          ]\n    //       },\n    //       {\n    //          \"elements\" : [\n    //             {\n    //                \"distance\" : { \"text\" : \"1,452 km\", \"value\" : 1451623 },\n    //                \"duration\" : { \"text\" : \"3 days 4 hours\", \"value\" : 275062 },\n    //                \"status\" : \"OK\"\n    //             },\n    //             {\n    //                \"distance\" : { \"text\" : \"146 km\", \"value\" : 146496 },\n    //                \"duration\" : { \"text\" : \"2 hours 52 mins\", \"value\" : 10324 },\n    //                \"status\" : \"OK\"\n    //             }\n    //          ]\n    //       }\n    //    ],\n    //    \"status\" : \"OK\"\n    // }\n    // Formatted to:\n\n    formatDistanceResults(results) {\n        if (!utils.isPlainObject(results)) {\n            return null;\n        }\n\n        let arr = [],\n            origins = results.originAddresses,\n            dests = results.destinationAddresses,\n            rows = results.rows;\n\n        // [\n        //     {\n        //          from: 'Vancouver, BC, Canada',\n        //          to: 'San Francisco, CA, USA',\n        //          distance: { value: 1704107, text: \"1,704 km\" },\n        //          duration: { value: 327025, text: \"3 days 19 hours\" },\n        //          fare: { currency: \"USD\", value: 6, text: \"$6.00\" }\n        //     },\n        //     ...\n        // ]\n\n        let e;\n        origins.forEach((origin, oIndex) => {\n            dests.forEach((dest, dIndex) => {\n                e = rows[oIndex].elements[dIndex];\n                arr.push({\n                    from: origin,\n                    to: dest,\n                    distance: e.distance,\n                    duration: e.duration,\n                    fare: e.fare,\n                    timestamp: utils.time()\n                });\n            });\n        });\n\n        return arr;\n    }\n\n};\n\nexport default geoHelper;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/geo.helper.js\n **/","/* eslint no-nested-ternary:0 */\n\nimport utils from '../lib/utils';\n\n/**\n * Geolocator Error class that provides a common type of error object for the\n * various APIs implemented in Geolocator. All callbacks of Geolocator will\n * include an instance of this object as the first argument; if the\n * corresponding operation fails. Also all thrown errors will be an instance of\n * this object.\n *\n * This object can be publicly accessed via `geolocator.Error`.\n *\n * @extends Error\n */\nclass GeoError { // extends Error (doesn't work with transpilers)\n\n    /**\n     * Costructs a new instance of `GeoError`.\n     *\n     * @param {String} [code=\"UNKNOWN_ERROR\"]\n     *        Any valid Geolocator Error code.\n     *        See {@link #GeoError.Code|`GeoError.Code` enumeration} for\n     *        possible values.\n     * @param {String} [message]\n     *        Error message. If omitted, this will be set to `code`.\n     *\n     * @returns {GeoError}\n     *\n     * @example\n     * var GeoError = geolocator.Error,\n     *     error = new GeoError(GeoError.Code.GEOLOCATION_NOT_SUPPORTED);\n     * console.log(error.code); // \"GEOLOCATION_NOT_SUPPORTED\"\n     * console.log(error instanceof GeoError); // true\n     */\n    constructor(code = GeoError.Code.UNKNOWN_ERROR, message) {\n        message = message || String(code);\n\n        /**\n         *  Gets the name of the Error object.\n         *  This always returns `\"GeoError\"`.\n         *  @name GeoError#name\n         *  @type {String}\n         */\n        Object.defineProperty(this, 'name', {\n            enumerable: false,\n            writable: false,\n            value: 'GeoError' // this.constructor.name\n        });\n\n        /**\n         *  Gets the error code set for this instance.\n         *  This will return one of\n         *  {@link #GeoError.Code|`GeoError.Code` enumeration}.\n         *  @name GeoError#code\n         *  @type {String}\n         */\n        Object.defineProperty(this, 'code', {\n            enumerable: false,\n            writable: true,\n            value: code\n        });\n\n        /**\n         *  Gets the error message set for this instance.\n         *  If no message is set, this will return the error code value.\n         *  @name GeoError#message\n         *  @type {String}\n         */\n        Object.defineProperty(this, 'message', {\n            enumerable: false,\n            writable: true,\n            value: message\n        });\n\n        if (Error.hasOwnProperty('captureStackTrace')) { // V8\n            Error.captureStackTrace(this, this.constructor);\n        } else {\n            /**\n             *  Gets the error stack for this instance.\n             *  @name GeoError#stack\n             *  @type {String}\n             */\n            Object.defineProperty(this, 'stack', {\n                enumerable: false,\n                writable: false,\n                value: (new Error(message)).stack\n            });\n        }\n    }\n\n    /**\n     * Creates a new instance of `GeoError` from the given value.\n     *\n     * @param {*} [err]\n     *        Value to be transformed. This is used to determine the proper\n     *        error code for the created instance. If an `Error` or `Object` is\n     *        passed, its `message` property is checked if it matches any of the\n     *        valid error codes. If omitted or no match is found, error code\n     *        `GeoError.Code.UNKNOWN_ERROR` will be used as default.\n     *\n     * @returns {GeoError}\n     *\n     * @example\n     * var GeoError = geolocator.Error,\n     * \t   error = GeoError.create();\n     * console.log(error.code); // \"UNKNOWN_ERROR\"\n     * error = GeoError.create(GeoError.Code.GEOLOCATION_NOT_SUPPORTED);\n     * console.log(error.code); // \"GEOLOCATION_NOT_SUPPORTED\"\n     */\n    static create(err) {\n        if (err instanceof GeoError) {\n            return err;\n        }\n\n        if (utils.isPositionError(err) && err.code) {\n            switch (err.code) {\n                case 1:\n                    return new GeoError(GeoError.Code.PERMISSION_DENIED, err.message);\n                case 2:\n                    return new GeoError(GeoError.Code.POSITION_UNAVAILABLE, err.message);\n                case 3:\n                    return new GeoError(GeoError.Code.TIMEOUT, err.message);\n                default:\n                    return new GeoError(GeoError.Code.UNKNOWN_ERROR, err.message || '');\n            }\n        }\n\n        let code, msg;\n        if (typeof err === 'string') {\n            code = msg = err;\n        } else if (typeof err === 'object') {\n            code = err.code || err.message;\n            msg = err.message || err.code;\n        }\n        if (code && GeoError.isValidErrorCode(code)) {\n            return new GeoError(code, msg);\n        }\n\n        return new GeoError(GeoError.Code.UNKNOWN_ERROR, msg);\n    }\n\n    /**\n     * Creates a new instance of `GeoError` from the given Google API\n     * response object. Since Geolocator implements various Google APIs,\n     * we might receive responses if different structures. For example,\n     * some APIs return a response object with a `status:String` property\n     * (such as the TimeZone API) and some return responses with an\n     * `error:Object` property. This method will determine the correct reason or\n     * message and return a consistent error object.\n     *\n     * @param {Object|String} response\n     *        Google API response (Object) or status (String) to be transformed.\n     *\n     * @returns {GeoError}\n     *\n     * @example\n     * var error = geolocator.Error.fromGoogleResponse(googleResponse);\n     * console.log(error.code); // \"GOOGLE_KEY_INVALID\"\n     */\n    static fromGoogleResponse(response) {\n        // example Google Geolocation API response:\n        // https://developers.google.com/maps/documentation/geolocation/intro#errors\n        // {\n        //      \"error\": {\n        //          \"errors\": [\n        //              {\n        //                  \"domain\": \"global\",\n        //                  \"reason\": \"parseError\",\n        //                  \"message\": \"Parse Error\",\n        //              }\n        //          ],\n        //      \"code\": 400,\n        //      \"message\": \"Parse Error\"\n        //      }\n        // }\n        // example Google TimeZone API response:\n        // {\n        //     \"status\": \"REQUEST_DENIED\"\n        // }\n\n        let errCode = GeoError.Code.UNKNOWN_ERROR;\n        if (!response) return new GeoError(errCode);\n\n        let status = utils.isObject(response)\n                ? response.status\n                : (utils.isString(response) ? response : null),\n            message = '';\n\n        if (status) {\n            message = response.error_message || response.errorMessage;\n            if (GeoError.Code.hasOwnProperty(status)) {\n                errCode = status;\n            } else if (status === 'ZERO_RESULTS') {\n                errCode = GeoError.Code.NOT_FOUND;\n            } else {\n                // errCode = GeoError.Code.UNKNOWN_ERROR;\n                message = message ? `${errCode} (${message})` : errCode;\n            }\n        } else if (response.error) {\n            let reason = response.reason || response.error.reason;\n            message = response.error.message;\n            if (!reason) {\n                let errors = response.error.errors;\n                reason = utils.isArray(errors) && errors.length > 0\n                    ? errors[0].reason // get the first reason only\n                    : null;\n            }\n\n            if (reason) {\n                switch (reason) {\n                    case 'invalid':\n                        errCode = GeoError.Code.INVALID_REQUEST;\n                        break;\n                    case 'dailyLimitExceeded':\n                        errCode = GeoError.Code.DAILY_LIMIT_EXCEEDED;\n                        break;\n                    case 'keyInvalid':\n                        errCode = GeoError.Code.GOOGLE_KEY_INVALID;\n                        break;\n                    case 'userRateLimitExceeded':\n                        errCode = GeoError.Code.USER_RATE_LIMIT_EXCEEDED;\n                        break;\n                    case 'notFound':\n                        errCode = GeoError.Code.NOT_FOUND;\n                        break;\n                    case 'parseError':\n                        errCode = GeoError.Code.PARSE_ERROR;\n                        break;\n                    default:\n                        errCode = GeoError.Code.UNKNOWN_ERROR;\n                        break;\n                }\n            }\n        }\n\n        return new GeoError(errCode, message);\n    }\n\n    /**\n     *  Checks whether the given value is an instance of `GeoError`.\n     *\n     *  @param {*} err - Object to be checked.\n     *\n     *  @returns {Boolean}\n     */\n    static isGeoError(err) {\n        return err instanceof GeoError;\n    }\n\n    /**\n     *  Checks whether the given value is a valid Geolocator Error code.\n     *\n     *  @param {String} errorCode - Error code to be checked.\n     *\n     *  @returns {Boolean}\n     */\n    static isValidErrorCode(errorCode) {\n        let prop;\n        for (prop in GeoError.Code) {\n            if (GeoError.Code.hasOwnProperty(prop)\n                    && errorCode === GeoError.Code[prop]) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n *  Gets the string representation of the error instance.\n *\n *  @returns {String}\n */\nGeoError.prototype.toString = function () {\n    var msg = this.code !== this.message ? ` (${this.message})` : '';\n    return `${this.name}: ${this.code}${msg}`;\n};\n\n// `class x extends Error` doesn't work when using an ES6 transpiler, such as\n// Babel, since subclasses must extend a class. With Babel 6, we need\n// transform-builtin-extend plugin for this to work. So we're extending from\n// Error the old way. Now, `err instanceof Error` also returns `true`.\nif (typeof Object.setPrototypeOf === 'function') {\n    Object.setPrototypeOf(GeoError.prototype, Error.prototype);\n} else {\n    GeoError.prototype = Object.create(Error.prototype);\n}\n\n// ---------------------------\n// ERROR CODES\n// ---------------------------\n\n/**\n *  Enumerates Geolocator error codes.\n *  This enumeration combines Google API status (error) codes, HTML5 Geolocation\n *  position error codes and other Geolocator-specific error codes.\n *  @enum {String}\n */\nGeoError.Code = {\n    /**\n     *  Indicates that HTML5 Geolocation API is not supported by the browser.\n     *  @type {String}\n     */\n    GEOLOCATION_NOT_SUPPORTED: 'GEOLOCATION_NOT_SUPPORTED',\n    /**\n     *  Indicates that Geolocation-IP source is not set or invalid.\n     *  @type {String}\n     */\n    INVALID_GEO_IP_SOURCE: 'INVALID_GEO_IP_SOURCE',\n    /**\n     *  The acquisition of the geolocation information failed because the\n     *  page didn't have the permission to do it.\n     *  @type {String}\n     */\n    PERMISSION_DENIED: 'PERMISSION_DENIED',\n    /**\n     *  The acquisition of the geolocation failed because at least one\n     *  internal source of position returned an internal error.\n     *  @type {String}\n     */\n    POSITION_UNAVAILABLE: 'POSITION_UNAVAILABLE',\n    /**\n     *  The time allowed to acquire the geolocation, defined by\n     *  PositionOptions.timeout information was reached before\n     *  the information was obtained.\n     *  @type {String}\n     */\n    TIMEOUT: 'TIMEOUT',\n    /**\n     * Indicates that the request had one or more invalid parameters.\n     * @type {String}\n     */\n    INVALID_PARAMETERS: 'INVALID_PARAMETERS',\n    /**\n     * Indicates that the service returned invalid response.\n     * @type {String}\n     */\n    INVALID_RESPONSE: 'INVALID_RESPONSE',\n    /**\n     * Generally indicates that the query (address, components or latlng)\n     * is missing.\n     * @type {String}\n     */\n    INVALID_REQUEST: 'INVALID_REQUEST',\n    /**\n     * Indicates that the request was denied by the service.\n     * This will generally occur because of a missing API key or because the request\n     * is sent over HTTP instead of HTTPS.\n     * @type {String}\n     */\n    REQUEST_DENIED: 'REQUEST_DENIED',\n    /**\n     * Indicates that Google API could not be loaded.\n     * @type {String}\n     */\n    GOOGLE_API_FAILED: 'GOOGLE_API_FAILED',\n    /**\n     * Indicates that you are over your Google API quota.\n     * @type {String}\n     */\n    OVER_QUERY_LIMIT: 'OVER_QUERY_LIMIT',\n    /**\n     * Indicates that you've exceeded the requests per second per user limit that\n     * you configured in the Google Developers Console. This limit should be\n     * configured to prevent a single or small group of users from exhausting your\n     * daily quota, while still allowing reasonable access to all users.\n     * @type {String}\n     */\n    USER_RATE_LIMIT_EXCEEDED: 'USER_RATE_LIMIT_EXCEEDED',\n    /**\n     * Indicates that you've exceeded your daily limit for Google API(s).\n     * @type {String}\n     */\n    DAILY_LIMIT_EXCEEDED: 'DAILY_LIMIT_EXCEEDED',\n    /**\n     * Indicates that your Google API key is not valid. Please ensure that you've\n     * included the entire key, and that you've either purchased the API or have\n     * enabled billing and activated the API to obtain the free quota.\n     * @type {String}\n     */\n    GOOGLE_KEY_INVALID: 'GOOGLE_KEY_INVALID',\n    /**\n     * Indicates that maximum number of elements limit is exceeded. For\n     * example, for the Distance Matrix API; occurs when the product of\n     * origins and destinations exceeds the per-query limit.\n     * @type {String}\n     */\n    MAX_ELEMENTS_EXCEEDED: 'MAX_ELEMENTS_EXCEEDED',\n    /**\n     * Indicates that the request contained more than 25 origins,\n     * or more than 25 destinations.\n     * @type {String}\n     */\n    MAX_DIMENSIONS_EXCEEDED: 'MAX_DIMENSIONS_EXCEEDED',\n    /**\n     * Indicates that the request contained more than allowed waypoints.\n     * @type {String}\n     */\n    MAX_WAYPOINTS_EXCEEDED: 'MAX_WAYPOINTS_EXCEEDED',\n    /**\n     * Indicates that the request body is not valid JSON.\n     * @type {String}\n     */\n    PARSE_ERROR: 'PARSE_ERROR',\n    /**\n     * Indicates that the requested resource could not be found.\n     * Note that this also covers `ZERO_RESULTS`.\n     * @type {String}\n     */\n    NOT_FOUND: 'NOT_FOUND',\n    /**\n     * Indicates that an internal error (such as XHR cross-domain, etc) has occured.\n     * @type {String}\n     */\n    INTERNAL_ERROR: 'INTERNAL_ERROR',\n    /**\n     * Indicates that an unknown error has occured.\n     * @type {String}\n     */\n    UNKNOWN_ERROR: 'UNKNOWN_ERROR'\n};\n\n// ---------------------------\n// EXPORT\n// ---------------------------\n\nexport default GeoError;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/geo.error.js\n **/","/* eslint no-nested-ternary:0 */\n\nimport utils from '../lib/utils';\n\nclass GeoWatcher {\n\n    constructor(onChange, onError, options = {}) {\n        this.isCleared = false;\n        this.cycle = 0;\n        this._timer = null;\n        this.id = navigator.geolocation.watchPosition(\n            pos => {\n                this.cycle++;\n                if (utils.isFunction(onChange)) onChange(pos);\n            },\n            err => {\n                this.cycle++;\n                if (utils.isFunction(onError)) onError(err);\n                if (options.clearOnError) {\n                    this.clear();\n                }\n            },\n            options\n        );\n    }\n\n    _clear() {\n        navigator.geolocation.clearWatch(this.id);\n        this.isCleared = true;\n        this._timer = null;\n    }\n\n    clear(delay, callback) {\n        let d = utils.isNumber(delay) ? delay : 0,\n            cb = utils.isFunction(callback) ? callback\n                : utils.isFunction(delay) ? delay : null;\n        // clear any previous timeout\n        if (this._timer) {\n            clearTimeout(this._timer);\n            this._timer = null;\n        }\n        // check if watcher is not cleared\n        if (!this.isCleared) {\n            if (d === 0) {\n                this._clear();\n                if (cb) cb();\n                return;\n            }\n            this._timer = setTimeout(() => {\n                this._clear();\n                if (cb) cb();\n            }, d);\n        }\n    }\n\n}\n\n// ---------------------------\n// EXPORT\n// ---------------------------\n\nexport default GeoWatcher;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/geo.watcher.js\n **/","/**\n * This file only includes partial documentation about `geolocator` enumerations.\n * Note that these enumerations are mostly an aggregation of\n * {@link https://developers.google.com/maps/documentation/javascript|Google Maps API} constants.\n *\n * @private\n * @readonly\n */\nconst enums = Object.freeze({\n    /**\n     * Enumerates Google map types.\n     * @memberof! geolocator\n     *\n     * @enum {String}\n     * @readonly\n     */\n    MapTypeId: {\n        /**\n         * Map type that displays a transparent layer of major streets on\n         * satellite images.\n         * @type {String}\n         */\n        HYBRID: 'hybrid',\n        /**\n         * Map type that displays a normal street map.\n         * @type {String}\n         */\n        ROADMAP: 'roadmap',\n        /**\n         * Map type that displays satellite images.\n         * @type {String}\n         */\n        SATELLITE: 'satellite',\n        /**\n         * Map type displays maps with physical features such as terrain and\n         * vegetation.\n         * @type {String}\n         */\n        TERRAIN: 'terrain'\n    },\n    /**\n     * Enumerates Google location types.\n     * @memberof! geolocator\n     *\n     * @enum {String}\n     * @readonly\n     */\n    LocationType: {\n        /**\n         * Indicates that the returned result is a precise geocode for which\n         * we have location information accurate down to street address\n         * precision.\n         * @type {String}\n         */\n        ROOFTOP: 'ROOFTOP',\n        /**\n         * Indicates that the returned result reflects an approximation\n         * (usually on a road) interpolated between two precise points (such as\n         * intersections). Interpolated results are generally returned when\n         * rooftop geocodes are unavailable for a street address.\n         * @type {String}\n         */\n        RANGE_INTERPOLATED: 'RANGE_INTERPOLATED',\n        /**\n         * Indicates that the returned result is the geometric center of a\n         * result such as a polyline (for example, a street) or polygon\n         * (region).\n         * @type {String}\n         */\n        GEOMETRIC_CENTER: 'GEOMETRIC_CENTER',\n        /**\n         * Indicates that the returned result is approximate.\n         * @type {String}\n         */\n        APPROXIMATE: 'APPROXIMATE'\n    },\n    /**\n     * Enumerates Google travel modes.\n     * @memberof! geolocator\n     *\n     * @enum {String}\n     * @readonly\n     */\n    TravelMode: {\n        /**\n         * Indicates distance calculation using the road network.\n         * @type {String}\n         */\n        DRIVING: 'DRIVING',\n        /**\n         * Requests distance calculation for walking via pedestrian paths &\n         * sidewalks (where available).\n         * @type {String}\n         */\n        WALKING: 'WALKING',\n        /**\n         * Requests distance calculation for bicycling via bicycle paths &\n         * preferred streets (where available).\n         * @type {String}\n         */\n        BICYCLING: 'BICYCLING',\n        /**\n         * Requests distance calculation via public transit routes (where\n         * available). This value may only be specified if the request includes\n         * an API key or a Google Maps APIs Premium Plan client ID. If you set\n         * the mode to transit you can optionally specify either a\n         * `departureTime` or an `arrivalTime`. If neither time is specified,\n         * the `departureTime` defaults to now (that is, the departure time defaults\n         * to the current time). You can also optionally include a `transitMode`\n         * and/or a `transitRoutingPreference`.\n         * @type {String}\n         */\n        TRANSIT: 'TRANSIT'\n    },\n    // /**\n    //  * Enumerates Google route restrictions.\n    //  * @memberof! geolocator\n    //  *\n    //  * @enum {String}\n    //  * @readonly\n    //  */\n    // RouteRestriction: {\n    //     TOLLS: 'tolls',\n    //     HIGHWAYS: 'highways',\n    //     FERRIES: 'ferries',\n    //     INDOOR: 'indoor'\n    // },\n    /**\n     * Enumerates Google unit systems.\n     * @memberof! geolocator\n     *\n     * @enum {Number}\n     * @readonly\n     */\n    UnitSystem: {\n        /**\n         * Distances in kilometers and meters.\n         * @type {Number}\n         */\n        METRIC: 0,\n        /**\n         * Distances defined in miles and feet.\n         * @type {Number}\n         */\n        IMPERIAL: 1\n    },\n    /**\n     * Enumerates mobile radio types.\n     * @memberof! geolocator\n     *\n     * @enum {String}\n     * @readonly\n     */\n    RadioType: {\n        /**\n         * LTE (Long-Term Evolution) mobile radio type.\n         * @type {String}\n         */\n        LTE: 'lte',\n        /**\n         * GSM (Global System for Mobile Communications) mobile radio type.\n         * @type {String}\n         */\n        GSM: 'gsm',\n        /**\n         * CDMA (Code division multiple access) mobile radio access technology.\n         * @type {String}\n         */\n        CDMA: 'cdma',\n        /**\n         * Wideband CDMA mobile radio access technology.\n         * @type {String}\n         */\n        WCDMA: 'wcdma'\n    },\n    /**\n     * Enumerates formulas/algorithms for calculating the distance between two\n     * lat/lng points.\n     * @memberof! geolocator\n     *\n     * @readonly\n     * @enum {String}\n     *\n     * @todo {@link https://en.wikipedia.org/wiki/Vincenty%27s_formulae|Vincenty's Formula}\n     */\n    DistanceFormula: {\n        /**\n         * Haversine formula for calculating the distance between two lat/lng points\n         * by relating the sides and angles of spherical triangles.\n         * @see {@link http://en.wikipedia.org/wiki/Haversine_formula|Haversine_formula}.\n         * @type {String}\n         */\n        HAVERSINE: 'haversine',\n        /**\n         * Formula based on the Pythagoras Theorem for calculating the\n         * distance between two lat/lng points on a Equirectangular projection\n         * to account for curvature of the longitude lines.\n         * @see {@link https://en.wikipedia.org/wiki/Pythagorean_theorem|Pythagorean_theorem}\n         * @type {String}\n         */\n        PYTHAGOREAN: 'pythagorean'\n    }\n});\n\nexport default enums;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/core/enums.js\n **/"],"sourceRoot":""}