{"version":3,"sources":["leaflet.pm.js","Drag.js","Overlap.js","L.PM.js","L.PM.Map.js","L.PM.Draw.js","L.PM.Edit.js","Draw/L.PM.Draw.Poly.js","Edit/L.PM.Edit.LayerGroup.js","Edit/L.PM.Edit.Poly.js","Toolbar/L.Controls.js","Toolbar/L.PM.Toolbar.js"],"names":["DragMixin","_initDraggableLayer","_this","this","_tempDragCoord","el","_poly","_path","L","DomUtil","addClass","onMouseUp","e","_map","dragging","enable","off","_initMarkers","window","setTimeout","_dragging","removeClass","fire","_fireEdit","onMouseMove","bringToFront","disable","_markerGroup","clearLayers","_onLayerDrag","on","latlng","deltaLatLng","lat","lng","coords","_latlngs","newLatLngs","map","currentLatLng","setLatLngs","redraw","OverlapMixin","_applyPossibleCoordsChanges","_tempPolygon","latlngs","getLayers","getLatLngs","_drawTemporaryPolygon","geoJson","setStyle","opacity","fillOpacity","addTo","bringToBack","_handleOverlap","mainPoly","layers","_layerGroup","changed","resultingGeoJson","toGeoJSON","filter","layer","Object","is","intersect","turf","console","warn","difference","geometry","type","remove","PM","initialize","initLayerGroup","pm","Edit","LayerGroup","addInitHook","initPolygon","Poly","Polygon","initMap","Map","Class","extend","Draw","Toolbar","addControls","options","enableDraw","shape","arguments","length","undefined","disableDraw","removeLayer","target","toggleRemoval","enabled","eachLayer","shapes","forEach","getShapes","join","_this2","_this3","addButton","includes","_shape","registerButton","toolbarButtonName","_enabled","_polyline","polyline","color","addLayer","_hintline","dashArray","_container","style","cursor","_createPolygonPoint","_syncHintLine","toggleButton","toggle","polyPoints","lastPolygonPoint","first","addLatLng","_createMarker","_finishPolygon","polygonLayer","polygon","toggleEdit","marker","Marker","draggable","icon","divIcon","className","layerGroup","_layers","availableEvents","event","_fireEvent","getOptions","fireEvent","_options","find","poly","preventOverlap","_markers","k","nextIndex","_createMiddleMarker","index","_origLatLng","_index","_onMarkerDrag","_onMarkerDragEnd","_removeMarker","leftM","rightM","_calcMiddleLatLng","getLatLng","middleMarker","setIcon","_middleMarkerNext","_middleMarkerPrev","_addMarker","newM","splice","i","leftMarkerIndex","rightMarkerIndex","nextMarkerIndex","prevMarkerIndex","_latlng","markerLatLng","prevMarkerLatLng","nextMarkerLatLng","middleMarkerNextLatLng","setLatLng","middleMarkerPrevLatLng","edited","latlng1","latlng2","p1","project","p2","unproject","_add","_divideBy","Control","PMButton","position","_button","setButton","onAdd","container","create","_makeButton","onRemove","button","iconUrl","onClick","afterClick","doToggle","toggleStatus","getText","text","getIconUrl","destroy","_update","_applyStyleClasses","toggled","onCreate","newButton","image","setAttribute","DomEvent","addListener","_clicked","disableClickPropagation","childNodes","drawPolygon","deleteLayer","buttons","_defineButtons","getButtons","Util","setOptions","_showHideButtons","_addButton","name","status","deleteButton","drawPolyButton","btn"],"mappings":"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","file":"leaflet.pm.min.js","sourcesContent":["'use strict';\n\nvar DragMixin = {\n    _initDraggableLayer: function _initDraggableLayer() {\n        var _this = this;\n\n        // temporary coord variable for delta calculation\n        this._tempDragCoord;\n\n        // add CSS class\n        var el = this._poly._path;\n        L.DomUtil.addClass(el, 'leaflet-pm-draggable');\n\n        var onMouseUp = function onMouseUp(e) {\n\n            // re-enable map drag\n            _this._poly._map.dragging.enable();\n\n            // clear up mousemove event\n            _this._poly._map.off('mousemove');\n\n            // clear up mouseup event\n            _this._poly.off('mouseup');\n\n            // show markers again\n            _this._initMarkers();\n\n            // timeout to prevent click event after drag :-/\n            // TODO: do it better as soon as leaflet has a way to do it better :-)\n            window.setTimeout(function () {\n                // set state\n                _this._dragging = false;\n                L.DomUtil.removeClass(el, 'leaflet-pm-dragging');\n\n                // fire pm:dragend event\n                _this._poly.fire('pm:dragend');\n\n                // fire edit\n                _this._fireEdit();\n            }, 10);\n        };\n\n        var onMouseMove = function onMouseMove(e) {\n\n            if (!_this._dragging) {\n\n                // set state\n                _this._dragging = true;\n                L.DomUtil.addClass(el, 'leaflet-pm-dragging');\n\n                // bring it to front to prevent drag interception\n                _this._poly.bringToFront();\n\n                // disbale map drag\n                _this._poly._map.dragging.disable();\n\n                // hide markers\n                _this._markerGroup.clearLayers();\n\n                // fire pm:dragstart event\n                _this._poly.fire('pm:dragstart');\n            }\n\n            _this._onLayerDrag(e);\n        };\n\n        this._poly.on('mousedown', function (e) {\n\n            // save for delta calculation\n            _this._tempDragCoord = e.latlng;\n\n            _this._poly.on('mouseup', onMouseUp);\n\n            // listen to mousemove on map (instead of polygon),\n            // otherwise fast mouse movements stop the drag\n            _this._poly._map.on('mousemove', onMouseMove);\n        });\n    },\n    dragging: function dragging() {\n        return this._dragging;\n    },\n\n    _onLayerDrag: function _onLayerDrag(e) {\n\n        // latLng of mouse event\n        var latlng = e.latlng;\n\n        // delta coords (how far was dragged)\n        var deltaLatLng = {\n            lat: latlng.lat - this._tempDragCoord.lat,\n            lng: latlng.lng - this._tempDragCoord.lng\n        };\n\n        // create the new coordinates array\n        var coords = this._poly._latlngs[0];\n        var newLatLngs = coords.map(function (currentLatLng) {\n            return {\n                lat: currentLatLng.lat + deltaLatLng.lat,\n                lng: currentLatLng.lng + deltaLatLng.lng\n            };\n        });\n\n        // set new coordinates and redraw\n        this._poly.setLatLngs(newLatLngs).redraw();\n\n        // save current latlng for next delta calculation\n        this._tempDragCoord = latlng;\n\n        // fire pm:dragstart event\n        this._poly.fire('pm:drag');\n    }\n};\n'use strict';\n\nvar OverlapMixin = {\n\n    _applyPossibleCoordsChanges: function _applyPossibleCoordsChanges() {\n\n        // after the polygon was dragged and changed it's shape because of unallowed intersecting\n        // with another polygon, this function takes the temporarily drawn polygon (during drag) and applies\n        // it's coordinates to our main polygon\n\n        if (this._tempPolygon) {\n\n            // get the new coordinates\n            var latlngs = this._tempPolygon.getLayers()[0].getLatLngs();\n\n            // reshape our main polygon\n            this._poly.setLatLngs(latlngs).redraw();\n\n            // initialize the markers again\n            this._initMarkers();\n        }\n    },\n\n    _drawTemporaryPolygon: function _drawTemporaryPolygon(geoJson) {\n\n        // hide our polygon\n        this._poly.setStyle({ opacity: 0, fillOpacity: 0 });\n\n        // draw a temporary polygon (happens during drag & intersection)\n        this._tempPolygon = L.geoJson(geoJson).addTo(this._poly._map).bringToBack();\n    },\n\n    _handleOverlap: function _handleOverlap() {\n\n        var mainPoly = this._poly;\n        var layers = this._layerGroup.getLayers();\n        var changed = false;\n        var resultingGeoJson = this._poly.toGeoJSON();\n\n        layers.filter(function (layer) {\n            return !Object.is(layer, mainPoly);\n        }).map(function (layer) {\n\n            var intersect = void 0;\n\n            // this needs to be in a try catch block because turf isn't reliable\n            // it throws self-intersection errors even if there are none\n            try {\n                intersect = turf.intersect(resultingGeoJson, layer.toGeoJSON());\n            } catch (e) {\n                console.warn('Turf Error.');\n            }\n\n            if (intersect) {\n                resultingGeoJson = turf.difference(resultingGeoJson, layer.toGeoJSON());\n\n                // if the resulting polygon is a MultiPolygon, don't handle it.\n                if (resultingGeoJson.geometry.type !== 'MultiPolygon') {\n                    changed = true;\n                }\n            }\n        });\n\n        if (this._tempPolygon) {\n            this._tempPolygon.remove();\n            delete this._tempPolygon;\n        }\n\n        if (changed) {\n            this._drawTemporaryPolygon(resultingGeoJson);\n        } else {\n            this._poly.setStyle({ opacity: 1, fillOpacity: 0.2 });\n        }\n    }\n};\n\"use strict\";\n\n/**\n*\n* A Leaflet Plugin For Editing Geometry Layers in Leaflet 1.0\n* by Sumit Kumar (@TweetsOfSumit)\n* Github Repo: https://github.com/codeofsumit/leaflet.pm\n*/\n\nL.PM = L.PM || {\n    initialize: function initialize() {\n\n        var initLayerGroup = function initLayerGroup() {\n            this.pm = new L.PM.Edit.LayerGroup(this);\n        };\n        L.LayerGroup.addInitHook(initLayerGroup);\n\n        var initPolygon = function initPolygon() {\n            this.pm = new L.PM.Edit.Poly(this);\n        };\n        L.Polygon.addInitHook(initPolygon);\n\n        var initMap = function initMap() {\n            this.pm = new L.PM.Map(this);\n        };\n        L.Map.addInitHook(initMap);\n    }\n};\n\n// initialize leaflet.pm\nL.PM.initialize();\n'use strict';\n\nL.PM.Map = L.Class.extend({\n    initialize: function initialize(map) {\n        this.map = map;\n        this.Draw = new L.PM.Draw(map);\n        this.Toolbar = new L.PM.Toolbar(map);\n    },\n\n    addControls: function addControls(options) {\n        this.Toolbar.addControls(options);\n    },\n    enableDraw: function enableDraw() {\n        var shape = arguments.length <= 0 || arguments[0] === undefined ? 'Poly' : arguments[0];\n\n        this.Draw.enable(shape);\n    },\n    disableDraw: function disableDraw() {\n        var shape = arguments.length <= 0 || arguments[0] === undefined ? 'Poly' : arguments[0];\n\n        this.Draw.disable(shape);\n    },\n    removeLayer: function removeLayer(e) {\n        e.target.remove();\n    },\n    toggleRemoval: function toggleRemoval(enabled) {\n        var _this = this;\n\n        if (enabled) {\n            this.map.eachLayer(function (layer) {\n                layer.on('click', _this.removeLayer);\n            });\n        } else {\n            this.map.eachLayer(function (layer) {\n                layer.off('click', _this.removeLayer);\n            });\n        }\n    }\n});\n'use strict';\n\nL.PM.Draw = L.Class.extend({\n\n    initialize: function initialize(map) {\n        var _this = this;\n\n        // save the map\n        this._map = map;\n\n        // define all possible shapes that can be drawn\n        this.shapes = ['Poly'];\n\n        // initiate drawing class for our shapes\n        this.shapes.forEach(function (shape) {\n            _this[shape] = new L.PM.Draw[shape](_this._map);\n        });\n    },\n    getShapes: function getShapes() {\n        // if somebody wants to know what shapes are available\n        return this.shapes;\n    },\n    enable: function enable(shape) {\n\n        if (!shape) {\n            throw 'Error: Please pass a shape as a parameter. Possible shapes are: ' + this.getShapes().join(',');\n        }\n\n        // disable drawing for all shapes\n        this.disable();\n\n        // enable draw for a shape\n        this[shape].enable();\n    },\n    disable: function disable() {\n        var _this2 = this;\n\n        // there can only be one drawing mode active at a time on a map\n        // so it doesn't matter which one should be disabled.\n        // just disable all of them\n        this.shapes.forEach(function (shape) {\n            _this2[shape].disable();\n        });\n    },\n    addControls: function addControls() {\n        var _this3 = this;\n\n        // add control buttons for our shapes\n        this.shapes.forEach(function (shape) {\n            _this3[shape].addButton();\n        });\n    }\n});\n\"use strict\";\n\nL.PM.Edit = L.Class.extend({\n    includes: [DragMixin, OverlapMixin]\n});\n'use strict';\n\nL.PM.Draw.Poly = L.PM.Draw.extend({\n\n    initialize: function initialize(map) {\n        this._map = map;\n        this._shape = 'Poly';\n        this.registerButton();\n        this.toolbarButtonName = 'drawPolygon';\n    },\n    enable: function enable(options) {\n        // enable draw mode\n\n        this._enabled = true;\n\n        // create a new layergroup\n        this._layerGroup = new L.LayerGroup();\n        this._layerGroup.addTo(this._map);\n\n        // this is the polyLine that'll make up the polygon\n        this._polyline = L.polyline([], { color: 'red' });\n        this._layerGroup.addLayer(this._polyline);\n\n        // this is the hintline from the mouse cursor to the last marker\n        this._hintline = L.polyline([], {\n            color: 'red',\n            dashArray: [5, 5]\n        });\n        this._layerGroup.addLayer(this._hintline);\n\n        // change map cursor\n        this._map._container.style.cursor = 'crosshair';\n\n        // create a polygon-point on click\n        this._map.on('click', this._createPolygonPoint, this);\n\n        // sync the hintline on mousemove\n        this._map.on('mousemove', this._syncHintLine, this);\n\n        // fire drawstart event\n        this._map.fire('pm:drawstart', { shape: this._shape });\n\n        // toggle the draw button of the Toolbar in case drawing mode got enabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, true);\n    },\n    disable: function disable() {\n        // disable draw mode\n\n        // cancel, if drawing mode isn't even enabled\n        if (!this._enabled) {\n            return;\n        }\n\n        this._enabled = false;\n\n        // reset cursor\n        this._map._container.style.cursor = 'default';\n\n        // unbind listeners\n        this._map.off('click', this._createPolygonPoint);\n        this._map.off('mousemove', this._syncHintLine);\n\n        // remove layer\n        this._map.removeLayer(this._layerGroup);\n\n        // fire drawend event\n        this._map.fire('pm:drawend', { shape: this._shape });\n\n        // toggle the draw button of the Toolbar in case drawing mode got disabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, false);\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    toggle: function toggle(options) {\n\n        if (this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n    },\n    registerButton: function registerButton(map) {\n\n        var drawPolyButton = {\n            'className': 'icon-polygon',\n            'onClick': function onClick() {},\n            'afterClick': function afterClick(e) {\n                self.toggle();\n            },\n            'doToggle': true,\n            'toggleStatus': false\n        };\n\n        // this._drawButton = L.PM.Toolbar.addButton('drawPolygon', new L.Control.PMButton(drawPolyButton));\n        //\n        // this._map.on('pm:drawstart', (e) => {\n        //     if(e.shape === this._shape && !this._drawButton.toggled()) {\n        //         this._drawButton._clicked();\n        //     }\n        // });\n        //\n        // this._map.on('pm:drawend', (e) => {\n        //     if(e.shape === this._shape && this._drawButton.toggled()) {\n        //         this._drawButton._clicked();\n        //     }\n        // });\n\n    },\n    _syncHintLine: function _syncHintLine(e) {\n\n        var polyPoints = this._polyline.getLatLngs();\n\n        if (polyPoints.length > 0) {\n            var lastPolygonPoint = polyPoints[polyPoints.length - 1];\n            this._hintline.setLatLngs([lastPolygonPoint, e.latlng]);\n        }\n    },\n    _createPolygonPoint: function _createPolygonPoint(e) {\n\n        // is this the first point?\n        var first = this._polyline.getLatLngs().length === 0 ? true : false;\n\n        this._polyline.addLatLng(e.latlng);\n        this._createMarker(e.latlng, first);\n\n        this._hintline.setLatLngs([e.latlng, e.latlng]);\n    },\n    _finishPolygon: function _finishPolygon() {\n\n        var coords = this._polyline.getLatLngs();\n        var polygonLayer = L.polygon(coords).addTo(this._map);\n\n        polygonLayer.pm.toggleEdit();\n\n        this.disable();\n\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polygonLayer\n        });\n    },\n    _createMarker: function _createMarker(latlng, first) {\n\n        var marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n\n        this._layerGroup.addLayer(marker);\n\n        if (first) {\n            marker.on('click', this._finishPolygon, this);\n        }\n\n        return marker;\n    }\n});\n'use strict';\n\n// LayerGroup doesn't inherit from L.PM.Edit because it's just calling L.PM.Edit.Poly\n// (which inherits from L.PM.Edit) for each layer,\n// so it's not really a parent class\nL.PM.Edit.LayerGroup = L.Class.extend({\n    initialize: function initialize(layerGroup) {\n        var _this = this;\n\n        this._layerGroup = layerGroup;\n        this._layers = layerGroup.getLayers();\n\n        var availableEvents = ['pm:edit', 'pm:dragstart', 'pm:drag', 'pm:dragend'];\n\n        this._layers.forEach(function (layer) {\n\n            // listen to the events of the layers in this group\n            availableEvents.forEach(function (event) {\n                layer.on(event, _this._fireEvent, _this);\n            });\n\n            // add reference for the group to each layer inside said group\n            layer.pm._layerGroup = _this._layerGroup;\n        });\n\n        // if a new layer is added to the group, reinitialize\n        // This only works for FeatureGroups, not LayerGroups\n        // https://github.com/Leaflet/Leaflet/issues/4861\n        this._layerGroup.on('layeradd', function (e) {\n\n            _this.initialize(layerGroup);\n\n            // if editing was already enabled for this group, enable it again\n            // so the new layers are enabled\n            if (e.target.pm.enabled()) {\n                _this.enable(_this.getOptions());\n            }\n        });\n    },\n    _fireEvent: function _fireEvent(e) {\n        this._layerGroup.fireEvent(e.type, e);\n    },\n    toggleEdit: function toggleEdit(options) {\n        this._options = options;\n        this._layers.forEach(function (layer) {\n            layer.pm.toggleEdit(options);\n        });\n    },\n    enable: function enable(options) {\n        this._options = options;\n        this._layers.forEach(function (layer) {\n            layer.pm.enable(options);\n        });\n    },\n    disable: function disable() {\n        this._layers.forEach(function (layer) {\n            layer.pm.disable();\n        });\n    },\n    enabled: function enabled() {\n        var enabled = this._layers.find(function (layer) {\n            return layer.pm.enabled();\n        });\n        return !!enabled;\n    },\n    dragging: function dragging() {\n        var dragging = this._layers.find(function (layer) {\n            return layer.pm.dragging();\n        });\n        return !!dragging;\n    },\n    getOptions: function getOptions() {\n        return this._options;\n    }\n});\n'use strict';\n\nL.PM.Edit.Poly = L.PM.Edit.extend({\n    initialize: function initialize(poly) {\n        this._poly = poly;\n        this._enabled = false;\n    },\n\n    toggleEdit: function toggleEdit(options) {\n        if (!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n\n    enable: function enable() {\n        var _this = this;\n\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\n        this.options = options;\n\n        if (!this.enabled()) {\n            // change state\n            this._enabled = true;\n\n            // init markers\n            this._initMarkers();\n\n            // if polygon gets removed from map, disable edit mode\n            this._poly.on('remove', function (e) {\n                _this.disable(e.target);\n            });\n\n            // preventOverlap needs the turf library. If it's not included, deactivate it again\n            if (window.turf === undefined && this.options.preventOverlap) {\n                console.warn('TurfJS not found, preventOverlap is deactivated');\n                this.options.preventOverlap = false;\n            }\n\n            if (this.options.draggable) {\n                this._initDraggableLayer();\n            }\n\n            if (this.options.preventOverlap) {\n\n                // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n                this._poly.on('pm:drag', this._handleOverlap, this);\n\n                // set new coordinates, more details inside the function\n                this._poly.on('pm:dragend', this._applyPossibleCoordsChanges, this);\n            }\n        }\n    },\n\n    enabled: function enabled() {\n        return this._enabled;\n    },\n\n    disable: function disable() {\n        var poly = arguments.length <= 0 || arguments[0] === undefined ? this._poly : arguments[0];\n\n\n        // prevent disabling if polygon is being dragged\n        if (poly.pm._dragging) {\n            return false;\n        }\n        poly.pm._enabled = false;\n        poly.pm._markerGroup.clearLayers();\n\n        // clean up draggable\n        poly.off('mousedown');\n        poly.off('mouseup');\n\n        // remove draggable class\n        var el = poly._path;\n        L.DomUtil.removeClass(el, 'leaflet-pm-draggable');\n    },\n\n    _initMarkers: function _initMarkers() {\n        var map = this._poly._map;\n\n        // cleanup old ones first\n        if (this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        var coords = this._poly._latlngs[0];\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for (var k = 0; k < coords.length; k++) {\n\n            var nextIndex = k + 1 >= coords.length ? 0 : k + 1;\n            this._createMiddleMarker(this._markers[k], this._markers[nextIndex]);\n        }\n    },\n\n    // creates initial markers for coordinates\n    _createMarker: function _createMarker(latlng, index) {\n\n        var marker = new L.Marker(latlng, {\n            draggable: true,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n\n        marker._origLatLng = latlng;\n        marker._index = index;\n\n        marker.on('drag', this._onMarkerDrag, this);\n        marker.on('dragend', this._onMarkerDragEnd, this);\n        marker.on('contextmenu', this._removeMarker, this);\n\n        this._markerGroup.addLayer(marker);\n\n        return marker;\n    },\n\n    // creates the middle markes between coordinates\n    _createMiddleMarker: function _createMiddleMarker(leftM, rightM) {\n        var _this2 = this;\n\n        var latlng = this._calcMiddleLatLng(leftM.getLatLng(), rightM.getLatLng());\n\n        var middleMarker = this._createMarker(latlng);\n        var icon = L.divIcon({ className: 'marker-icon marker-icon-middle' });\n        middleMarker.setIcon(icon);\n\n        // save reference to this middle markers on the neighboor regular markers\n        leftM._middleMarkerNext = middleMarker;\n        rightM._middleMarkerPrev = middleMarker;\n\n        middleMarker.on('click', function () {\n\n            // TODO: move the next two lines inside _addMarker() as soon as\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            // is fixed\n            var icon = L.divIcon({ className: 'marker-icon' });\n            middleMarker.setIcon(icon);\n\n            _this2._addMarker(middleMarker, leftM, rightM);\n        });\n        middleMarker.on('movestart', function () {\n\n            // TODO: This is a workaround. Remove the moveend listener and callback as soon as this is fixed:\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            middleMarker.on('moveend', function () {\n                var icon = L.divIcon({ className: 'marker-icon' });\n                middleMarker.setIcon(icon);\n\n                middleMarker.off('moveend');\n            });\n\n            _this2._addMarker(middleMarker, leftM, rightM);\n        });\n    },\n\n    // adds a new marker from a middlemarker\n    _addMarker: function _addMarker(newM, leftM, rightM) {\n\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        var latlng = newM.getLatLng();\n        var coords = this._poly._latlngs[0];\n        var index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map(function (marker, i) {\n            return marker._index = i;\n        });\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n    },\n\n    _removeMarker: function _removeMarker(e) {\n        var marker = e.target;\n        var coords = this._poly._latlngs[0];\n        var index = marker._index;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if (index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        coords.splice(index, 1);\n\n        // if the poly has no coordinates left, remove the layer\n        // else, redraw it\n        if (coords.length < 1) {\n            this._poly.remove();\n        } else {\n            this._poly.redraw();\n        }\n\n        // remove the marker and the middlemarkers next to it from the map\n        this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        this._markerGroup.removeLayer(marker._middleMarkerNext);\n        this._markerGroup.removeLayer(marker);\n\n        // find neighbor marker-indexes\n        var leftMarkerIndex = index - 1 < 0 ? this._markers.length - 1 : index - 1;\n        var rightMarkerIndex = index + 1 >= this._markers.length ? 0 : index + 1;\n\n        // don't create middlemarkers if there is only one marker left\n        if (rightMarkerIndex !== leftMarkerIndex) {\n            var leftM = this._markers[leftMarkerIndex];\n            var rightM = this._markers[rightMarkerIndex];\n            this._createMiddleMarker(leftM, rightM);\n        }\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map(function (marker, i) {\n            return marker._index = i;\n        });\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        if (this.options.preventOverlap) {\n            this._handleOverlap();\n            this._applyPossibleCoordsChanges();\n        }\n\n        // fire edit event\n        this._fireEdit();\n    },\n\n    _onMarkerDrag: function _onMarkerDrag(e) {\n\n        // dragged marker\n        var marker = e.target;\n\n        // the dragged markers neighbors\n        var nextMarkerIndex = marker._index + 1 >= this._markers.length ? 0 : marker._index + 1;\n        var prevMarkerIndex = marker._index - 1 < 0 ? this._markers.length - 1 : marker._index - 1;\n\n        // update marker coordinates which will update polygon coordinates\n        L.extend(marker._origLatLng, marker._latlng);\n        this._poly.redraw();\n\n        // update middle markers on the left and right\n        // be aware that \"next\" and \"prev\" might be interchanged, depending on the geojson array\n        var markerLatLng = marker.getLatLng();\n        var prevMarkerLatLng = this._markers[prevMarkerIndex].getLatLng();\n        var nextMarkerLatLng = this._markers[nextMarkerIndex].getLatLng();\n\n        var middleMarkerNextLatLng = this._calcMiddleLatLng(markerLatLng, nextMarkerLatLng);\n        marker._middleMarkerNext.setLatLng(middleMarkerNextLatLng);\n\n        var middleMarkerPrevLatLng = this._calcMiddleLatLng(markerLatLng, prevMarkerLatLng);\n        marker._middleMarkerPrev.setLatLng(middleMarkerPrevLatLng);\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        if (this.options.preventOverlap) {\n            this._handleOverlap();\n        }\n    },\n\n    _onMarkerDragEnd: function _onMarkerDragEnd(e) {\n\n        this._applyPossibleCoordsChanges();\n\n        // fire edit event\n        this._fireEdit();\n    },\n\n    _fireEdit: function _fireEdit() {\n        // fire edit event\n        this._poly.edited = true;\n        this._poly.fire('pm:edit');\n    },\n\n    _calcMiddleLatLng: function _calcMiddleLatLng(latlng1, latlng2) {\n        // calculate the middle coordinates between two markers\n        // TODO: put this into a utils.js or something\n\n        var map = this._poly._map,\n            p1 = map.project(latlng1),\n            p2 = map.project(latlng2);\n\n        var latlng = map.unproject(p1._add(p2)._divideBy(2));\n\n        return latlng;\n    }\n\n});\n'use strict';\n\nL.Control.PMButton = L.Control.extend({\n    options: {\n        position: 'topleft'\n    },\n    initialize: function initialize(options) {\n        this._button = {};\n        this.setButton(options);\n    },\n\n    onAdd: function onAdd(map) {\n\n        this._map = map;\n        var container = L.DomUtil.create('div', 'leaflet-control-button');\n\n        this._container = container;\n\n        this._makeButton(this._button);\n        return this._container;\n    },\n\n    onRemove: function onRemove(map) {},\n\n    setButton: function setButton(options) {\n        var button = {\n            'className': options.className,\n            'iconUrl': options.iconUrl,\n            'onClick': options.onClick,\n            'afterClick': options.afterClick,\n            'doToggle': options.doToggle,\n            'toggleStatus': options.toggleStatus\n        };\n\n        this._button = button;\n    },\n\n    getText: function getText() {\n        return this._button.text;\n    },\n\n    getIconUrl: function getIconUrl() {\n        return this._button.iconUrl;\n    },\n\n    destroy: function destroy() {\n        this._button = {};\n        this._update();\n    },\n\n    toggle: function toggle(e) {\n        if (typeof e === 'boolean') {\n            this._button.toggleStatus = e;\n        } else {\n            this._button.toggleStatus = !this._button.toggleStatus;\n        }\n        this._applyStyleClasses();\n    },\n    toggled: function toggled() {\n        return this._button.toggleStatus;\n    },\n    onCreate: function onCreate() {\n        this.toggle(false);\n    },\n    _makeButton: function _makeButton(button) {\n\n        var newButton = L.DomUtil.create('div', 'leaflet-buttons-control-button', this._container);\n        if (button.toggleStatus) L.DomUtil.addClass(newButton, 'active');\n\n        var image = L.DomUtil.create('img', 'control-icon', newButton);\n        if (button.iconUrl) {\n            image.setAttribute('src', button.iconUrl);\n        }\n        if (button.className) {\n            L.DomUtil.addClass(image, button.className);\n        }\n\n        L.DomEvent.addListener(newButton, 'click', button.onClick, this).addListener(newButton, 'click', this._clicked, this).addListener(newButton, 'click', button.afterClick, this);\n\n        L.DomEvent.disableClickPropagation(newButton);\n        return newButton;\n    },\n\n    _applyStyleClasses: function _applyStyleClasses() {\n\n        if (!this._container) {\n            return;\n        }\n\n        if (!this._button.toggleStatus) {\n            L.DomUtil.removeClass(this._container.childNodes[0], 'active');\n        } else {\n            L.DomUtil.addClass(this._container.childNodes[0], 'active');\n        }\n    },\n\n    _clicked: function _clicked() {\n\n        if (this._button.doToggle) {\n            this.toggle();\n        }\n        return;\n    }\n\n});\n'use strict';\n\nL.PM.Toolbar = L.Class.extend({\n    options: {\n        drawPolygon: true,\n        deleteLayer: false\n    },\n    initialize: function initialize(map) {\n        this.map = map;\n\n        this.buttons = {};\n        this._defineButtons();\n    },\n\n    getButtons: function getButtons() {\n        return this.buttons;\n    },\n\n    addControls: function addControls() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? this.options : arguments[0];\n\n        // adds all buttons to the map specified inside options\n\n        // first set the options\n        L.Util.setOptions(this, options);\n\n        // now show the specified buttons\n        this._showHideButtons();\n    },\n    _addButton: function _addButton(name, button) {\n        this.buttons[name] = button;\n        this.options[name] = this.options[name] || false;\n\n        return this.buttons[name];\n    },\n    toggleButton: function toggleButton(name, status) {\n        this.buttons[name].toggle(status);\n    },\n    _defineButtons: function _defineButtons() {\n        var _this = this;\n\n        // some buttons are still in their respective classes, like L.PM.Draw.Poly\n        var deleteButton = {\n            'className': 'icon-delete',\n            'onClick': function onClick(e) {},\n            'afterClick': function afterClick(e) {\n                _this.map.pm.toggleRemoval(_this.buttons.deleteLayer.toggled());\n            },\n            'doToggle': true,\n            'toggleStatus': false\n        };\n\n        this._addButton('deleteLayer', new L.Control.PMButton(deleteButton));\n\n        var drawPolyButton = {\n            'className': 'icon-polygon',\n            'onClick': function onClick(e) {},\n            'afterClick': function afterClick(e) {\n                // toggle drawing mode\n                _this.map.pm.Draw.Poly.toggle();\n            },\n            'doToggle': true,\n            'toggleStatus': false\n        };\n\n        this._addButton('drawPolygon', new L.Control.PMButton(drawPolyButton));\n    },\n    _showHideButtons: function _showHideButtons() {\n        // loop through all buttons\n        var buttons = this.getButtons();\n\n        for (var btn in buttons) {\n            if (this.options[btn]) {\n                // if options say the button should be visible, add it to the map\n                buttons[btn].addTo(this.map);\n            } else {\n                // if not, remove it\n                buttons[btn].remove();\n            }\n        }\n    }\n});","var DragMixin = {\n    _initDraggableLayer: function() {\n        // temporary coord variable for delta calculation\n        this._tempDragCoord;\n\n        // add CSS class\n        var el = this._poly._path;\n        L.DomUtil.addClass(el, 'leaflet-pm-draggable');\n\n\n        var onMouseUp = (e) => {\n\n            // re-enable map drag\n            this._poly._map.dragging.enable();\n\n            // clear up mousemove event\n            this._poly._map.off('mousemove');\n\n            // clear up mouseup event\n            this._poly.off('mouseup');\n\n            // show markers again\n            this._initMarkers();\n\n            // timeout to prevent click event after drag :-/\n            // TODO: do it better as soon as leaflet has a way to do it better :-)\n            window.setTimeout(() => {\n                // set state\n                this._dragging = false;\n                L.DomUtil.removeClass(el, 'leaflet-pm-dragging');\n\n                // fire pm:dragend event\n                this._poly.fire('pm:dragend');\n\n                // fire edit\n                this._fireEdit();\n            }, 10);\n\n        }\n\n\n        var onMouseMove = (e) => {\n\n            if(!this._dragging) {\n\n                // set state\n                this._dragging = true;\n                L.DomUtil.addClass(el, 'leaflet-pm-dragging');\n\n                // bring it to front to prevent drag interception\n                this._poly.bringToFront();\n\n                // disbale map drag\n                this._poly._map.dragging.disable();\n\n                // hide markers\n                this._markerGroup.clearLayers();\n\n                // fire pm:dragstart event\n                this._poly.fire('pm:dragstart');\n\n\n            }\n\n            this._onLayerDrag(e);\n\n        }\n\n        this._poly.on('mousedown', (e) => {\n\n            // save for delta calculation\n            this._tempDragCoord = e.latlng;\n\n            this._poly.on('mouseup', onMouseUp);\n\n            // listen to mousemove on map (instead of polygon),\n            // otherwise fast mouse movements stop the drag\n            this._poly._map.on('mousemove', onMouseMove);\n\n        });\n    },\n    dragging: function() {\n        return this._dragging;\n    },\n\n    _onLayerDrag: function(e) {\n\n        // latLng of mouse event\n        let latlng = e.latlng;\n\n        // delta coords (how far was dragged)\n        let deltaLatLng = {\n            lat: latlng.lat - this._tempDragCoord.lat,\n            lng: latlng.lng - this._tempDragCoord.lng\n        };\n\n        // create the new coordinates array\n        let coords = this._poly._latlngs[0];\n        let newLatLngs = coords.map((currentLatLng) => {\n            return {\n                lat: currentLatLng.lat + deltaLatLng.lat,\n                lng: currentLatLng.lng + deltaLatLng.lng\n            }\n        });\n\n        // set new coordinates and redraw\n        this._poly.setLatLngs(newLatLngs).redraw();\n\n        // save current latlng for next delta calculation\n        this._tempDragCoord = latlng;\n\n        // fire pm:dragstart event\n        this._poly.fire('pm:drag');\n\n    },\n}\n","var OverlapMixin = {\n\n    _applyPossibleCoordsChanges: function() {\n\n        // after the polygon was dragged and changed it's shape because of unallowed intersecting\n        // with another polygon, this function takes the temporarily drawn polygon (during drag) and applies\n        // it's coordinates to our main polygon\n\n        if(this._tempPolygon) {\n\n            // get the new coordinates\n            var latlngs = this._tempPolygon.getLayers()[0].getLatLngs();\n\n            // reshape our main polygon\n            this._poly.setLatLngs(latlngs).redraw();\n\n            // initialize the markers again\n            this._initMarkers();\n        }\n\n    },\n\n    _drawTemporaryPolygon: function(geoJson) {\n\n        // hide our polygon\n        this._poly.setStyle({opacity: 0, fillOpacity: 0});\n\n        // draw a temporary polygon (happens during drag & intersection)\n        this._tempPolygon = L.geoJson(geoJson).addTo(this._poly._map).bringToBack();\n\n    },\n\n    _handleOverlap: function() {\n\n        let mainPoly = this._poly;\n        let layers = this._layerGroup.getLayers();\n        let changed = false;\n        let resultingGeoJson = this._poly.toGeoJSON();\n\n        layers\n        .filter(layer => !Object.is(layer, mainPoly))\n        .map((layer) => {\n\n            let intersect;\n\n            // this needs to be in a try catch block because turf isn't reliable\n            // it throws self-intersection errors even if there are none\n            try {\n                intersect = turf.intersect(resultingGeoJson, layer.toGeoJSON());\n            } catch(e) {\n                console.warn('Turf Error.');\n            }\n\n            if(intersect) {\n                resultingGeoJson = turf.difference(resultingGeoJson, layer.toGeoJSON());\n\n                // if the resulting polygon is a MultiPolygon, don't handle it.\n                if(resultingGeoJson.geometry.type !== 'MultiPolygon') {\n                    changed = true;\n                }\n            }\n\n        });\n\n        if(this._tempPolygon) {\n            this._tempPolygon.remove();\n            delete this._tempPolygon;\n        }\n\n        if(changed) {\n            this._drawTemporaryPolygon(resultingGeoJson);\n        } else {\n            this._poly.setStyle({opacity: 1, fillOpacity: 0.2});\n        }\n\n\n\n    }\n}\n","/**\n*\n* A Leaflet Plugin For Editing Geometry Layers in Leaflet 1.0\n* by Sumit Kumar (@TweetsOfSumit)\n* Github Repo: https://github.com/codeofsumit/leaflet.pm\n*/\n\nL.PM = L.PM || {\n    initialize: function() {\n\n        var initLayerGroup = function() {\n            this.pm = new L.PM.Edit.LayerGroup(this);\n        };\n        L.LayerGroup.addInitHook(initLayerGroup);\n\n\n        var initPolygon = function() {\n            this.pm = new L.PM.Edit.Poly(this);\n        };\n        L.Polygon.addInitHook(initPolygon);\n\n\n        var initMap = function() {\n            this.pm = new L.PM.Map(this);\n        };\n        L.Map.addInitHook(initMap);\n\n    }\n};\n\n// initialize leaflet.pm\nL.PM.initialize();\n","L.PM.Map = L.Class.extend({\n    initialize(map) {\n        this.map = map;\n        this.Draw = new L.PM.Draw(map);\n        this.Toolbar = new L.PM.Toolbar(map);\n    },\n    addControls: function(options) {\n        this.Toolbar.addControls(options);\n    },\n    enableDraw: function(shape = 'Poly') {\n        this.Draw.enable(shape);\n    },\n    disableDraw: function(shape = 'Poly') {\n        this.Draw.disable(shape);\n    },\n    removeLayer: function(e) {\n        e.target.remove();\n    },\n    toggleRemoval: function(enabled) {\n        if(enabled) {\n            this.map.eachLayer((layer) => {\n                layer.on('click', this.removeLayer);\n            });\n        } else {\n            this.map.eachLayer((layer) => {\n                layer.off('click', this.removeLayer);\n            });\n        }\n\n\n\n    },\n});\n","L.PM.Draw = L.Class.extend({\n\n    initialize: function(map) {\n\n        // save the map\n        this._map = map;\n\n        // define all possible shapes that can be drawn\n        this.shapes = ['Poly'];\n\n        // initiate drawing class for our shapes\n        this.shapes.forEach((shape) => {\n            this[shape] = new L.PM.Draw[shape](this._map);\n        });\n\n    },\n    getShapes: function() {\n        // if somebody wants to know what shapes are available\n        return this.shapes;\n    },\n    enable: function(shape) {\n\n        if(!shape) {\n            throw 'Error: Please pass a shape as a parameter. Possible shapes are: ' + this.getShapes().join(',');\n        }\n\n        // disable drawing for all shapes\n        this.disable();\n\n        // enable draw for a shape\n        this[shape].enable();\n\n    },\n    disable: function() {\n\n        // there can only be one drawing mode active at a time on a map\n        // so it doesn't matter which one should be disabled.\n        // just disable all of them\n        this.shapes.forEach((shape) => {\n            this[shape].disable();\n        });\n\n    },\n    addControls: function() {\n        // add control buttons for our shapes\n        this.shapes.forEach((shape) => {\n            this[shape].addButton();\n        });\n    }\n});\n","L.PM.Edit = L.Class.extend({\n    includes: [DragMixin, OverlapMixin]\n});\n","L.PM.Draw.Poly = L.PM.Draw.extend({\n\n    initialize: function(map) {\n        this._map = map;\n        this._shape = 'Poly';\n        this.registerButton();\n        this.toolbarButtonName = 'drawPolygon';\n    },\n    enable: function(options) {\n        // enable draw mode\n\n        this._enabled = true;\n\n        // create a new layergroup\n        this._layerGroup = new L.LayerGroup();\n        this._layerGroup.addTo(this._map);\n\n        // this is the polyLine that'll make up the polygon\n        this._polyline = L.polyline([], {color: 'red'});\n        this._layerGroup.addLayer(this._polyline);\n\n        // this is the hintline from the mouse cursor to the last marker\n        this._hintline = L.polyline([], {\n            color: 'red',\n            dashArray: [5, 5]\n        });\n        this._layerGroup.addLayer(this._hintline);\n\n\n        // change map cursor\n        this._map._container.style.cursor = 'crosshair';\n\n        // create a polygon-point on click\n        this._map.on('click', this._createPolygonPoint, this);\n\n        // sync the hintline on mousemove\n        this._map.on('mousemove', this._syncHintLine, this);\n\n        // fire drawstart event\n        this._map.fire('pm:drawstart', {shape: this._shape});\n\n        // toggle the draw button of the Toolbar in case drawing mode got enabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, true);\n\n    },\n    disable: function() {\n        // disable draw mode\n\n        // cancel, if drawing mode isn't even enabled\n        if(!this._enabled) {\n            return;\n        }\n\n        this._enabled = false;\n\n        // reset cursor\n        this._map._container.style.cursor = 'default';\n\n        // unbind listeners\n        this._map.off('click', this._createPolygonPoint);\n        this._map.off('mousemove', this._syncHintLine);\n\n        // remove layer\n        this._map.removeLayer(this._layerGroup);\n\n        // fire drawend event\n        this._map.fire('pm:drawend', {shape: this._shape});\n\n        // toggle the draw button of the Toolbar in case drawing mode got disabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, false);\n\n    },\n    enabled: function() {\n        return this._enabled;\n    },\n    toggle: function(options) {\n\n        if(this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n\n    },\n    registerButton: function(map) {\n\n        var drawPolyButton = {\n            'className': 'icon-polygon',\n            'onClick': function() {\n\n            },\n            'afterClick': function(e) {\n                self.toggle();\n            },\n            'doToggle': true,\n            'toggleStatus': false\n        };\n\n\n        // this._drawButton = L.PM.Toolbar.addButton('drawPolygon', new L.Control.PMButton(drawPolyButton));\n        //\n        // this._map.on('pm:drawstart', (e) => {\n        //     if(e.shape === this._shape && !this._drawButton.toggled()) {\n        //         this._drawButton._clicked();\n        //     }\n        // });\n        //\n        // this._map.on('pm:drawend', (e) => {\n        //     if(e.shape === this._shape && this._drawButton.toggled()) {\n        //         this._drawButton._clicked();\n        //     }\n        // });\n\n\n\n    },\n    _syncHintLine: function(e) {\n\n        var polyPoints = this._polyline.getLatLngs();\n\n        if(polyPoints.length > 0) {\n            var lastPolygonPoint = polyPoints[polyPoints.length - 1];\n            this._hintline.setLatLngs([lastPolygonPoint, e.latlng]);\n        }\n\n\n\n    },\n    _createPolygonPoint: function(e) {\n\n        // is this the first point?\n        var first = this._polyline.getLatLngs().length === 0 ? true : false;\n\n        this._polyline.addLatLng(e.latlng);\n        this._createMarker(e.latlng, first);\n\n\n        this._hintline.setLatLngs([e.latlng, e.latlng]);\n\n    },\n    _finishPolygon: function() {\n\n        var coords = this._polyline.getLatLngs();\n        var polygonLayer = L.polygon(coords).addTo(this._map);\n\n        polygonLayer.pm.toggleEdit();\n\n        this.disable();\n\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polygonLayer\n        });\n    },\n    _createMarker: function(latlng, first) {\n\n        var marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({className: 'marker-icon'})\n        });\n\n        this._layerGroup.addLayer(marker);\n\n        if(first) {\n            marker.on('click', this._finishPolygon, this);\n        }\n\n        return marker;\n\n    },\n});\n","// LayerGroup doesn't inherit from L.PM.Edit because it's just calling L.PM.Edit.Poly\n// (which inherits from L.PM.Edit) for each layer,\n// so it's not really a parent class\nL.PM.Edit.LayerGroup = L.Class.extend({\n    initialize: function(layerGroup) {\n\n        this._layerGroup = layerGroup;\n        this._layers = layerGroup.getLayers();\n\n        let availableEvents = ['pm:edit', 'pm:dragstart', 'pm:drag', 'pm:dragend'];\n\n        this._layers.forEach((layer) => {\n\n            // listen to the events of the layers in this group\n            availableEvents.forEach((event) => {\n                layer.on(event, this._fireEvent, this);\n            });\n\n            // add reference for the group to each layer inside said group\n            layer.pm._layerGroup = this._layerGroup;\n        });\n\n\n        // if a new layer is added to the group, reinitialize\n        // This only works for FeatureGroups, not LayerGroups\n        // https://github.com/Leaflet/Leaflet/issues/4861\n        this._layerGroup.on('layeradd', (e) => {\n\n            this.initialize(layerGroup);\n\n            // if editing was already enabled for this group, enable it again\n            // so the new layers are enabled\n            if(e.target.pm.enabled()) {\n                this.enable(this.getOptions());\n            }\n        });\n    },\n    _fireEvent: function(e) {\n        this._layerGroup.fireEvent(e.type, e);\n    },\n    toggleEdit: function(options) {\n        this._options = options;\n        this._layers.forEach(layer => {\n            layer.pm.toggleEdit(options);\n        });\n    },\n    enable: function(options) {\n        this._options = options;\n        this._layers.forEach(layer => {\n            layer.pm.enable(options);\n        });\n    },\n    disable: function() {\n        this._layers.forEach(layer => {\n            layer.pm.disable();\n        });\n    },\n    enabled: function() {\n        let enabled = this._layers.find((layer) => layer.pm.enabled());\n        return !!enabled;\n    },\n    dragging: function() {\n        let dragging = this._layers.find((layer) => layer.pm.dragging());\n        return !!dragging;\n    },\n    getOptions: function() {\n        return this._options;\n    }\n});\n","L.PM.Edit.Poly = L.PM.Edit.extend({\n    initialize: function(poly) {\n        this._poly = poly;\n        this._enabled = false;\n    },\n\n    toggleEdit: function(options) {\n        if(!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n\n    enable: function(options = {}) {\n\n        this.options = options;\n\n        if(!this.enabled()) {\n            // change state\n            this._enabled = true;\n\n            // init markers\n            this._initMarkers();\n\n            // if polygon gets removed from map, disable edit mode\n            this._poly.on('remove', (e) => {\n                this.disable(e.target);\n            });\n\n            // preventOverlap needs the turf library. If it's not included, deactivate it again\n            if(window.turf === undefined && this.options.preventOverlap) {\n                console.warn('TurfJS not found, preventOverlap is deactivated');\n                this.options.preventOverlap = false;\n            }\n\n            if(this.options.draggable) {\n                this._initDraggableLayer();\n            }\n\n            if(this.options.preventOverlap) {\n\n                // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n                this._poly.on('pm:drag', this._handleOverlap, this);\n\n                // set new coordinates, more details inside the function\n                this._poly.on('pm:dragend', this._applyPossibleCoordsChanges, this);\n            }\n        }\n\n    },\n\n    enabled: function() {\n        return this._enabled;\n    },\n\n    disable: function(poly = this._poly) {\n\n        // prevent disabling if polygon is being dragged\n        if(poly.pm._dragging) {\n            return false;\n        }\n        poly.pm._enabled = false;\n        poly.pm._markerGroup.clearLayers();\n\n        // clean up draggable\n        poly.off('mousedown');\n        poly.off('mouseup');\n\n        // remove draggable class\n        var el = poly._path;\n        L.DomUtil.removeClass(el, 'leaflet-pm-draggable');\n    },\n\n    _initMarkers: function() {\n        let map = this._poly._map;\n\n        // cleanup old ones first\n        if(this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        let coords = this._poly._latlngs[0];\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for(var k = 0; k < coords.length; k++) {\n\n            var nextIndex = k+1 >= coords.length ? 0 : k+1;\n            this._createMiddleMarker(\n                this._markers[k], this._markers[nextIndex]\n            );\n        }\n\n    },\n\n    // creates initial markers for coordinates\n    _createMarker: function(latlng, index) {\n\n        let marker = new L.Marker(latlng, {\n            draggable: true,\n            icon: L.divIcon({className: 'marker-icon'})\n        });\n\n        marker._origLatLng = latlng;\n        marker._index = index;\n\n        marker.on('drag', this._onMarkerDrag, this);\n        marker.on('dragend', this._onMarkerDragEnd, this);\n        marker.on('contextmenu', this._removeMarker, this);\n\n        this._markerGroup.addLayer(marker);\n\n        return marker;\n\n    },\n\n    // creates the middle markes between coordinates\n    _createMiddleMarker: function(leftM, rightM) {\n\n        let latlng = this._calcMiddleLatLng(leftM.getLatLng(), rightM.getLatLng());\n\n        let middleMarker = this._createMarker(latlng);\n        let icon = L.divIcon({className: 'marker-icon marker-icon-middle'})\n        middleMarker.setIcon(icon);\n\n        // save reference to this middle markers on the neighboor regular markers\n        leftM._middleMarkerNext = middleMarker;\n        rightM._middleMarkerPrev = middleMarker;\n\n        middleMarker.on('click', () => {\n\n            // TODO: move the next two lines inside _addMarker() as soon as\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            // is fixed\n            var icon = L.divIcon({className: 'marker-icon'});\n            middleMarker.setIcon(icon);\n\n            this._addMarker(middleMarker, leftM, rightM);\n        });\n        middleMarker.on('movestart', () => {\n\n            // TODO: This is a workaround. Remove the moveend listener and callback as soon as this is fixed:\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            middleMarker.on('moveend', function() {\n                var icon = L.divIcon({className: 'marker-icon'});\n                middleMarker.setIcon(icon);\n\n                middleMarker.off('moveend');\n            });\n\n            this._addMarker(middleMarker, leftM, rightM);\n        });\n\n\n    },\n\n    // adds a new marker from a middlemarker\n    _addMarker: function(newM, leftM, rightM) {\n\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        let latlng = newM.getLatLng();\n        let coords = this._poly._latlngs[0];\n        let index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map((marker, i) => marker._index = i);\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n\n\n    },\n\n    _removeMarker: function(e) {\n        let marker = e.target;\n        let coords = this._poly._latlngs[0];\n        let index = marker._index;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if(index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        coords.splice(index, 1);\n\n        // if the poly has no coordinates left, remove the layer\n        // else, redraw it\n        if(coords.length < 1) {\n            this._poly.remove();\n        } else {\n            this._poly.redraw();\n        }\n\n        // remove the marker and the middlemarkers next to it from the map\n        this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        this._markerGroup.removeLayer(marker._middleMarkerNext);\n        this._markerGroup.removeLayer(marker);\n\n        // find neighbor marker-indexes\n        let leftMarkerIndex = index - 1 < 0 ? this._markers.length - 1 : index - 1;\n        let rightMarkerIndex = index + 1 >= this._markers.length ? 0 : index + 1;\n\n        // don't create middlemarkers if there is only one marker left\n        if(rightMarkerIndex !== leftMarkerIndex) {\n            let leftM = this._markers[leftMarkerIndex];\n            let rightM = this._markers[rightMarkerIndex];\n            this._createMiddleMarker(leftM, rightM);\n        }\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map((marker, i) => marker._index = i);\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        if(this.options.preventOverlap) {\n            this._handleOverlap();\n            this._applyPossibleCoordsChanges();\n        }\n\n        // fire edit event\n        this._fireEdit();\n\n\n    },\n\n\n\n    _onMarkerDrag: function(e) {\n\n        // dragged marker\n        let marker = e.target;\n\n        // the dragged markers neighbors\n        let nextMarkerIndex = marker._index + 1 >= this._markers.length ? 0 : marker._index + 1;\n        let prevMarkerIndex = marker._index - 1 < 0 ? this._markers.length - 1 : marker._index - 1;\n\n        // update marker coordinates which will update polygon coordinates\n        L.extend(marker._origLatLng, marker._latlng);\n        this._poly.redraw();\n\n        // update middle markers on the left and right\n        // be aware that \"next\" and \"prev\" might be interchanged, depending on the geojson array\n        let markerLatLng = marker.getLatLng();\n        let prevMarkerLatLng = this._markers[prevMarkerIndex].getLatLng();\n        let nextMarkerLatLng = this._markers[nextMarkerIndex].getLatLng();\n\n        let middleMarkerNextLatLng = this._calcMiddleLatLng(markerLatLng, nextMarkerLatLng);\n        marker._middleMarkerNext.setLatLng(middleMarkerNextLatLng);\n\n        let middleMarkerPrevLatLng = this._calcMiddleLatLng(markerLatLng, prevMarkerLatLng);\n        marker._middleMarkerPrev.setLatLng(middleMarkerPrevLatLng);\n\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        if(this.options.preventOverlap) {\n            this._handleOverlap();\n        }\n\n    },\n\n    _onMarkerDragEnd: function(e) {\n\n        this._applyPossibleCoordsChanges();\n\n        // fire edit event\n        this._fireEdit();\n\n    },\n\n    _fireEdit: function () {\n        // fire edit event\n        this._poly.edited = true;\n        this._poly.fire('pm:edit');\n    },\n\n    _calcMiddleLatLng: function(latlng1, latlng2) {\n        // calculate the middle coordinates between two markers\n        // TODO: put this into a utils.js or something\n\n        var map = this._poly._map,\n            p1 = map.project(latlng1),\n            p2 = map.project(latlng2);\n\n        var latlng = map.unproject(p1._add(p2)._divideBy(2));\n\n        return latlng;\n    }\n\n});\n","L.Control.PMButton = L.Control.extend({\n    options: {\n        position: 'topleft'\n    },\n    initialize: function (options) {\n        this._button = {};\n        this.setButton(options);\n    },\n\n    onAdd: function (map) {\n\n        this._map = map;\n        var container = L.DomUtil.create('div', 'leaflet-control-button');\n\n        this._container = container;\n\n        this._makeButton(this._button);\n        return this._container;\n    },\n\n    onRemove: function (map) {\n    },\n\n    setButton: function (options) {\n        var button = {\n            'className': options.className,\n            'iconUrl': options.iconUrl,\n            'onClick': options.onClick,\n            'afterClick': options.afterClick,\n            'doToggle': options.doToggle,\n            'toggleStatus': options.toggleStatus\n        };\n\n        this._button = button;\n    },\n\n    getText: function () {\n        return this._button.text;\n    },\n\n    getIconUrl: function () {\n        return this._button.iconUrl;\n    },\n\n    destroy: function () {\n        this._button = {};\n        this._update();\n    },\n\n    toggle: function (e) {\n        if(typeof e === 'boolean'){\n            this._button.toggleStatus = e;\n        }\n        else{\n            this._button.toggleStatus = !this._button.toggleStatus;\n        }\n        this._applyStyleClasses();\n    },\n    toggled: function () {\n        return this._button.toggleStatus;\n    },\n    onCreate: function() {\n        this.toggle(false);\n    },\n    _makeButton: function(button) {\n\n        var newButton = L.DomUtil.create('div', 'leaflet-buttons-control-button', this._container);\n        if(button.toggleStatus)\n            L.DomUtil.addClass(newButton,'active');\n\n        var image = L.DomUtil.create('img', 'control-icon', newButton);\n        if (button.iconUrl) {\n            image.setAttribute('src', button.iconUrl);\n        }\n        if (button.className) {\n            L.DomUtil.addClass(image, button.className);\n        }\n\n        L.DomEvent\n            .addListener(newButton, 'click', button.onClick, this)\n            .addListener(newButton, 'click', this._clicked, this)\n            .addListener(newButton, 'click', button.afterClick, this);\n\n        L.DomEvent.disableClickPropagation(newButton);\n        return newButton;\n\n    },\n\n    _applyStyleClasses: function() {\n\n        if(!this._container) {\n            return;\n        }\n\n        if(!this._button.toggleStatus) {\n            L.DomUtil.removeClass(this._container.childNodes[0],'active');\n        } else {\n            L.DomUtil.addClass(this._container.childNodes[0],'active');\n        }\n    },\n\n    _clicked: function () {\n\n        if(this._button.doToggle){\n            this.toggle();\n        }\n        return;\n    }\n\n});\n","L.PM.Toolbar = L.Class.extend({\n    options: {\n        drawPolygon: true,\n        deleteLayer: false\n    },\n    initialize(map) {\n        this.map = map;\n\n        this.buttons = {};\n        this._defineButtons();\n    },\n    getButtons: function() {\n        return this.buttons;\n    },\n\n    addControls: function(options = this.options) {\n        // adds all buttons to the map specified inside options\n\n        // first set the options\n        L.Util.setOptions(this, options)\n\n        // now show the specified buttons\n        this._showHideButtons();\n    },\n    _addButton: function(name, button) {\n        this.buttons[name] = button;\n        this.options[name] = this.options[name] || false;\n\n        return this.buttons[name];\n    },\n    toggleButton: function(name, status) {\n        this.buttons[name].toggle(status);\n    },\n    _defineButtons: function() {\n\n        // some buttons are still in their respective classes, like L.PM.Draw.Poly\n        var deleteButton = {\n            'className': 'icon-delete',\n            'onClick': (e) => {\n\n            },\n            'afterClick': (e) => {\n                this.map.pm.toggleRemoval(this.buttons.deleteLayer.toggled());\n            },\n            'doToggle': true,\n            'toggleStatus': false\n        };\n\n        this._addButton('deleteLayer', new L.Control.PMButton(deleteButton));\n\n        var drawPolyButton = {\n             'className': 'icon-polygon',\n             'onClick': (e) => {\n\n             },\n             'afterClick': (e) => {\n                 // toggle drawing mode\n                 this.map.pm.Draw.Poly.toggle();\n             },\n             'doToggle': true,\n             'toggleStatus': false\n        };\n\n        this._addButton('drawPolygon', new L.Control.PMButton(drawPolyButton));\n\n\n    },\n    _showHideButtons: function() {\n        // loop through all buttons\n        var buttons = this.getButtons();\n\n        for (var btn in buttons) {\n            if(this.options[btn]) {\n                // if options say the button should be visible, add it to the map\n                buttons[btn].addTo(this.map);\n            } else {\n                // if not, remove it\n                buttons[btn].remove();\n            }\n        }\n    }\n});\n"],"sourceRoot":"/source/"}