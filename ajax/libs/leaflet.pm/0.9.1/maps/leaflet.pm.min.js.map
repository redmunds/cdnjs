{"version":3,"sources":["leaflet.pm.js","Drag.js","Overlap.js","Snapping.js","L.PM.js","L.PM.Map.js","L.PM.Draw.js","L.PM.Edit.js","Draw/L.PM.Draw.Poly.js","Edit/L.PM.Edit.LayerGroup.js","Edit/L.PM.Edit.Poly.js","Toolbar/L.Controls.js","Toolbar/L.PM.Toolbar.js"],"names":["DragMixin","_initDraggableLayer","_this","this","_tempDragCoord","el","_poly","_path","L","DomUtil","addClass","onMouseUp","e","_map","dragging","enable","off","_initMarkers","window","setTimeout","_dragging","removeClass","fire","_fireEdit","onMouseMove","bringToFront","disable","_markerGroup","clearLayers","_onLayerDrag","on","latlng","deltaLatLng","lat","lng","coords","_latlngs","newLatLngs","map","currentLatLng","setLatLngs","redraw","OverlapMixin","_applyPossibleCoordsChanges","_tempPolygon","latlngs","getLayers","getLatLngs","_drawTemporaryPolygon","geoJson","setStyle","opacity","fillOpacity","addTo","bringToBack","_handleOverlap","mainPoly","layers","_layerGroup","changed","resultingGeoJson","toGeoJSON","filter","layer","Object","is","intersect","turf","console","warn","difference","geometry","type","remove","SnapMixin","_initSnappableMarkers","options","snapDistance","_markers","forEach","marker","_handleSnapping","_cleanupSnapping","_unsnap","_snapLatLng","_snapList","debugIndicatorLines","line","undefined","_createSnapList","target","closestLayer","_calcClosestLayer","getLatLng","snapLatLng","_checkPrioritiySnapping","minDistance","eventInfo","segment","layerInteractedWith","distance","setLatLng","_onMarkerDrag","A","B","C","distanceAC","_getDistance","distanceBC","closestVertexLatLng","shortestDistance","priorityDistance","snapLatlng","_this2","eachLayer","Polyline","push","debugLine","polyline","color","_this3","index","results","_calcLayerDistances","_this4","P","closestSegment","coord","nextIndex","length","_getDistanceToSegment","_getClosestPointOnSegment","latlngA","latlngB","maxzoom","getMaxZoom","Infinity","getZoom","project","closest","LineUtil","closestPointOnSegment","unproject","latLngToLayerPoint","pointToSegmentDistance","distanceTo","PM","initialize","initLayerGroup","pm","Edit","LayerGroup","addInitHook","initPolygon","Poly","Polygon","initMap","Map","Class","extend","Draw","Toolbar","addControls","enableDraw","shape","arguments","disableDraw","removeLayer","_layers","toggleRemoval","enabled","shapes","getShapes","join","addButton","includes","_shape","registerButton","toolbarButtonName","_enabled","_polyline","addLayer","_hintline","dashArray","_container","style","cursor","_createPolygonPoint","_syncHintLine","toggleButton","toggle","polyPoints","lastPolygonPoint","first","addLatLng","_createMarker","_finishPolygon","polygonLayer","polygon","toggleEdit","Marker","draggable","icon","divIcon","className","layerGroup","availableEvents","event","_fireEvent","getOptions","fireEvent","_options","find","poly","_leaflet_id","m","setZIndexOffset","k","_createMiddleMarker","snap","_origLatLng","_index","_onMarkerDragEnd","_removeMarker","leftM","rightM","_calcMiddleLatLng","middleMarker","setIcon","_middleMarkerNext","_middleMarkerPrev","_addMarker","newM","splice","i","leftMarkerIndex","rightMarkerIndex","nextMarkerIndex","prevMarkerIndex","_latlng","markerLatLng","prevMarkerLatLng","nextMarkerLatLng","middleMarkerNextLatLng","middleMarkerPrevLatLng","edited","latlng1","latlng2","p1","p2","_add","_divideBy","Control","PMButton","position","_button","setButton","onAdd","container","buttonsDomNode","_makeButton","appendChild","onRemove","button","iconUrl","onClick","afterClick","doToggle","toggleStatus","disableOtherButtons","getText","text","getIconUrl","destroy","_update","_applyStyleClasses","toggled","onCreate","_triggerClick","_clicked","newButton","create","image","setAttribute","DomEvent","addListener","triggerClickOnToggledButtons","disableClickPropagation","drawPolygon","editPolygon","dragPolygon","deleteLayer","buttons","_defineButtons","getButtons","Util","setOptions","_showHideButtons","_addButton","name","exceptThisButton","status","deleteButton","drawPolyButton","editButton","dragButton","btn"],"mappings":"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","file":"leaflet.pm.min.js","sourcesContent":["'use strict';\n\nvar DragMixin = {\n    _initDraggableLayer: function _initDraggableLayer() {\n        var _this = this;\n\n        // temporary coord variable for delta calculation\n        this._tempDragCoord;\n\n        // add CSS class\n        var el = this._poly._path;\n        L.DomUtil.addClass(el, 'leaflet-pm-draggable');\n\n        var onMouseUp = function onMouseUp(e) {\n\n            // re-enable map drag\n            _this._poly._map.dragging.enable();\n\n            // clear up mousemove event\n            _this._poly._map.off('mousemove');\n\n            // clear up mouseup event\n            _this._poly.off('mouseup');\n\n            // show markers again\n            _this._initMarkers();\n\n            // timeout to prevent click event after drag :-/\n            // TODO: do it better as soon as leaflet has a way to do it better :-)\n            window.setTimeout(function () {\n                // set state\n                _this._dragging = false;\n                L.DomUtil.removeClass(el, 'leaflet-pm-dragging');\n\n                // fire pm:dragend event\n                _this._poly.fire('pm:dragend');\n\n                // fire edit\n                _this._fireEdit();\n            }, 10);\n        };\n\n        var onMouseMove = function onMouseMove(e) {\n\n            if (!_this._dragging) {\n\n                // set state\n                _this._dragging = true;\n                L.DomUtil.addClass(el, 'leaflet-pm-dragging');\n\n                // bring it to front to prevent drag interception\n                _this._poly.bringToFront();\n\n                // disbale map drag\n                _this._poly._map.dragging.disable();\n\n                // hide markers\n                _this._markerGroup.clearLayers();\n\n                // fire pm:dragstart event\n                _this._poly.fire('pm:dragstart');\n            }\n\n            _this._onLayerDrag(e);\n        };\n\n        this._poly.on('mousedown', function (e) {\n\n            // save for delta calculation\n            _this._tempDragCoord = e.latlng;\n\n            _this._poly.on('mouseup', onMouseUp);\n\n            // listen to mousemove on map (instead of polygon),\n            // otherwise fast mouse movements stop the drag\n            _this._poly._map.on('mousemove', onMouseMove);\n        });\n    },\n    dragging: function dragging() {\n        return this._dragging;\n    },\n\n    _onLayerDrag: function _onLayerDrag(e) {\n\n        // latLng of mouse event\n        var latlng = e.latlng;\n\n        // delta coords (how far was dragged)\n        var deltaLatLng = {\n            lat: latlng.lat - this._tempDragCoord.lat,\n            lng: latlng.lng - this._tempDragCoord.lng\n        };\n\n        // create the new coordinates array\n        var coords = this._poly._latlngs[0];\n        var newLatLngs = coords.map(function (currentLatLng) {\n            return {\n                lat: currentLatLng.lat + deltaLatLng.lat,\n                lng: currentLatLng.lng + deltaLatLng.lng\n            };\n        });\n\n        // set new coordinates and redraw\n        this._poly.setLatLngs(newLatLngs).redraw();\n\n        // save current latlng for next delta calculation\n        this._tempDragCoord = latlng;\n\n        // fire pm:dragstart event\n        this._poly.fire('pm:drag');\n    }\n};\n'use strict';\n\n// this isn't included anymore but if you want to re-enable it:\n// 1. include this mixing inside L.PM.Edit.js\n// 2. include the turf.js dependency in your project before leaflet.pm\n// 3. uncomment all code inside L.PM.Edit.Poly that has an if-check on options.preventOverlap\n// 4. pass the option preventOverlap to the enable() function on your layer\nvar OverlapMixin = {\n\n    _applyPossibleCoordsChanges: function _applyPossibleCoordsChanges() {\n\n        // after the polygon was dragged and changed it's shape because of unallowed intersecting\n        // with another polygon, this function takes the temporarily drawn polygon (during drag) and applies\n        // it's coordinates to our main polygon\n\n        if (this._tempPolygon) {\n\n            // get the new coordinates\n            var latlngs = this._tempPolygon.getLayers()[0].getLatLngs();\n\n            // reshape our main polygon\n            this._poly.setLatLngs(latlngs).redraw();\n\n            // initialize the markers again\n            this._initMarkers();\n        }\n    },\n\n    _drawTemporaryPolygon: function _drawTemporaryPolygon(geoJson) {\n\n        // hide our polygon\n        this._poly.setStyle({ opacity: 0, fillOpacity: 0 });\n\n        // draw a temporary polygon (happens during drag & intersection)\n        this._tempPolygon = L.geoJson(geoJson).addTo(this._poly._map).bringToBack();\n    },\n\n    _handleOverlap: function _handleOverlap() {\n\n        var mainPoly = this._poly;\n        var layers = this._layerGroup.getLayers();\n        var changed = false;\n        var resultingGeoJson = this._poly.toGeoJSON();\n\n        layers.filter(function (layer) {\n            return !Object.is(layer, mainPoly);\n        }).map(function (layer) {\n\n            var intersect = void 0;\n\n            // this needs to be in a try catch block because turf isn't reliable\n            // it throws self-intersection errors even if there are none\n            try {\n                intersect = turf.intersect(resultingGeoJson, layer.toGeoJSON());\n            } catch (e) {\n                console.warn('Turf Error.');\n            }\n\n            if (intersect) {\n                resultingGeoJson = turf.difference(resultingGeoJson, layer.toGeoJSON());\n\n                // if the resulting polygon is a MultiPolygon, don't handle it.\n                if (resultingGeoJson.geometry.type !== 'MultiPolygon') {\n                    changed = true;\n                }\n            }\n        });\n\n        if (this._tempPolygon) {\n            this._tempPolygon.remove();\n            delete this._tempPolygon;\n        }\n\n        if (changed) {\n            this._drawTemporaryPolygon(resultingGeoJson);\n        } else {\n            this._poly.setStyle({ opacity: 1, fillOpacity: 0.2 });\n        }\n    }\n};\n'use strict';\n\nvar SnapMixin = {\n    _initSnappableMarkers: function _initSnappableMarkers() {\n        var _this = this;\n\n        this.options.snapDistance = this.options.snapDistance || 30;\n\n        this._markers.forEach(function (marker) {\n\n            marker.off('drag', _this._handleSnapping, _this);\n            marker.on('drag', _this._handleSnapping, _this);\n\n            marker.off('dragend', _this._cleanupSnapping, _this);\n            marker.on('dragend', _this._cleanupSnapping, _this);\n        });\n\n        this._poly.off('pm:dragstart', this._unsnap, this);\n        this._poly.on('pm:dragstart', this._unsnap, this);\n    },\n    _unsnap: function _unsnap(e) {\n        // delete the last snap\n        delete this._snapLatLng;\n    },\n    _cleanupSnapping: function _cleanupSnapping(e) {\n\n        // delete it, we need to refresh this with each start of a drag because\n        // meanwhile, new layers could've been added to the map\n        delete this._snapList;\n\n        this.debugIndicatorLines.forEach(function (line) {\n            line.remove();\n        });\n    },\n    _handleSnapping: function _handleSnapping(e) {\n\n        // create a list of polygons that the marker could snap to\n        // this isn't inside a movestart/dragstart callback because middlemarkers are initialized\n        // after dragstart/movestart so it wouldn't fire for them\n        if (this._snapList === undefined) {\n            this._createSnapList(e);\n        }\n\n        var marker = e.target;\n\n        // get the closest layer, it's closest latlng, segment and the distance\n        var closestLayer = this._calcClosestLayer(marker.getLatLng(), this._snapList);\n\n        // find the final latlng that we want to snap to\n        var snapLatLng = this._checkPrioritiySnapping(closestLayer);\n\n        // minimal distance before marker snaps (in pixels)\n        var minDistance = this.options.snapDistance;\n\n        // event info for pm:snap and pm:unsnap\n        var eventInfo = {\n            marker: marker,\n            snapLatLng: snapLatLng,\n            segment: closestLayer.segment,\n            layer: this._poly,\n            layerInteractedWith: closestLayer.layer // for lack of a better property name\n        };\n\n        if (closestLayer.distance < minDistance) {\n\n            // snap the marker\n            marker.setLatLng(snapLatLng);\n            this._onMarkerDrag(e);\n\n            // check if the snapping position differs from the last snap\n            if (this._snapLatLng !== snapLatLng) {\n\n                // if yes, save it and fire the pm:snap event\n                this._snapLatLng = snapLatLng;\n                marker.fire('pm:snap', eventInfo);\n                this._poly.fire('pm:snap', eventInfo);\n            }\n        } else {\n            // no more snapping\n\n            // if it was previously snapped...\n            if (this._snapLatLng) {\n\n                // ...unsnap\n                this._unsnap(eventInfo);\n\n                // and fire unsnap event\n                eventInfo.marker.fire('pm:unsnap', eventInfo);\n                this._poly.fire('pm:unsnap', eventInfo);\n            }\n        }\n    },\n\n    // we got the point we want to snap to (C), but we need to check if a coord of the polygon\n    // receives priority over C as the snapping point. Let's check this here\n    _checkPrioritiySnapping: function _checkPrioritiySnapping(closestLayer) {\n\n        var map = this._poly._map;\n\n        // A and B are the points of the closest segment to P (the marker position we want to snap)\n        var A = closestLayer.segment[0];\n        var B = closestLayer.segment[1];\n\n        // C is the point we would snap to on the segment.\n        // The closest point on the closest segment of the closest polygon to P. That's right.\n        var C = closestLayer.latlng;\n\n        // distances from A to C and B to C to check which one is closer to C\n        var distanceAC = this._getDistance(map, A, C);\n        var distanceBC = this._getDistance(map, B, C);\n\n        // closest latlng of A and B to C\n        var closestVertexLatLng = distanceAC < distanceBC ? A : B;\n\n        // distance between closestVertexLatLng and C\n        var shortestDistance = distanceAC < distanceBC ? distanceAC : distanceBC;\n\n        // the distance that needs to be undercut to trigger priority\n        var priorityDistance = this.options.snapDistance;\n\n        // the latlng we ultemately want to snap to\n        var snapLatlng = void 0;\n\n        // if C is closer to the closestVertexLatLng (A or B) than the snapDistance,\n        // the closestVertexLatLng has priority over C as the snapping point.\n        if (shortestDistance < priorityDistance) {\n            snapLatlng = closestVertexLatLng;\n        } else {\n            snapLatlng = closestLayer.latlng;\n        }\n\n        // return the snapping point\n        return snapLatlng;\n    },\n    _createSnapList: function _createSnapList() {\n        var _this2 = this;\n\n        var layers = [];\n        var debugIndicatorLines = [];\n\n        // find all layers that are or inherit from Polylines...\n        this._poly._map.eachLayer(function (layer) {\n            if (layer instanceof L.Polyline) {\n                layers.push(layer);\n\n                // this is for debugging\n                var debugLine = L.polyline([], { color: 'red' });\n                debugIndicatorLines.push(debugLine);\n\n                // uncomment 👇 this in to show debugging lines\n                // debugLine.addTo(this._poly._map);\n            }\n        });\n\n        // ...except myself\n        layers = layers.filter(function (layer) {\n            return _this2._poly !== layer;\n        });\n\n        this._snapList = layers;\n        this.debugIndicatorLines = debugIndicatorLines;\n    },\n    _calcClosestLayer: function _calcClosestLayer(latlng, layers) {\n        var _this3 = this;\n\n        var map = this._poly._map;\n\n        // the closest polygon to our dragged marker latlng\n        var closestLayer = {};\n\n        // loop through the layers\n        layers.forEach(function (layer, index) {\n\n            // find the closest latlng, segment and the distance of this layer to the dragged marker latlng\n            var results = _this3._calcLayerDistances(latlng, layer);\n\n            // show indicator lines, it's for debugging\n            _this3.debugIndicatorLines[index].setLatLngs([latlng, results.latlng]);\n\n            // save the info if it doesn't exist or if the distance is smaller than the previous one\n            if (closestLayer.distance === undefined || results.distance < closestLayer.distance) {\n                closestLayer = results;\n                closestLayer.layer = layer;\n            }\n        });\n\n        // return the closest layer and it's data\n        return closestLayer;\n    },\n    _calcLayerDistances: function _calcLayerDistances(latlng, layer) {\n        var _this4 = this;\n\n        var map = this._poly._map;\n\n        // the point P which we want to snap (probpably the marker that is dragged)\n        var P = latlng;\n\n        // the coords of the layer\n        var coords = layer.getLatLngs()[0];\n\n        // the closest segment (line between two points) of the layer\n        var closestSegment = void 0;\n\n        // the shortest distance from P to closestSegment\n        var shortestDistance = void 0;\n\n        // loop through the coords of the layer\n        coords.forEach(function (coord, index) {\n            // take this coord (A)...\n            var A = coord;\n\n            // and the next coord (B) as points\n            var nextIndex = index + 1 === coords.length ? 0 : index + 1;\n            var B = coords[nextIndex];\n\n            // calc the distance between P and AB-segment\n            var distance = _this4._getDistanceToSegment(map, P, A, B);\n\n            // is the distance shorter than the previous one? Save it and the segment\n            if (shortestDistance === undefined || distance < shortestDistance) {\n                shortestDistance = distance;\n                closestSegment = [A, B];\n            }\n        });\n\n        // now, take the closest segment (closestSegment) and calc the closest point to P on it.\n        var C = this._getClosestPointOnSegment(map, latlng, closestSegment[0], closestSegment[1]);\n\n        // return the latlng of that sucker\n        return {\n            latlng: C,\n            segment: closestSegment,\n            distance: shortestDistance\n        };\n    },\n    _getClosestPointOnSegment: function _getClosestPointOnSegment(map, latlng, latlngA, latlngB) {\n        var maxzoom = map.getMaxZoom();\n        if (maxzoom === Infinity) {\n            maxzoom = map.getZoom();\n        }\n        var P = map.project(latlng, maxzoom);\n        var A = map.project(latlngA, maxzoom);\n        var B = map.project(latlngB, maxzoom);\n        var closest = L.LineUtil.closestPointOnSegment(P, A, B);\n        return map.unproject(closest, maxzoom);\n    },\n    _getDistanceToSegment: function _getDistanceToSegment(map, latlng, latlngA, latlngB) {\n        var P = map.latLngToLayerPoint(latlng);\n        var A = map.latLngToLayerPoint(latlngA);\n        var B = map.latLngToLayerPoint(latlngB);\n        return L.LineUtil.pointToSegmentDistance(P, A, B);\n    },\n    _getDistance: function _getDistance(map, latlngA, latlngB) {\n        return map.latLngToLayerPoint(latlngA).distanceTo(map.latLngToLayerPoint(latlngB));\n    }\n};\n\"use strict\";\n\n/**\n*\n* A Leaflet Plugin For Editing Geometry Layers in Leaflet 1.0\n* by Sumit Kumar (@TweetsOfSumit)\n* Github Repo: https://github.com/codeofsumit/leaflet.pm\n*/\n\nL.PM = L.PM || {\n    initialize: function initialize() {\n\n        var initLayerGroup = function initLayerGroup() {\n            this.pm = new L.PM.Edit.LayerGroup(this);\n        };\n        L.LayerGroup.addInitHook(initLayerGroup);\n\n        var initPolygon = function initPolygon() {\n            this.pm = new L.PM.Edit.Poly(this);\n        };\n        L.Polygon.addInitHook(initPolygon);\n\n        var initMap = function initMap() {\n            this.pm = new L.PM.Map(this);\n        };\n        L.Map.addInitHook(initMap);\n    }\n};\n\n// initialize leaflet.pm\nL.PM.initialize();\n'use strict';\n\nL.PM.Map = L.Class.extend({\n    initialize: function initialize(map) {\n        this.map = map;\n        this.Draw = new L.PM.Draw(map);\n        this.Toolbar = new L.PM.Toolbar(map);\n    },\n\n    addControls: function addControls(options) {\n        this.Toolbar.addControls(options);\n    },\n    enableDraw: function enableDraw() {\n        var shape = arguments.length <= 0 || arguments[0] === undefined ? 'Poly' : arguments[0];\n\n        this.Draw.enable(shape);\n    },\n    disableDraw: function disableDraw() {\n        var shape = arguments.length <= 0 || arguments[0] === undefined ? 'Poly' : arguments[0];\n\n        this.Draw.disable(shape);\n    },\n    removeLayer: function removeLayer(e) {\n\n        var layer = e.target;\n        if (!layer._layers && !layer.pm.dragging()) {\n            e.target.remove();\n        }\n    },\n    toggleRemoval: function toggleRemoval(enabled) {\n        var _this = this;\n\n        if (enabled) {\n            this.map.eachLayer(function (layer) {\n                layer.on('click', _this.removeLayer);\n            });\n        } else {\n            this.map.eachLayer(function (layer) {\n                layer.off('click', _this.removeLayer);\n            });\n        }\n    }\n});\n'use strict';\n\nL.PM.Draw = L.Class.extend({\n\n    initialize: function initialize(map) {\n        var _this = this;\n\n        // save the map\n        this._map = map;\n\n        // define all possible shapes that can be drawn\n        this.shapes = ['Poly'];\n\n        // initiate drawing class for our shapes\n        this.shapes.forEach(function (shape) {\n            _this[shape] = new L.PM.Draw[shape](_this._map);\n        });\n    },\n    getShapes: function getShapes() {\n        // if somebody wants to know what shapes are available\n        return this.shapes;\n    },\n    enable: function enable(shape) {\n\n        if (!shape) {\n            throw 'Error: Please pass a shape as a parameter. Possible shapes are: ' + this.getShapes().join(',');\n        }\n\n        // disable drawing for all shapes\n        this.disable();\n\n        // enable draw for a shape\n        this[shape].enable();\n    },\n    disable: function disable() {\n        var _this2 = this;\n\n        // there can only be one drawing mode active at a time on a map\n        // so it doesn't matter which one should be disabled.\n        // just disable all of them\n        this.shapes.forEach(function (shape) {\n            _this2[shape].disable();\n        });\n    },\n    addControls: function addControls() {\n        var _this3 = this;\n\n        // add control buttons for our shapes\n        this.shapes.forEach(function (shape) {\n            _this3[shape].addButton();\n        });\n    }\n});\n\"use strict\";\n\nL.PM.Edit = L.Class.extend({\n    includes: [DragMixin, SnapMixin]\n});\n'use strict';\n\nL.PM.Draw.Poly = L.PM.Draw.extend({\n\n    initialize: function initialize(map) {\n        this._map = map;\n        this._shape = 'Poly';\n        this.registerButton();\n        this.toolbarButtonName = 'drawPolygon';\n    },\n    enable: function enable(options) {\n        // enable draw mode\n\n        this._enabled = true;\n\n        // create a new layergroup\n        this._layerGroup = new L.LayerGroup();\n        this._layerGroup.addTo(this._map);\n\n        // this is the polyLine that'll make up the polygon\n        this._polyline = L.polyline([], { color: 'red' });\n        this._layerGroup.addLayer(this._polyline);\n\n        // this is the hintline from the mouse cursor to the last marker\n        this._hintline = L.polyline([], {\n            color: 'red',\n            dashArray: [5, 5]\n        });\n        this._layerGroup.addLayer(this._hintline);\n\n        // change map cursor\n        this._map._container.style.cursor = 'crosshair';\n\n        // create a polygon-point on click\n        this._map.on('click', this._createPolygonPoint, this);\n\n        // sync the hintline on mousemove\n        this._map.on('mousemove', this._syncHintLine, this);\n\n        // fire drawstart event\n        this._map.fire('pm:drawstart', { shape: this._shape });\n\n        // toggle the draw button of the Toolbar in case drawing mode got enabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, true);\n    },\n    disable: function disable() {\n        // disable draw mode\n\n        // cancel, if drawing mode isn't even enabled\n        if (!this._enabled) {\n            return;\n        }\n\n        this._enabled = false;\n\n        // reset cursor\n        this._map._container.style.cursor = 'default';\n\n        // unbind listeners\n        this._map.off('click', this._createPolygonPoint);\n        this._map.off('mousemove', this._syncHintLine);\n\n        // remove layer\n        this._map.removeLayer(this._layerGroup);\n\n        // fire drawend event\n        this._map.fire('pm:drawend', { shape: this._shape });\n\n        // toggle the draw button of the Toolbar in case drawing mode got disabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, false);\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    toggle: function toggle(options) {\n\n        if (this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n    },\n    registerButton: function registerButton(map) {\n\n        var drawPolyButton = {\n            'className': 'icon-polygon',\n            'onClick': function onClick() {},\n            'afterClick': function afterClick(e) {\n                self.toggle();\n            },\n            'doToggle': true,\n            'toggleStatus': false\n        };\n\n        // this._drawButton = L.PM.Toolbar.addButton('drawPolygon', new L.Control.PMButton(drawPolyButton));\n        //\n        // this._map.on('pm:drawstart', (e) => {\n        //     if(e.shape === this._shape && !this._drawButton.toggled()) {\n        //         this._drawButton._clicked();\n        //     }\n        // });\n        //\n        // this._map.on('pm:drawend', (e) => {\n        //     if(e.shape === this._shape && this._drawButton.toggled()) {\n        //         this._drawButton._clicked();\n        //     }\n        // });\n\n    },\n    _syncHintLine: function _syncHintLine(e) {\n\n        var polyPoints = this._polyline.getLatLngs();\n\n        if (polyPoints.length > 0) {\n            var lastPolygonPoint = polyPoints[polyPoints.length - 1];\n            this._hintline.setLatLngs([lastPolygonPoint, e.latlng]);\n        }\n    },\n    _createPolygonPoint: function _createPolygonPoint(e) {\n\n        // is this the first point?\n        var first = this._polyline.getLatLngs().length === 0 ? true : false;\n\n        this._polyline.addLatLng(e.latlng);\n        this._createMarker(e.latlng, first);\n\n        this._hintline.setLatLngs([e.latlng, e.latlng]);\n    },\n    _finishPolygon: function _finishPolygon() {\n\n        var coords = this._polyline.getLatLngs();\n        var polygonLayer = L.polygon(coords).addTo(this._map);\n\n        polygonLayer.pm.toggleEdit();\n\n        this.disable();\n\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polygonLayer\n        });\n    },\n    _createMarker: function _createMarker(latlng, first) {\n\n        var marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n\n        this._layerGroup.addLayer(marker);\n\n        if (first) {\n            marker.on('click', this._finishPolygon, this);\n        }\n\n        return marker;\n    }\n});\n'use strict';\n\n// LayerGroup doesn't inherit from L.PM.Edit because it's just calling L.PM.Edit.Poly\n// (which inherits from L.PM.Edit) for each layer,\n// so it's not really a parent class\nL.PM.Edit.LayerGroup = L.Class.extend({\n    initialize: function initialize(layerGroup) {\n        var _this = this;\n\n        this._layerGroup = layerGroup;\n        this._layers = layerGroup.getLayers();\n\n        var availableEvents = ['pm:edit', 'pm:dragstart', 'pm:drag', 'pm:dragend', 'pm:snap', 'pm:unsnap', 'pm:raiseMarkers'];\n\n        this._layers.forEach(function (layer) {\n\n            // listen to the events of the layers in this group\n            availableEvents.forEach(function (event) {\n                layer.on(event, _this._fireEvent, _this);\n            });\n\n            // add reference for the group to each layer inside said group\n            layer.pm._layerGroup = _this._layerGroup;\n        });\n\n        // if a new layer is added to the group, reinitialize\n        // This only works for FeatureGroups, not LayerGroups\n        // https://github.com/Leaflet/Leaflet/issues/4861\n        this._layerGroup.on('layeradd', function (e) {\n\n            _this.initialize(layerGroup);\n\n            // if editing was already enabled for this group, enable it again\n            // so the new layers are enabled\n            if (e.target.pm.enabled()) {\n                _this.enable(_this.getOptions());\n            }\n        });\n    },\n    _fireEvent: function _fireEvent(e) {\n        this._layerGroup.fireEvent(e.type, e);\n    },\n    toggleEdit: function toggleEdit(options) {\n        this._options = options;\n        this._layers.forEach(function (layer) {\n            layer.pm.toggleEdit(options);\n        });\n    },\n    enable: function enable(options) {\n        this._options = options;\n        this._layers.forEach(function (layer) {\n            layer.pm.enable(options);\n        });\n    },\n    disable: function disable() {\n        this._layers.forEach(function (layer) {\n            layer.pm.disable();\n        });\n    },\n    enabled: function enabled() {\n        var enabled = this._layers.find(function (layer) {\n            return layer.pm.enabled();\n        });\n        return !!enabled;\n    },\n    dragging: function dragging() {\n        var dragging = this._layers.find(function (layer) {\n            return layer.pm.dragging();\n        });\n        return !!dragging;\n    },\n    getOptions: function getOptions() {\n        return this._options;\n    }\n});\n'use strict';\n\nL.PM.Edit.Poly = L.PM.Edit.extend({\n    initialize: function initialize(poly) {\n        this._poly = poly;\n        this._enabled = false;\n    },\n\n    toggleEdit: function toggleEdit(options) {\n        if (!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n\n    enable: function enable() {\n        var _this = this;\n\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\n        this.options = options;\n\n        if (!this.enabled()) {\n            // change state\n            this._enabled = true;\n\n            // init markers\n            this._initMarkers();\n\n            // if polygon gets removed from map, disable edit mode\n            this._poly.on('remove', function (e) {\n                _this.disable(e.target);\n            });\n\n            // if multiple markers are on top of each other (e.g. through snapping)\n            // we want to raise the markers of the polygon that was last hovered.\n            this._poly.on('mouseover', function (e) {\n                _this._poly._map.fire('pm:raiseMarkers', _this._poly);\n            });\n\n            this._poly._map.on('pm:raiseMarkers', function (layer) {\n\n                if (_this._poly._leaflet_id === layer._leaflet_id) {\n                    // if this poly was hoveresd, raise its markers\n                    _this._markers.forEach(function (m) {\n                        m.setZIndexOffset(100);\n                    });\n                } else {\n                    // lower the markers of this layer if another layer was hovered\n                    _this._markers.forEach(function (m) {\n                        m.setZIndexOffset(50);\n                    });\n                }\n            });\n\n            // preventOverlap needs the turf library. If it's not included, deactivate it again\n            // if(window.turf === undefined && this.options.preventOverlap) {\n            //     console.warn('TurfJS not found, preventOverlap is deactivated');\n            //     this.options.preventOverlap = false;\n            // }\n\n            if (this.options.draggable) {\n                this._initDraggableLayer();\n            }\n\n            // if(this.options.preventOverlap) {\n            //\n            //     // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n            //     this._poly.on('pm:drag', this._handleOverlap, this);\n            //\n            //     // set new coordinates, more details inside the function\n            //     this._poly.on('pm:dragend', this._applyPossibleCoordsChanges, this);\n            // }\n        }\n    },\n\n    enabled: function enabled() {\n        return this._enabled;\n    },\n\n    disable: function disable() {\n        var poly = arguments.length <= 0 || arguments[0] === undefined ? this._poly : arguments[0];\n\n\n        // prevent disabling if polygon is being dragged\n        if (poly.pm._dragging) {\n            return false;\n        }\n        poly.pm._enabled = false;\n        poly.pm._markerGroup.clearLayers();\n\n        // clean up draggable\n        poly.off('mousedown');\n        poly.off('mouseup');\n\n        // remove draggable class\n        var el = poly._path;\n        L.DomUtil.removeClass(el, 'leaflet-pm-draggable');\n    },\n\n    _initMarkers: function _initMarkers() {\n        var map = this._poly._map;\n\n        // cleanup old ones first\n        if (this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        var coords = this._poly._latlngs[0];\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for (var k = 0; k < coords.length; k++) {\n\n            var nextIndex = k + 1 >= coords.length ? 0 : k + 1;\n            this._createMiddleMarker(this._markers[k], this._markers[nextIndex]);\n        }\n\n        if (this.options.snap) {\n            this._initSnappableMarkers();\n        }\n    },\n\n    // creates initial markers for coordinates\n    _createMarker: function _createMarker(latlng, index) {\n\n        var marker = new L.Marker(latlng, {\n            draggable: true,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n\n        marker._origLatLng = latlng;\n        marker._index = index;\n\n        marker.on('drag', this._onMarkerDrag, this);\n        marker.on('dragend', this._onMarkerDragEnd, this);\n        marker.on('contextmenu', this._removeMarker, this);\n\n        this._markerGroup.addLayer(marker);\n\n        return marker;\n    },\n\n    // creates the middle markes between coordinates\n    _createMiddleMarker: function _createMiddleMarker(leftM, rightM) {\n        var _this2 = this;\n\n        var latlng = this._calcMiddleLatLng(leftM.getLatLng(), rightM.getLatLng());\n\n        var middleMarker = this._createMarker(latlng);\n        var icon = L.divIcon({ className: 'marker-icon marker-icon-middle' });\n        middleMarker.setIcon(icon);\n\n        // save reference to this middle markers on the neighboor regular markers\n        leftM._middleMarkerNext = middleMarker;\n        rightM._middleMarkerPrev = middleMarker;\n\n        middleMarker.on('click', function () {\n\n            // TODO: move the next two lines inside _addMarker() as soon as\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            // is fixed\n            var icon = L.divIcon({ className: 'marker-icon' });\n            middleMarker.setIcon(icon);\n\n            _this2._addMarker(middleMarker, leftM, rightM);\n        });\n        middleMarker.on('movestart', function () {\n\n            // TODO: This is a workaround. Remove the moveend listener and callback as soon as this is fixed:\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            middleMarker.on('moveend', function () {\n                var icon = L.divIcon({ className: 'marker-icon' });\n                middleMarker.setIcon(icon);\n\n                middleMarker.off('moveend');\n            });\n\n            _this2._addMarker(middleMarker, leftM, rightM);\n        });\n    },\n\n    // adds a new marker from a middlemarker\n    _addMarker: function _addMarker(newM, leftM, rightM) {\n\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        var latlng = newM.getLatLng();\n        var coords = this._poly._latlngs[0];\n        var index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map(function (marker, i) {\n            return marker._index = i;\n        });\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n\n        if (this.options.snap) {\n            this._initSnappableMarkers();\n        }\n    },\n\n    _removeMarker: function _removeMarker(e) {\n        var marker = e.target;\n        var coords = this._poly._latlngs[0];\n        var index = marker._index;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if (index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        coords.splice(index, 1);\n\n        // if the poly has no coordinates left, remove the layer\n        // else, redraw it\n        if (coords.length < 1) {\n            this._poly.remove();\n        } else {\n            this._poly.redraw();\n        }\n\n        // remove the marker and the middlemarkers next to it from the map\n        this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        this._markerGroup.removeLayer(marker._middleMarkerNext);\n        this._markerGroup.removeLayer(marker);\n\n        // find neighbor marker-indexes\n        var leftMarkerIndex = index - 1 < 0 ? this._markers.length - 1 : index - 1;\n        var rightMarkerIndex = index + 1 >= this._markers.length ? 0 : index + 1;\n\n        // don't create middlemarkers if there is only one marker left\n        if (rightMarkerIndex !== leftMarkerIndex) {\n            var leftM = this._markers[leftMarkerIndex];\n            var rightM = this._markers[rightMarkerIndex];\n            this._createMiddleMarker(leftM, rightM);\n        }\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map(function (marker, i) {\n            return marker._index = i;\n        });\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        // if(this.options.preventOverlap) {\n        //     this._handleOverlap();\n        //     this._applyPossibleCoordsChanges();\n        // }\n\n        // fire edit event\n        this._fireEdit();\n    },\n\n    _onMarkerDrag: function _onMarkerDrag(e) {\n\n        // dragged marker\n        var marker = e.target;\n\n        // the dragged markers neighbors\n        var nextMarkerIndex = marker._index + 1 >= this._markers.length ? 0 : marker._index + 1;\n        var prevMarkerIndex = marker._index - 1 < 0 ? this._markers.length - 1 : marker._index - 1;\n\n        // update marker coordinates which will update polygon coordinates\n        L.extend(marker._origLatLng, marker._latlng);\n        this._poly.redraw();\n\n        // update middle markers on the left and right\n        // be aware that \"next\" and \"prev\" might be interchanged, depending on the geojson array\n        var markerLatLng = marker.getLatLng();\n        var prevMarkerLatLng = this._markers[prevMarkerIndex].getLatLng();\n        var nextMarkerLatLng = this._markers[nextMarkerIndex].getLatLng();\n\n        var middleMarkerNextLatLng = this._calcMiddleLatLng(markerLatLng, nextMarkerLatLng);\n        marker._middleMarkerNext.setLatLng(middleMarkerNextLatLng);\n\n        var middleMarkerPrevLatLng = this._calcMiddleLatLng(markerLatLng, prevMarkerLatLng);\n        marker._middleMarkerPrev.setLatLng(middleMarkerPrevLatLng);\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        // if(this.options.preventOverlap) {\n        //     this._handleOverlap();\n        // }\n    },\n\n    _onMarkerDragEnd: function _onMarkerDragEnd(e) {\n\n        // if(this.options.preventOverlap) {\n        //     this._applyPossibleCoordsChanges();\n        // }\n\n        // fire edit event\n        this._fireEdit();\n    },\n\n    _fireEdit: function _fireEdit() {\n        // fire edit event\n        this._poly.edited = true;\n        this._poly.fire('pm:edit');\n    },\n\n    _calcMiddleLatLng: function _calcMiddleLatLng(latlng1, latlng2) {\n        // calculate the middle coordinates between two markers\n        // TODO: put this into a utils.js or something\n\n        var map = this._poly._map,\n            p1 = map.project(latlng1),\n            p2 = map.project(latlng2);\n\n        var latlng = map.unproject(p1._add(p2)._divideBy(2));\n\n        return latlng;\n    }\n\n});\n'use strict';\n\nL.Control.PMButton = L.Control.extend({\n    options: {\n        position: 'topleft'\n    },\n    // TODO: clean up variable names like _button should be _options and that domNodeVariable stuff\n    initialize: function initialize(options) {\n        this._button = {};\n        this._button = this.setButton(options);\n    },\n\n    onAdd: function onAdd(map) {\n\n        this._map = map;\n\n        this._container = this._map.pm.Toolbar.container;\n        this.buttonsDomNode = this._makeButton(this._button);\n        this._container.appendChild(this.buttonsDomNode);\n\n        return this._container;\n    },\n\n    onRemove: function onRemove(map) {},\n\n    setButton: function setButton(options) {\n        var button = {\n            'className': options.className,\n            'iconUrl': options.iconUrl,\n            'onClick': options.onClick,\n            'afterClick': options.afterClick,\n            'doToggle': options.doToggle,\n            'toggleStatus': options.toggleStatus,\n            'disableOtherButtons': options.disableOtherButtons\n        };\n\n        return button;\n    },\n\n    getText: function getText() {\n        return this._button.text;\n    },\n\n    getIconUrl: function getIconUrl() {\n        return this._button.iconUrl;\n    },\n\n    destroy: function destroy() {\n        this._button = {};\n        this._update();\n    },\n\n    toggle: function toggle(e) {\n        if (typeof e === 'boolean') {\n            this._button.toggleStatus = e;\n        } else {\n            this._button.toggleStatus = !this._button.toggleStatus;\n        }\n        this._applyStyleClasses();\n\n        return this._button.toggleStatus;\n    },\n    toggled: function toggled() {\n        return this._button.toggleStatus;\n    },\n    onCreate: function onCreate() {\n        this.toggle(false);\n    },\n    _triggerClick: function _triggerClick(e) {\n        this._button.onClick(e);\n        this._clicked(e);\n        this._button.afterClick(e);\n    },\n    _makeButton: function _makeButton(button) {\n        var _this = this;\n\n        var newButton = L.DomUtil.create('a', 'leaflet-buttons-control-button', this._container);\n        if (button.toggleStatus) {\n            L.DomUtil.addClass(newButton, 'active');\n        }\n\n        var image = L.DomUtil.create('div', 'control-icon', newButton);\n        if (button.iconUrl) {\n            image.setAttribute('src', button.iconUrl);\n        }\n        if (button.className) {\n            L.DomUtil.addClass(image, button.className);\n        }\n        // before the actual click, trigger a click on currently toggled buttons to\n        // untoggle them and their functionality\n        L.DomEvent.addListener(newButton, 'click', function (e) {\n            if (_this._button.disableOtherButtons) {\n                _this._map.pm.Toolbar.triggerClickOnToggledButtons(_this);\n            }\n        });\n        L.DomEvent.addListener(newButton, 'click', this._triggerClick, this);\n\n        L.DomEvent.disableClickPropagation(newButton);\n        return newButton;\n    },\n\n    _applyStyleClasses: function _applyStyleClasses() {\n\n        if (!this._container) {\n            return;\n        }\n\n        if (!this._button.toggleStatus) {\n            L.DomUtil.removeClass(this.buttonsDomNode, 'active');\n        } else {\n            L.DomUtil.addClass(this.buttonsDomNode, 'active');\n        }\n    },\n\n    _clicked: function _clicked() {\n\n        if (this._button.doToggle) {\n            this.toggle();\n        }\n        return;\n    }\n\n});\n'use strict';\n\n/**\n* The Icons used in this Toolbar are CC-BY Glyphicons - http://glyphicons.com/\n*/\n\nL.PM.Toolbar = L.Class.extend({\n    options: {\n        drawPolygon: true,\n        editPolygon: false,\n        dragPolygon: false,\n        deleteLayer: true\n    },\n    initialize: function initialize(map) {\n        this.map = map;\n\n        this.buttons = {};\n        this.container = L.DomUtil.create('div', 'leaflet-pm-toolbar leaflet-bar leaflet-control');\n        this._defineButtons();\n    },\n\n    getButtons: function getButtons() {\n        return this.buttons;\n    },\n\n    addControls: function addControls() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? this.options : arguments[0];\n\n        // adds all buttons to the map specified inside options\n\n        // first set the options\n        L.Util.setOptions(this, options);\n\n        // now show the specified buttons\n        this._showHideButtons();\n    },\n    _addButton: function _addButton(name, button) {\n        this.buttons[name] = button;\n        this.options[name] = this.options[name] || false;\n\n        return this.buttons[name];\n    },\n    triggerClickOnToggledButtons: function triggerClickOnToggledButtons(exceptThisButton) {\n        // this function is used when - e.g. drawing mode is enabled and a possible\n        // other active mode (like removal tool) is already active.\n        // we can't have two active modes because of possible event conflicts\n        // so, we trigger a click on all currently active (toggled) buttons\n        for (var name in this.buttons) {\n            if (this.buttons[name] !== exceptThisButton && this.buttons[name].toggled()) {\n                this.buttons[name]._triggerClick();\n            }\n        }\n    },\n    toggleButton: function toggleButton(name, status) {\n        // does not fire the events/functionality of the button\n        // this just changes the state and is used if a functionality (like Draw)\n        // is enabled manually via script\n\n        // as some mode got enabled, we still have to trigger the click on the other buttons\n        // to disable their mode\n        this.triggerClickOnToggledButtons(this.buttons[name]);\n\n        // now toggle the state of the button\n        return this.buttons[name].toggle(status);\n    },\n    _defineButtons: function _defineButtons() {\n        var _this = this;\n\n        // some buttons are still in their respective classes, like L.PM.Draw.Poly\n        var deleteButton = {\n            'className': 'icon-delete',\n            'onClick': function onClick(e) {},\n            'afterClick': function afterClick(e) {\n                _this.map.pm.toggleRemoval(_this.buttons.deleteLayer.toggled());\n            },\n            'doToggle': true,\n            'toggleStatus': false,\n            'disableOtherButtons': true\n        };\n\n        var drawPolyButton = {\n            'className': 'icon-polygon',\n            'onClick': function onClick(e) {},\n            'afterClick': function afterClick(e) {\n                // toggle drawing mode\n                _this.map.pm.Draw.Poly.toggle();\n            },\n            'doToggle': true,\n            'toggleStatus': false,\n            'disableOtherButtons': true\n        };\n\n        var editButton = {\n            'className': 'icon-edit',\n            'onClick': function onClick(e) {},\n            'afterClick': function afterClick(e) {},\n            'doToggle': true,\n            'toggleStatus': false,\n            'disableOtherButtons': true\n        };\n\n        var dragButton = {\n            'className': 'icon-drag',\n            'onClick': function onClick(e) {},\n            'afterClick': function afterClick(e) {},\n            'doToggle': true,\n            'toggleStatus': false,\n            'disableOtherButtons': true\n        };\n\n        this._addButton('drawPolygon', new L.Control.PMButton(drawPolyButton));\n        this._addButton('editPolygon', new L.Control.PMButton(editButton));\n        this._addButton('dragPolygon', new L.Control.PMButton(dragButton));\n        this._addButton('deleteLayer', new L.Control.PMButton(deleteButton));\n    },\n    _showHideButtons: function _showHideButtons() {\n        // loop through all buttons\n        var buttons = this.getButtons();\n\n        for (var btn in buttons) {\n            if (this.options[btn]) {\n                // if options say the button should be visible, add it to the map\n                buttons[btn].addTo(this.map);\n            } else {\n                // if not, remove it\n                buttons[btn].remove();\n            }\n        }\n    }\n});","var DragMixin = {\n    _initDraggableLayer: function() {\n        // temporary coord variable for delta calculation\n        this._tempDragCoord;\n\n        // add CSS class\n        var el = this._poly._path;\n        L.DomUtil.addClass(el, 'leaflet-pm-draggable');\n\n\n        var onMouseUp = (e) => {\n\n            // re-enable map drag\n            this._poly._map.dragging.enable();\n\n            // clear up mousemove event\n            this._poly._map.off('mousemove');\n\n            // clear up mouseup event\n            this._poly.off('mouseup');\n\n            // show markers again\n            this._initMarkers();\n\n            // timeout to prevent click event after drag :-/\n            // TODO: do it better as soon as leaflet has a way to do it better :-)\n            window.setTimeout(() => {\n                // set state\n                this._dragging = false;\n                L.DomUtil.removeClass(el, 'leaflet-pm-dragging');\n\n                // fire pm:dragend event\n                this._poly.fire('pm:dragend');\n\n                // fire edit\n                this._fireEdit();\n            }, 10);\n\n        }\n\n\n        var onMouseMove = (e) => {\n\n            if(!this._dragging) {\n\n                // set state\n                this._dragging = true;\n                L.DomUtil.addClass(el, 'leaflet-pm-dragging');\n\n                // bring it to front to prevent drag interception\n                this._poly.bringToFront();\n\n                // disbale map drag\n                this._poly._map.dragging.disable();\n\n                // hide markers\n                this._markerGroup.clearLayers();\n\n                // fire pm:dragstart event\n                this._poly.fire('pm:dragstart');\n\n\n            }\n\n            this._onLayerDrag(e);\n\n        }\n\n        this._poly.on('mousedown', (e) => {\n\n            // save for delta calculation\n            this._tempDragCoord = e.latlng;\n\n            this._poly.on('mouseup', onMouseUp);\n\n            // listen to mousemove on map (instead of polygon),\n            // otherwise fast mouse movements stop the drag\n            this._poly._map.on('mousemove', onMouseMove);\n\n        });\n    },\n    dragging: function() {\n        return this._dragging;\n    },\n\n    _onLayerDrag: function(e) {\n\n        // latLng of mouse event\n        let latlng = e.latlng;\n\n        // delta coords (how far was dragged)\n        let deltaLatLng = {\n            lat: latlng.lat - this._tempDragCoord.lat,\n            lng: latlng.lng - this._tempDragCoord.lng\n        };\n\n        // create the new coordinates array\n        let coords = this._poly._latlngs[0];\n        let newLatLngs = coords.map((currentLatLng) => {\n            return {\n                lat: currentLatLng.lat + deltaLatLng.lat,\n                lng: currentLatLng.lng + deltaLatLng.lng\n            }\n        });\n\n        // set new coordinates and redraw\n        this._poly.setLatLngs(newLatLngs).redraw();\n\n        // save current latlng for next delta calculation\n        this._tempDragCoord = latlng;\n\n        // fire pm:dragstart event\n        this._poly.fire('pm:drag');\n\n    },\n}\n","// this isn't included anymore but if you want to re-enable it:\n// 1. include this mixing inside L.PM.Edit.js\n// 2. include the turf.js dependency in your project before leaflet.pm\n// 3. uncomment all code inside L.PM.Edit.Poly that has an if-check on options.preventOverlap\n// 4. pass the option preventOverlap to the enable() function on your layer\nvar OverlapMixin = {\n\n    _applyPossibleCoordsChanges: function() {\n\n        // after the polygon was dragged and changed it's shape because of unallowed intersecting\n        // with another polygon, this function takes the temporarily drawn polygon (during drag) and applies\n        // it's coordinates to our main polygon\n\n        if(this._tempPolygon) {\n\n            // get the new coordinates\n            var latlngs = this._tempPolygon.getLayers()[0].getLatLngs();\n\n            // reshape our main polygon\n            this._poly.setLatLngs(latlngs).redraw();\n\n            // initialize the markers again\n            this._initMarkers();\n        }\n\n    },\n\n    _drawTemporaryPolygon: function(geoJson) {\n\n        // hide our polygon\n        this._poly.setStyle({opacity: 0, fillOpacity: 0});\n\n        // draw a temporary polygon (happens during drag & intersection)\n        this._tempPolygon = L.geoJson(geoJson).addTo(this._poly._map).bringToBack();\n\n    },\n\n    _handleOverlap: function() {\n\n        let mainPoly = this._poly;\n        let layers = this._layerGroup.getLayers();\n        let changed = false;\n        let resultingGeoJson = this._poly.toGeoJSON();\n\n        layers\n        .filter(layer => !Object.is(layer, mainPoly))\n        .map((layer) => {\n\n            let intersect;\n\n            // this needs to be in a try catch block because turf isn't reliable\n            // it throws self-intersection errors even if there are none\n            try {\n                intersect = turf.intersect(resultingGeoJson, layer.toGeoJSON());\n            } catch(e) {\n                console.warn('Turf Error.');\n            }\n\n            if(intersect) {\n                resultingGeoJson = turf.difference(resultingGeoJson, layer.toGeoJSON());\n\n                // if the resulting polygon is a MultiPolygon, don't handle it.\n                if(resultingGeoJson.geometry.type !== 'MultiPolygon') {\n                    changed = true;\n                }\n            }\n\n        });\n\n        if(this._tempPolygon) {\n            this._tempPolygon.remove();\n            delete this._tempPolygon;\n        }\n\n        if(changed) {\n            this._drawTemporaryPolygon(resultingGeoJson);\n        } else {\n            this._poly.setStyle({opacity: 1, fillOpacity: 0.2});\n        }\n\n\n\n    }\n}\n","var SnapMixin = {\n    _initSnappableMarkers: function() {\n\n        this.options.snapDistance = this.options.snapDistance || 30;\n\n        this._markers.forEach((marker) => {\n\n            marker.off('drag', this._handleSnapping, this);\n            marker.on('drag', this._handleSnapping, this);\n\n            marker.off('dragend', this._cleanupSnapping, this);\n            marker.on('dragend', this._cleanupSnapping, this);\n        });\n\n\n        this._poly.off('pm:dragstart', this._unsnap, this);\n        this._poly.on('pm:dragstart', this._unsnap, this);\n\n    },\n    _unsnap: function(e) {\n        // delete the last snap\n        delete this._snapLatLng;\n    },\n    _cleanupSnapping: function(e) {\n\n        // delete it, we need to refresh this with each start of a drag because\n        // meanwhile, new layers could've been added to the map\n        delete this._snapList;\n\n        this.debugIndicatorLines.forEach((line) => {\n            line.remove();\n        });\n    },\n    _handleSnapping: function(e) {\n\n        // create a list of polygons that the marker could snap to\n        // this isn't inside a movestart/dragstart callback because middlemarkers are initialized\n        // after dragstart/movestart so it wouldn't fire for them\n        if(this._snapList === undefined) {\n            this._createSnapList(e);\n        }\n\n        let marker = e.target;\n\n        // get the closest layer, it's closest latlng, segment and the distance\n        let closestLayer = this._calcClosestLayer(marker.getLatLng(), this._snapList);\n\n        // find the final latlng that we want to snap to\n        let snapLatLng = this._checkPrioritiySnapping(closestLayer);\n\n        // minimal distance before marker snaps (in pixels)\n        let minDistance = this.options.snapDistance;\n\n        // event info for pm:snap and pm:unsnap\n        let eventInfo = {\n            marker,\n            snapLatLng,\n            segment: closestLayer.segment,\n            layer: this._poly,\n            layerInteractedWith: closestLayer.layer // for lack of a better property name\n        };\n\n        if(closestLayer.distance < minDistance) {\n\n            // snap the marker\n            marker.setLatLng(snapLatLng);\n            this._onMarkerDrag(e);\n\n            // check if the snapping position differs from the last snap\n            if(this._snapLatLng !== snapLatLng) {\n\n                // if yes, save it and fire the pm:snap event\n                this._snapLatLng = snapLatLng;\n                marker.fire('pm:snap', eventInfo);\n                this._poly.fire('pm:snap', eventInfo);\n            }\n\n        } else {\n            // no more snapping\n\n            // if it was previously snapped...\n            if(this._snapLatLng) {\n\n                // ...unsnap\n                this._unsnap(eventInfo);\n\n                // and fire unsnap event\n                eventInfo.marker.fire('pm:unsnap', eventInfo);\n                this._poly.fire('pm:unsnap', eventInfo);\n            }\n        }\n    },\n\n    // we got the point we want to snap to (C), but we need to check if a coord of the polygon\n    // receives priority over C as the snapping point. Let's check this here\n    _checkPrioritiySnapping: function(closestLayer) {\n\n        let map = this._poly._map;\n\n        // A and B are the points of the closest segment to P (the marker position we want to snap)\n        let A = closestLayer.segment[0];\n        let B = closestLayer.segment[1];\n\n        // C is the point we would snap to on the segment.\n        // The closest point on the closest segment of the closest polygon to P. That's right.\n        let C = closestLayer.latlng;\n\n        // distances from A to C and B to C to check which one is closer to C\n        let distanceAC = this._getDistance(map, A, C);\n        let distanceBC = this._getDistance(map, B, C);\n\n        // closest latlng of A and B to C\n        let closestVertexLatLng = distanceAC < distanceBC ? A : B;\n\n        // distance between closestVertexLatLng and C\n        let shortestDistance = distanceAC < distanceBC ? distanceAC : distanceBC;\n\n        // the distance that needs to be undercut to trigger priority\n        let priorityDistance = this.options.snapDistance;\n\n        // the latlng we ultemately want to snap to\n        let snapLatlng;\n\n        // if C is closer to the closestVertexLatLng (A or B) than the snapDistance,\n        // the closestVertexLatLng has priority over C as the snapping point.\n        if(shortestDistance < priorityDistance) {\n            snapLatlng = closestVertexLatLng;\n        } else {\n            snapLatlng = closestLayer.latlng;\n        }\n\n        // return the snapping point\n        return snapLatlng;\n\n    },\n    _createSnapList: function() {\n\n        let layers = [];\n        let debugIndicatorLines = [];\n\n        // find all layers that are or inherit from Polylines...\n        this._poly._map.eachLayer((layer) => {\n            if(layer instanceof L.Polyline) {\n                layers.push(layer);\n\n                // this is for debugging\n                let debugLine = L.polyline([], {color: 'red'});\n                debugIndicatorLines.push(debugLine);\n\n                // uncomment 👇 this in to show debugging lines\n                // debugLine.addTo(this._poly._map);\n            }\n        });\n\n        // ...except myself\n        layers = layers.filter((layer) => this._poly !== layer);\n\n        this._snapList = layers;\n        this.debugIndicatorLines = debugIndicatorLines;\n    },\n    _calcClosestLayer: function(latlng, layers) {\n        let map = this._poly._map;\n\n        // the closest polygon to our dragged marker latlng\n        let closestLayer = {};\n\n        // loop through the layers\n        layers.forEach((layer, index) => {\n\n            // find the closest latlng, segment and the distance of this layer to the dragged marker latlng\n            let results = this._calcLayerDistances(latlng, layer);\n\n            // show indicator lines, it's for debugging\n            this.debugIndicatorLines[index].setLatLngs([latlng, results.latlng]);\n\n            // save the info if it doesn't exist or if the distance is smaller than the previous one\n            if(closestLayer.distance === undefined || results.distance < closestLayer.distance) {\n                closestLayer = results;\n                closestLayer.layer = layer;\n            }\n\n        });\n\n        // return the closest layer and it's data\n        return closestLayer;\n\n\n    },\n    _calcLayerDistances: function(latlng, layer) {\n        let map = this._poly._map;\n\n        // the point P which we want to snap (probpably the marker that is dragged)\n        let P = latlng;\n\n        // the coords of the layer\n        let coords = layer.getLatLngs()[0];\n\n        // the closest segment (line between two points) of the layer\n        let closestSegment;\n\n        // the shortest distance from P to closestSegment\n        let shortestDistance;\n\n        // loop through the coords of the layer\n        coords.forEach((coord, index) => {\n            // take this coord (A)...\n            let A = coord;\n\n            // and the next coord (B) as points\n            let nextIndex = index + 1 === coords.length ? 0 : index + 1;\n            let B = coords[nextIndex];\n\n            // calc the distance between P and AB-segment\n            let distance = this._getDistanceToSegment(map, P, A, B);\n\n            // is the distance shorter than the previous one? Save it and the segment\n            if(shortestDistance === undefined || distance < shortestDistance) {\n                shortestDistance = distance;\n                closestSegment = [A, B];\n            }\n\n        });\n\n        // now, take the closest segment (closestSegment) and calc the closest point to P on it.\n        let C = this._getClosestPointOnSegment(map, latlng, closestSegment[0], closestSegment[1]);\n\n        // return the latlng of that sucker\n        return {\n            latlng: C,\n            segment: closestSegment,\n            distance: shortestDistance\n        };\n\n    },\n    _getClosestPointOnSegment: function(map, latlng, latlngA, latlngB) {\n        let maxzoom = map.getMaxZoom();\n        if (maxzoom === Infinity) {\n            maxzoom = map.getZoom();\n        }\n        let P = map.project(latlng, maxzoom);\n        let A = map.project(latlngA, maxzoom);\n        let B = map.project(latlngB, maxzoom);\n        let closest = L.LineUtil.closestPointOnSegment(P, A, B);\n        return map.unproject(closest, maxzoom);\n    },\n    _getDistanceToSegment: function (map, latlng, latlngA, latlngB) {\n        let P = map.latLngToLayerPoint(latlng);\n        let A = map.latLngToLayerPoint(latlngA);\n        let B = map.latLngToLayerPoint(latlngB);\n        return L.LineUtil.pointToSegmentDistance(P, A, B);\n    },\n    _getDistance: function (map, latlngA, latlngB) {\n        return map.latLngToLayerPoint(latlngA).distanceTo(map.latLngToLayerPoint(latlngB));\n    }\n}\n","/**\n*\n* A Leaflet Plugin For Editing Geometry Layers in Leaflet 1.0\n* by Sumit Kumar (@TweetsOfSumit)\n* Github Repo: https://github.com/codeofsumit/leaflet.pm\n*/\n\nL.PM = L.PM || {\n    initialize: function() {\n\n        var initLayerGroup = function() {\n            this.pm = new L.PM.Edit.LayerGroup(this);\n        };\n        L.LayerGroup.addInitHook(initLayerGroup);\n\n\n        var initPolygon = function() {\n            this.pm = new L.PM.Edit.Poly(this);\n        };\n        L.Polygon.addInitHook(initPolygon);\n\n\n        var initMap = function() {\n            this.pm = new L.PM.Map(this);\n        };\n        L.Map.addInitHook(initMap);\n\n    }\n};\n\n// initialize leaflet.pm\nL.PM.initialize();\n","L.PM.Map = L.Class.extend({\n    initialize(map) {\n        this.map = map;\n        this.Draw = new L.PM.Draw(map);\n        this.Toolbar = new L.PM.Toolbar(map);\n    },\n    addControls: function(options) {\n        this.Toolbar.addControls(options);\n    },\n    enableDraw: function(shape = 'Poly') {\n        this.Draw.enable(shape);\n    },\n    disableDraw: function(shape = 'Poly') {\n        this.Draw.disable(shape);\n    },\n    removeLayer: function(e) {\n\n        var layer = e.target;\n        if(!layer._layers && !layer.pm.dragging()) {\n            e.target.remove();\n        }\n    },\n    toggleRemoval: function(enabled) {\n        if(enabled) {\n            this.map.eachLayer((layer) => {\n                layer.on('click', this.removeLayer);\n            });\n        } else {\n            this.map.eachLayer((layer) => {\n                layer.off('click', this.removeLayer);\n            });\n        }\n\n\n\n    },\n});\n","L.PM.Draw = L.Class.extend({\n\n    initialize: function(map) {\n\n        // save the map\n        this._map = map;\n\n        // define all possible shapes that can be drawn\n        this.shapes = ['Poly'];\n\n        // initiate drawing class for our shapes\n        this.shapes.forEach((shape) => {\n            this[shape] = new L.PM.Draw[shape](this._map);\n        });\n\n    },\n    getShapes: function() {\n        // if somebody wants to know what shapes are available\n        return this.shapes;\n    },\n    enable: function(shape) {\n\n        if(!shape) {\n            throw 'Error: Please pass a shape as a parameter. Possible shapes are: ' + this.getShapes().join(',');\n        }\n\n        // disable drawing for all shapes\n        this.disable();\n\n        // enable draw for a shape\n        this[shape].enable();\n\n    },\n    disable: function() {\n\n        // there can only be one drawing mode active at a time on a map\n        // so it doesn't matter which one should be disabled.\n        // just disable all of them\n        this.shapes.forEach((shape) => {\n            this[shape].disable();\n        });\n\n    },\n    addControls: function() {\n        // add control buttons for our shapes\n        this.shapes.forEach((shape) => {\n            this[shape].addButton();\n        });\n    }\n});\n","L.PM.Edit = L.Class.extend({\n    includes: [DragMixin, SnapMixin]\n});\n","L.PM.Draw.Poly = L.PM.Draw.extend({\n\n    initialize: function(map) {\n        this._map = map;\n        this._shape = 'Poly';\n        this.registerButton();\n        this.toolbarButtonName = 'drawPolygon';\n    },\n    enable: function(options) {\n        // enable draw mode\n\n        this._enabled = true;\n\n        // create a new layergroup\n        this._layerGroup = new L.LayerGroup();\n        this._layerGroup.addTo(this._map);\n\n        // this is the polyLine that'll make up the polygon\n        this._polyline = L.polyline([], {color: 'red'});\n        this._layerGroup.addLayer(this._polyline);\n\n        // this is the hintline from the mouse cursor to the last marker\n        this._hintline = L.polyline([], {\n            color: 'red',\n            dashArray: [5, 5]\n        });\n        this._layerGroup.addLayer(this._hintline);\n\n\n        // change map cursor\n        this._map._container.style.cursor = 'crosshair';\n\n        // create a polygon-point on click\n        this._map.on('click', this._createPolygonPoint, this);\n\n        // sync the hintline on mousemove\n        this._map.on('mousemove', this._syncHintLine, this);\n\n        // fire drawstart event\n        this._map.fire('pm:drawstart', {shape: this._shape});\n\n        // toggle the draw button of the Toolbar in case drawing mode got enabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, true);\n\n    },\n    disable: function() {\n        // disable draw mode\n\n        // cancel, if drawing mode isn't even enabled\n        if(!this._enabled) {\n            return;\n        }\n\n        this._enabled = false;\n\n        // reset cursor\n        this._map._container.style.cursor = 'default';\n\n        // unbind listeners\n        this._map.off('click', this._createPolygonPoint);\n        this._map.off('mousemove', this._syncHintLine);\n\n        // remove layer\n        this._map.removeLayer(this._layerGroup);\n\n        // fire drawend event\n        this._map.fire('pm:drawend', {shape: this._shape});\n\n        // toggle the draw button of the Toolbar in case drawing mode got disabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, false);\n\n    },\n    enabled: function() {\n        return this._enabled;\n    },\n    toggle: function(options) {\n\n        if(this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n\n    },\n    registerButton: function(map) {\n\n        var drawPolyButton = {\n            'className': 'icon-polygon',\n            'onClick': function() {\n\n            },\n            'afterClick': function(e) {\n                self.toggle();\n            },\n            'doToggle': true,\n            'toggleStatus': false\n        };\n\n\n        // this._drawButton = L.PM.Toolbar.addButton('drawPolygon', new L.Control.PMButton(drawPolyButton));\n        //\n        // this._map.on('pm:drawstart', (e) => {\n        //     if(e.shape === this._shape && !this._drawButton.toggled()) {\n        //         this._drawButton._clicked();\n        //     }\n        // });\n        //\n        // this._map.on('pm:drawend', (e) => {\n        //     if(e.shape === this._shape && this._drawButton.toggled()) {\n        //         this._drawButton._clicked();\n        //     }\n        // });\n\n\n\n    },\n    _syncHintLine: function(e) {\n\n        var polyPoints = this._polyline.getLatLngs();\n\n        if(polyPoints.length > 0) {\n            var lastPolygonPoint = polyPoints[polyPoints.length - 1];\n            this._hintline.setLatLngs([lastPolygonPoint, e.latlng]);\n        }\n\n\n\n    },\n    _createPolygonPoint: function(e) {\n\n        // is this the first point?\n        var first = this._polyline.getLatLngs().length === 0 ? true : false;\n\n        this._polyline.addLatLng(e.latlng);\n        this._createMarker(e.latlng, first);\n\n\n        this._hintline.setLatLngs([e.latlng, e.latlng]);\n\n    },\n    _finishPolygon: function() {\n\n        var coords = this._polyline.getLatLngs();\n        var polygonLayer = L.polygon(coords).addTo(this._map);\n\n        polygonLayer.pm.toggleEdit();\n\n        this.disable();\n\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polygonLayer\n        });\n    },\n    _createMarker: function(latlng, first) {\n\n        var marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({className: 'marker-icon'})\n        });\n\n        this._layerGroup.addLayer(marker);\n\n        if(first) {\n            marker.on('click', this._finishPolygon, this);\n        }\n\n        return marker;\n\n    },\n});\n","// LayerGroup doesn't inherit from L.PM.Edit because it's just calling L.PM.Edit.Poly\n// (which inherits from L.PM.Edit) for each layer,\n// so it's not really a parent class\nL.PM.Edit.LayerGroup = L.Class.extend({\n    initialize: function(layerGroup) {\n\n        this._layerGroup = layerGroup;\n        this._layers = layerGroup.getLayers();\n\n        let availableEvents = ['pm:edit', 'pm:dragstart', 'pm:drag', 'pm:dragend', 'pm:snap', 'pm:unsnap', 'pm:raiseMarkers'];\n\n        this._layers.forEach((layer) => {\n\n            // listen to the events of the layers in this group\n            availableEvents.forEach((event) => {\n                layer.on(event, this._fireEvent, this);\n            });\n\n            // add reference for the group to each layer inside said group\n            layer.pm._layerGroup = this._layerGroup;\n        });\n\n\n        // if a new layer is added to the group, reinitialize\n        // This only works for FeatureGroups, not LayerGroups\n        // https://github.com/Leaflet/Leaflet/issues/4861\n        this._layerGroup.on('layeradd', (e) => {\n\n            this.initialize(layerGroup);\n\n            // if editing was already enabled for this group, enable it again\n            // so the new layers are enabled\n            if(e.target.pm.enabled()) {\n                this.enable(this.getOptions());\n            }\n        });\n    },\n    _fireEvent: function(e) {\n        this._layerGroup.fireEvent(e.type, e);\n    },\n    toggleEdit: function(options) {\n        this._options = options;\n        this._layers.forEach(layer => {\n            layer.pm.toggleEdit(options);\n        });\n    },\n    enable: function(options) {\n        this._options = options;\n        this._layers.forEach(layer => {\n            layer.pm.enable(options);\n        });\n    },\n    disable: function() {\n        this._layers.forEach(layer => {\n            layer.pm.disable();\n        });\n    },\n    enabled: function() {\n        let enabled = this._layers.find((layer) => layer.pm.enabled());\n        return !!enabled;\n    },\n    dragging: function() {\n        let dragging = this._layers.find((layer) => layer.pm.dragging());\n        return !!dragging;\n    },\n    getOptions: function() {\n        return this._options;\n    }\n});\n","L.PM.Edit.Poly = L.PM.Edit.extend({\n    initialize: function(poly) {\n        this._poly = poly;\n        this._enabled = false;\n    },\n\n    toggleEdit: function(options) {\n        if(!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n\n    enable: function(options = {}) {\n\n        this.options = options;\n\n        if(!this.enabled()) {\n            // change state\n            this._enabled = true;\n\n            // init markers\n            this._initMarkers();\n\n            // if polygon gets removed from map, disable edit mode\n            this._poly.on('remove', (e) => {\n                this.disable(e.target);\n            });\n\n\n            // if multiple markers are on top of each other (e.g. through snapping)\n            // we want to raise the markers of the polygon that was last hovered.\n            this._poly.on('mouseover', (e) => {\n                this._poly._map.fire('pm:raiseMarkers', this._poly);\n            });\n\n\n            this._poly._map.on('pm:raiseMarkers', (layer) => {\n\n                if(this._poly._leaflet_id === layer._leaflet_id) {\n                    // if this poly was hoveresd, raise its markers\n                    this._markers.forEach((m) => {\n                        m.setZIndexOffset(100);\n                    });\n                } else {\n                    // lower the markers of this layer if another layer was hovered\n                    this._markers.forEach((m) => {\n                        m.setZIndexOffset(50);\n                    });\n                }\n\n            });\n\n            // preventOverlap needs the turf library. If it's not included, deactivate it again\n            // if(window.turf === undefined && this.options.preventOverlap) {\n            //     console.warn('TurfJS not found, preventOverlap is deactivated');\n            //     this.options.preventOverlap = false;\n            // }\n\n            if(this.options.draggable) {\n                this._initDraggableLayer();\n            }\n\n            // if(this.options.preventOverlap) {\n            //\n            //     // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n            //     this._poly.on('pm:drag', this._handleOverlap, this);\n            //\n            //     // set new coordinates, more details inside the function\n            //     this._poly.on('pm:dragend', this._applyPossibleCoordsChanges, this);\n            // }\n        }\n\n    },\n\n    enabled: function() {\n        return this._enabled;\n    },\n\n    disable: function(poly = this._poly) {\n\n        // prevent disabling if polygon is being dragged\n        if(poly.pm._dragging) {\n            return false;\n        }\n        poly.pm._enabled = false;\n        poly.pm._markerGroup.clearLayers();\n\n        // clean up draggable\n        poly.off('mousedown');\n        poly.off('mouseup');\n\n        // remove draggable class\n        var el = poly._path;\n        L.DomUtil.removeClass(el, 'leaflet-pm-draggable');\n    },\n\n    _initMarkers: function() {\n        let map = this._poly._map;\n\n        // cleanup old ones first\n        if(this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        let coords = this._poly._latlngs[0];\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for(var k = 0; k < coords.length; k++) {\n\n            var nextIndex = k+1 >= coords.length ? 0 : k+1;\n            this._createMiddleMarker(\n                this._markers[k], this._markers[nextIndex]\n            );\n        }\n\n        if(this.options.snap) {\n            this._initSnappableMarkers();\n        }\n\n    },\n\n    // creates initial markers for coordinates\n    _createMarker: function(latlng, index) {\n\n        let marker = new L.Marker(latlng, {\n            draggable: true,\n            icon: L.divIcon({className: 'marker-icon'})\n        });\n\n        marker._origLatLng = latlng;\n        marker._index = index;\n\n        marker.on('drag', this._onMarkerDrag, this);\n        marker.on('dragend', this._onMarkerDragEnd, this);\n        marker.on('contextmenu', this._removeMarker, this);\n\n        this._markerGroup.addLayer(marker);\n\n        return marker;\n\n    },\n\n    // creates the middle markes between coordinates\n    _createMiddleMarker: function(leftM, rightM) {\n\n        let latlng = this._calcMiddleLatLng(leftM.getLatLng(), rightM.getLatLng());\n\n        let middleMarker = this._createMarker(latlng);\n        let icon = L.divIcon({className: 'marker-icon marker-icon-middle'})\n        middleMarker.setIcon(icon);\n\n        // save reference to this middle markers on the neighboor regular markers\n        leftM._middleMarkerNext = middleMarker;\n        rightM._middleMarkerPrev = middleMarker;\n\n        middleMarker.on('click', () => {\n\n            // TODO: move the next two lines inside _addMarker() as soon as\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            // is fixed\n            var icon = L.divIcon({className: 'marker-icon'});\n            middleMarker.setIcon(icon);\n\n            this._addMarker(middleMarker, leftM, rightM);\n        });\n        middleMarker.on('movestart', () => {\n\n            // TODO: This is a workaround. Remove the moveend listener and callback as soon as this is fixed:\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            middleMarker.on('moveend', function() {\n                var icon = L.divIcon({className: 'marker-icon'});\n                middleMarker.setIcon(icon);\n\n                middleMarker.off('moveend');\n            });\n\n            this._addMarker(middleMarker, leftM, rightM);\n        });\n\n\n    },\n\n    // adds a new marker from a middlemarker\n    _addMarker: function(newM, leftM, rightM) {\n\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        let latlng = newM.getLatLng();\n        let coords = this._poly._latlngs[0];\n        let index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map((marker, i) => marker._index = i);\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n\n        if(this.options.snap) {\n            this._initSnappableMarkers();\n        }\n\n    },\n\n    _removeMarker: function(e) {\n        let marker = e.target;\n        let coords = this._poly._latlngs[0];\n        let index = marker._index;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if(index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        coords.splice(index, 1);\n\n        // if the poly has no coordinates left, remove the layer\n        // else, redraw it\n        if(coords.length < 1) {\n            this._poly.remove();\n        } else {\n            this._poly.redraw();\n        }\n\n        // remove the marker and the middlemarkers next to it from the map\n        this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        this._markerGroup.removeLayer(marker._middleMarkerNext);\n        this._markerGroup.removeLayer(marker);\n\n        // find neighbor marker-indexes\n        let leftMarkerIndex = index - 1 < 0 ? this._markers.length - 1 : index - 1;\n        let rightMarkerIndex = index + 1 >= this._markers.length ? 0 : index + 1;\n\n        // don't create middlemarkers if there is only one marker left\n        if(rightMarkerIndex !== leftMarkerIndex) {\n            let leftM = this._markers[leftMarkerIndex];\n            let rightM = this._markers[rightMarkerIndex];\n            this._createMiddleMarker(leftM, rightM);\n        }\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map((marker, i) => marker._index = i);\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        // if(this.options.preventOverlap) {\n        //     this._handleOverlap();\n        //     this._applyPossibleCoordsChanges();\n        // }\n\n        // fire edit event\n        this._fireEdit();\n\n\n    },\n\n\n\n    _onMarkerDrag: function(e) {\n\n        // dragged marker\n        let marker = e.target;\n\n        // the dragged markers neighbors\n        let nextMarkerIndex = marker._index + 1 >= this._markers.length ? 0 : marker._index + 1;\n        let prevMarkerIndex = marker._index - 1 < 0 ? this._markers.length - 1 : marker._index - 1;\n\n        // update marker coordinates which will update polygon coordinates\n        L.extend(marker._origLatLng, marker._latlng);\n        this._poly.redraw();\n\n        // update middle markers on the left and right\n        // be aware that \"next\" and \"prev\" might be interchanged, depending on the geojson array\n        let markerLatLng = marker.getLatLng();\n        let prevMarkerLatLng = this._markers[prevMarkerIndex].getLatLng();\n        let nextMarkerLatLng = this._markers[nextMarkerIndex].getLatLng();\n\n        let middleMarkerNextLatLng = this._calcMiddleLatLng(markerLatLng, nextMarkerLatLng);\n        marker._middleMarkerNext.setLatLng(middleMarkerNextLatLng);\n\n        let middleMarkerPrevLatLng = this._calcMiddleLatLng(markerLatLng, prevMarkerLatLng);\n        marker._middleMarkerPrev.setLatLng(middleMarkerPrevLatLng);\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        // if(this.options.preventOverlap) {\n        //     this._handleOverlap();\n        // }\n\n    },\n\n    _onMarkerDragEnd: function(e) {\n\n        // if(this.options.preventOverlap) {\n        //     this._applyPossibleCoordsChanges();\n        // }\n\n        // fire edit event\n        this._fireEdit();\n\n    },\n\n    _fireEdit: function () {\n        // fire edit event\n        this._poly.edited = true;\n        this._poly.fire('pm:edit');\n    },\n\n    _calcMiddleLatLng: function(latlng1, latlng2) {\n        // calculate the middle coordinates between two markers\n        // TODO: put this into a utils.js or something\n\n        var map = this._poly._map,\n            p1 = map.project(latlng1),\n            p2 = map.project(latlng2);\n\n        var latlng = map.unproject(p1._add(p2)._divideBy(2));\n\n        return latlng;\n    }\n\n});\n","L.Control.PMButton = L.Control.extend({\n    options: {\n        position: 'topleft'\n    },\n    // TODO: clean up variable names like _button should be _options and that domNodeVariable stuff\n    initialize: function (options) {\n        this._button = {};\n        this._button = this.setButton(options);\n    },\n\n    onAdd: function (map) {\n\n        this._map = map;\n\n        this._container = this._map.pm.Toolbar.container;\n        this.buttonsDomNode = this._makeButton(this._button);\n        this._container.appendChild(this.buttonsDomNode)\n\n        return this._container;\n    },\n\n    onRemove: function (map) {\n    },\n\n    setButton: function (options) {\n        var button = {\n            'className': options.className,\n            'iconUrl': options.iconUrl,\n            'onClick': options.onClick,\n            'afterClick': options.afterClick,\n            'doToggle': options.doToggle,\n            'toggleStatus': options.toggleStatus,\n            'disableOtherButtons': options.disableOtherButtons\n        };\n\n        return button;\n    },\n\n    getText: function () {\n        return this._button.text;\n    },\n\n    getIconUrl: function () {\n        return this._button.iconUrl;\n    },\n\n    destroy: function () {\n        this._button = {};\n        this._update();\n    },\n\n    toggle: function (e) {\n        if(typeof e === 'boolean'){\n            this._button.toggleStatus = e;\n        }\n        else{\n            this._button.toggleStatus = !this._button.toggleStatus;\n        }\n        this._applyStyleClasses();\n\n        return this._button.toggleStatus;\n    },\n    toggled: function () {\n        return this._button.toggleStatus;\n    },\n    onCreate: function() {\n        this.toggle(false);\n    },\n    _triggerClick: function(e) {\n        this._button.onClick(e);\n        this._clicked(e);\n        this._button.afterClick(e);\n    },\n    _makeButton: function(button) {\n\n        var newButton = L.DomUtil.create('a', 'leaflet-buttons-control-button', this._container);\n        if(button.toggleStatus) {\n            L.DomUtil.addClass(newButton,'active');\n        }\n\n        var image = L.DomUtil.create('div', 'control-icon', newButton);\n        if (button.iconUrl) {\n            image.setAttribute('src', button.iconUrl);\n        }\n        if (button.className) {\n            L.DomUtil.addClass(image, button.className);\n        }\n        // before the actual click, trigger a click on currently toggled buttons to\n        // untoggle them and their functionality\n        L.DomEvent.addListener(newButton, 'click', (e) => {\n            if(this._button.disableOtherButtons) {\n                this._map.pm.Toolbar.triggerClickOnToggledButtons(this);\n            }\n        });\n        L.DomEvent.addListener(newButton, 'click', this._triggerClick, this);\n\n        L.DomEvent.disableClickPropagation(newButton);\n        return newButton;\n\n    },\n\n    _applyStyleClasses: function() {\n\n        if(!this._container) {\n            return;\n        }\n\n        if(!this._button.toggleStatus) {\n            L.DomUtil.removeClass(this.buttonsDomNode,'active');\n        } else {\n            L.DomUtil.addClass(this.buttonsDomNode,'active');\n        }\n    },\n\n    _clicked: function () {\n\n        if(this._button.doToggle){\n            this.toggle();\n        }\n        return;\n    }\n\n});\n","/**\n* The Icons used in this Toolbar are CC-BY Glyphicons - http://glyphicons.com/\n*/\n\nL.PM.Toolbar = L.Class.extend({\n    options: {\n        drawPolygon: true,\n        editPolygon: false,\n        dragPolygon: false,\n        deleteLayer: true\n    },\n    initialize(map) {\n        this.map = map;\n\n        this.buttons = {};\n        this.container = L.DomUtil.create('div', 'leaflet-pm-toolbar leaflet-bar leaflet-control');\n        this._defineButtons();\n    },\n    getButtons: function() {\n        return this.buttons;\n    },\n\n    addControls: function(options = this.options) {\n        // adds all buttons to the map specified inside options\n\n        // first set the options\n        L.Util.setOptions(this, options)\n\n        // now show the specified buttons\n        this._showHideButtons();\n    },\n    _addButton: function(name, button) {\n        this.buttons[name] = button;\n        this.options[name] = this.options[name] || false;\n\n        return this.buttons[name];\n    },\n    triggerClickOnToggledButtons: function(exceptThisButton) {\n        // this function is used when - e.g. drawing mode is enabled and a possible\n        // other active mode (like removal tool) is already active.\n        // we can't have two active modes because of possible event conflicts\n        // so, we trigger a click on all currently active (toggled) buttons\n        for (var name in this.buttons) {\n            if(this.buttons[name] !== exceptThisButton && this.buttons[name].toggled()) {\n                this.buttons[name]._triggerClick();\n            }\n        }\n    },\n    toggleButton: function(name, status) {\n        // does not fire the events/functionality of the button\n        // this just changes the state and is used if a functionality (like Draw)\n        // is enabled manually via script\n\n        // as some mode got enabled, we still have to trigger the click on the other buttons\n        // to disable their mode\n        this.triggerClickOnToggledButtons(this.buttons[name]);\n\n        // now toggle the state of the button\n        return this.buttons[name].toggle(status);\n\n\n    },\n    _defineButtons: function() {\n\n        // some buttons are still in their respective classes, like L.PM.Draw.Poly\n        var deleteButton = {\n            'className': 'icon-delete',\n            'onClick': (e) => {\n\n            },\n            'afterClick': (e) => {\n                this.map.pm.toggleRemoval(this.buttons.deleteLayer.toggled());\n            },\n            'doToggle': true,\n            'toggleStatus': false,\n            'disableOtherButtons': true\n        };\n\n        var drawPolyButton = {\n             'className': 'icon-polygon',\n             'onClick': (e) => {\n\n             },\n             'afterClick': (e) => {\n                 // toggle drawing mode\n                 this.map.pm.Draw.Poly.toggle();\n             },\n             'doToggle': true,\n             'toggleStatus': false,\n             'disableOtherButtons': true\n        };\n\n        var editButton = {\n             'className': 'icon-edit',\n             'onClick': (e) => {\n             },\n             'afterClick': (e) => {\n\n             },\n             'doToggle': true,\n             'toggleStatus': false,\n             'disableOtherButtons': true\n        };\n\n        var dragButton = {\n             'className': 'icon-drag',\n             'onClick': (e) => {\n             },\n             'afterClick': (e) => {\n\n             },\n             'doToggle': true,\n             'toggleStatus': false,\n             'disableOtherButtons': true\n        };\n\n        this._addButton('drawPolygon', new L.Control.PMButton(drawPolyButton));\n        this._addButton('editPolygon', new L.Control.PMButton(editButton));\n        this._addButton('dragPolygon', new L.Control.PMButton(dragButton));\n        this._addButton('deleteLayer', new L.Control.PMButton(deleteButton));\n\n    },\n    _showHideButtons: function() {\n        // loop through all buttons\n        var buttons = this.getButtons();\n\n        for (var btn in buttons) {\n            if(this.options[btn]) {\n                // if options say the button should be visible, add it to the map\n                buttons[btn].addTo(this.map);\n            } else {\n                // if not, remove it\n                buttons[btn].remove();\n            }\n        }\n    }\n});\n"],"sourceRoot":"/source/"}