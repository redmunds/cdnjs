{"version":3,"sources":["/source/pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","dayNamesEn","derivers","getSort","locales","mthNamesEn","naturalSort","numberFormat","pivotTableRenderer","renderers","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","showZero","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","countUnique","arg","attr","uniq","record","ref","call","numInputs","listUnique","sep","join","sum","parseFloat","min","val","Math","max","average","len","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","sign","sqrt","fractionOf","wrapped","type","selector","total","row","col","inner","getAggregator","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Minimum","Maximum","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","Table Barchart","barchart","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","m","p","_this","as","bs","a","a1","b","b1","rd","rx","rz","String","match","shift","order","mapping","sorters","sort","isFunction","input","getRowKeys","getColKeys","sortKeys","arrSort","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","vals","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","derivedAttributes","filter","processRecord","f","addRecord","compactRecord","j","k","len1","results","results1","tblCols","isEmptyObject","v","isArray","each","text","Error","prototype","attrs","sortersArr","comparison","sorter","flatColKey","flatRowKey","len2","n","ref1","ref2","ref3","fromCharCode","agg","pivotUtilities","pivotData","c","r","spanSize","tbody","td","th","thead","totalAggregator","tr","txt","document","createElement","className","arr","noDraw","stop","parseInt","setAttribute","appendChild","textContent","innerHTML","pivot","e","error","error1","dataClass","renderer","rendererOptions","console","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","inputOpts","overwrite","locale","attrLength","attrValues","existingOpts","initialRender","len3","materializedInput","o","pivotTable","recordsProcessed","refresh","refreshDelayed","rendererControl","shownAttributes","tr1","tr2","uiTable","unused","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","base","class","addClass","appendTo","attrElem","btns","checkContainer","filterItem","filterItemExcluded","hasExcludedItem","showFilterList","triangleLink","updateFilter","valueCount","valueList","values","hide","find","prop","placeholder","toLowerCase","testString","show","unselectedCount","removeClass","toggle","left","top","currentTarget","position","css","prepend","inArray","rendererName","len4","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","q","ref4","ref5","s","subopts","unusedAttrsContainer","remove","not","excludedItems","ref6","ref7","inclusionsInfo","children","setTimeout","sortable","update","ui","sender","connectWith","items","scope","colorScaleGenerator","heatmapper","numCols","numRows","nonRed","round","colorScale","forEachCell","elem","barcharter","wrapper","height","bottom","right","background-color","padding-left","padding-right","padding","padding-top","text-align"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults =\n            digitsAfterDecimal: 2, scaler: 1,\n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n            showZero: false\n        opts = $.extend defaults, opts\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            return \"\" if x == 0 and not opts.showZero\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> @count\n            format: formatter\n\n        countUnique: (formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.length\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        listUnique: (sep) -> ([attr]) -> (data, rowKey, colKey)  ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> @uniq.join sep\n            format: (x) -> x\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> @sum\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        min: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) ->\n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.min(x, @val ? x)\n            value: -> @val\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        max: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) ->\n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.max(x, @val ? x)\n            value: -> @val\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        average:  (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            len: 0\n            push: (record) ->\n                if not isNaN parseFloat(record[attr])\n                    @sum += parseFloat(record[attr])\n                    @len++\n            value: -> @sum/@len\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> @sumNum/@sumDenom\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> @inner.value() / data.getAggregator(@selector...).inner.value()\n            numInputs: wrapped(x...)().numInputs\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) ->\n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":          (data, opts) ->   pivotTableRenderer(data, opts)\n        \"Table Barchart\": (data, opts) -> $(pivotTableRenderer(data, opts)).barchart()\n        \"Heatmap\":        (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\",    opts)\n        \"Row Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts)\n        \"Col Heatmap\":    (data, opts) -> $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts)\n\n    locales =\n        en:\n            aggregators: aggregators\n            renderers: renderers\n            localeStrings:\n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter results\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    naturalSort = (as, bs) => #thanks http://stackoverflow.com/a/4373421/112871\n        rx = /(\\d+)|(\\D+)/g\n        rd = /\\d/\n        rz = /^0/\n        if typeof as is \"number\" or typeof bs is \"number\"\n            return 1  if isNaN(as)\n            return -1  if isNaN(bs)\n            return as - bs\n        a = String(as)\n        b = String(bs)\n        return 0  if a is b\n        return (if a > b then 1 else -1)  unless rd.test(a) and rd.test(b)\n        a = a.match(rx)\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 isnt b1\n                if rd.test(a1) and rd.test(b1)\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        a.length - b.length\n\n    sortAs = (order) ->\n        mapping = {}\n        for i, x of order\n            mapping[x] = i\n        (a, b) ->\n            if mapping[a]? and mapping[b]?\n                return mapping[a] - mapping[b]\n            else if mapping[a]?\n                return -1\n            else if mapping[b]?\n                return 1\n            else\n                return naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        sort = sorters(attr)\n        if $.isFunction(sort)\n            return sort\n        else\n            return naturalSort\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts) ->\n            @aggregator = opts.aggregator\n            @aggregatorName = opts.aggregatorName\n            @colAttrs = opts.cols\n            @rowAttrs = opts.rows\n            @valAttrs = opts.vals\n            @sorters = opts.sorters\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator(this, [], [])\n            @sorted = false\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) =>\n                @processRecord(record) if opts.filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) ->\n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof jQuery\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        arrSort: (attrs) =>\n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) ->\n                for own i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i])\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                @rowKeys.sort @arrSort(@rowAttrs)\n                @colKeys.sort @arrSort(@colAttrs)\n\n        getColKeys: () =>\n            @sortKeys()\n            return @colKeys\n\n        getRowKeys: () =>\n            @sortKeys()\n            return @rowKeys\n\n        processRecord: (record) -> #this code is called in a tight loop\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? \"null\" for x in @colAttrs\n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n\n            @allTotal.push record\n\n            if rowKey.length != 0\n                if not @rowTotals[flatRowKey]\n                    @rowKeys.push rowKey\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\n                @rowTotals[flatRowKey].push record\n\n            if colKey.length != 0\n                if not @colTotals[flatColKey]\n                    @colKeys.push colKey\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\n                @colTotals[flatColKey].push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\n                @tree[flatRowKey][flatColKey].push record\n\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, PivotData}\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            localeStrings:\n                totals: \"Totals\"\n\n        opts = $.extend defaults, opts\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        thead = document.createElement(\"thead\")\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = c\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    tr.appendChild th\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                tr.appendChild th\n            thead.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = r\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n            tr.appendChild th\n            thead.appendChild tr\n        result.appendChild thead\n\n        #now the actual data rows, with their row headers and totals\n        tbody = document.createElement(\"tbody\")\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = txt\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n                    tr.appendChild th\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n                td.className = \"pvtVal row#{i} col#{j}\"\n                td.textContent = aggregator.format(val)\n                td.setAttribute(\"data-value\", val)\n                tr.appendChild td\n\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal rowTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            td.setAttribute(\"data-for\", \"row\"+i)\n            tr.appendChild td\n            tbody.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n        tr.appendChild th\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal colTotal\"\n            td.textContent = totalAggregator.format(val)\n            td.setAttribute(\"data-value\", val)\n            td.setAttribute(\"data-for\", \"col\"+j)\n            tr.appendChild td\n        totalAggregator = pivotData.getAggregator([], [])\n        val = totalAggregator.value()\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n        td.textContent = totalAggregator.format(val)\n        td.setAttribute(\"data-value\", val)\n        tr.appendChild td\n        tbody.appendChild tr\n        result.appendChild tbody\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, opts) ->\n        defaults =\n            cols : []\n            rows: []\n            vals: []\n            dataClass: PivotData\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: ->\n            derivedAttributes: {},\n            renderer: pivotTableRenderer\n            rendererOptions: null\n            localeStrings: locales.en.localeStrings\n\n        opts = $.extend defaults, opts\n\n        result = null\n        try\n            pivotData = new opts.dataClass(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n\n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        if not locales[locale]?\n            locale = \"en\"\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            menuLimit: 200\n            cols: [], rows: [], vals: []\n            dataClass: PivotData\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            rendererOptions: localeStrings: locales[locale].localeStrings\n            onRefresh: null\n            filter: -> true\n            sorters: ->\n            localeStrings: locales[locale].localeStrings\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend defaults, inputOpts\n        else\n            opts = existingOpts\n\n        try\n            # do a first pass on the data to cache a materialized copy of any\n            # function-valued inputs and to compute dimension cardinalities\n            attrValues = {}\n            materializedInput = []\n            recordsProcessed = 0\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                return unless opts.filter(record)\n                materializedInput.push(record)\n                for own attr of record\n                    if not attrValues[attr]?\n                        attrValues[attr] = {}\n                        if recordsProcessed > 0\n                            attrValues[attr][\"null\"] = recordsProcessed\n                for attr of attrValues\n                    value = record[attr] ? \"null\"\n                    attrValues[attr][value] ?= 0\n                    attrValues[attr][value]++\n                recordsProcessed++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\")\n\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (a for a of attrValues when a not in opts.hiddenAttributes)\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownAttributes\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                unused.addClass('pvtVertList')\n            else\n                unused.addClass('pvtHorizList')\n\n            for own i, attr of shownAttributes\n                do (attr) ->\n                    values = (v for v of attrValues[attr])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").text(\"#{attr} (#{values.length})\")\n                    if values.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        btns = $(\"<p>\").appendTo(valueList)\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectAll).bind \"click\", ->\n                            valueList.find(\"input:visible\").prop \"checked\", true\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectNone).bind \"click\", ->\n                            valueList.find(\"input:visible\").prop \"checked\", false\n                        btns.append $(\"<br>\")\n                        btns.append $(\"<input>\", {type: \"text\", placeholder: opts.localeStrings.filterResults, class: \"pvtSearch\"}).bind \"keyup\", ->\n                            filter = $(this).val().toLowerCase()\n                            valueList.find('.pvtCheckContainer p').each ->\n                                testString = $(this).text().toLowerCase().indexOf(filter)\n                                if testString isnt -1\n                                    $(this).show()\n                                else\n                                    $(this).hide()\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for value in values.sort(getSort(opts.sorters, attr))\n                             valueCount = attrValues[attr][value]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[attr]\n                                filterItemExcluded = (value not in opts.inclusions[attr])\n                             else if opts.exclusions[attr]\n                                filterItemExcluded = (value in opts.exclusions[attr])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr,value])\n                                .appendTo filterItem\n                             filterItem.append $(\"<span>\").text value\n                             filterItem.append $(\"<span>\").text \" (\"+valueCount+\")\"\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    updateFilter = ->\n                        unselectedCount = valueList.find(\"[type='checkbox']\").length -\n                                          valueList.find(\"[type='checkbox']:checked\").length\n                        if unselectedCount > 0\n                            attrElem.addClass \"pvtFilteredAttribute\"\n                        else\n                            attrElem.removeClass \"pvtFilteredAttribute\"\n                        if values.length > opts.menuLimit\n                            valueList.toggle()\n                        else\n                            valueList.toggle(0, refresh)\n\n                    $(\"<p>\").appendTo(valueList)\n                        .append $(\"<button>\", {type:\"button\"}).text(\"OK\").bind \"click\", updateFilter\n\n                    showFilterList = (e) ->\n                        {left, top} = $(e.currentTarget).position()\n                        valueList.css(left: left+10, top: top+10).toggle()\n                        valueList.find('.pvtSearch').val('')\n                        valueList.find('.pvtCheckContainer p').show()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", showFilterList)\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)\n                        .bind(\"dblclick\", showFilterList)\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    unused.append(attrElem).append(valueList)\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            $(\"<td>\").addClass('pvtVals')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend unused\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(unused)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n                    dataClass: opts.dataClass\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownAttributes\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+(record[k] ? 'null') in excludedItems\n                    return true\n\n                pivotTable.pivot(materializedInput,subopts)\n                pivotUIOptions = $.extend opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\", opts) ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        # given a series of values\n        # must return a function to map a given value to a CSS color\n        colorScaleGenerator = opts?.heatmap?.colorScaleGenerator\n        colorScaleGenerator ?= (values) ->\n            min = Math.min(values...)\n            max = Math.max(values...)\n            return (x) ->\n                nonRed = 255 - Math.round 255*(x-min)/(max-min)\n                return \"rgb(255,#{nonRed},#{nonRed})\"\n\n        heatmapper = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorScale = colorScaleGenerator(values)\n            forEachCell (x, elem) -> elem.css \"background-color\", colorScale(x)\n\n        switch scope\n            when \"heatmap\"    then heatmapper \".pvtVal\"\n            when \"rowheatmap\" then heatmapper \".pvtVal.row#{i}\" for i in [0...numRows]\n            when \"colheatmap\" then heatmapper \".pvtVal.col#{j}\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\"\n        heatmapper \".pvtTotal.colTotal\"\n\n        return this\n\n    ###\n    Barchart post-processing\n    ###\n\n    $.fn.barchart =  ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        barcharter = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            max = Math.max(values...)\n            scaler = (x) -> 100*x/(1.4*max)\n            forEachCell (x, elem) ->\n                text = elem.text()\n                wrapper = $(\"<div>\").css\n                    \"position\": \"relative\"\n                    \"height\": \"55px\"\n                wrapper.append $(\"<div>\").css\n                    \"position\": \"absolute\"\n                    \"bottom\": 0\n                    \"left\": 0\n                    \"right\": 0\n                    \"height\": scaler(x) + \"%\"\n                    \"background-color\": \"gray\"\n                wrapper.append $(\"<div>\").text(text).css\n                    \"position\":\"relative\"\n                    \"padding-left\":\"5px\"\n                    \"padding-right\":\"5px\"\n\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\n\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\n        barcharter \".pvtTotal.colTotal\"\n\n        return this\n\n\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, dayNamesEn, derivers, getSort, locales, mthNamesEn, naturalSort, numberFormat, pivotTableRenderer, renderers, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\",\n        showZero: false\n      };\n      opts = $.extend(defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        if (x === 0 && !opts.showZero) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return this.count;\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      countUnique: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.length;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      listUnique: function(sep) {\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return this.uniq.join(sep);\n              },\n              format: function(x) {\n                return x;\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return this.sum;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      min: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.min(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      max: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.max(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return this.val;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      average: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              len: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  this.sum += parseFloat(record[attr]);\n                  return this.len++;\n                }\n              },\n              value: function() {\n                return this.sum / this.len;\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return this.sumNum / this.sumDenom;\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var sign;\n                sign = upper ? 1 : -1;\n                return (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value();\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(data, opts) {\n        return pivotTableRenderer(data, opts);\n      },\n      \"Table Barchart\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).barchart();\n      },\n      \"Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"heatmap\", opts);\n      },\n      \"Row Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"rowheatmap\", opts);\n      },\n      \"Col Heatmap\": function(data, opts) {\n        return $(pivotTableRenderer(data, opts)).heatmap(\"colheatmap\", opts);\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter results\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, rd, rx, rz;\n        rx = /(\\d+)|(\\D+)/g;\n        rd = /\\d/;\n        rz = /^0/;\n        if (typeof as === \"number\" || typeof bs === \"number\") {\n          if (isNaN(as)) {\n            return 1;\n          }\n          if (isNaN(bs)) {\n            return -1;\n          }\n          return as - bs;\n        }\n        a = String(as);\n        b = String(bs);\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, mapping, x;\n      mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      sort = sorters(attr);\n      if ($.isFunction(sort)) {\n        return sort;\n      } else {\n        return naturalSort;\n      }\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.aggregator = opts.aggregator;\n        this.aggregatorName = opts.aggregatorName;\n        this.colAttrs = opts.cols;\n        this.rowAttrs = opts.rows;\n        this.valAttrs = opts.vals;\n        this.sorters = opts.sorters;\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator(this, [], []);\n        this.sorted = false;\n        PivotData.forEachRecord(input, opts.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (opts.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof jQuery) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.prototype.arrSort = function(attrs) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i]);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        if (!this.sorted) {\n          this.sorted = true;\n          this.rowKeys.sort(this.arrSort(this.rowAttrs));\n          return this.colKeys.sort(this.arrSort(this.colAttrs));\n        }\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        this.sortKeys();\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        this.sortKeys();\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, flatColKey, flatRowKey, l, len1, len2, n, ref, ref1, ref2, ref3, rowKey, x;\n        colKey = [];\n        rowKey = [];\n        ref = this.colAttrs;\n        for (l = 0, len1 = ref.length; l < len1; l++) {\n          x = ref[l];\n          colKey.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          rowKey.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        this.allTotal.push(record);\n        if (rowKey.length !== 0) {\n          if (!this.rowTotals[flatRowKey]) {\n            this.rowKeys.push(rowKey);\n            this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n          }\n          this.rowTotals[flatRowKey].push(record);\n        }\n        if (colKey.length !== 0) {\n          if (!this.colTotals[flatColKey]) {\n            this.colKeys.push(colKey);\n            this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n          }\n          this.colTotals[flatColKey].push(record);\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var aggregator, c, colAttrs, colKey, colKeys, defaults, i, j, r, result, rowAttrs, rowKey, rowKeys, spanSize, tbody, td, th, thead, totalAggregator, tr, txt, val, x;\n      defaults = {\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, n, noDraw, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; x = 0 <= ref ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = n = 0, ref1 = j; 0 <= ref1 ? n <= ref1 : n >= ref1; x = 0 <= ref1 ? ++n : --n) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      thead = document.createElement(\"thead\");\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = c;\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = colKey[j];\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        thead.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = r;\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        thead.appendChild(tr);\n      }\n      result.appendChild(thead);\n      tbody = document.createElement(\"tbody\");\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = txt;\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          td.className = \"pvtVal row\" + i + \" col\" + j;\n          td.textContent = aggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n          tr.appendChild(td);\n        }\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal rowTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"row\" + i);\n        tr.appendChild(td);\n        tbody.appendChild(tr);\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal colTotal\";\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n        td.setAttribute(\"data-for\", \"col\" + j);\n        tr.appendChild(td);\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = totalAggregator.value();\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      td.textContent = totalAggregator.format(val);\n      td.setAttribute(\"data-value\", val);\n      tr.appendChild(td);\n      tbody.appendChild(tr);\n      result.appendChild(tbody);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, opts) {\n      var defaults, e, error, error1, pivotData, result, x;\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        dataClass: PivotData,\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: function() {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer,\n        rendererOptions: null,\n        localeStrings: locales.en.localeStrings\n      };\n      opts = $.extend(defaults, opts);\n      result = null;\n      try {\n        pivotData = new opts.dataClass(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error1) {\n        e = error1;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attr, attrLength, attrValues, defaults, e, error, existingOpts, fn, i, initialRender, l, len1, len2, len3, materializedInput, n, o, opts, pivotTable, recordsProcessed, ref, ref1, ref2, ref3, refresh, refreshDelayed, renderer, rendererControl, shownAttributes, tr1, tr2, uiTable, unused, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        menuLimit: 200,\n        cols: [],\n        rows: [],\n        vals: [],\n        dataClass: PivotData,\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        rendererOptions: {\n          localeStrings: locales[locale].localeStrings\n        },\n        onRefresh: null,\n        filter: function() {\n          return true;\n        },\n        sorters: function() {},\n        localeStrings: locales[locale].localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(defaults, inputOpts);\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        attrValues = {};\n        materializedInput = [];\n        recordsProcessed = 0;\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var attr, base, ref, value;\n          if (!opts.filter(record)) {\n            return;\n          }\n          materializedInput.push(record);\n          for (attr in record) {\n            if (!hasProp.call(record, attr)) continue;\n            if (attrValues[attr] == null) {\n              attrValues[attr] = {};\n              if (recordsProcessed > 0) {\n                attrValues[attr][\"null\"] = recordsProcessed;\n              }\n            }\n          }\n          for (attr in attrValues) {\n            value = (ref = record[attr]) != null ? ref : \"null\";\n            if ((base = attrValues[attr])[value] == null) {\n              base[value] = 0;\n            }\n            attrValues[attr][value]++;\n          }\n          return recordsProcessed++;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\");\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref = opts.renderers;\n        for (x in ref) {\n          if (!hasProp.call(ref, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        unused = $(\"<td>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var results;\n          results = [];\n          for (a in attrValues) {\n            if (indexOf.call(opts.hiddenAttributes, a) < 0) {\n              results.push(a);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (l = 0, len1 = shownAttributes.length; l < len1; l++) {\n            a = shownAttributes[l];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          unused.addClass('pvtVertList');\n        } else {\n          unused.addClass('pvtHorizList');\n        }\n        fn = function(attr) {\n          var attrElem, btns, checkContainer, filterItem, filterItemExcluded, hasExcludedItem, len2, n, ref1, showFilterList, triangleLink, updateFilter, v, value, valueCount, valueList, values;\n          values = (function() {\n            var results;\n            results = [];\n            for (v in attrValues[attr]) {\n              results.push(v);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").text(attr + \" (\" + values.length + \")\"));\n          if (values.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            btns = $(\"<p>\").appendTo(valueList);\n            btns.append($(\"<button>\", {\n              type: \"button\"\n            }).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n              return valueList.find(\"input:visible\").prop(\"checked\", true);\n            }));\n            btns.append($(\"<button>\", {\n              type: \"button\"\n            }).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n              return valueList.find(\"input:visible\").prop(\"checked\", false);\n            }));\n            btns.append($(\"<br>\"));\n            btns.append($(\"<input>\", {\n              type: \"text\",\n              placeholder: opts.localeStrings.filterResults,\n              \"class\": \"pvtSearch\"\n            }).bind(\"keyup\", function() {\n              var filter;\n              filter = $(this).val().toLowerCase();\n              return valueList.find('.pvtCheckContainer p').each(function() {\n                var testString;\n                testString = $(this).text().toLowerCase().indexOf(filter);\n                if (testString !== -1) {\n                  return $(this).show();\n                } else {\n                  return $(this).hide();\n                }\n              });\n            }));\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref1 = values.sort(getSort(opts.sorters, attr));\n            for (n = 0, len2 = ref1.length; n < len2; n++) {\n              value = ref1[n];\n              valueCount = attrValues[attr][value];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[attr], value) < 0);\n              } else if (opts.exclusions[attr]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[attr], value) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [attr, value]).appendTo(filterItem);\n              filterItem.append($(\"<span>\").text(value));\n              filterItem.append($(\"<span>\").text(\" (\" + valueCount + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          updateFilter = function() {\n            var unselectedCount;\n            unselectedCount = valueList.find(\"[type='checkbox']\").length - valueList.find(\"[type='checkbox']:checked\").length;\n            if (unselectedCount > 0) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            if (values.length > opts.menuLimit) {\n              return valueList.toggle();\n            } else {\n              return valueList.toggle(0, refresh);\n            }\n          };\n          $(\"<p>\").appendTo(valueList).append($(\"<button>\", {\n            type: \"button\"\n          }).text(\"OK\").bind(\"click\", updateFilter));\n          showFilterList = function(e) {\n            var left, ref2, top;\n            ref2 = $(e.currentTarget).position(), left = ref2.left, top = ref2.top;\n            valueList.css({\n              left: left + 10,\n              top: top + 10\n            }).toggle();\n            valueList.find('.pvtSearch').val('');\n            return valueList.find('.pvtCheckContainer p').show();\n          };\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", showFilterList);\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(attr).data(\"attrName\", attr).append(triangleLink)).bind(\"dblclick\", showFilterList);\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          return unused.append(attrElem).append(valueList);\n        };\n        for (i in shownAttributes) {\n          if (!hasProp.call(shownAttributes, i)) continue;\n          attr = shownAttributes[i];\n          fn(attr);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref1 = opts.aggregators;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        $(\"<td>\").addClass('pvtVals').appendTo(tr1).append(aggregator).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(unused);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(unused));\n        }\n        this.html(uiTable);\n        ref2 = opts.cols;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        ref3 = opts.rows;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var exclusions, inclusions, len4, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, q, ref4, ref5, s, subopts, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: [],\n              dataClass: opts.dataClass\n            };\n            numInputsToProcess = (ref4 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref4 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = q = 0, ref5 = numInputsToProcess; 0 <= ref5 ? q < ref5 : q > ref5; x = 0 <= ref5 ? ++q : --q) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (s = 0, len4 = shownAttributes.length; s < len4; s++) {\n                  attr = shownAttributes[s];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, k, ref6, ref7;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref6 = \"\" + ((ref7 = record[k]) != null ? ref7 : 'null'), indexOf.call(excludedItems, ref6) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(materializedInput, subopts);\n            pivotUIOptions = $.extend(opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope, opts) {\n      var colorScaleGenerator, heatmapper, i, j, l, n, numCols, numRows, ref, ref1, ref2;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorScaleGenerator = opts != null ? (ref = opts.heatmap) != null ? ref.colorScaleGenerator : void 0 : void 0;\n      if (colorScaleGenerator == null) {\n        colorScaleGenerator = function(values) {\n          var max, min;\n          min = Math.min.apply(Math, values);\n          max = Math.max.apply(Math, values);\n          return function(x) {\n            var nonRed;\n            nonRed = 255 - Math.round(255 * (x - min) / (max - min));\n            return \"rgb(255,\" + nonRed + \",\" + nonRed + \")\";\n          };\n        };\n      }\n      heatmapper = (function(_this) {\n        return function(scope) {\n          var colorScale, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorScale = colorScaleGenerator(values);\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", colorScale(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref1 = numRows; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i);\n          }\n          break;\n        case \"colheatmap\":\n          for (j = n = 0, ref2 = numCols; 0 <= ref2 ? n < ref2 : n > ref2; j = 0 <= ref2 ? ++n : --n) {\n            heatmapper(\".pvtVal.col\" + j);\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\");\n      heatmapper(\".pvtTotal.colTotal\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    return $.fn.barchart = function() {\n      var barcharter, i, l, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          scaler = function(x) {\n            return 100 * x / (1.4 * max);\n          };\n          return forEachCell(function(x, elem) {\n            var text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": 0,\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": \"gray\"\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"],"sourceRoot":"/source/"}