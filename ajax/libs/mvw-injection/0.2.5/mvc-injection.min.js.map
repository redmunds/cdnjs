{"version":3,"sources":["mvc-injection.js"],"names":["root","DependencyInjection","_formatFactoryFunction","factoryFunction","funcString","toString","replace","matches","match","length","split","filter","arg","trim","concat","factoryArrayCopy","i","push","Injector","instanceName","_getInjections","dependencies","name","customDependencies","noError","j","interfaces","_interfaces","interfacesSupported","injections","factory","Error","factories","interfaceName","instantiated","deps","result","pop","factoryInjections","apply","_this","this","get","factoryName","invoke","thisArg","func","formatcustomDependencies","injector","registerInterface","canInjectInterfaces","replaceIfExists","module","exports"],"mappings":"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","file":"mvc-injection.min.js","sourcesContent":["/*! MVW-Injection (0.2.5). (C) 2015 Xavier Boubert. MIT @license: en.wikipedia.org/wiki/MIT_License */\r\n(function(root) {\n  'use strict';\n\n  var DependencyInjection = new (function DependencyInjection() {\n\n    var _this = this,\n        _interfaces = {};\n\n    function _formatFactoryFunction(factoryFunction) {\n      if (typeof factoryFunction == 'function') {\n\n        var funcString = factoryFunction\n          .toString()\n\n          // remove comments\n          .replace(/((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg, '');\n\n        var matches = funcString.match(/^function\\s*[^\\(]*\\s*\\(\\s*([^\\)]*)\\)/m);\n        if (matches === null || matches.length < 2) {\n          factoryFunction = [factoryFunction];\n        }\n        else {\n          factoryFunction = matches[1]\n            .replace(/\\s/g, '')\n            .split(',')\n            .filter(function(arg) {\n              return arg.trim().length > 0;\n            })\n            .concat(factoryFunction);\n        }\n\n        return factoryFunction;\n      }\n      else {\n        var factoryArrayCopy = [];\n\n        for (var i = 0; i < factoryFunction.length; i++) {\n          factoryArrayCopy.push(factoryFunction[i]);\n        }\n\n        factoryFunction = factoryArrayCopy;\n      }\n\n      return factoryFunction;\n    }\n\n    function Injector(instanceName) {\n\n      function _getInjections(dependencies, name, customDependencies, noError) {\n        var interfaces = _interfaces[name].interfacesSupported,\n            injections = [],\n            i,\n            j;\n\n        for (i = 0; i < dependencies.length; i++) {\n          var factory = null;\n\n          if (customDependencies && typeof customDependencies[dependencies[i]] != 'undefined') {\n            factory = customDependencies[dependencies[i]];\n          }\n          else {\n            for (j = 0; j < interfaces.length; j++) {\n              if (!_interfaces[interfaces[j]]) {\n                if (noError) {\n                  return false;\n                }\n\n                throw new Error('DependencyInjection: \"' + interfaces[j] + '\" interface is not registered.');\n              }\n\n              factory = _interfaces[interfaces[j]].factories[dependencies[i]];\n\n              if (factory) {\n                factory.interfaceName = interfaces[j];\n                break;\n              }\n            }\n          }\n\n          if (factory) {\n            if (!factory.instantiated) {\n              var deps = _formatFactoryFunction(factory.result);\n              factory.result = deps.pop();\n\n              var factoryInjections = _getInjections(deps, factory.interfaceName);\n\n              factory.result = factory.result.apply(_this, factoryInjections);\n              factory.instantiated = true;\n            }\n\n            injections.push(factory.result);\n          }\n          else {\n            if (noError) {\n              return false;\n            }\n\n            throw new Error('DependencyInjection: \"' + dependencies[i] + '\" is not registered or accessible in ' + name + '.');\n          }\n        }\n\n        return injections;\n      }\n\n      this.get = function(factoryName, noError) {\n        var injections = _getInjections([factoryName], instanceName, null, noError);\n\n        if (injections.length) {\n          return injections[0];\n        }\n\n        return false;\n      };\n\n      this.invoke = function(thisArg, func, customDependencies) {\n        var dependencies = _formatFactoryFunction(func);\n        func = dependencies.pop();\n\n        if (customDependencies) {\n          var formatcustomDependencies = {},\n              interfaceName,\n              factory;\n\n          for (interfaceName in customDependencies) {\n            for (factory in customDependencies[interfaceName]) {\n              formatcustomDependencies[factory] = {\n                interfaceName: interfaceName,\n                instantiated: false,\n                result: customDependencies[interfaceName][factory]\n              };\n            }\n          }\n\n          customDependencies = formatcustomDependencies;\n        }\n\n        var injections = _getInjections(dependencies, instanceName, customDependencies);\n\n        return func.apply(thisArg, injections);\n      };\n    }\n\n    this.injector = {};\n\n    this.registerInterface = function(name, canInjectInterfaces) {\n      if (_this[name]) {\n        return _this;\n      }\n\n      _interfaces[name] = {\n        interfacesSupported: (canInjectInterfaces || []).concat(name),\n        factories: {}\n      };\n\n      _this.injector[name] = new Injector(name);\n\n      _this[name] = function DependencyInjectionFactory(factoryName, factoryFunction, replaceIfExists) {\n        if (!replaceIfExists && _interfaces[name].factories[factoryName]) {\n          return _this;\n        }\n\n        _interfaces[name].factories[factoryName] = {\n          instantiated: false,\n          result: factoryFunction\n        };\n\n        return _this;\n      };\n\n      return _this;\n    };\n\n  })();\n\n  if (typeof module != 'undefined' && typeof module.exports != 'undefined') {\n    module.exports = DependencyInjection;\n  }\n  else {\n    root.DependencyInjection = DependencyInjection;\n  }\n\n})(this);\n\r\n(function(root) {\n  'use strict';\n\n  var DependencyInjection = typeof module != 'undefined' && typeof module.exports != 'undefined' ? module.exports : root.DependencyInjection;\n\n  // Models\n\n  DependencyInjection.registerInterface('model', ['factory', 'service']);\n  DependencyInjection.registerInterface('factory', ['model', 'service']);\n  DependencyInjection.registerInterface('service', ['model', 'factory']);\n\n  // Controllers\n\n  DependencyInjection.registerInterface('controller', ['model', 'factory', 'service']);\n\n  // Views\n\n  DependencyInjection.registerInterface('view', ['model', 'factory', 'service', 'converter']);\n  DependencyInjection.registerInterface('converter', ['model', 'factory', 'service', 'view']);\n\n})(this);\n"],"sourceRoot":"/source/"}