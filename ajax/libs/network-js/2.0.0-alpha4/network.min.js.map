{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","network.js","../lib/Network.js","../lib/EventDispatcher.js","../lib/Http/BandwidthModule.js","../lib/Http/HttpModule.js","../lib/Http/LatencyModule.js","../lib/Timing.js","../utils/helpers.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","Network","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"_interopRequire","obj","__esModule","_defineProperty","key","value","Object","defineProperty","enumerable","configurable","writable","_createClass","defineProperties","target","props","prop","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","EventDispatcher","HttpModule","LatencyModule","BandwidthModule","Timing","_utilsHelpers","getGlobalObject","isObject","assign","except","settings","undefined","arguments","_modules","_modulesInitialized","_pendingSettings","_registerModule","_initModules","_settings","_settingsWrapper","apply","toString","_this","moduleNames","keys","reduce","moduleName","_ret","globalSettings","localSettings","forEach","name","v","isRequesting","requesting","_name","hasOwnProperty","moduleCallback","on","_exposeInternalClasses","classes","../utils/helpers","./EventDispatcher","./Http/BandwidthModule","./Http/HttpModule","./Http/LatencyModule","./Timing",2,"_eventCallbacks","events","callback","Array","isArray","event","eventCallbacks","indexOf","push","off","callbackIndex","splice","trigger","_len","extraParameters","_key","returnValue","eventCallback",3,"_get","get","object","property","receiver","desc","getOwnPropertyDescriptor","parent","getPrototypeOf","getter","_inherits","subClass","superClass","create","constructor","__proto__","defer","_HttpModule","loadingType","_extendDefaultSettings","data","size","multiplier","_loadingType","_intendedEnd","_isRestarting","_lastLoadedValue","_speedRecords","_avgSpeed","_requestID","_progressID","_started","_firstProgress","_deferredProgress","_timingLabels","start","progress","end","measure","mark","xhr","readyState","XMLHttpRequest","LOADING","eventsPrefix","_progress","_timeout","_end","dataSettings","reqID","labels","blob","Blob","ArrayBuffer","type","_newRequest","_sendRequest","abort","_abort","run","progressID","markLabel","loaded","instantSpeed","avgMeasure","avgSpeed","instantMeasure","../../utils/helpers","../Timing","./HttpModule",4,"_slice","slice","assignStrict","_EventDispatcher","endpoint","delay","_moduleName","_xhr","_lastURLToken","_requestingOverridden","_requesting","_defaultSettings","httpMethod","queryParams","console","warn","validHttpMethods","tokenSuffix","Date","getTime","url","param","encodeURIComponent","open","timeout","OPENED","eventTypes","eventType","addEventListener","concat","upload","send","_getTimingEntry","setTimeout","lastURLToken","entries","performance","getEntriesByType","filter","entry","_setRequesting","../EventDispatcher",5,"measures","attempts","_requestsLeft","_attemptsLeft","_latencies","supportsResourceTiming","_measure","_settings2","_nextRequest","retry","requestsLeft","HEADERS_RECEIVED","latency","secureConnectionStart","connectStart","connectEnd","latencies","avgLatency","b","join",6,"_support","userTiming","resourceTiming","timing","_marks","_measures","label","support","marks","now","measureLabel","markLabelA","markLabelB","measureWithoutUserTiming","entriesByName","getEntriesByName","duration",7,"Function","valueOf","copy","JSON","parse","stringify","_assign","strict","sources","source","properties","objCopy","index","func","_class"],"mappings":"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","file":"network.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Network = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\nvar _defineProperty = function (obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); };\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\nvar EventDispatcher = _interopRequire(require(\"./EventDispatcher\"));\n\nvar HttpModule = _interopRequire(require(\"./Http/HttpModule\"));\n\nvar LatencyModule = _interopRequire(require(\"./Http/LatencyModule\"));\n\nvar BandwidthModule = _interopRequire(require(\"./Http/BandwidthModule\"));\n\nvar Timing = _interopRequire(require(\"./Timing\"));\n\nvar _utilsHelpers = require(\"../utils/helpers\");\n\nvar getGlobalObject = _utilsHelpers.getGlobalObject;\nvar isObject = _utilsHelpers.isObject;\nvar assign = _utilsHelpers.assign;\nvar except = _utilsHelpers.except;\n\n/**\n * @public\n * @typedef {Object} Network~settingsObject\n * @property {LatencyModule~settingsObject} latency\n * @property {BandwidthModule~settingsObject} upload\n * @property {BandwidthModule~settingsObject} download\n * @example\n * {\n *     // Top-level properties are applied to all the modules\n *     endpoint: './my-new-endpoint/',\n *\n *     // Top-level properties will be overridden by the ones specified in each module\n *     latency: {\n *         endpoint: './my-new-latency-endpoint/'\n *     }\n * }\n */\n\n/**\n * @class Network\n * @param {Network~settingsObject} [settings={}] A set of custom settings.\n * @member {LatencyModule} latency The latency module.\n * @member {BandwidthModule} upload The upload module.\n * @member {BandwidthModule} download The download module.\n */\n\nvar Network = (function () {\n    function Network() {\n        var settings = arguments[0] === undefined ? {} : arguments[0];\n\n        _classCallCheck(this, Network);\n\n        this._modules = {};\n        this._modulesInitialized = false;\n        this._pendingSettings = {};\n\n        this._registerModule(\"latency\", function (settings) {\n            return new LatencyModule(settings);\n        })._registerModule(\"upload\", function (settings) {\n            return new BandwidthModule(\"upload\", settings);\n        })._registerModule(\"download\", function (settings) {\n            return new BandwidthModule(\"download\", settings);\n        });\n\n        this._initModules(this.settings(settings));\n    }\n\n    _createClass(Network, {\n        settings: {\n\n            /**\n             * Apply a new set of custom settings.\n             * @public\n             * @method Network#settings\n             * @param {Network~settingsObject} settings A set of custom settings.\n             * @returns {Network}\n             */\n            /**\n             * Return the current set of settings.\n             * @public\n             * @method Network#settings^2\n             * @returns {Network~settingsObject}\n             */\n\n            value: (function (_settings) {\n                var _settingsWrapper = function settings() {\n                    return _settings.apply(this, arguments);\n                };\n\n                _settingsWrapper.toString = function () {\n                    return _settings.toString();\n                };\n\n                return _settingsWrapper;\n            })(function () {\n                var _this = this;\n\n                var settings = arguments[0] === undefined ? null : arguments[0];\n\n                var moduleNames = Object.keys(this._modules);\n\n                if (isObject(settings)) {\n                    var _ret = (function () {\n                        // Extract the global settings\n                        var globalSettings = except(settings, moduleNames);\n\n                        // Extract the local settings\n                        var localSettings = except(settings, Object.keys(globalSettings));\n\n                        // Create new settings with the global ones nested in the local ones\n                        settings = moduleNames.reduce(function (settings, moduleName) {\n                            return assign(settings, _defineProperty({}, moduleName, globalSettings));\n                        }, {});\n\n                        // Apply the local settings to the new settings\n                        settings = assign(settings, localSettings);\n\n                        // Apply the settings to the modules\n                        if (_this._modulesInitialized) {\n                            Object.keys(_this._modules).forEach(function (name) {\n                                _this._modules[name].settings(settings[name]);\n                            });\n                        }\n\n                        // If the modules aren't instanciated, store the settings.\n                        else {\n                            _this._pendingSettings = settings;\n                        }\n\n                        return {\n                            v: _this\n                        };\n                    })();\n\n                    if (typeof _ret === \"object\") return _ret.v;\n                } else {\n                    return moduleNames.reduce(function (settings, moduleName) {\n                        return assign(settings, _defineProperty({}, moduleName, _this._modules[moduleName].settings()));\n                    }, {});\n                }\n            })\n        },\n        isRequesting: {\n\n            /**\n             * Return if a module is currently making a request.\n             * @public\n             * @method Network#isRequesting\n             * @returns {boolean} `true` if a module is requesting, otherwise `false`.\n             */\n\n            value: function isRequesting() {\n                var requesting = false;\n\n                for (var _name in this._modules) {\n                    if (this._modules.hasOwnProperty(_name)) {\n                        requesting = requesting || this._modules[_name].isRequesting();\n                    }\n                }\n\n                return requesting;\n            }\n        },\n        _registerModule: {\n\n            /**\n             * Register a new module for the current `Network` instance.\n             * @private\n             * @method Network#registerModule\n             * @param {string} name The name of the module. Will be used to create the property `Network.<name>`.\n             * @param {Network~moduleCallback} moduleCallback A callback used to initialize a module with a set of settings.\n             * @returns {Network}\n             */\n\n            value: function _registerModule(name, moduleCallback) {\n                /**\n                 * A callback used to initialize a module with a set of settings.\n                 * @private\n                 * @callback Network~moduleCallback\n                 * @param {Object} settings A set of custom settings.\n                 * @returns {HttpModule} An instanciated subclass of `HttpModule`.\n                 */\n                this._modules[name] = moduleCallback;\n                return this;\n            }\n        },\n        _initModules: {\n\n            /**\n             * Initialize all the registered modules with the settings passed to the constructor.\n             * @private\n             * @method Network#_initModules\n             * @returns {Network}\n             */\n\n            value: function _initModules() {\n                var _this = this;\n\n                if (!this._modulesInitialized) {\n                    // Initialize the modules with their respective settings\n                    Object.keys(this._modules).forEach(function (name) {\n                        _this._modules[name] = _this._modules[name](_this._pendingSettings[name]).on(\"_newRequest\", function () {\n                            return !_this.isRequesting();\n                        });\n\n                        _this[name] = _this._modules[name];\n                    });\n\n                    this._modulesInitialized = true;\n                }\n\n                return this;\n            }\n        }\n    }, {\n        _exposeInternalClasses: {\n\n            /**\n             * Expose all the internal classes to the global scope. Only for testing purposes!\n             * @private\n             * @method Network._exposeInternalClasses\n             * @returns {Network}\n             */\n\n            value: function _exposeInternalClasses() {\n                var global = getGlobalObject(),\n                    classes = { EventDispatcher: EventDispatcher, HttpModule: HttpModule, LatencyModule: LatencyModule, BandwidthModule: BandwidthModule, Timing: Timing };\n\n                Object.keys(classes).forEach(function (name) {\n                    global[name] = classes[name];\n                });\n\n                return this;\n            }\n        }\n    });\n\n    return Network;\n})();\n\nmodule.exports = Network;\n\n},{\"../utils/helpers\":7,\"./EventDispatcher\":2,\"./Http/BandwidthModule\":3,\"./Http/HttpModule\":4,\"./Http/LatencyModule\":5,\"./Timing\":6}],2:[function(require,module,exports){\n\"use strict\";\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\n/**\n * @class EventDispatcher\n */\n\nvar EventDispatcher = (function () {\n\n    /**\n     * A callback used as an event handler.\n     * @public\n     * @callback EventDispatcher~eventHandler\n     * @param {...*} args The extra parameters provided to the `trigger` method.\n     * @returns {?boolean} If `false` is explicitly returned, the `trigger` method will return `false`.\n     */\n\n    function EventDispatcher() {\n        _classCallCheck(this, EventDispatcher);\n\n        /**\n         * Contains all the event callbacks, organized by events.\n         * @private\n         * @type {Object}\n         */\n        this._eventCallbacks = {};\n    }\n\n    _createClass(EventDispatcher, {\n        on: {\n\n            /**\n             * Attach a callback to one or more events.\n             * @public\n             * @method EventDispatcher#on\n             * @param {string|string[]} events One or multiple event names.\n             * @param {EventDispatcher~eventHandler} callback An event handler.\n             * @returns {EventDispatcher}\n             */\n\n            value: function on(events, callback) {\n                var _this = this;\n\n                events = Array.isArray(events) ? events : [events];\n\n                events.forEach(function (event) {\n                    var eventCallbacks = _this._eventCallbacks[event] = _this._eventCallbacks[event] || [];\n\n                    // If the callback isn't already registered, store it.\n                    if (! ~eventCallbacks.indexOf(callback)) {\n                        eventCallbacks.push(callback);\n                    }\n                });\n\n                return this;\n            }\n        },\n        off: {\n\n            /**\n             * Detach a callback from one or more events.\n             * @public\n             * @method EventDispatcher#off\n             * @param {string|string[]} events One or multiple event names.\n             * @param {EventDispatcher~eventHandler} callback An event handler.\n             * @returns {EventDispatcher}\n             */\n\n            value: function off(events) {\n                var _this = this;\n\n                var callback = arguments[1] === undefined ? null : arguments[1];\n\n                events = Array.isArray(events) ? events : [events];\n\n                events.forEach(function (event) {\n                    var eventCallbacks = _this._eventCallbacks[event];\n\n                    // If there is no specified callback, simply delete all the callbacks binded to the provided event.\n                    if (!callback && eventCallbacks) {\n                        delete _this._eventCallbacks[event];\n                    } else {\n                        var callbackIndex = eventCallbacks ? eventCallbacks.indexOf(callback) : -1;\n\n                        // If the callback is registered, remove it from the array.\n                        if (callbackIndex != -1) {\n                            eventCallbacks.splice(callbackIndex, 1);\n                        }\n                    }\n                });\n\n                return this;\n            }\n        },\n        trigger: {\n\n            /**\n             * Trigger an event.\n             * @public\n             * @method EventDispatcher#trigger\n             * @param {string} event An event name.\n             * @param {...*} extraParameters Some extra parameters to pass to the event handlers.\n             * @returns {boolean} Returns `false` if one of the event handlers explicitly returned `false`.\n             */\n\n            value: function trigger(event) {\n                for (var _len = arguments.length, extraParameters = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                    extraParameters[_key - 1] = arguments[_key];\n                }\n\n                var eventCallbacks = this._eventCallbacks[event] || [];\n\n                // A callback can return a boolean value which will be logically compared to the other callbacks values before\n                // being returned by the trigger() method. This allows a callback to send a \"signal\" to the caller, like\n                // cancelling an action.\n                var returnValue = true;\n\n                eventCallbacks.forEach(function (eventCallback) {\n                    // A callback must explicitly return false if it wants the trigger() method to return false, undefined will\n                    // not work. This avoids crappy callbacks to mess up with the triggering system.\n                    var value = eventCallback.apply(undefined, extraParameters);\n                    value = value !== false ? true : false;\n\n                    returnValue = returnValue && value; // Compare the result of the callback to the actual return value\n                });\n\n                return returnValue;\n            }\n        }\n    });\n\n    return EventDispatcher;\n})();\n\nmodule.exports = EventDispatcher;\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _inherits = function (subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\nvar HttpModule = _interopRequire(require(\"./HttpModule\"));\n\nvar Timing = _interopRequire(require(\"../Timing\"));\n\nvar defer = require(\"../../utils/helpers\").defer;\n\n/**\n * @public\n * @typedef {Object} BandwidthModule~settingsObject\n * @extends HttpModule~settingsObject\n * @property {Object} data\n * @property {number} data.size The amount of data to initially use.\n * @property {number} [data.multiplier=2] If the measure period can't reach the delay defined in the settings, the data amount is multiplied by the following value.\n */\n\n/**\n * Apply a new set of custom settings.\n * @public\n * @method BandwidthModule#settings\n * @param {BandwidthModule~settingsObject} settings A set of custom settings.\n * @returns {BandwidthModule}\n */\n/**\n * Return the current set of settings.\n * @public\n * @method BandwidthModule#settings^2\n * @returns {BandwidthModule~settingsObject}\n */\n\n/**\n * @class BandwidthModule\n * @extends HttpModule\n * @param {string} loadingType The loading type, `upload` or `download`.\n * @param {BandwidthModule~settingsObject} [settings={}] A set of custom settings.\n */\n\nvar BandwidthModule = (function (_HttpModule) {\n    function BandwidthModule(loadingType) {\n        var _this = this;\n\n        var settings = arguments[1] === undefined ? {} : arguments[1];\n\n        _classCallCheck(this, BandwidthModule);\n\n        loadingType = ~[\"upload\", \"download\"].indexOf(loadingType) ? loadingType : \"download\";\n\n        this._extendDefaultSettings({\n            data: {\n                // 2 MB for upload, 10 MB for download\n                size: loadingType == \"upload\" ? 2 * 1024 * 1024 : 10 * 1024 * 1024,\n                multiplier: 2\n            }\n        });\n\n        _get(Object.getPrototypeOf(BandwidthModule.prototype), \"constructor\", this).call(this, loadingType, settings);\n\n        // Define the object properties\n        this._loadingType = loadingType;\n\n        this._intendedEnd = false;\n        this._isRestarting = false;\n\n        this._lastLoadedValue = null;\n        this._speedRecords = [];\n        this._avgSpeed = null;\n\n        this._requestID = 0;\n        this._progressID = 0;\n\n        this._started = false;\n        this._firstProgress = true;\n        this._deferredProgress;\n\n        // Unique labels for each request, exclusively used to make measures.\n        this._timingLabels = {\n            start: null,\n            progress: null,\n            end: null,\n            measure: null\n        };\n\n        // Bind to XHR events\n        this.on(\"xhr-upload-loadstart\", function () {\n            return Timing.mark(_this._timingLabels.start);\n        });\n        this.on(\"xhr-readystatechange\", function (xhr) {\n            if (!_this._started && xhr.readyState == XMLHttpRequest.LOADING) {\n                Timing.mark(_this._timingLabels.start);\n                _this._started = true;\n            }\n        });\n\n        var eventsPrefix = loadingType == \"upload\" ? \"xhr-upload\" : \"xhr\";\n\n        this.on(\"\" + eventsPrefix + \"-progress\", function (xhr, event) {\n            return _this._progress(event);\n        });\n        this.on(\"\" + eventsPrefix + \"-timeout\", function () {\n            return _this._timeout();\n        });\n        this.on(\"\" + eventsPrefix + \"-loadend\", function () {\n            return _this._end();\n        });\n    }\n\n    _inherits(BandwidthModule, _HttpModule);\n\n    _createClass(BandwidthModule, {\n        start: {\n\n            /**\n             * Start requesting the server to make measures.\n             * @public\n             * @method BandwidthModule#start\n             * @returns {BandwidthModule}\n             */\n\n            value: function start() {\n                var loadingType = this._loadingType,\n                    dataSettings = this.settings().data,\n                    reqID = this._requestID++;\n\n                this._intendedEnd = false;\n                this._lastLoadedValue = null;\n                this._speedRecords = [];\n                this._started = false;\n                this._firstProgress = true;\n                this._deferredProgress = defer();\n\n                // Trigger the start event\n                if (!this._isRestarting) {\n                    this.trigger(\"start\", dataSettings.size);\n                }\n\n                // Create unique timing labels for the new request\n                var labels = this._timingLabels;\n                labels.start = \"\" + loadingType + \"-\" + reqID + \"-start\";\n                labels.progress = \"\" + loadingType + \"-\" + reqID + \"-progress\";\n                labels.end = \"\" + loadingType + \"-\" + reqID + \"-end\";\n                labels.measure = \"\" + loadingType + \"-\" + reqID + \"-measure\";\n\n                // Generate some random data to upload to the server. Here we're using a Blob instead of an ArrayBuffer because\n                // of a bug in Chrome (tested in v33.0.1750.146), causing a freeze of the page while trying to directly upload\n                // an ArrayBuffer (through an ArrayBufferView). The freeze lasts nearly 4.5s for 10MB of data. Using a Blob\n                // seems to solve the problem.\n                var blob = loadingType == \"upload\" ? new Blob([new ArrayBuffer(dataSettings.size)]) : null;\n\n                var type = loadingType == \"download\" ? \"GET\" : \"POST\";\n\n                // Initiate and send a new request\n                this._newRequest(type, {\n                    size: dataSettings.size\n                })._sendRequest(blob);\n\n                return this;\n            }\n        },\n        abort: {\n\n            /**\n             * Abort the measures.\n             * @public\n             * @method BandwidthModule#abort\n             * @returns {BandwidthModule}\n             */\n\n            value: function abort() {\n                this._intendedEnd = true;\n                return this._abort();\n            }\n        },\n        _progress: {\n\n            /**\n             * Make bandwidth measures for the current request.\n             * @private\n             * @method BandwidthModule#_progress\n             * @param {ProgressEvent} event The event associated with the progress event of the current request.\n             * @returns {BandwidthModule}\n             */\n\n            value: function _progress(event) {\n                var _this = this;\n\n                // Ignore the first progress event, it generally contributes to get incoherent values.\n                if (this._firstProgress) {\n                    return this._firstProgress = false;\n                } // Execute the previous progress trigger\n                this._deferredProgress.run();\n\n                var labels = this._timingLabels,\n                    progressID = this._progressID++,\n                    markLabel = \"\" + labels.progress + \"-\" + progressID,\n                    loaded = event.loaded;\n\n                Timing.mark(markLabel);\n\n                // Measure the average speed (B/s) since the request started\n                var avgMeasure = Timing.measure(\"\" + labels.measure + \"-avg-\" + progressID, labels.start, markLabel),\n                    avgSpeed = loaded / avgMeasure * 1000;\n\n                var instantSpeed;\n\n                if (!this._lastLoadedValue) {\n                    // We are executing the first progress event of the current request\n                    instantSpeed = avgSpeed; // The instant speed of the first progress event is equal to the average one\n                } else {\n                    // Measure the instant speed (B/s), which defines the speed between two progress events.\n                    var instantMeasure = Timing.measure(\"\" + labels.measure + \"-instant-\" + progressID,\n                    // Set the mark of the previous progress event as the starting point\n                    \"\" + labels.progress + \"-\" + (progressID - 1), markLabel);\n                    instantSpeed = (loaded - this._lastLoadedValue) / instantMeasure * 1000;\n                }\n\n                // Save the `loaded` property of the event for the next progress event\n                this._lastLoadedValue = loaded;\n\n                // Defer measures saving and event triggering, this allows to cancel the last progress event, which can generate\n                // incoherent values.\n                this._deferredProgress = defer(function () {\n                    _this._avgSpeed = avgSpeed;\n                    _this._speedRecords.push(instantSpeed);\n\n                    _this.trigger(\"progress\", avgSpeed, instantSpeed);\n                });\n\n                return this;\n            }\n        },\n        _timeout: {\n\n            /**\n             * Mark the current request as entirely finished (this means it ended after a time out).\n             * @private\n             * @method BandwidthModule#_timeout\n             * @returns {BandwidthModule}\n             */\n\n            value: function _timeout() {\n                this._intendedEnd = true;\n                return this;\n            }\n        },\n        _end: {\n\n            /**\n             * End the measures.\n             * @private\n             * @method BandwidthModule#_end\n             * @returns {BandwidthModule}\n             */\n\n            value: function _end() {\n                // A timeout or an abort occured, bypass the further requests and trigger the \"end\" event.\n                if (this._intendedEnd) {\n                    this._isRestarting = false;\n                    this.trigger(\"end\", this._avgSpeed, this._speedRecords);\n                }\n\n                // The request ended to early, restart it with an increased data size.\n                else {\n                    var loadingType = this._loadingType,\n                        dataSettings = this.settings().data;\n\n                    dataSettings.size *= dataSettings.multiplier;\n\n                    this.trigger(\"restart\", dataSettings.size);\n\n                    this._isRestarting = true;\n                    this.start();\n                }\n\n                return this;\n            }\n        }\n    });\n\n    return BandwidthModule;\n})(HttpModule);\n\nmodule.exports = BandwidthModule;\n\n},{\"../../utils/helpers\":7,\"../Timing\":6,\"./HttpModule\":4}],4:[function(require,module,exports){\n\"use strict\";\n\nvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\nvar _slice = Array.prototype.slice;\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _inherits = function (subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\nvar EventDispatcher = _interopRequire(require(\"../EventDispatcher\"));\n\nvar _utilsHelpers = require(\"../../utils/helpers\");\n\nvar isObject = _utilsHelpers.isObject;\nvar assign = _utilsHelpers.assign;\nvar assignStrict = _utilsHelpers.assignStrict;\n\n/**\n * @public\n * @typedef {Object} HttpModule~settingsObject\n * @property {string} [endpoint=./network.php] Where is located your `network.php` file.\n * @property {number} [delay=8000] The delay while you want to take measures.\n */\n\n/**\n * @class HttpModule\n * @extends EventDispatcher\n * @param {string} moduleName The name of the instanciated module.\n * @param {HttpModule~settingsObject} [settings={}] A set of custom settings.\n */\n\nvar HttpModule = (function (_EventDispatcher) {\n    function HttpModule(moduleName) {\n        var _this = this;\n\n        var settings = arguments[1] === undefined ? {} : arguments[1];\n\n        _classCallCheck(this, HttpModule);\n\n        _get(Object.getPrototypeOf(HttpModule.prototype), \"constructor\", this).call(this);\n\n        this._extendDefaultSettings({\n            endpoint: \"./network.php\",\n            delay: 8000\n        });\n\n        this.settings(settings);\n\n        this._moduleName = moduleName;\n        this._xhr = null;\n        this._lastURLToken = null;\n\n        this._requestingOverridden = false;\n        this._requesting = false;\n\n        // Each time a request starts or ends, set the requesting value unless it has been overridden with the\n        // _setRequesting() method.\n        this.on([\"xhr-loadstart\", \"xhr-upload-loadstart\"], function () {\n            if (!_this._requestingOverridden) {\n                _this._requesting = true;\n            }\n        });\n\n        this.on([\"xhr-loadend\", \"xhr-upload-loadend\"], function () {\n            if (!_this._requestingOverridden) {\n                _this._requesting = false;\n            }\n        });\n    }\n\n    _inherits(HttpModule, _EventDispatcher);\n\n    _createClass(HttpModule, {\n        settings: {\n\n            /**\n             * Apply a new set of custom settings.\n             * @public\n             * @method HttpModule#settings\n             * @param {HttpModule~settingsObject} settings A set of custom settings.\n             * @returns {HttpModule}\n             */\n            /**\n             * Return the current set of settings.\n             * @public\n             * @method HttpModule#settings^2\n             * @returns {HttpModule~settingsObject}\n             */\n\n            value: (function (_settings) {\n                var _settingsWrapper = function settings() {\n                    return _settings.apply(this, arguments);\n                };\n\n                _settingsWrapper.toString = function () {\n                    return _settings.toString();\n                };\n\n                return _settingsWrapper;\n            })(function () {\n                var settings = arguments[0] === undefined ? null : arguments[0];\n\n                if (isObject(settings)) {\n                    this._settings = assignStrict(this._defaultSettings || {}, this._settings || {}, settings);\n                    return this;\n                } else {\n                    return this._settings || this._defaultSettings || {};\n                }\n            })\n        },\n        isRequesting: {\n\n            /**\n             * Return if the module is currently making a request.\n             * @public\n             * @method HttpModule#isRequesting\n             * @returns {boolean} `true` if the module is requesting, otherwise `false`.\n             */\n\n            value: function isRequesting() {\n                return this._requesting;\n            }\n        },\n        _extendDefaultSettings: {\n\n            /**\n             * Extend the set of default settings.\n             * @protected\n             * @method HttpModule#_extendDefaultSettings\n             * @param {Object} settings The new properties to add to the default settings.\n             * @returns {HttpModule}\n             */\n\n            value: function _extendDefaultSettings(settings) {\n                this._defaultSettings = assign(this._defaultSettings || {}, settings);\n                return this;\n            }\n        },\n        _newRequest: {\n\n            /**\n             * Create a new XHR request.\n             * @protected\n             * @method HttpModule#_newRequest\n             * @param {string} httpMethod The HTTP method to use with the request, GET or POST.\n             * @param {Object} queryParams The query parameters to use with the request.\n             * @returns {HttpModule}\n             */\n\n            value: function _newRequest(httpMethod, queryParams) {\n                // Check if a callback binded to the \"_newRequest\" event returns false, if it's the case, cancel the request\n                // creation. If the requesting status has been overridden, there's no need to cancel the request since the user\n                // should know what he's doing.\n                if (!this.trigger(\"_newRequest\") && !this._requestingOverridden) {\n                    console.warn(\"To ensure accurate measures, you can only make one request at a time.\");\n                    return this;\n                }\n\n                var settings = this.settings(),\n                    xhr = new XMLHttpRequest(),\n                    validHttpMethods = [\"GET\", \"POST\"];\n\n                // Prepare the new request.\n                if (! ~validHttpMethods.indexOf(httpMethod)) {\n                    console.warn(\"The HTTP method must be GET or POST.\");\n                    return this;\n                }\n\n                queryParams = queryParams || {};\n\n                // Generate an URL token to avoid any caching issues. This token will also allow to identify the request in the\n                // Resource Timing entries.\n                var tokenSuffix = new Date().getTime();\n                this._lastURLToken = \"network-\" + tokenSuffix;\n\n                // Append the query parameters\n                var url = settings.endpoint;\n                url += ~url.indexOf(\"?\") ? \"&\" : \"?\";\n                url += \"module=\" + this._moduleName;\n\n                Object.keys(queryParams).forEach(function (param) {\n                    var value = encodeURIComponent(queryParams[param]);\n                    url += \"&\" + param + \"=\" + value;\n                });\n\n                url += \"&\" + this._lastURLToken;\n\n                xhr.open(httpMethod, url);\n\n                // Define the timeout of the request\n                xhr.timeout = settings.delay;\n\n                // Abort the previous request if it hasn't been sent\n                if (this._xhr && this._xhr.readyState == XMLHttpRequest.OPENED) {\n                    this._xhr.abort();\n                }\n\n                // Replace the old request by the new one\n                this._xhr = xhr;\n\n                // Bind all the XHR events\n                var self = this,\n                    eventTypes = [\"loadstart\", \"progress\", \"abort\", \"error\", \"load\", \"timeout\", \"loadend\", \"readystatechange\"];\n\n                eventTypes.forEach(function (eventType) {\n                    xhr.addEventListener(eventType, function () {\n                        // A last progress event can be triggered once a request has timed out, ignore it.\n                        if (eventType == \"progress\" && !self._requesting) {\n                            return;\n                        }\n\n                        self.trigger.apply(self, [\"xhr-\" + eventType, xhr].concat(_slice.call(arguments)));\n                    });\n\n                    // The XMLHttpRequestUpload interface supports all the above event types except the \"readystatechange\" one\n                    if (eventType != \"readystatechange\") {\n                        xhr.upload.addEventListener(eventType, function () {\n                            self.trigger.apply(self, [\"xhr-upload-\" + eventType, xhr].concat(_slice.call(arguments)));\n                        });\n                    }\n                });\n\n                return this;\n            }\n        },\n        _sendRequest: {\n\n            /**\n             * Send a newly created XHR request.\n             * @protected\n             * @method HttpModule#_sendRequest\n             * @param {?*} [data=null] The data to send with the request.\n             * @returns {HttpModule}\n             */\n\n            value: function _sendRequest() {\n                var data = arguments[0] === undefined ? null : arguments[0];\n\n                if (this._xhr && this._xhr.readyState == XMLHttpRequest.OPENED) {\n                    this._xhr.send(data);\n                } else {\n                    console.warn(\"A request must have been created before sending any data.\");\n                }\n\n                return this;\n            }\n        },\n        _abort: {\n\n            /**\n             * Abort the current request.\n             * @protected\n             * @method HttpModule#_abort\n             * @returns {HttpModule}\n             */\n\n            value: function _abort() {\n                if (this._xhr) {\n                    this._xhr.abort();\n                }\n\n                return this;\n            }\n        },\n        _getTimingEntry: {\n\n            /**\n             * Get the Resource Timing entry associated to the current request.\n             * @protected\n             * @method HttpModule#_getTimingEntry\n             * @param {HttpModule~timingCallback} callback A callback used to send back the timing entry.\n             * @returns {HttpModule}\n             */\n\n            value: function _getTimingEntry(callback) {\n                // The Resource Timing entries aren't immediately available once the 'load' event is triggered by an\n                // XMLHttpRequest, we must wait for another process tick to check for a refreshed list.\n                setTimeout((function (lastURLToken) {\n                    return function () {\n                        // Filter the timing entries to return only the one concerned by the last request made\n                        var entries = performance.getEntriesByType(\"resource\").filter(function (entry) {\n                            return ~entry.name.indexOf(lastURLToken);\n                        });\n\n                        /**\n                         * A callback used to send back the timing entry.\n                         * @private\n                         * @callback HttpModule~timingCallback\n                         * @param {PerformanceResourceTiming} entry The Resource Timing entry associated to the current request.\n                         */\n                        callback(entries.length ? entries[0] : null);\n                    };\n                })(this._lastURLToken), 0);\n\n                return this;\n            }\n        },\n        _setRequesting: {\n\n            /**\n             * Override the requesting status of the module.\n             * @protected\n             * @method HttpModule#_setRequesting\n             * @param {boolean} isRequesting The requesting status.\n             * @returns {HttpModule}\n             */\n\n            value: function _setRequesting(isRequesting) {\n                this._requestingOverridden = true;\n                this._requesting = isRequesting;\n                return this;\n            }\n        }\n    });\n\n    return HttpModule;\n})(EventDispatcher);\n\nmodule.exports = HttpModule;\n\n},{\"../../utils/helpers\":7,\"../EventDispatcher\":2}],5:[function(require,module,exports){\n\"use strict\";\n\nvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _inherits = function (subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\nvar HttpModule = _interopRequire(require(\"./HttpModule\"));\n\nvar Timing = _interopRequire(require(\"../Timing\"));\n\nvar _utilsHelpers = require(\"../../utils/helpers\");\n\nvar isObject = _utilsHelpers.isObject;\nvar assignStrict = _utilsHelpers.assignStrict;\nvar except = _utilsHelpers.except;\n\n/**\n * @public\n * @typedef {Object} LatencyModule~settingsObject\n * @property {string} [endpoint=./network.php] Where is located your `network.php` file.\n * @property {number} [measures=5] How many measures should be returned.\n * @property {number} [attempts=3] How much attempts to get a valid value should be done for each measure.\n */\n\n/**\n * @class LatencyModule\n * @extends HttpModule\n * @param {LatencyModule~settingsObject} [settings={}] A set of custom settings.\n */\n\nvar LatencyModule = (function (_HttpModule) {\n    function LatencyModule() {\n        var _this = this;\n\n        var settings = arguments[0] === undefined ? {} : arguments[0];\n\n        _classCallCheck(this, LatencyModule);\n\n        this._extendDefaultSettings({\n            measures: 5,\n            attempts: 3\n        });\n\n        _get(Object.getPrototypeOf(LatencyModule.prototype), \"constructor\", this).call(this, \"latency\");\n\n        // Don't use the settings method of parent class but the overridden one in this class\n        this.settings(settings);\n\n        // Define the object properties\n        this._requestsLeft = 0;\n        this._attemptsLeft = 0;\n\n        this._latencies = [];\n        this._requestID = 0;\n\n        // Unique labels for each request, exclusively used to make measures.\n        this._timingLabels = {\n            start: null,\n            end: null,\n            measure: null\n        };\n\n        // Measure the latency with the Resource Timing API once the request is finished\n        if (Timing.supportsResourceTiming()) {\n            this.on(\"xhr-load\", function () {\n                return _this._measure();\n            });\n        }\n\n        // If the browser doesn't support the Resource Timing API, we fallback on a Datetime solution.\n        else {\n            // Set a mark when the request starts\n            this.on(\"xhr-loadstart\", function () {\n                return Timing.mark(_this._timingLabels.start);\n            });\n\n            // Then make a measure with the previous mark\n            this.on(\"xhr-readystatechange\", function (xhr) {\n                return _this._measure(xhr);\n            });\n        }\n    }\n\n    _inherits(LatencyModule, _HttpModule);\n\n    _createClass(LatencyModule, {\n        settings: {\n\n            /**\n             * Apply a new set of custom settings.\n             * @public\n             * @method LatencyModule#settings\n             * @param {LatencyModule~settingsObject} settings A set of custom settings.\n             * @returns {LatencyModule}\n             */\n            /**\n             * Return the current set of settings.\n             * @public\n             * @method LatencyModule#settings^2\n             * @returns {LatencyModule~settingsObject}\n             */\n\n            value: (function (_settings) {\n                var _settingsWrapper = function settings() {\n                    return _settings.apply(this, arguments);\n                };\n\n                _settingsWrapper.toString = function () {\n                    return _settings.toString();\n                };\n\n                return _settingsWrapper;\n            })(function () {\n                var settings = arguments[0] === undefined ? null : arguments[0];\n\n                if (isObject(settings)) {\n                    return _get(Object.getPrototypeOf(LatencyModule.prototype), \"settings\", this).call(this, assignStrict(settings, {\n                        delay: 0 // We dont want any timeout during a latency calculation\n                    }));\n                } else {\n                    return except(_get(Object.getPrototypeOf(LatencyModule.prototype), \"settings\", this).call(this), [\"delay\"]);\n                }\n            })\n        },\n        start: {\n\n            /**\n             * Start requesting the server to make measures.\n             * @public\n             * @method LatencyModule#start\n             * @returns {LatencyModule}\n             */\n\n            value: function start() {\n                // Set the number of requests required to establish the network latency. If the browser doesn't support the\n                // Resource Timing API, add a request that will be ignored to avoid a longer request due to a possible\n                // DNS/whatever fetch.\n\n                var _settings2 = this.settings();\n\n                var measures = _settings2.measures;\n                var attempts = _settings2.attempts;\n\n                this._requestsLeft = measures;\n                this._attemptsLeft = attempts * measures;\n\n                if (!Timing.supportsResourceTiming()) {\n                    this._requestsLeft++;\n                    this._attemptsLeft++;\n                }\n\n                // Override the requesting value since a complete latency request consists off multiple ones\n                this._setRequesting(true);\n\n                this._latencies = [];\n                this._nextRequest();\n\n                return this;\n            }\n        },\n        _nextRequest: {\n\n            /**\n             * Initiate the next request used for latency measures.\n             * @private\n             * @method LatencyModule#_nextRequest\n             * @param {boolean} [retry=false] Defines if the next request is a retry due to a failing request or not.\n             * @returns {LatencyModule}\n             */\n\n            value: function _nextRequest() {\n                var _this = this;\n\n                var retry = arguments[0] === undefined ? false : arguments[0];\n\n                var reqID = this._requestID++;\n                var requestsLeft = retry ? this._requestsLeft : this._requestsLeft--;\n\n                if (this._attemptsLeft-- && (requestsLeft || retry)) {\n                    // Create unique timing labels for the new request\n                    var labels = this._timingLabels;\n                    labels.start = \"latency-\" + reqID + \"-start\";\n                    labels.end = \"latency-\" + reqID + \"-end\";\n                    labels.measure = \"latency-\" + reqID + \"-measure\";\n\n                    // Create the new request and send it\n                    this._newRequest(\"GET\")._sendRequest();\n                } else {\n                    // All the requests are finished, set the requesting status to false.\n                    this._setRequesting(false);\n\n                    // If all the requests have been executed, calculate the average latency. Since the _getTimingEntry() method\n                    // is asynchronous, wait for the next process tick to execute the _end() method, to be sure that all the\n                    // latencies have been retrieved.\n                    setTimeout(function () {\n                        return _this._end();\n                    }, 0);\n                }\n\n                return this;\n            }\n        },\n        _measure: {\n\n            /**\n             * Make latency measures for the last request.\n             * @private\n             * @method LatencyModule#_measure\n             * @param {?XMLHttpRequest} [xhr=null] The concerned XMLHttpRequest if the browser doesn't support the Resource Timing API.\n             * @returns {LatencyModule}\n             */\n\n            value: function _measure() {\n                var _this = this;\n\n                var xhr = arguments[0] === undefined ? null : arguments[0];\n\n                // With Resource Timing API\n                if (!xhr) {\n                    this._getTimingEntry(function (entry) {\n                        // The latency calculation differs between an HTTP and an HTTPS connection\n                        // See: http://www.w3.org/TR/resource-timing/#processing-model\n                        var latency = !entry.secureConnectionStart ? entry.connectEnd - entry.connectStart : entry.secureConnectionStart - entry.connectStart;\n\n                        if (latency) _this._latencies.push(latency);\n                        _this._nextRequest(!latency);\n                    });\n                }\n\n                // Without Resource Timing API\n                else if (this._requestsLeft < this.settings().measures) {\n\n                    // Measure and save the latency if the headers have been received\n                    if (xhr.readyState == XMLHttpRequest.HEADERS_RECEIVED) {\n                        var labels = this._timingLabels;\n\n                        Timing.mark(labels.end);\n                        var latency = Timing.measure(labels.measure, labels.start, labels.end);\n\n                        if (latency) this._latencies.push(latency);\n\n                        // Abort the current request before we run a new one\n                        this._abort();\n                        this._nextRequest(!latency);\n                    }\n                }\n\n                // Ignore the first request when using the XHR states. See the comments in the start() method for explanations.\n                else {\n                    this._nextRequest();\n                }\n\n                return this;\n            }\n        },\n        _end: {\n\n            /**\n             * End the measures.\n             * @private\n             * @method LatencyModule#_end\n             * @returns {LatencyModule}\n             */\n\n            value: function _end() {\n                var latencies = this._latencies;\n\n                // Get the average latency\n                var avgLatency = latencies.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / (latencies.length || 1);\n                avgLatency = avgLatency || null;\n\n                // If there is not enough measures, display a warning.\n                if (latencies.length < this.settings().measures) {\n                    var _settings2 = this.settings();\n\n                    var measures = _settings2.measures;\n                    var attempts = _settings2.attempts;\n\n                    console.warn([\"An insufficient number of measures have been processed, this could be due to your web server using\", \"persistant connections or to your client settings (measures: \" + measures + \", attempts: \" + attempts + \")\"].join(\" \"));\n                }\n\n                // Trigger the \"end\" event with the average latency and the latency list as parameters\n                this.trigger(\"end\", avgLatency, latencies);\n\n                return this;\n            }\n        }\n    });\n\n    return LatencyModule;\n})(HttpModule);\n\nmodule.exports = LatencyModule;\n\n},{\"../../utils/helpers\":7,\"../Timing\":6,\"./HttpModule\":4}],6:[function(require,module,exports){\n\"use strict\";\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\nvar getGlobalObject = require(\"../utils/helpers\").getGlobalObject;\n\n/**\n * @private\n * @class Timing\n */\n\nvar Timing = (function () {\n    function Timing() {\n        _classCallCheck(this, Timing);\n\n        var global = getGlobalObject();\n\n        /**\n         * Defines if the current browser supports some specific Timing APIs.\n         * @private\n         * @member {Object} _support\n         * @property {boolean} performance `true` if the Performance API is available.\n         * @property {boolean} userTiming `true` if the User Timing API is available.\n         * @property {boolean} resourceTiming `true` if the Resource Timing API is available.\n         */\n        this._support = {\n            performance: !!global.performance,\n            userTiming: global.performance && performance.mark,\n            resourceTiming: global.performance && typeof performance.getEntriesByType == \"function\" && performance.timing\n        };\n\n        /**\n         * Contains all the marks created by the `mark` method.\n         * @private\n         * @member {Object} _marks\n         */\n        this._marks = {};\n\n        /**\n         * Contains all the measures created by the `measure` method.\n         * @private\n         * @member {Object} _measures\n         */\n        this._measures = {};\n    }\n\n    _createClass(Timing, {\n        mark: {\n\n            /**\n             * Create a new timing mark.\n             * @public\n             * @method Timing#mark\n             * @param {string} label A label associated to the mark.\n             * @returns {Timing}\n             */\n\n            value: function mark(label) {\n                var support = this._support,\n                    marks = this._marks;\n\n                if (support.userTiming) {\n                    performance.mark(label);\n                }\n\n                if (support.performance) {\n                    marks[label] = performance.now();\n                } else {\n                    marks[label] = new Date().getTime();\n                }\n\n                return this;\n            }\n        },\n        measure: {\n\n            /**\n             * Measure the delay between two marks.\n             * @public\n             * @method Timing#measure\n             * @param {string} measureLabel A label associated to the measure.\n             * @param {string} markLabelA The label of the first mark.\n             * @param {string} markLabelB The label of the second mark.\n             * @returns {number} The measured value.\n             */\n\n            value: function measure(measureLabel, markLabelA, markLabelB) {\n                var support = this._support,\n                    marks = this._marks,\n                    measures = this._measures;\n\n                if (typeof measures[measureLabel] == \"undefined\") {\n                    var measureWithoutUserTiming = marks[markLabelB] - marks[markLabelA];\n\n                    if (support.userTiming) {\n                        performance.measure(measureLabel, markLabelA, markLabelB);\n                        var entriesByName = performance.getEntriesByName(measureLabel);\n\n                        // The performance API could return no corresponding entries in Firefox so we must use a fallback.\n                        // See: https://github.com/nesk/network.js/issues/32#issuecomment-118434305\n                        measures[measureLabel] = entriesByName.length ? entriesByName[0].duration : measureWithoutUserTiming;\n                    } else {\n                        measures[measureLabel] = measureWithoutUserTiming;\n                    }\n                }\n\n                return measures[measureLabel];\n            }\n        },\n        supportsResourceTiming: {\n\n            /**\n             * Determine if the current browser supports the Resource Timing API.\n             * @public\n             * @method Timing#supportsResourceTiming\n             * @returns {boolean} `true` if the Resource Timing API is supported, otherwise `false`.\n             */\n\n            value: function supportsResourceTiming() {\n                return this._support.resourceTiming;\n            }\n        }\n    });\n\n    return Timing;\n})();\n\nmodule.exports = new Timing();\n\n},{\"../utils/helpers\":7}],7:[function(require,module,exports){\n(function (global){\n\"use strict\";\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\n/**\n * Return the global object.\n * @private\n * @function getGlobalObject\n * @return {Object}\n * @see https://gist.github.com/rauschma/1bff02da66472f555c75\n */\nexports.getGlobalObject = getGlobalObject;\n\n/**\n * Determine if the provided value is an object.\n * @private\n * @function isObject\n * @param {*} obj The value to check.\n * @returns {boolean} `true` if the value is an object, otherwise `false`.\n */\nexports.isObject = isObject;\n\n/**\n * Make a deep copy of any value.\n * @private\n * @function copy\n * @param {*} value The value to copy.\n * @returns {*} The copied value.\n */\nexports.copy = copy;\n\n/**\n * Copy all the properties in the source objects over to the destination object.\n * @private\n * @function assign\n * @param {Object} [target={}] The destination object.\n * @param {...Object} sources The source objects.\n * @returns {Object} The destination object once the properties are copied.\n */\nexports.assign = assign;\n\n/**\n * Copy the properties (but no new ones) in the source objects over to the destination object.\n * @private\n * @function assignStrict\n * @param {Object} [target={}] The destination object.\n * @param {...Object} sources The source objects.\n * @returns {Object} The destination object once the properties are copied.\n */\nexports.assignStrict = assignStrict;\n\n/**\n * Get a copy of an object without some of its properties.\n * @private\n * @function except\n * @param {Object} obj The original object.\n * @param {string[]} properties The properties to exclude from the copied object.\n * @returns {Object} The copied object without the specified properties.\n */\nexports.except = except;\n\n/**\n * Defer the execution of a function.\n * @private\n * @function defer\n * @param {Function} func The function to defer.\n * @returns {Defer} The Defer object used to execute the function when needed.\n */\nexports.defer = defer;\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction getGlobalObject() {\n    // Workers don’t have `window`, only `self`.\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n\n    // Not all environments allow `eval` and `Function`, use only as a last resort.\n    return new Function(\"return this\")();\n}\n\nfunction isObject(obj) {\n    return obj != undefined && obj != null && typeof obj.valueOf() == \"object\";\n}\n\nfunction copy(value) {\n    return JSON.parse(JSON.stringify(value));\n}\n\n/**\n * Copy the properties in the source objects over to the destination object.\n * @private\n * @function _assign\n * @param {boolean} strict Given `true`, new properties will not be copied.\n * @param {Object} [target={}] The destination object.\n * @param {...Object} sources The source objects.\n * @returns {Object} The destination object once the properties are copied.\n */\nfunction _assign(strict) {\n    for (var _len = arguments.length, sources = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        sources[_key - 2] = arguments[_key];\n    }\n\n    var target = arguments[1] === undefined ? {} : arguments[1];\n\n    target = copy(target);\n\n    sources.forEach(function (source) {\n        Object.keys(source).forEach(function (key) {\n            if (!strict || target.hasOwnProperty(key)) {\n                var value = source[key];\n                target[key] = isObject(value) ? _assign(strict, target[key], value) : value;\n            }\n        });\n    });\n\n    return target;\n}\nfunction assign() {\n    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n    }\n\n    var target = arguments[0] === undefined ? {} : arguments[0];\n\n    return _assign.apply(undefined, [false, target].concat(sources));\n}\n\nfunction assignStrict() {\n    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n    }\n\n    var target = arguments[0] === undefined ? {} : arguments[0];\n\n    return _assign.apply(undefined, [true, target].concat(sources));\n}\n\nfunction except(obj, properties) {\n    var objCopy = copy(obj);\n\n    properties.forEach(function (index) {\n        return delete objCopy[index];\n    });\n\n    return objCopy;\n}\n\nfunction defer() {\n    var func = arguments[0] === undefined ? function () {} : arguments[0];\n\n    /**\n     * @private\n     * @class Defer\n     */\n    return new ((function () {\n        var _class = function () {\n            _classCallCheck(this, _class);\n\n            this.func = func;\n        };\n\n        _createClass(_class, {\n            run: {\n\n                /**\n                 * Execute the deferred function.\n                 * @public\n                 * @method Defer#run\n                 */\n\n                value: function run() {\n                    if (this.func) this.func();\n                    delete this.func;\n                }\n            }\n        });\n\n        return _class;\n    })())();\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}]},{},[1])(1)\n});\n\n\n//# sourceMappingURL=network.js.map","import EventDispatcher from './EventDispatcher';\nimport HttpModule from './Http/HttpModule';\nimport LatencyModule from './Http/LatencyModule';\nimport BandwidthModule from './Http/BandwidthModule';\nimport Timing from './Timing';\nimport {getGlobalObject, isObject, assign, except} from '../utils/helpers';\n\n/**\n * @public\n * @typedef {Object} Network~settingsObject\n * @property {LatencyModule~settingsObject} latency\n * @property {BandwidthModule~settingsObject} upload\n * @property {BandwidthModule~settingsObject} download\n * @example\n * {\n *     // Top-level properties are applied to all the modules\n *     endpoint: './my-new-endpoint/',\n *\n *     // Top-level properties will be overridden by the ones specified in each module\n *     latency: {\n *         endpoint: './my-new-latency-endpoint/'\n *     }\n * }\n */\n\n/**\n * @class Network\n * @param {Network~settingsObject} [settings={}] A set of custom settings.\n * @member {LatencyModule} latency The latency module.\n * @member {BandwidthModule} upload The upload module.\n * @member {BandwidthModule} download The download module.\n */\nexport default class Network {\n\n    /**\n     * Expose all the internal classes to the global scope. Only for testing purposes!\n     * @private\n     * @method Network._exposeInternalClasses\n     * @returns {Network}\n     */\n    static _exposeInternalClasses()\n    {\n        let global = getGlobalObject(),\n            classes = {EventDispatcher, HttpModule, LatencyModule, BandwidthModule, Timing};\n\n        Object.keys(classes).forEach(name => {\n            global[name] = classes[name];\n        });\n\n        return this;\n    }\n\n    constructor(settings = {})\n    {\n        this._modules = {};\n        this._modulesInitialized = false;\n        this._pendingSettings = {};\n\n        this._registerModule('latency', settings => new LatencyModule(settings))\n            ._registerModule('upload', settings => new BandwidthModule('upload', settings))\n            ._registerModule('download', settings => new BandwidthModule('download', settings));\n\n        this._initModules(this.settings(settings));\n    }\n\n    /**\n     * Apply a new set of custom settings.\n     * @public\n     * @method Network#settings\n     * @param {Network~settingsObject} settings A set of custom settings.\n     * @returns {Network}\n     */\n    /**\n     * Return the current set of settings.\n     * @public\n     * @method Network#settings^2\n     * @returns {Network~settingsObject}\n     */\n    settings(settings = null)\n    {\n        let moduleNames = Object.keys(this._modules);\n\n        if (isObject(settings)) {\n            // Extract the global settings\n            let globalSettings = except(settings, moduleNames);\n\n            // Extract the local settings\n            let localSettings = except(settings, Object.keys(globalSettings));\n\n            // Create new settings with the global ones nested in the local ones\n            settings = moduleNames.reduce((settings, moduleName) => {\n                return assign(settings, {[moduleName]: globalSettings});\n            }, {});\n\n            // Apply the local settings to the new settings\n            settings = assign(settings, localSettings);\n\n            // Apply the settings to the modules\n            if (this._modulesInitialized) {\n                Object.keys(this._modules).forEach(name => {\n                    this._modules[name].settings(settings[name]);\n                });\n            }\n\n            // If the modules aren't instanciated, store the settings.\n            else {\n                this._pendingSettings = settings;\n            }\n\n            return this;\n        } else {\n            return moduleNames.reduce((settings, moduleName) => {\n                return assign(settings, {[moduleName]: this._modules[moduleName].settings()});\n            }, {});\n        }\n    }\n\n    /**\n     * Return if a module is currently making a request.\n     * @public\n     * @method Network#isRequesting\n     * @returns {boolean} `true` if a module is requesting, otherwise `false`.\n     */\n    isRequesting()\n    {\n        let requesting = false;\n\n        for (let name in this._modules) {\n            if (this._modules.hasOwnProperty(name)) {\n                requesting = requesting || this._modules[name].isRequesting();\n            }\n        }\n\n        return requesting;\n    }\n\n    /**\n     * Register a new module for the current `Network` instance.\n     * @private\n     * @method Network#registerModule\n     * @param {string} name The name of the module. Will be used to create the property `Network.<name>`.\n     * @param {Network~moduleCallback} moduleCallback A callback used to initialize a module with a set of settings.\n     * @returns {Network}\n     */\n    _registerModule(name, moduleCallback)\n    {\n        /**\n         * A callback used to initialize a module with a set of settings.\n         * @private\n         * @callback Network~moduleCallback\n         * @param {Object} settings A set of custom settings.\n         * @returns {HttpModule} An instanciated subclass of `HttpModule`.\n         */\n        this._modules[name] = moduleCallback;\n        return this;\n    }\n\n    /**\n     * Initialize all the registered modules with the settings passed to the constructor.\n     * @private\n     * @method Network#_initModules\n     * @returns {Network}\n     */\n    _initModules()\n    {\n        if (!this._modulesInitialized) {\n            // Initialize the modules with their respective settings\n            Object.keys(this._modules).forEach(name => {\n                this._modules[name] = this._modules[name](this._pendingSettings[name]).on('_newRequest', () => {\n                    return !this.isRequesting();\n                });\n\n                this[name] = this._modules[name];\n            });\n\n            this._modulesInitialized = true;\n        }\n\n        return this;\n    }\n\n}\n","/**\n * @class EventDispatcher\n */\nexport default class EventDispatcher {\n\n    /**\n     * A callback used as an event handler.\n     * @public\n     * @callback EventDispatcher~eventHandler\n     * @param {...*} args The extra parameters provided to the `trigger` method.\n     * @returns {?boolean} If `false` is explicitly returned, the `trigger` method will return `false`.\n     */\n\n    constructor()\n    {\n        /**\n         * Contains all the event callbacks, organized by events.\n         * @private\n         * @type {Object}\n         */\n        this._eventCallbacks = {};\n    }\n\n    /**\n     * Attach a callback to one or more events.\n     * @public\n     * @method EventDispatcher#on\n     * @param {string|string[]} events One or multiple event names.\n     * @param {EventDispatcher~eventHandler} callback An event handler.\n     * @returns {EventDispatcher}\n     */\n    on(events, callback)\n    {\n        events = Array.isArray(events) ? events : [events];\n\n        events.forEach(event => {\n            var eventCallbacks = this._eventCallbacks[event] = this._eventCallbacks[event] || [];\n\n            // If the callback isn't already registered, store it.\n            if (!~eventCallbacks.indexOf(callback)) {\n                eventCallbacks.push(callback);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Detach a callback from one or more events.\n     * @public\n     * @method EventDispatcher#off\n     * @param {string|string[]} events One or multiple event names.\n     * @param {EventDispatcher~eventHandler} callback An event handler.\n     * @returns {EventDispatcher}\n     */\n    off(events, callback = null)\n    {\n        events = Array.isArray(events) ? events : [events];\n\n        events.forEach(event => {\n            var eventCallbacks = this._eventCallbacks[event];\n\n            // If there is no specified callback, simply delete all the callbacks binded to the provided event.\n            if (!callback && eventCallbacks) {\n                delete this._eventCallbacks[event];\n            } else {\n                var callbackIndex = eventCallbacks ? eventCallbacks.indexOf(callback) : -1;\n\n                // If the callback is registered, remove it from the array.\n                if (callbackIndex != -1) {\n                    eventCallbacks.splice(callbackIndex, 1);\n                }\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Trigger an event.\n     * @public\n     * @method EventDispatcher#trigger\n     * @param {string} event An event name.\n     * @param {...*} extraParameters Some extra parameters to pass to the event handlers.\n     * @returns {boolean} Returns `false` if one of the event handlers explicitly returned `false`.\n     */\n    trigger(event, ...extraParameters)\n    {\n        var eventCallbacks = this._eventCallbacks[event] || [];\n\n        // A callback can return a boolean value which will be logically compared to the other callbacks values before\n        // being returned by the trigger() method. This allows a callback to send a \"signal\" to the caller, like\n        // cancelling an action.\n        var returnValue = true;\n\n        eventCallbacks.forEach(eventCallback => {\n            // A callback must explicitly return false if it wants the trigger() method to return false, undefined will\n            // not work. This avoids crappy callbacks to mess up with the triggering system.\n            var value = eventCallback(...extraParameters);\n            value = value !== false ? true : false;\n\n            returnValue = returnValue && value; // Compare the result of the callback to the actual return value\n        });\n\n        return returnValue;\n    }\n\n}\n","import HttpModule from './HttpModule';\nimport Timing from '../Timing';\nimport {defer} from '../../utils/helpers';\n\n/**\n * @public\n * @typedef {Object} BandwidthModule~settingsObject\n * @extends HttpModule~settingsObject\n * @property {Object} data\n * @property {number} data.size The amount of data to initially use.\n * @property {number} [data.multiplier=2] If the measure period can't reach the delay defined in the settings, the data amount is multiplied by the following value.\n */\n\n/**\n * Apply a new set of custom settings.\n * @public\n * @method BandwidthModule#settings\n * @param {BandwidthModule~settingsObject} settings A set of custom settings.\n * @returns {BandwidthModule}\n */\n/**\n * Return the current set of settings.\n * @public\n * @method BandwidthModule#settings^2\n * @returns {BandwidthModule~settingsObject}\n */\n\n/**\n * @class BandwidthModule\n * @extends HttpModule\n * @param {string} loadingType The loading type, `upload` or `download`.\n * @param {BandwidthModule~settingsObject} [settings={}] A set of custom settings.\n */\nexport default class BandwidthModule extends HttpModule {\n\n    constructor(loadingType, settings = {})\n    {\n        loadingType = (~['upload', 'download'].indexOf(loadingType)) ? loadingType : 'download';\n\n        this._extendDefaultSettings({\n            data: {\n                // 2 MB for upload, 10 MB for download\n                size: loadingType == 'upload' ? (2 * 1024 * 1024) : (10 * 1024 * 1024),\n                multiplier: 2\n            }\n        });\n\n        super.constructor(loadingType, settings);\n\n        // Define the object properties\n        this._loadingType = loadingType;\n\n        this._intendedEnd = false;\n        this._isRestarting = false;\n\n        this._lastLoadedValue = null;\n        this._speedRecords = [];\n        this._avgSpeed = null;\n\n        this._requestID = 0;\n        this._progressID = 0;\n\n        this._started = false;\n        this._firstProgress = true;\n        this._deferredProgress;\n\n        // Unique labels for each request, exclusively used to make measures.\n        this._timingLabels = {\n            start: null,\n            progress: null,\n            end: null,\n            measure: null\n        };\n\n        // Bind to XHR events\n        this.on('xhr-upload-loadstart', () => Timing.mark(this._timingLabels.start));\n        this.on('xhr-readystatechange', xhr => {\n            if (!this._started && xhr.readyState == XMLHttpRequest.LOADING) {\n                Timing.mark(this._timingLabels.start);\n                this._started = true;\n            }\n        });\n\n        var eventsPrefix = (loadingType == 'upload') ? 'xhr-upload' : 'xhr';\n\n        this.on(`${eventsPrefix}-progress`, (xhr, event) => this._progress(event));\n        this.on(`${eventsPrefix}-timeout`, () => this._timeout());\n        this.on(`${eventsPrefix}-loadend`, () => this._end());\n    }\n\n    /**\n     * Start requesting the server to make measures.\n     * @public\n     * @method BandwidthModule#start\n     * @returns {BandwidthModule}\n     */\n    start()\n    {\n        var loadingType = this._loadingType,\n            dataSettings = this.settings().data,\n            reqID = this._requestID++;\n\n        this._intendedEnd = false;\n        this._lastLoadedValue = null;\n        this._speedRecords = [];\n        this._started = false;\n        this._firstProgress = true;\n        this._deferredProgress = defer();\n\n        // Trigger the start event\n        if (!this._isRestarting) {\n            this.trigger('start', dataSettings.size);\n        }\n\n        // Create unique timing labels for the new request\n        var labels = this._timingLabels;\n        labels.start = `${loadingType}-${reqID}-start`;\n        labels.progress = `${loadingType}-${reqID}-progress`;\n        labels.end = `${loadingType}-${reqID}-end`;\n        labels.measure = `${loadingType}-${reqID}-measure`;\n\n        // Generate some random data to upload to the server. Here we're using a Blob instead of an ArrayBuffer because\n        // of a bug in Chrome (tested in v33.0.1750.146), causing a freeze of the page while trying to directly upload\n        // an ArrayBuffer (through an ArrayBufferView). The freeze lasts nearly 4.5s for 10MB of data. Using a Blob\n        // seems to solve the problem.\n        var blob = (loadingType == 'upload') ? new Blob([new ArrayBuffer(dataSettings.size)]) : null;\n\n        var type = (loadingType == 'download') ? 'GET' : 'POST';\n\n        // Initiate and send a new request\n        this._newRequest(type, {\n            size: dataSettings.size\n        })._sendRequest(blob);\n\n        return this;\n    }\n\n    /**\n     * Abort the measures.\n     * @public\n     * @method BandwidthModule#abort\n     * @returns {BandwidthModule}\n     */\n    abort()\n    {\n        this._intendedEnd = true;\n        return this._abort();\n    }\n\n    /**\n     * Make bandwidth measures for the current request.\n     * @private\n     * @method BandwidthModule#_progress\n     * @param {ProgressEvent} event The event associated with the progress event of the current request.\n     * @returns {BandwidthModule}\n     */\n    _progress(event)\n    {\n        // Ignore the first progress event, it generally contributes to get incoherent values.\n        if (this._firstProgress) return this._firstProgress = false;\n\n        // Execute the previous progress trigger\n        this._deferredProgress.run();\n\n        var labels = this._timingLabels,\n            progressID = this._progressID++,\n            markLabel = `${labels.progress}-${progressID}`,\n            loaded = event.loaded;\n\n        Timing.mark(markLabel);\n\n        // Measure the average speed (B/s) since the request started\n        var avgMeasure = Timing.measure(\n                `${labels.measure}-avg-${progressID}`,\n                labels.start,\n                markLabel\n            ),\n            avgSpeed = loaded / avgMeasure * 1000;\n\n        var instantSpeed;\n\n        if (!this._lastLoadedValue) { // We are executing the first progress event of the current request\n            instantSpeed = avgSpeed; // The instant speed of the first progress event is equal to the average one\n        } else {\n            // Measure the instant speed (B/s), which defines the speed between two progress events.\n            var instantMeasure = Timing.measure(\n                `${labels.measure}-instant-${progressID}`,\n                // Set the mark of the previous progress event as the starting point\n                `${labels.progress}-${progressID - 1}`,\n                markLabel\n            );\n            instantSpeed = (loaded - this._lastLoadedValue) / instantMeasure * 1000;\n        }\n\n        // Save the `loaded` property of the event for the next progress event\n        this._lastLoadedValue = loaded;\n\n        // Defer measures saving and event triggering, this allows to cancel the last progress event, which can generate\n        // incoherent values.\n        this._deferredProgress = defer(() => {\n            this._avgSpeed = avgSpeed;\n            this._speedRecords.push(instantSpeed);\n\n            this.trigger('progress', avgSpeed, instantSpeed);\n        });\n\n        return this;\n    }\n\n    /**\n     * Mark the current request as entirely finished (this means it ended after a time out).\n     * @private\n     * @method BandwidthModule#_timeout\n     * @returns {BandwidthModule}\n     */\n    _timeout()\n    {\n        this._intendedEnd = true;\n        return this;\n    }\n\n    /**\n     * End the measures.\n     * @private\n     * @method BandwidthModule#_end\n     * @returns {BandwidthModule}\n     */\n    _end()\n    {\n        // A timeout or an abort occured, bypass the further requests and trigger the \"end\" event.\n        if (this._intendedEnd) {\n            this._isRestarting = false;\n            this.trigger('end', this._avgSpeed, this._speedRecords);\n        }\n\n        // The request ended to early, restart it with an increased data size.\n        else {\n            var loadingType = this._loadingType,\n                dataSettings = this.settings().data;\n\n            dataSettings.size *= dataSettings.multiplier;\n\n            this.trigger('restart', dataSettings.size);\n\n            this._isRestarting = true;\n            this.start();\n        }\n\n        return this;\n    }\n\n\n}\n","import EventDispatcher from '../EventDispatcher';\nimport {isObject, assign, assignStrict} from '../../utils/helpers';\n\n/**\n * @public\n * @typedef {Object} HttpModule~settingsObject\n * @property {string} [endpoint=./network.php] Where is located your `network.php` file.\n * @property {number} [delay=8000] The delay while you want to take measures.\n */\n\n/**\n * @class HttpModule\n * @extends EventDispatcher\n * @param {string} moduleName The name of the instanciated module.\n * @param {HttpModule~settingsObject} [settings={}] A set of custom settings.\n */\nexport default class HttpModule extends EventDispatcher {\n\n    constructor(moduleName, settings = {})\n    {\n        super.constructor();\n\n        this._extendDefaultSettings({\n            endpoint: './network.php',\n            delay: 8000\n        });\n\n        this.settings(settings);\n\n        this._moduleName = moduleName;\n        this._xhr = null;\n        this._lastURLToken = null;\n\n        this._requestingOverridden = false;\n        this._requesting = false;\n\n        // Each time a request starts or ends, set the requesting value unless it has been overridden with the\n        // _setRequesting() method.\n        this.on(['xhr-loadstart', 'xhr-upload-loadstart'], () => {\n            if (!this._requestingOverridden) {\n                this._requesting = true;\n            }\n        });\n\n        this.on(['xhr-loadend', 'xhr-upload-loadend'], () => {\n            if (!this._requestingOverridden) {\n                this._requesting = false;\n            }\n        });\n    }\n\n    /**\n     * Apply a new set of custom settings.\n     * @public\n     * @method HttpModule#settings\n     * @param {HttpModule~settingsObject} settings A set of custom settings.\n     * @returns {HttpModule}\n     */\n    /**\n     * Return the current set of settings.\n     * @public\n     * @method HttpModule#settings^2\n     * @returns {HttpModule~settingsObject}\n     */\n    settings(settings = null)\n    {\n        if (isObject(settings)) {\n            this._settings = assignStrict(this._defaultSettings || {}, this._settings || {}, settings);\n            return this;\n        } else {\n            return this._settings || this._defaultSettings || {};\n        }\n    }\n\n    /**\n     * Return if the module is currently making a request.\n     * @public\n     * @method HttpModule#isRequesting\n     * @returns {boolean} `true` if the module is requesting, otherwise `false`.\n     */\n    isRequesting()\n    {\n        return this._requesting;\n    }\n\n    /**\n     * Extend the set of default settings.\n     * @protected\n     * @method HttpModule#_extendDefaultSettings\n     * @param {Object} settings The new properties to add to the default settings.\n     * @returns {HttpModule}\n     */\n    _extendDefaultSettings(settings)\n    {\n        this._defaultSettings = assign(this._defaultSettings || {}, settings);\n        return this;\n    }\n\n    /**\n     * Create a new XHR request.\n     * @protected\n     * @method HttpModule#_newRequest\n     * @param {string} httpMethod The HTTP method to use with the request, GET or POST.\n     * @param {Object} queryParams The query parameters to use with the request.\n     * @returns {HttpModule}\n     */\n    _newRequest(httpMethod, queryParams)\n    {\n        // Check if a callback binded to the \"_newRequest\" event returns false, if it's the case, cancel the request\n        // creation. If the requesting status has been overridden, there's no need to cancel the request since the user\n        // should know what he's doing.\n        if (!this.trigger('_newRequest') && !this._requestingOverridden) {\n            console.warn('To ensure accurate measures, you can only make one request at a time.');\n            return this;\n        }\n\n        var settings = this.settings(),\n            xhr = new XMLHttpRequest(),\n            validHttpMethods = ['GET', 'POST'];\n\n        // Prepare the new request.\n        if (!~validHttpMethods.indexOf(httpMethod)) {\n            console.warn('The HTTP method must be GET or POST.');\n            return this;\n        }\n\n        queryParams = queryParams || {};\n\n        // Generate an URL token to avoid any caching issues. This token will also allow to identify the request in the\n        // Resource Timing entries.\n        var tokenSuffix = (new Date).getTime();\n        this._lastURLToken = `network-${tokenSuffix}`;\n\n        // Append the query parameters\n        var url = settings.endpoint;\n        url += ~url.indexOf('?') ? '&' : '?';\n        url += `module=${this._moduleName}`;\n\n        Object.keys(queryParams).forEach(param => {\n            var value = encodeURIComponent(queryParams[param]);\n            url += `&${param}=${value}`;\n        });\n\n        url += `&${this._lastURLToken}`;\n\n        xhr.open(httpMethod, url);\n\n        // Define the timeout of the request\n        xhr.timeout = settings.delay;\n\n        // Abort the previous request if it hasn't been sent\n        if (this._xhr && this._xhr.readyState == XMLHttpRequest.OPENED) {\n            this._xhr.abort();\n        }\n\n        // Replace the old request by the new one\n        this._xhr = xhr;\n\n        // Bind all the XHR events\n        var self = this,\n            eventTypes = ['loadstart', 'progress', 'abort', 'error', 'load', 'timeout', 'loadend', 'readystatechange'];\n\n        eventTypes.forEach(eventType => {\n            xhr.addEventListener(eventType, function() {\n                // A last progress event can be triggered once a request has timed out, ignore it.\n                if (eventType == 'progress' && !self._requesting) {\n                    return;\n                }\n\n                self.trigger(`xhr-${eventType}`, xhr, ...arguments);\n            });\n\n            // The XMLHttpRequestUpload interface supports all the above event types except the \"readystatechange\" one\n            if (eventType != 'readystatechange') {\n                xhr.upload.addEventListener(eventType, function() {\n                    self.trigger(`xhr-upload-${eventType}`, xhr, ...arguments);\n                });\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Send a newly created XHR request.\n     * @protected\n     * @method HttpModule#_sendRequest\n     * @param {?*} [data=null] The data to send with the request.\n     * @returns {HttpModule}\n     */\n    _sendRequest(data = null)\n    {\n        if (this._xhr && this._xhr.readyState == XMLHttpRequest.OPENED) {\n            this._xhr.send(data);\n        } else {\n            console.warn('A request must have been created before sending any data.');\n        }\n\n        return this;\n    }\n\n    /**\n     * Abort the current request.\n     * @protected\n     * @method HttpModule#_abort\n     * @returns {HttpModule}\n     */\n    _abort()\n    {\n        if (this._xhr) {\n            this._xhr.abort();\n        }\n\n        return this;\n    }\n\n    /**\n     * Get the Resource Timing entry associated to the current request.\n     * @protected\n     * @method HttpModule#_getTimingEntry\n     * @param {HttpModule~timingCallback} callback A callback used to send back the timing entry.\n     * @returns {HttpModule}\n     */\n    _getTimingEntry(callback)\n    {\n        // The Resource Timing entries aren't immediately available once the 'load' event is triggered by an\n        // XMLHttpRequest, we must wait for another process tick to check for a refreshed list.\n        setTimeout((lastURLToken => {\n            return () => {\n                // Filter the timing entries to return only the one concerned by the last request made\n                var entries = performance.getEntriesByType('resource').filter(function(entry) {\n                    return ~entry.name.indexOf(lastURLToken);\n                });\n\n                /**\n                 * A callback used to send back the timing entry.\n                 * @private\n                 * @callback HttpModule~timingCallback\n                 * @param {PerformanceResourceTiming} entry The Resource Timing entry associated to the current request.\n                 */\n                callback(entries.length ? entries[0] : null);\n            };\n        })(this._lastURLToken), 0);\n\n        return this;\n    }\n\n    /**\n     * Override the requesting status of the module.\n     * @protected\n     * @method HttpModule#_setRequesting\n     * @param {boolean} isRequesting The requesting status.\n     * @returns {HttpModule}\n     */\n    _setRequesting(isRequesting)\n    {\n        this._requestingOverridden = true;\n        this._requesting = isRequesting;\n        return this;\n    }\n\n}\n","import HttpModule from './HttpModule';\nimport Timing from '../Timing';\nimport {isObject, assignStrict, except} from '../../utils/helpers';\n\n/**\n * @public\n * @typedef {Object} LatencyModule~settingsObject\n * @property {string} [endpoint=./network.php] Where is located your `network.php` file.\n * @property {number} [measures=5] How many measures should be returned.\n * @property {number} [attempts=3] How much attempts to get a valid value should be done for each measure.\n */\n\n/**\n * @class LatencyModule\n * @extends HttpModule\n * @param {LatencyModule~settingsObject} [settings={}] A set of custom settings.\n */\nexport default class LatencyModule extends HttpModule {\n\n    constructor(settings = {})\n    {\n        this._extendDefaultSettings({\n            measures: 5,\n            attempts: 3\n        });\n\n        super.constructor('latency');\n\n        // Don't use the settings method of parent class but the overridden one in this class\n        this.settings(settings);\n\n        // Define the object properties\n        this._requestsLeft = 0;\n        this._attemptsLeft = 0;\n\n        this._latencies = [];\n        this._requestID = 0;\n\n        // Unique labels for each request, exclusively used to make measures.\n        this._timingLabels = {\n            start: null,\n            end: null,\n            measure: null\n        };\n\n        // Measure the latency with the Resource Timing API once the request is finished\n        if (Timing.supportsResourceTiming()) {\n            this.on('xhr-load', () => this._measure());\n        }\n\n        // If the browser doesn't support the Resource Timing API, we fallback on a Datetime solution.\n        else {\n            // Set a mark when the request starts\n            this.on('xhr-loadstart', () => Timing.mark(this._timingLabels.start));\n\n            // Then make a measure with the previous mark\n            this.on('xhr-readystatechange', xhr => this._measure(xhr));\n        }\n    }\n\n    /**\n     * Apply a new set of custom settings.\n     * @public\n     * @method LatencyModule#settings\n     * @param {LatencyModule~settingsObject} settings A set of custom settings.\n     * @returns {LatencyModule}\n     */\n    /**\n     * Return the current set of settings.\n     * @public\n     * @method LatencyModule#settings^2\n     * @returns {LatencyModule~settingsObject}\n     */\n    settings(settings = null)\n    {\n        if (isObject(settings)) {\n            return super.settings(assignStrict(settings, {\n                delay: 0 // We dont want any timeout during a latency calculation\n            }));\n        } else {\n            return except(super.settings(), ['delay']);\n        }\n    }\n\n    /**\n     * Start requesting the server to make measures.\n     * @public\n     * @method LatencyModule#start\n     * @returns {LatencyModule}\n     */\n    start()\n    {\n        // Set the number of requests required to establish the network latency. If the browser doesn't support the\n        // Resource Timing API, add a request that will be ignored to avoid a longer request due to a possible\n        // DNS/whatever fetch.\n        let {measures, attempts} = this.settings();\n\n        this._requestsLeft = measures;\n        this._attemptsLeft = attempts * measures;\n\n        if (!Timing.supportsResourceTiming()) {\n            this._requestsLeft++;\n            this._attemptsLeft++;\n        }\n\n        // Override the requesting value since a complete latency request consists off multiple ones\n        this._setRequesting(true);\n\n        this._latencies = [];\n        this._nextRequest();\n\n        return this;\n    }\n\n    /**\n     * Initiate the next request used for latency measures.\n     * @private\n     * @method LatencyModule#_nextRequest\n     * @param {boolean} [retry=false] Defines if the next request is a retry due to a failing request or not.\n     * @returns {LatencyModule}\n     */\n    _nextRequest(retry = false)\n    {\n        const reqID = this._requestID++;\n        let requestsLeft = retry ? this._requestsLeft : this._requestsLeft--;\n\n        if (this._attemptsLeft-- && (requestsLeft || retry)) {\n            // Create unique timing labels for the new request\n            var labels = this._timingLabels;\n            labels.start = `latency-${reqID}-start`;\n            labels.end = `latency-${reqID}-end`;\n            labels.measure = `latency-${reqID}-measure`;\n\n            // Create the new request and send it\n            this._newRequest('GET')._sendRequest();\n        } else {\n            // All the requests are finished, set the requesting status to false.\n            this._setRequesting(false);\n\n            // If all the requests have been executed, calculate the average latency. Since the _getTimingEntry() method\n            // is asynchronous, wait for the next process tick to execute the _end() method, to be sure that all the\n            // latencies have been retrieved.\n            setTimeout(() => this._end(), 0);\n        }\n\n        return this;\n    }\n\n    /**\n     * Make latency measures for the last request.\n     * @private\n     * @method LatencyModule#_measure\n     * @param {?XMLHttpRequest} [xhr=null] The concerned XMLHttpRequest if the browser doesn't support the Resource Timing API.\n     * @returns {LatencyModule}\n     */\n    _measure(xhr = null)\n    {\n        // With Resource Timing API\n        if (!xhr) {\n            this._getTimingEntry(entry => {\n                // The latency calculation differs between an HTTP and an HTTPS connection\n                // See: http://www.w3.org/TR/resource-timing/#processing-model\n                let latency = !entry.secureConnectionStart\n                        ? entry.connectEnd - entry.connectStart\n                        : entry.secureConnectionStart - entry.connectStart;\n\n                if (latency) this._latencies.push(latency);\n                this._nextRequest(!latency);\n            });\n        }\n\n        // Without Resource Timing API\n        else if (this._requestsLeft < this.settings().measures) {\n\n            // Measure and save the latency if the headers have been received\n            if (xhr.readyState == XMLHttpRequest.HEADERS_RECEIVED) {\n                let labels = this._timingLabels;\n\n                Timing.mark(labels.end);\n                let latency = Timing.measure(labels.measure, labels.start, labels.end);\n\n                if (latency) this._latencies.push(latency);\n\n                // Abort the current request before we run a new one\n                this._abort();\n                this._nextRequest(!latency);\n            }\n\n        }\n\n        // Ignore the first request when using the XHR states. See the comments in the start() method for explanations.\n        else {\n            this._nextRequest();\n        }\n\n        return this;\n    }\n\n    /**\n     * End the measures.\n     * @private\n     * @method LatencyModule#_end\n     * @returns {LatencyModule}\n     */\n    _end()\n    {\n        let latencies = this._latencies;\n\n        // Get the average latency\n        let avgLatency = latencies.reduce((a, b) => a + b, 0) / (latencies.length || 1);\n        avgLatency = avgLatency || null;\n\n        // If there is not enough measures, display a warning.\n        if (latencies.length < this.settings().measures) {\n            let {measures, attempts} = this.settings();\n\n            console.warn([\n                'An insufficient number of measures have been processed, this could be due to your web server using',\n                `persistant connections or to your client settings (measures: ${measures}, attempts: ${attempts})`\n            ].join(' '));\n        }\n\n        // Trigger the \"end\" event with the average latency and the latency list as parameters\n        this.trigger('end', avgLatency, latencies);\n\n        return this;\n    }\n\n}\n","import {getGlobalObject} from '../utils/helpers';\n\n/**\n * @private\n * @class Timing\n */\nclass Timing {\n\n    constructor()\n    {\n        const global = getGlobalObject();\n\n        /**\n         * Defines if the current browser supports some specific Timing APIs.\n         * @private\n         * @member {Object} _support\n         * @property {boolean} performance `true` if the Performance API is available.\n         * @property {boolean} userTiming `true` if the User Timing API is available.\n         * @property {boolean} resourceTiming `true` if the Resource Timing API is available.\n         */\n        this._support = {\n            performance: !!global.performance,\n            userTiming: global.performance && performance.mark,\n            resourceTiming: global.performance\n                            && (typeof performance.getEntriesByType == \"function\")\n                            && performance.timing\n        };\n\n        /**\n         * Contains all the marks created by the `mark` method.\n         * @private\n         * @member {Object} _marks\n         */\n        this._marks = {};\n\n        /**\n         * Contains all the measures created by the `measure` method.\n         * @private\n         * @member {Object} _measures\n         */\n        this._measures = {};\n    }\n\n    /**\n     * Create a new timing mark.\n     * @public\n     * @method Timing#mark\n     * @param {string} label A label associated to the mark.\n     * @returns {Timing}\n     */\n    mark(label)\n    {\n        const support = this._support,\n              marks = this._marks;\n\n        if (support.userTiming) {\n            performance.mark(label);\n        }\n\n        if (support.performance) {\n            marks[label] = performance.now();\n        } else {\n            marks[label] = (new Date).getTime();\n        }\n\n        return this;\n    }\n\n    /**\n     * Measure the delay between two marks.\n     * @public\n     * @method Timing#measure\n     * @param {string} measureLabel A label associated to the measure.\n     * @param {string} markLabelA The label of the first mark.\n     * @param {string} markLabelB The label of the second mark.\n     * @returns {number} The measured value.\n     */\n    measure(measureLabel, markLabelA, markLabelB)\n    {\n        const support = this._support,\n              marks = this._marks,\n              measures = this._measures;\n\n        if (typeof measures[measureLabel] == 'undefined') {\n            const measureWithoutUserTiming = marks[markLabelB] - marks[markLabelA];\n\n            if (support.userTiming) {\n                performance.measure(measureLabel, markLabelA, markLabelB);\n                const entriesByName = performance.getEntriesByName(measureLabel);\n\n                // The performance API could return no corresponding entries in Firefox so we must use a fallback.\n                // See: https://github.com/nesk/network.js/issues/32#issuecomment-118434305\n                measures[measureLabel] = entriesByName.length ? entriesByName[0].duration : measureWithoutUserTiming;\n            } else {\n                measures[measureLabel] = measureWithoutUserTiming;\n            }\n        }\n\n        return measures[measureLabel];\n    }\n\n    /**\n     * Determine if the current browser supports the Resource Timing API.\n     * @public\n     * @method Timing#supportsResourceTiming\n     * @returns {boolean} `true` if the Resource Timing API is supported, otherwise `false`.\n     */\n    supportsResourceTiming()\n    {\n        return this._support.resourceTiming;\n    }\n\n}\n\nexport default new Timing();\n","/**\n * Return the global object.\n * @private\n * @function getGlobalObject\n * @return {Object}\n * @see https://gist.github.com/rauschma/1bff02da66472f555c75\n */\nexport function getGlobalObject() {\n    // Workers don’t have `window`, only `self`.\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n\n    // Not all environments allow `eval` and `Function`, use only as a last resort.\n    return new Function('return this')();\n}\n\n/**\n * Determine if the provided value is an object.\n * @private\n * @function isObject\n * @param {*} obj The value to check.\n * @returns {boolean} `true` if the value is an object, otherwise `false`.\n */\nexport function isObject(obj)\n{\n    return obj != undefined && obj != null && typeof obj.valueOf() == 'object';\n}\n\n/**\n * Make a deep copy of any value.\n * @private\n * @function copy\n * @param {*} value The value to copy.\n * @returns {*} The copied value.\n */\nexport function copy(value)\n{\n    return JSON.parse(JSON.stringify(value));\n}\n\n/**\n * Copy the properties in the source objects over to the destination object.\n * @private\n * @function _assign\n * @param {boolean} strict Given `true`, new properties will not be copied.\n * @param {Object} [target={}] The destination object.\n * @param {...Object} sources The source objects.\n * @returns {Object} The destination object once the properties are copied.\n */\nfunction _assign(strict, target = {}, ...sources)\n{\n    target = copy(target);\n\n    sources.forEach(source => {\n        Object.keys(source).forEach(key => {\n            if (!strict || target.hasOwnProperty(key)) {\n                let value = source[key];\n                target[key] = isObject(value) ? _assign(strict, target[key], value) : value;\n            }\n        })\n    });\n\n    return target;\n}\n\n/**\n * Copy all the properties in the source objects over to the destination object.\n * @private\n * @function assign\n * @param {Object} [target={}] The destination object.\n * @param {...Object} sources The source objects.\n * @returns {Object} The destination object once the properties are copied.\n */\nexport function assign(target = {}, ...sources)\n{\n    return _assign(false, target, ...sources);\n}\n\n/**\n * Copy the properties (but no new ones) in the source objects over to the destination object.\n * @private\n * @function assignStrict\n * @param {Object} [target={}] The destination object.\n * @param {...Object} sources The source objects.\n * @returns {Object} The destination object once the properties are copied.\n */\nexport function assignStrict(target = {}, ...sources)\n{\n    return _assign(true, target, ...sources);\n}\n\n/**\n * Get a copy of an object without some of its properties.\n * @private\n * @function except\n * @param {Object} obj The original object.\n * @param {string[]} properties The properties to exclude from the copied object.\n * @returns {Object} The copied object without the specified properties.\n */\nexport function except(obj, properties)\n{\n    let objCopy = copy(obj);\n\n    properties.forEach(index => delete objCopy[index]);\n\n    return objCopy;\n}\n\n/**\n * Defer the execution of a function.\n * @private\n * @function defer\n * @param {Function} func The function to defer.\n * @returns {Defer} The Defer object used to execute the function when needed.\n */\nexport function defer(func = () => {})\n{\n    /**\n     * @private\n     * @class Defer\n     */\n    return new class {\n        constructor()\n        {\n            this.func = func;\n        }\n\n        /**\n         * Execute the deferred function.\n         * @public\n         * @method Defer#run\n         */\n        run()\n        {\n            if (this.func) this.func();\n            delete this.func;\n        }\n    };\n}\n"],"sourceRoot":"/source/"}