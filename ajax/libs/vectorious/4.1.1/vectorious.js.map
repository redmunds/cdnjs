{"version":3,"sources":["vectorious-4.1.0.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","vectorious","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"Matrix","data","options","type","Float64Array","shape","buffer","Vector","Object","prototype","toString","constructor","fromArray","fromTypedArray","create","array","c","ii","jj","add","b","matrix","d1","d2","subtract","scale","scalar","zeros","j","k","ones","random","Math","multiply","r1","c1","r2","c2","sum","transpose","tmp","inverse","m","identity","augmented","augment","gauss","left","right","set","get","equals","pivot","leadValue","copy","lead","swap","pivotize","row","result","sign","abs","lu","L","U","P","A","size","magic","x","y","diag","min","determinant","pop","product","trace","diagonal","value","slice","copyWithin","map","callback","each","push","subarray","join","toArray","Array","toVector","./vector",2,3,"combine","vector","l1","l2","normalize","magnitude","project","dot","count","range","start","step","end","args","arguments","backwards","ceil","sqrt","angle","acos","index","Number","POSITIVE_INFINITY","max","NEGATIVE_INFINITY",4,"nblas","error","axpy","scal","nrm2","idamax","./matrix"],"mappings":"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","file":"vectorious-4.1.0.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.vectorious = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function () {\n  'use strict';\n\n  var Vector = require('./vector');\n\n  /**\n   * @method constructor\n   * @desc Creates a `Matrix` from the supplied arguments.\n   **/\n  function Matrix (data, options) {\n    this.type = Float64Array;\n    this.shape = [];\n\n    if (data && data.buffer && !(data instanceof Vector) &&\n        Object.prototype.toString.call(data.buffer) === '[object ArrayBuffer]' &&\n        options.shape) {\n      if (data.length !== options.shape[0] * options.shape[1])\n        throw new Error(\"Shape does not match typed array dimensions.\");\n\n      this.shape = options.shape;\n      this.data = data;\n      this.type = data.constructor;\n    } else if (Object.prototype.toString.call(data) === '[object Array]') {\n      return Matrix.fromArray(data);\n    } else if (data instanceof Vector) {\n      this.shape = options && options.shape ? options.shape : [data.length, 1];\n      this.data = new data.type(data.data);\n      this.type = data.type;\n    } else if (data instanceof Matrix) {\n      this.shape = [data.shape[0], data.shape[1]];\n      this.data = new data.type(data.data);\n      this.type = data.type;\n    }\n  }\n\n  Matrix.fromTypedArray = function (data, shape) {\n    var self = Object.create(Matrix.prototype);\n    self.shape = shape;\n    self.data = data;\n    self.type = data.constructor;\n\n    return self;\n  };\n\n  Matrix.fromArray = function (array) {\n    var shape = [],\n        data,\n        c;   // number of columns\n\n    shape[0] = array.length;\n    shape[1] = array[0].length;\n    c = shape[1];\n\n    data = new Float64Array(shape[0]*shape[1]);\n\n    for (var ii = 0; ii < shape[0]; ++ii)\n      for (var jj = 0; jj < shape[1]; ++jj)\n        data[ii*c + jj] = array[ii][jj];\n\n    return Matrix.fromTypedArray(data, shape);\n  };\n\n  /**\n   * Static method. Adds two matrices `a` and `b` together.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} a new matrix containing the sum of `a` and `b`\n   **/\n  Matrix.add = function (a, b) {\n    return new Matrix(a).add(b);\n  };\n\n  /**\n   * Adds `matrix` to current matrix.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.add = function (matrix) {\n    var r = this.shape[0],          // rows in this matrix\n        c = this.shape[1],          // columns in this matrix\n        d1 = this.data,\n        d2 = matrix.data;\n\n    if (r !== matrix.shape[0] || c !== matrix.shape[1])\n      throw new Error('sizes do not match!');\n\n    var i;\n    for (i = 0; i < r * c; i++)\n      d1[i] += d2[i];\n\n    return this;\n  };\n\n  /**\n   * Static method. Subtracts the matrix `b` from matrix `a`.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} a new matrix containing the difference between `a` and `b`\n   **/\n  Matrix.subtract = function (a, b) {\n    return new Matrix(a).subtract(b);\n  };\n\n  /**\n   * Subtracts `matrix` from current matrix.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.subtract = function (matrix) {\n      var r = this.shape[0],          // rows in this matrix\n          c = this.shape[1],          // columns in this matrix\n          d1 = this.data,\n          d2 = matrix.data;\n\n      if (r !== matrix.shape[0] || c !== matrix.shape[1])\n        throw new Error('sizes do not match');\n\n      var i;\n      for (i = 0; i < r * c; i++)\n        d1[i] -= d2[i];\n\n      return this;\n  };\n\n  /**\n   * Static method. Multiplies all elements of a matrix `a` with a specified `scalar`.\n   * @param {Matrix} a\n   * @param {Number} scalar\n   * @returns {Matrix} a new scaled matrix\n   **/\n  Matrix.scale = function (a, scalar) {\n    return new Matrix(a).scale(scalar);\n  };\n\n  /**\n   * Multiplies all elements of current matrix with a specified `scalar`.\n   * @param {Number} scalar\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.scale = function (scalar) {\n    var r = this.shape[0],          // rows in this matrix\n        c = this.shape[1],          // columns in this matrix\n        d1 = this.data,\n        i;\n\n    for (i = 0; i < r * c; i++)\n      d1[i] *= scalar;\n\n    return this;\n  };\n\n  /**\n   * Static method. Creates an `i x j` matrix containing zeros (`0`), takes an\n   * optional `type` argument which should be an instance of `TypedArray`.\n   * @param {Number} i\n   * @param {Number} j\n   * @param {TypedArray} type\n   * @returns {Matrix} a matrix of the specified dimensions and `type`\n   **/\n  Matrix.zeros = function (i, j, type) {\n    if (i <= 0 || j <= 0)\n      throw new Error('invalid size');\n\n    type = type ? type : Float64Array;\n\n    var data = new type(i * j);\n    for (var k = 0; k < i * j; k++)\n      data[k] = +0.0;\n\n    return Matrix.fromTypedArray(data, [i, j]);\n  };\n\n  /**\n   * Static method. Creates an `i x j` matrix containing ones (`1`), takes an\n   * optional `type` argument which should be an instance of `TypedArray`.\n   * @param {Number} i\n   * @param {Number} j\n   * @param {TypedArray} type\n   * @returns {Matrix} a matrix of the specified dimensions and `type`\n   **/\n  Matrix.ones = function (i, j, type) {\n    if (i <= 0 || j <= 0)\n      throw new Error('invalid size');\n\n    type = type ? type : Float64Array;\n\n    var data = new type(i * j);\n    for (var k = 0; k < i * j; k++)\n      data[k] = +1.0;\n\n    return Matrix.fromTypedArray(data, [i, j]);\n  };\n\n  /**\n   * Static method. Creates an `i x j` matrix containing random values between\n   * `0` and `1`, takes an optional `type` argument which should be an instance\n   * of `TypedArray`.\n   * @param {Number} i\n   * @param {Number} j\n   * @param {TypedArray} type\n   * @returns {Matrix} a matrix of the specified dimensions and `type`\n   **/\n  Matrix.random = function (i, j, type) {\n    type = type ? type : Float64Array;\n    var data = new type(i * j),\n        k;\n\n    for (k = 0; k < i * j; k++)\n      data[k] = Math.random();\n\n    return Matrix.fromTypedArray(data, [i, j]);\n  };\n\n  /**\n   * Static method. Multiplies two matrices `a` and `b` of matching dimensions.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} a new resultant matrix containing the matrix product of `a` and `b`\n   **/\n  Matrix.multiply = function (a, b) {\n    return a.multiply(b);\n  };\n\n  /**\n   * Multiplies two matrices `a` and `b` of matching dimensions.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} a new resultant matrix containing the matrix product of `a` and `b`\n   **/\n  Matrix.prototype.multiply = function (matrix) {\n    var r1 = this.shape[0],   // rows in this matrix\n        c1 = this.shape[1],   // columns in this matrix\n        r2 = matrix.shape[0], // rows in multiplicand\n        c2 = matrix.shape[1], // columns in multiplicand\n        d1 = this.data,\n        d2 = matrix.data;\n\n    if (c1 !== r2)\n      throw new Error('sizes do not match');\n\n    var data = new this.type(r1 * c2);\n    for (var i = 0; i < r1; i++) {\n      for (var j = 0; j < c2; j++) {\n        var sum = +0;\n        for (var k = 0; k < c1; k++)\n          sum += d1[i * c1 + k] * d2[j + k * c2];\n\n        data[i * c2 + j] = sum;\n      }\n    }\n\n    return Matrix.fromTypedArray(data, [r1, c2]);\n  };\n\n  /**\n   * Static method. Transposes a matrix (mirror across the diagonal).\n   * @returns {Matrix} a new resultant transposed matrix\n   **/\n  Matrix.transpose = function (matrix) {\n    return new Matrix(matrix).transpose();\n  };\n\n  /**\n   * Transposes a matrix (mirror across the diagonal).\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.transpose = function () {\n    var r = this.shape[0],\n        c = this.shape[1],\n        i, j;\n\n    // prefer in-place\n    if (r === c) {\n      for (i = 0; i < r - 1; i++) {\n        for (j = i + 1; j < r; j++) {\n          var tmp = this.data[j * r + i];\n          this.data[j * r + i] = this.data[i * r + j];\n          this.data[i * r + j] = tmp;\n        }\n      }\n\n      return this;\n    }\n\n    var data = new this.type(c * r);\n    for (i = 0; i < r; i++)\n      for (j = 0; j < c; j++)\n        data[j * r + i] = this.data[i * c + j];\n\n    return Matrix.fromTypedArray(data, [c, r]);\n  };\n\n  /**\n   * Determines the inverse of any invertible square matrix using\n   * Gaussian elimination.\n   * @returns {Matrix} the inverse of the matrix\n   **/\n  Matrix.prototype.inverse = function () {\n    var l = this.shape[0],\n        m = this.shape[1];\n\n    if (l !== m)\n      throw new Error('invalid dimensions');\n\n    var identity = Matrix.identity(l);\n    var augmented = Matrix.augment(this, identity);\n    var gauss = augmented.gauss();\n\n    var left = Matrix.zeros(l, m),\n        right = Matrix.zeros(l, m),\n        n = gauss.shape[1],\n        i, j;\n    for (i = 0; i < l; i++) {\n      for (j = 0; j < n; j++) {\n        if (j < m)\n          left.set(i, j, gauss.get(i, j));\n        else\n          right.set(i, j - l, gauss.get(i, j));\n      }\n    }\n\n    if (!left.equals(Matrix.identity(l)))\n      throw new Error('matrix is not invertible');\n\n    return right;\n  };\n\n  /**\n   * Performs Gaussian elimination on a matrix.\n   * @returns {Matrix} the matrix in reduced row echelon form\n   **/\n  Matrix.prototype.gauss = function () {\n    var l = this.shape[0],\n        m = this.shape[1];\n\n    var copy = new Matrix(this),\n        lead = 0,\n        pivot,\n        i, j, k,\n        leadValue;\n\n    for (i = 0; i < l; i++) {\n      if (m <= lead)\n        return new Error('matrix is singular');\n\n      j = i;\n      while (copy.data[j * m + lead] === 0) {\n        j++;\n        if (l === j) {\n          j = i;\n          lead++;\n\n          if (m === lead)\n            return new Error('matrix is singular');\n        }\n      }\n\n      copy.swap(i, j);\n\n      pivot = copy.data[i * m + lead];\n      if (pivot !== 0) {\n        // scale down the row by value of pivot\n        for (k = 0; k < m; k++)\n          copy.data[(i * m) + k] = copy.data[(i * m) + k] / pivot;\n      }\n\n\n      for (j = 0; j < l; j++) {\n        leadValue = copy.data[j * m + lead];\n        if (j !== i)\n          for (k = 0; k < m; k++)\n            copy.data[j * m + k] = copy.data[j * m + k] - (copy.data[i * m + k] * leadValue);\n      }\n\n      lead++;\n    }\n\n    for (i = 0; i < l; i++) {\n      pivot = 0;\n      for (j = 0; j < m; j++)\n        if (!pivot)\n          pivot = copy.data[i * m + j];\n\n      if (pivot)\n        // scale down the row by value of pivot\n        for (k = 0; k < m; k++)\n          copy.data[(i * m) + k] = copy.data[(i * m) + k] / pivot;\n    }\n\n    return copy;\n  };\n\n  /**\n   * Pivots a matrix until elements are in upper triangular form\n   * @returns {Array} a tuple of the resultant pivotized matrix and its sign\n   * (used in LU factorization).\n   **/\n  Matrix.prototype.pivotize = function () {\n    var l = this.shape[0],\n        result = Matrix.identity(l),\n        sign = 1,\n        pivot,\n        lead,\n        row;\n\n    var i, j;\n    for (i = 0; i < l; i++) {\n      pivot = 0;\n      row = i;\n\n      for (j = i; j < l; j++) {\n        lead = Math.abs(this.get(j, i));\n        if (pivot < lead) {\n          pivot = lead;\n          row = j;\n        }\n      }\n\n      if (i !== row) {\n        result.swap(i, row);\n        sign *= -1;\n      }\n    }\n\n    return [result, sign];\n  };\n\n  /**\n   * Performs LU factorization on a matrix.\n   * @returns {Array} a triple (3-tuple) of the lower triangular resultant matrix `L`, the upper\n   * triangular resultant matrix `U` and the pivot matrix `P`\n   **/\n  Matrix.prototype.lu = function () {\n    var l = this.shape[0];\n\n    var L = Matrix.identity(l),\n        U = Matrix.zeros(l, l),\n        P = this.pivotize(),\n        A = Matrix.multiply(P[0], this);\n\n    var i, j, k,\n        sum = [0, 0];\n\n    for (i = 0; i < l; i++) {\n      for (j = 0; j < i + 1; j++) {\n        sum[0] = 0;\n        for (k = 0; k < j; k++)\n          sum[0] += U.get(k, i) * L.get(j, k);\n\n        U.set(j, i, A.get(j, i) - sum[0]);\n      }\n\n      for (j = i; j < l; j++) {\n        sum[1] = 0;\n        for (k = 0; k < j; k++)\n          sum[1] += U.get(k, i) * L.get(j, k);\n\n        L.set(j, i, (A.get(j, i) - sum[1]) / U.get(i, i));\n      }\n    }\n\n    return [L, U, P];\n  };\n\n  /**\n   * Static method. Augments two matrices `a` and `b` of matching dimensions\n   * (appends `b` to `a`).\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} the resultant matrix of `b` augmented to `a`\n   **/\n  Matrix.augment = function (a, b) {\n    return new Matrix(a).augment(b);\n  };\n\n  /**\n   * Augments `matrix` with current matrix.\n   * @param {Matrix} matrix\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.augment = function (matrix) {\n    if (matrix.shape.length === 0)\n     return this;\n\n    var r1 = this.shape[0],\n        c1 = this.shape[1],\n        r2 = matrix.shape[0],\n        c2 = matrix.shape[1],\n        d1 = this.data,\n        d2 = matrix.data,\n        i, j;\n\n    if (r1 !== r2)\n      throw new Error(\"Rows do not match.\");\n\n    var length = c1 + c2,\n        data = new this.type(length * r1);\n\n    for (i = 0; i < r1; i++)\n      for (j = 0; j < c1; j++)\n        data[i * length + j] = d1[i * c1 + j];\n\n    for (i = 0; i < r2; i++)\n      for (j = 0; j < c2; j++)\n        data[i * length + j + c1] = d2[i * c2 + j];\n\n    this.shape = [r1, length];\n    this.data = data;\n\n    return this;\n  };\n\n  /**\n   * Static method. Creates an identity matrix of `size`, takes an optional `type` argument\n   * which should be an instance of `TypedArray`.\n   * @param {Number} size\n   * @param {TypedArray} type\n   * @returns {Matrix} an identity matrix of the specified `size` and `type`\n   **/\n  Matrix.identity = function (size, type) {\n    if (size < 0)\n      throw new Error('invalid size');\n\n    type = type ? type : Float64Array;\n    var matrix = Matrix.zeros(size, size, type),\n        i, j;\n    for (i = 0; i < size; i++)\n      matrix.data[i * size + i] = 1.0;\n\n    return matrix;\n  };\n\n  /**\n   * Static method. Creates a magic square matrix of `size`, takes an optional `type` argument\n   * which should be an instance of `TypedArray`.\n   * @param {Number} size\n   * @param {Number} type\n   * @returns {Matrix} a magic square matrix of the specified `size` and `type`\n   **/\n  Matrix.magic = function (size, type) {\n    if (size < 0)\n      throw new Error('invalid size');\n\n    function f(n, x, y) {\n      return (x + y * 2 + 1) % n;\n    }\n\n    type = type ? type : Float64Array;\n    var data = new type(size * size),\n        i, j;\n    for (i = 0; i < size; i++)\n      for (j = 0; j < size; j++)\n        data[(size - i - 1) * size + (size - j - 1)] =\n          f(size, size - j - 1, i) * size + f(size, j, i) + 1;\n\n    return Matrix.fromTypedArray(data, [size, size]);\n  };\n\n  /**\n   * Gets the diagonal of a matrix.\n   * @returns {Vector} the diagonal of the matrix as a vector\n   **/\n  Matrix.prototype.diag = function () {\n    var r = this.shape[0],\n        c = this.shape[1],\n        data = new this.type(Math.min(r, c));\n\n    for (var i = 0; i < r && i < c; i++)\n      data[i] = this.data[i * c + i];\n\n    return new Vector(data);\n  };\n\n  /**\n   * Gets the determinant of any square matrix using LU factorization.\n   * @returns {Number} the determinant of the matrix\n   **/\n  Matrix.prototype.determinant = function () {\n    if (this.shape[0] !== this.shape[1])\n      throw new Error('matrix is not square');\n\n    var lu = this.lu();\n    var P = lu.pop(),\n        U = lu.pop(),\n        L = lu.pop();\n\n    var product = 1,\n        l = this.shape[0];\n\n    for (var i = 0; i < l; i++)\n      product *= L.get(i, i) * U.get(i, i);\n\n    return P.pop() * product;\n  };\n\n  /**\n   * Gets the trace of the matrix (the sum of all diagonal elements).\n   * @returns {Number} the trace of the matrix\n   **/\n  Matrix.prototype.trace = function () {\n    var diagonal = this.diag(),\n        result = 0,\n        i, l;\n\n    for (i = 0, l = diagonal.length; i < l; i++)\n      result += diagonal.get(i);\n\n    return result;\n  };\n\n  /**\n   * Static method. Checks the equality of two matrices `a` and `b`.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Boolean} `true` if equal, `false` otherwise\n   **/\n  Matrix.equals = function (a, b) {\n    return a.equals(b);\n  };\n\n  /**\n   * Checks the equality of `matrix` and current matrix.\n   * @param {Matrix} matrix\n   * @returns {Boolean} `true` if equal, `false` otherwise\n   **/\n  Matrix.prototype.equals = function (matrix) {\n    var r = this.shape[0],\n        c = this.shape[1],\n        d1 = this.data,\n        d2 = matrix.data;\n\n    if (r !== matrix.shape[0] || c !== matrix.shape[1] || this.type !== matrix.type)\n      return false;\n\n    for (var i = 0; i < r * c; i++)\n      if (d1[i] !== d2[i])\n        return false;\n\n    return true;\n  };\n\n  /**\n   * Gets the value of the element in row `i`, column `j` of current matrix\n   * @param {Number} i\n   * @param {Number} j\n   * @returns {Number} the element at row `i`, column `j` of current matrix\n   **/\n  Matrix.prototype.get = function (i, j) {\n    if (i < 0 || j < 0 || i > this.shape[0] - 1 || j > this.shape[1] - 1)\n      throw new Error('index out of bounds');\n\n    return this.data[i*this.shape[1]+j];\n  };\n\n  /**\n   * Sets the element at row `i`, column `j` to value\n   * @param {Number} i\n   * @param {Number} j\n   * @param {Number} value\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.set = function (i, j, value) {\n    if (i < 0 || j < 0 || i > this.shape[0] - 1 || j > this.shape[1] - 1)\n      throw new Error('index out of bounds');\n\n    this.data[i*this.shape[1]+j] = value;\n    return this;\n  };\n\n  /**\n   * Swaps two rows `i` and `j` in a matrix\n   * @param {Number} i\n   * @param {Number} j\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.swap = function (i, j) {\n    if (i < 0 || j < 0 || i > this.shape[0] - 1 || j > this.shape[0] - 1)\n      throw new Error('index out of bounds');\n\n    var c = this.shape[1];\n\n    // copy first row\n    var copy = this.data.slice(i * c, (i + 1) * c);\n    // move second row into first row spot\n    this.data.copyWithin(i * c, j * c, (j + 1) * c);\n    // copy first row back into second row spot\n    this.data.set(copy, j * c);\n\n    return this;\n  };\n\n  /**\n   * Maps a function `callback` to all elements of a copy of current matrix.\n   * @param {Function} callback\n   * @returns {Matrix} the resultant mapped matrix\n   **/\n  Matrix.prototype.map = function (callback) {\n    var r = this.shape[0],\n        c = this.shape[1],\n        data = new this.type(this.data),\n        i;\n\n    for (i = 0; i < r * c; i++)\n      data[i] = callback(data[i], i / c | 0, i % c, data);\n\n    return Matrix.fromTypedArray(data, [r, c]);\n  };\n\n  /**\n   * Functional version of for-looping the elements in a matrix, is\n   * equivalent to `Array.prototype.forEach`.\n   * @param {Function} callback\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.each = function (callback) {\n    var r = this.shape[0],\n        c = this.shape[1],\n        i;\n\n    for (i = 0; i < r * c; i++)\n      callback(this.data[i], i / c | 0, i % c, this.data);\n\n    return this;\n  };\n\n  /**\n   * Converts current matrix into a readable formatted string\n   * @returns {String} a string of the matrix' contents\n   **/\n  Matrix.prototype.toString = function () {\n    var result = [],\n        r = this.shape[0],\n        c = this.shape[1];\n\n    for (var i = 0; i < r; i++)\n      // get string version of current row and store it\n      result.push('[' + this.data.subarray(i * c, (i + 1) * c ).toString() + ']');\n\n    return '[' + result.join(', \\n') + ']';\n  };\n\n  /**\n   * Converts current matrix into a two-dimensional array\n   * @returns {Array} an array of the matrix' contents\n   **/\n  Matrix.prototype.toArray = function () {\n    var result = [],\n        r = this.shape[0],\n        c = this.shape[1];\n\n    for (var i = 0; i < r; i++)\n      // copy current row into a native array and store it\n      result.push(Array.prototype.slice.call(this.data.subarray(i * c, (i + 1) * c)));\n\n    return result;\n  };\n\n  /**\n   * Converts current matrix into a two-dimensional Vector\n   * @returns {Array} a Vector of the matrix' contents\n   **/\n  Matrix.prototype.toVector = function () {\n    var r = this.shape[0],\n        c = this.shape[1];\n\n    if (r !== 1 && c !== 1)\n      throw new Error('invalid matrix shape');\n\n    return new Vector(this.data);\n  };\n\n  module.exports = Matrix;\n}());\n\n},{\"./vector\":3}],2:[function(require,module,exports){\n\n},{}],3:[function(require,module,exports){\n(function () {\n  'use strict';\n\n  /**\n   * @method constructor\n   * @desc Creates a two-dimensional `Vector` from the supplied arguments.\n   **/\n  function Vector (data) {\n    this.type = Float64Array;\n    this.length = 0;\n\n    if (data instanceof Vector) {\n      this.combine(data);\n    } else if (data instanceof Array) {\n      this.data = new this.type(data);\n      this.length = data.length;\n    } else if (data && data.buffer && Object.prototype.toString.call(data.buffer) === '[object ArrayBuffer]') {\n      this.data = data;\n      this.length = data.length;\n      this.type = data.constructor;\n    }\n  }\n\n  /**\n   * Static method. Adds two vectors `a` and `b` together.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Vector} a vector containing the sum of `a` and `b`\n   **/\n  Vector.add = function (a, b) {\n    return new Vector(a).add(b);\n  };\n\n  /**\n   * Adds `vector` to the current vector.\n   * @param {Vector} vector\n   * @returns {Vector} this\n   **/\n  Vector.prototype.add = function (vector) {\n    var l1 = this.length,\n        l2 = vector.length;\n    if (l1 !== l2)\n      throw new Error('sizes do not match!');\n    if (!l1 && !l2)\n      return this;\n\n    var i;\n    for (i = 0; i < l1; i++)\n      this.data[i] += vector.data[i];\n\n    return this;\n  };\n\n  /**\n   * Static method. Subtracts the vector `b` from vector `a`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Vector} a vector containing the difference between `a` and `b`\n   **/\n  Vector.subtract = function (a, b) {\n    return new Vector(a).subtract(b);\n  };\n\n  /**\n   * Subtracts `vector` from the current vector.\n   * @param {Vector} vector\n   * @returns {Vector} this\n   **/\n  Vector.prototype.subtract = function (vector) {\n    var l1 = this.length,\n        l2 = vector.length;\n    if (l1 !== l2)\n      throw new Error('sizes do not match');\n\n    if (!l1 && !l2)\n      return this;\n\n    var i;\n    for (i = 0; i < l1; i++)\n      this.data[i] += vector.data[i];\n\n    return this;\n  };\n\n  /**\n   * Static method. Multiplies all elements of `vector` with a specified `scalar`.\n   * @param {Vector} vector\n   * @param {Number} scalar\n   * @returns {Vector} a resultant scaled vector\n   **/\n  Vector.scale = function (vector, scalar) {\n    return new Vector(vector).scale(scalar);\n  };\n\n  /**\n   * Multiplies all elements of current vector with a specified `scalar`.\n   * @param {Number} scalar\n   * @returns {Vector} this\n   **/\n  Vector.prototype.scale = function (scalar) {\n    var i;\n    for (i = this.length - 1; i >= 0; i--)\n      this.data[i] *= scalar;\n\n    return this;\n  };\n\n  /**\n   * Static method. Normalizes `vector`, i.e. divides all elements with the magnitude.\n   * @param {Vector} vector\n   * @returns {Vector} a resultant normalized vector\n   **/\n  Vector.normalize = function (vector) {\n    return new Vector(vector).normalize();\n  };\n\n  /**\n   * Normalizes current vector.\n   * @returns {Vector} a resultant normalized vector\n   **/\n  Vector.prototype.normalize = function () {\n    return this.scale(1 / this.magnitude());\n  };\n\n  /**\n   * Static method. Projects the vector `a` onto the vector `b` using\n   * the projection formula `(b * (a * b / b * b))`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Vector} a new resultant projected vector\n   **/\n  Vector.project = function (a, b) {\n    return a.project(new Vector(b));\n  };\n\n  /**\n   * Projects the current vector onto `vector` using\n   * the projection formula `(b * (a * b / b * b))`.\n   * @param {Vector} vector\n   * @returns {Vector} `vector`\n   **/\n  Vector.prototype.project = function (vector) {\n    return vector.scale(this.dot(vector) / vector.dot(vector));\n  };\n\n  /**\n   * Static method. Creates a vector containing zeros (`0`) of `count` size, takes\n   * an optional `type` argument which should be an instance of `TypedArray`.\n   * @param {Number} count\n   * @param {TypedArray} type\n   * @returns {Vector} a new vector of the specified size and `type`\n   **/\n  Vector.zeros = function (count, type) {\n    if (count < 0)\n      throw new Error('invalid size');\n    else if (count === 0)\n      return new Vector();\n\n    type = type ? type : Float64Array;\n    var data = new type(count),\n        i;\n\n    for (i = 0; i < count; i++)\n      data[i] = +0.0;\n\n    return new Vector(data);\n  };\n\n  /**\n   * Static method. Creates a vector containing ones (`1`) of `count` size, takes\n   * an optional `type` argument which should be an instance of `TypedArray`.\n   * @param {Number} count\n   * @param {TypedArray} type\n   * @returns {Vector} a new vector of the specified size and `type`\n   **/\n  Vector.ones = function (count, type) {\n    if (count < 0)\n      throw new Error('invalid size');\n    else if (count === 0)\n      return new Vector();\n\n    type = type ? type : Float64Array;\n    var data = new type(count),\n        i;\n\n    for (i = 0; i < count; i++)\n      data[i] = 1;\n\n    return new Vector(data);\n  };\n\n  /**\n   * Static method. Creates a vector containing a range (can be either ascending or descending)\n   * of numbers specified by the arguments provided (e.g. `Vector.range(0, .5, 2)`\n   * gives a vector containing all numbers in the interval `[0, 2)` separated by\n   * steps of `0.5`), takes an optional `type` argument which should be an instance of\n   * `TypedArray`.\n   * @param {Number} start\n   * @param {Number} step - optional\n   * @param {Number} end\n   * @returns {Vector} a new vector containing the specified range of the specified `type`\n   **/\n  Vector.range = function () {\n    var args = [].slice.call(arguments, 0),\n        backwards = false,\n        start, step, end;\n\n    var type = Float64Array;\n    if (typeof args[args.length - 1] === 'function')\n      type = args.pop();\n\n    switch(args.length) {\n      case 2:\n        end = args.pop();\n        step = 1;\n        start = args.pop();\n        break;\n      case 3:\n        end = args.pop();\n        step = args.pop();\n        start = args.pop();\n        break;\n      default:\n        throw new Error('invalid range');\n    }\n\n    if (end - start < 0) {\n      var copy = end;\n      end = start;\n      start = copy;\n      backwards = true;\n    }\n\n    if (step > end - start)\n      throw new Error('invalid range');\n\n    var data = new type(Math.ceil((end - start) / step)),\n        i, j;\n    for (i = start, j = 0; i < end; i += step, j++)\n      data[j] = backwards ? end - i + start : i;\n\n    return new Vector(data);\n  };\n\n  /**\n   * Static method. Creates a vector of `count` elements containing random\n   * values between `0` and `1`, takes an optional `type` argument which\n   * should be an instance of `TypedArray`.\n   * @param {Number} count\n   * @param {TypedArray} type\n   * @returns {Vector} a new vector of the specified size and `type`\n   **/\n  Vector.random = function (count, type) {\n    type = type ? type : Float64Array;\n    var data = new type(count),\n        i;\n\n    for (i = 0; i < count; i++)\n      data[i] = Math.random();\n\n    return new Vector(data);\n  };\n\n  /**\n   * Static method. Performs dot multiplication with two vectors `a` and `b`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Number} the dot product of the two vectors\n   **/\n  Vector.dot = function (a, b) {\n    return a.dot(b);\n  };\n\n  /**\n   * Performs dot multiplication with current vector and `vector`\n   * @param {Vector} vector\n   * @returns {Number} the dot product of the two vectors\n   **/\n  Vector.prototype.dot = function (vector) {\n    if (this.length !== vector.length)\n      throw new Error('sizes do not match');\n\n    var a = this.data,\n        b = vector.data,\n        result = 0,\n        i, l;\n\n    for (i = 0, l = this.length; i < l; i++)\n      result += a[i] * b[i];\n\n    return result;\n  };\n\n  /**\n   * Calculates the magnitude of a vector (also called L2 norm or Euclidean length).\n   * @returns {Number} the magnitude (L2 norm) of the vector\n   **/\n  Vector.prototype.magnitude = function () {\n    if (!this.length)\n      return 0;\n\n    var result = 0,\n        data = this.data,\n        i, l;\n    for (i = 0, l = this.length; i < l; i++)\n      result += data[i] * data[i];\n\n    return Math.sqrt(result);\n  };\n\n  /**\n   * Static method. Determines the angle between two vectors `a` and `b`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Number} the angle between the two vectors in radians\n   **/\n  Vector.angle = function (a, b) {\n    return a.angle(b);\n  };\n\n  /**\n   * Determines the angle between the current vector and `vector`.\n   * @param {Vector} vector\n   * @returns {Number} the angle between the two vectors in radians\n   **/\n  Vector.prototype.angle = function (vector) {\n    return Math.acos(this.dot(vector) / this.magnitude() * vector.magnitude());\n  };\n\n  /**\n   * Static method. Checks the equality of two vectors `a` and `b`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Boolean} `true` if the two vectors are equal, `false` otherwise\n   **/\n  Vector.equals = function (a, b) {\n    return a.equals(b);\n  };\n\n  /**\n   * Checks the equality of the current vector and `vector`.\n   * @param {Vector} vector\n   * @returns {Boolean} `true` if the two vectors are equal, `false` otherwise\n   **/\n  Vector.prototype.equals = function (vector) {\n    if (this.length !== vector.length)\n      return false;\n\n    var a = this.data,\n        b = vector.data,\n        i = 0, l = this.length;\n\n    while(i < l && a[i] === b[i]) { i++; }\n\n    return i === l;\n  };\n\n  /**\n   * Gets the element at `index` from current vector.\n   * @param {Number} index\n   * @returns {Number} the element at `index`\n   **/\n  Vector.prototype.get = function (index) {\n    if (index < 0 || index > this.length - 1)\n      throw new Error('index out of bounds');\n\n    return this.data[index];\n  };\n\n  /**\n   * Gets the minimum value (smallest) element of current vector.\n   * @returns {Number} the smallest element of the current vector\n   **/\n  Vector.prototype.min = function () {\n    var min = Number.POSITIVE_INFINITY,\n        data = this.data,\n        value,\n        i, l;\n\n    for (i = 0, l = data.length; i < l; i++) {\n      value = data[i];\n      if (value < min)\n        min = value;\n    }\n\n    return min;\n  };\n\n  /**\n   * Gets the maximum value (largest) element of current vector.\n   * @returns {Number} the largest element of current vector\n   **/\n  Vector.prototype.max = function () {\n    var max = Number.NEGATIVE_INFINITY,\n        data = this.data,\n        value,\n        i, l;\n\n    for (i = 0, l = this.length; i < l; i++) {\n      value = data[i];\n      if (value > max)\n        max = value;\n    }\n\n    return max;\n  };\n\n  /**\n   * Sets the element at `index` to `value`.\n   * @param {Number} index\n   * @param {Number} value\n   * @returns {Vector} this\n   **/\n  Vector.prototype.set = function (index, value) {\n    if (index < 0 || index > this.length - 1)\n      throw new Error('index out of bounds');\n\n    this.data[index] = value;\n    return this;\n  };\n\n  /**\n   * Static method. Combines two vectors `a` and `b` (appends `b` to `a`).\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Vector} `b` appended to vector `a`\n   **/\n  Vector.combine = function (a, b) {\n    return new Vector(a).combine(b);\n  };\n\n  /**\n   * Combines the current vector with `vector`\n   * @param {Vector} vector\n   * @returns {Vector} `vector` combined with current vector\n   **/\n  Vector.prototype.combine = function (vector) {\n    if (!vector.length)\n      return this;\n    if (!this.length) {\n      this.data = new vector.type(vector.data);\n      this.length = vector.length;\n      this.type = vector.type;\n      return this;\n    }\n\n    var l1 = this.length,\n        l2 = vector.length,\n        d1 = this.data,\n        d2 = vector.data;\n\n    var data = new this.type(l1 + l2);\n    data.set(d1);\n    data.set(d2, l1);\n\n    this.data = data;\n    this.length = l1 + l2;\n\n    return this;\n  };\n\n  /**\n   * Pushes a new `value` into current vector.\n   * @param {Number} value\n   * @returns {Vector} `this`\n   **/\n  Vector.prototype.push = function (value) {\n    return this.combine(new Vector([value]));\n  };\n\n  /**\n   * Maps a function `callback` to all elements of current vector.\n   * @param {Function} callback\n   * @returns {Vector} `this`\n   **/\n  Vector.prototype.map = function (callback) {\n    var i;\n    for (i = 0; i < this.length; i++)\n      this.data[i] = callback(this.data[i]);\n\n    return this;\n  };\n\n  /**\n   * Functional version of for-looping the vector, is equivalent\n   * to `Array.prototype.forEach`.\n   * @param {Function} callback\n   * @returns {Vector} `this`\n   **/\n  Vector.prototype.each = function (callback) {\n    var i;\n    for (i = 0; i < this.length; i++)\n      callback(this.data[i], i);\n\n    return this;\n  };\n\n  /**\n   * Converts current vector into a readable formatted string.\n   * @returns {String} a string of the vector's contents\n   **/\n  Vector.prototype.toString = function () {\n    var result = '',\n        i;\n    for (i = 0; i < this.length; i++)\n      result += i > 0 ? ', ' + this.data[i] : this.data[i];\n\n    return '[' + result + ']';\n  };\n\n  /**\n   * Converts current vector into a JavaScript array.\n   * @returns {Array} an array containing all elements of current vector\n   **/\n  Vector.prototype.toArray = function () {\n    if (!this.data)\n      return [];\n\n    return Array.prototype.slice.call(this.data);\n  };\n\n  module.exports = Vector;\n})();\n\n},{}],4:[function(require,module,exports){\n(function () {\n  'use strict';\n\n  var Vector = require('./vector'),\n      Matrix = require('./matrix');\n  try {\n    var nblas = require('nblas');\n  } catch (error) {\n    module.exports.Vector = Vector;\n    module.exports.Matrix = Matrix;\n    return;\n  }\n\n  // BLAS optimizations\n  Vector.prototype.add =\n  Matrix.prototype.add = function (data) {\n    var l1 = this instanceof Vector ? this.length : this.shape[0] * this.shape[1],\n        l2 = data instanceof Vector ? data.length : data.shape[0] * data.shape[1];\n    if (l1 !== l2)\n      throw new Error('sizes do not match!');\n    if (!l1 && !l2)\n      return this;\n\n    nblas.axpy(data.data, this.data);\n    return this;\n  };\n\n  Vector.prototype.subtract =\n  Matrix.prototype.subtract = function (data) {\n    var l1 = this instanceof Vector ? this.length : this.shape[0] * this.shape[1],\n        l2 = data instanceof Vector ? data.length : data.shape[0] * data.shape[1];\n    if (l1 !== l2)\n      throw new Error('sizes do not match!');\n    if (!l1 && !l2)\n      return this;\n\n    nblas.axpy(data.data, this.data, -1);\n    return this;\n  };\n\n  Vector.prototype.scale =\n  Matrix.prototype.scale = function (scalar) {\n    nblas.scal(this.data, scalar);\n    return this;\n  };\n\n  Vector.prototype.dot = function (vector) {\n    if (this.length !== vector.length)\n      throw new Error('sizes do not match!');\n\n    return nblas.dot(this.data, vector.data);\n  };\n\n  Vector.prototype.magnitude = function () {\n    if (!this.length)\n      return 0;\n\n    return nblas.nrm2(this.data);\n  };\n\n  Vector.prototype.max = function() {\n    return this.data[nblas.idamax(this.length, this.data, 1)];\n  };\n\n  module.exports.Vector = Vector;\n  module.exports.Matrix = Matrix;\n}());\n\n},{\"./matrix\":1,\"./vector\":3,\"nblas\":2}]},{},[4])(4)\n});"],"sourceRoot":"/source/"}