{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","matrix.js","vectorious.js","vector.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","Matrix","self","this","rows","argument","arguments","j","augment","Vector","push","zeros","construct","add","b","prototype","matrix","subtract","scale","scalar","row","ones","multiply","copy","sum","k","get","set","transpose","gauss","reduce","argmax","max","Math","min","abs","swap","pivot","combine","identity","size","diag","elements","trace","diagonal","result","equals","value","map","callback","each","toString","join","toArray","./vector.js",2,"values","Function","args","object","Object","create","apply","vector","normalize","project","magnitude","cos","dot","count","range","start","step","end","slice","backwards","pop","sqrt","angle","acos","index",3,"./matrix.js"],"mappings":"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","file":"vectorious.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function() {\n  'use strict';\n  \n  var Vector = require('./vector.js');\n  \n  function Matrix() {\n    var self = this;\n    self.rows = [];\n    \n    var argument,\n        i;\n    for(i = 0; i < arguments.length; i++) {\n      argument = arguments[i];\n      var j;\n      if(argument instanceof Matrix) {\n        self.augment(argument);\n      } else if(argument instanceof Vector) {\n        self.rows.push(argument);\n      } else if(typeof argument === 'number') {\n        for(j = 0; j < argument; j++)\n          self.rows.push(new Vector().zeros(argument));\n      } else if(typeof argument === 'object') {\n        for(j = 0; j < argument.length; j++) {\n          if(argument[j] instanceof Vector)\n            self.rows.push(argument[j]);\n          else\n            self.rows.push(Vector.construct(argument[j]));\n        }\n      }\n    }\n    \n    return self;\n  }\n  \n  Matrix.add = function(a, b) {\n    return new Matrix(a).add(b);\n  };\n\n  Matrix.prototype.add = function(matrix) {\n    var i;\n    for(i = 0; i < this.rows.length; i++)\n      this.rows[i].add(matrix.rows[i]);\n    \n    return this;\n  };\n  \n  Matrix.subtract = function(a, b) {\n    return new Matrix(a).subtract(b);\n  };\n  \n  Matrix.prototype.subtract = function(matrix) {\n    var i;\n    for(i = 0; i < this.rows.length; i++)\n      this.rows[i].subtract(matrix.rows[i]);\n    \n    return this;\n  };\n  \n  Matrix.prototype.scale = function(scalar) {\n    var i;\n    for(i = 0; i < this.rows.length; i++)\n      this.rows[i].scale(scalar);\n    \n    return this;\n  };\n  \n  Matrix.prototype.zeros = function(i, j) {\n    var rows = [],\n        row;\n    for(var row = 0; row < i; row++)\n      rows.push(new Vector().zeros(j));\n    \n    return Matrix.construct(rows);\n  };\n  \n  Matrix.prototype.ones = function(i, j) {\n    var rows = [],\n        row;\n    for(row = 0; row < i; row++)\n      rows.push(new Vector().ones(j));\n    \n    return Matrix.construct(rows);\n  };\n  \n  Matrix.prototype.multiply = function(matrix) {\n    if(this.rows[0].length !== matrix.rows.length)\n      throw 'Error: sizes do not match!';\n    \n    var copy = new Matrix().zeros(this.rows.length, matrix.rows[0].length);\n    \n    var sum = 0;\n    for(var i = 0; i < this.rows.length; i++) {\n      for(var j = 0; j < matrix.rows[0].length; j++) {\n        sum = 0;\n        for(var k = 0; k < this.rows[0].length; k++)\n          sum += this.get(i, k) * matrix.get(k, j);\n        \n        copy.set(i, j, sum);\n      }\n    }\n    \n    return copy;\n  };\n  \n  Matrix.prototype.transpose = function() {\n    var matrix = new Matrix().zeros(this.rows[0].length, this.rows.length);\n    var i, j;\n    for(i = 0; i < this.rows.length; i++)\n      for(j = 0; j < this.rows[0].length; j++)\n        matrix.set(j, i, this.get(i, j));\n    \n    return matrix;\n  };\n  \n  Matrix.prototype.gauss = function(reduce) {\n    var n = Math.min(this.rows.length, this.rows[0].length),\n        copy,\n        argmax,\n        max,\n        i, j, k;\n    \n    for(k = 0; k < n; k++) {\n      argmax = 0;\n      max = 0;\n      \n      for(i = k; i < n; i++) {\n        copy = Math.abs(this.get(k, i));\n        if(copy > max) {\n          argmax = i;\n          max = copy;\n        }\n      }\n      \n      if(this.get(argmax, k) === 0)\n        throw 'Error: this is singular!';\n      \n      this.swap(k, argmax);\n      \n      for(i = k + 1; i < n; i++) {\n        for(j = k + 1; j < n; j++)\n          this.set(i, j, this.get(i, j) - this.get(k, j) * (this.get(i, k) / this.get(k, k)));\n          \n        this.set(i, k, 0);\n      }\n    }\n    \n    if(reduce) {\n      var pivot = 0;\n      \n      for(k = this.rows.length - 1; k >= 0; k--) {\n        for(i = 0; i < this.rows[0].length; i++) {\n          copy = this.get(k, i);\n\n          if(!pivot && copy !== 0)\n            pivot = copy;\n        }\n\n        if(k > 0)\n          this.rows[k - 1] = this.rows[k - 1].scale(1 / pivot);\n        \n        this.rows[k] = this.rows[k].scale(1 / pivot);\n\n        pivot = 0;\n      }\n    }\n    \n    return this;\n  };\n  \n  Matrix.augment = function(a, b) {\n    return new Matrix(a).augment(b);\n  };\n\n  Matrix.prototype.augment = function(matrix) {\n    var i;\n    for(i = 0; i < matrix.rows.length; i++) {\n      if(!(this.rows[i] instanceof Vector))\n        this.rows[i] = new Vector();\n      \n      this.rows[i].combine(matrix.rows[i]);\n    }\n    \n    return this;\n  };\n  \n  Matrix.prototype.identity = function(size) {\n    var matrix = new Matrix().zeros(size, size),\n        i, j;\n    for(i = 0; i < size; i++)\n      for(j = 0; j < size; j++)\n        if(i === j)\n          matrix.set(i, j, 1);\n    \n    return matrix;\n  };\n\n  Matrix.prototype.diag = function() {\n    var elements = [],\n        i, j;\n    \n    for(i = 0; i < this.rows.length; i++)\n      for(j = 0; j < this.rows[0].length; j++)\n        if(i === j)\n          elements.push(this.get(i, j));\n    \n    return Vector.construct(elements);\n  };\n\n  Matrix.prototype.trace = function() {\n    var diagonal = this.diag(),\n        result = 0,\n        i;\n    \n    for(i = 0; i < diagonal.length; i++)\n      result += diagonal.get(i);\n    \n    return result;\n  };\n\n  Matrix.prototype.equals = function(matrix) {\n    if(this.rows.length !== matrix.rows.length)\n      return false;\n    \n    var i;\n    for(i = 0; i < this.rows.length; i++)\n      if(!this.rows[i].equals(matrix.rows[i]))\n        return false;\n    \n    return true;\n    return this.rows\n      .map(function(vector, index) {\n        return vector.equals(matrix.rows[index]);\n      })\n      .reduce(function(previous, current) {\n        return previous === current;\n      });\n  };\n\n  Matrix.prototype.get = function(i, j) {\n    return this.rows[i].get(j);\n  };\n      \n  Matrix.prototype.set = function(i, j, value) {\n    this.rows[i].set(j, value);\n    return this;\n  };\n  \n  Matrix.prototype.swap = function(i, j) {\n    if(i < 0 || j < 0 || i > this.rows.length - 1 || j > this.rows.length - 1)\n      throw 'Error: index out of bounds!';\n    \n    var copy = this.rows[i];\n    this.rows[i] = this.rows[j];\n    this.rows[j] = copy;\n    \n    return this;\n  };\n  \n  Matrix.prototype.map = function(callback) {\n    var i;\n    for(i = 0; i < this.rows.length; i++)\n      this.rows[i] = callback(this.rows[i]);\n    \n    return this;\n  };\n  \n  Matrix.prototype.each = function(callback) {\n    var i;\n    for(i = 0; i < this.rows.length; i++)\n      callback(this.rows[i], i);\n    \n    return this;\n  };\n  \n  Matrix.prototype.toString = function() {\n    var result = [],\n        i;\n    for(i = 0; i < this.rows.length; i++)\n      result.push(this.rows[i].toString());\n    \n    return '[' + result.join(', \\n') + ']';\n  };\n  \n  Matrix.prototype.toArray = function() {\n    var result = [],\n        i;\n    for(i = 0; i < this.rows.length; i++)\n      result.push(this.rows[i].toArray());\n    \n    return result;\n  };\n  \n  module.exports = Matrix;\n})();","(function() {\n  var Matrix = require('./matrix.js'),\n      Vector = require('./vector.js');\n  \n  module.exports.Matrix = Matrix;\n  module.exports.Vector = Vector;\n})();","(function() {\n  'use strict';\n  \n  function Vector() {\n    var self = this;\n    self.values = [];\n    self.length = 0;\n    \n    var argument,\n        i;\n    for(i = 0; i < arguments.length; i++) {\n      argument = arguments[i];\n    \n      if(argument instanceof Vector)\n        self.combine(argument);\n      else\n        self.push(argument);\n    }\n    \n    return self;\n  }\n  \n  // array of arguments to function arguments (e.g. f.construct([a, b, c]) => f(a, b, c))\n  Function.prototype.construct = function(args) {\n    var object = Object.create(this.prototype);\n    this.apply(object, args);\n    return object;\n  };\n  \n  Vector.add = function(a, b) {\n    return new Vector(a).add(b);\n  };\n  \n  Vector.prototype.add = function(vector) {\n    if(this.length !== vector.length)\n      throw 'Error: sizes do not match!';\n    \n    var i;\n    for(i = 0; i < this.length; i++)\n      this.values[i] += vector.values[i];\n    \n    return this;\n  };\n  \n  Vector.subtract = function(a, b) {\n    return new Vector(a).subtract(b);\n  };\n  \n  Vector.prototype.subtract = function(vector) {\n    if(this.length !== vector.length)\n      throw 'Error: sizes do not match!';\n    \n    var i;\n    for(i = 0; i < this.length; i++)\n      this.values[i] -= vector.values[i];\n    \n    return this;\n  };\n  \n  Vector.prototype.scale = function(scalar) {\n    var i;\n    for(i = 0; i < this.length; i++)\n      this.values[i] *= scalar;\n    \n    return this;\n  };\n  \n  Vector.prototype.normalize = function() {\n    return this.scale(1 / this.length);\n  };\n  \n  Vector.project = function(a, b) {\n    return new Vector(a).project(b);\n  };\n  \n  Vector.prototype.project = function(vector) {\n    return vector\n      .normalize()\n      .scale(this.magnitude() * Math.cos(this.dot(vector) / (this.magnitude() * vector.magnitude())));\n  };\n  \n  Vector.prototype.zeros = function(count) {\n    var zeros = [],\n        i;\n    for(i = 0; i < count; i++)\n      zeros.push(0);\n    \n    return Vector.construct(zeros);\n  };\n  \n  Vector.prototype.ones = function(count) {\n    var ones = [],\n        i;\n    for(i = 0; i < count; i++)\n      ones.push(1);\n    \n    return Vector.construct(ones);\n  };\n  \n  Vector.range = Vector.prototype.range = function() {\n    var args = [].slice.call(arguments, 0),\n        backwards = false,\n        start, step, end;\n    \n    switch(args.length) {\n      case 2:\n        end = args.pop();\n        step = 1;\n        start = args.pop();\n        break;\n      case 3:\n        end = args.pop();\n        step = args.pop();\n        start = args.pop();\n        break;\n      default:\n        throw 'Error: invalid range!';\n    }\n    \n    if(end - start < 0) {\n      var copy = end;\n      end = start;\n      start = copy;\n      backwards = true;\n    }\n    \n    if(step > end - start)\n      throw 'Error: invalid range!';\n    \n    var vector = new Vector(),\n        i;\n    for(i = start; i < end; i += step)\n      vector.push(backwards ? end - i + start : i);\n    \n    return vector;\n  };\n\n  Vector.prototype.dot = function(vector) {\n    if(this.length !== vector.length)\n      throw 'Error: sizes do not match!';\n    \n    var result = 0,\n        i;\n    for(i = 0; i < this.length; i++)\n      result += this.values[i] * vector.values[i];\n    \n    return result;\n  };\n  \n  Vector.prototype.magnitude = function() {\n    var result = 0,\n        i;\n    for(i = 0; i < this.length; i++)\n      result += this.values[i] * this.values[i];\n    \n    return Math.sqrt(result);\n  };\n  \n  Vector.prototype.angle = function(vector) {\n    return Math.acos(this.dot(vector) / this.magnitude() * vector.magnitude());\n  };\n\n  Vector.prototype.equals = function(vector) {\n    if(this.length !== vector.length)\n      return false;\n    \n    var i;\n    for(i = 0; i < this.length; i++)\n      if(this.values[i] !== vector.values[i])\n        return false;\n    \n    return true;\n  };\n\n  Vector.prototype.get = function(index) {\n    if(index < 0 || index > this.length - 1)\n      throw 'Error: index out of bounds!';\n    \n    return this.values[index];\n  };\n  \n  Vector.prototype.min = function() {\n    var min, value,\n        i;\n    \n    for(i = 0; i < this.length; i++) {\n      value = this.values[i];\n      \n      if(!min)\n        min = value;\n      else\n        min = value < min ? value : min;\n    }\n    \n    return min;\n  };\n  \n  Vector.prototype.max = function() {\n    var max, value,\n        i;\n    for(i = 0; i < this.length; i++) {\n      value = this.values[i];\n      \n      if(!max)\n        max = value;\n      else\n        max = value > max ? value : max;\n    }\n    \n    return max;\n  };\n  \n  Vector.prototype.set = function(index, value) {\n    this.values[index] = value;\n    return this;\n  };\n  \n  Vector.prototype.combine = function(vector) {\n    var i;\n    for(i = 0; i < vector.length; i++)\n      this.push(vector.values[i]);\n    \n    return this;\n  };\n  \n  Vector.prototype.push = function(value) {\n    this.values.push(value);\n    this.length++;\n    \n    return this;\n  };\n  \n  Vector.prototype.map = function(callback) {\n    var i;\n    for(i = 0; i < this.length; i++)\n      this.values[i] = callback(this.values[i]);\n    \n    return this;\n  };\n  \n  Vector.prototype.each = function(callback) {\n    var i;\n    for(i = 0; i < this.length; i++)\n      callback(this.values[i], i);\n    \n    return this;\n  };\n\n  Vector.prototype.toString = function() {\n    return '[' + this.values.join(', ') + ']';\n  };\n  \n  Vector.prototype.toArray = function() {\n    return this.values;\n  };\n  \n  module.exports = Vector;\n})();"],"sourceRoot":"/source/"}