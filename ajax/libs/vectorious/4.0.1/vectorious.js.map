{"version":3,"sources":["vectorious-4.0.0.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","vectorious","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"Matrix","Vector","./matrix.js","./vector.js",2,"data","options","type","Float64Array","shape","buffer","Object","prototype","toString","constructor","fromArray","nblas","error","fromTypedArray","create","array","c","ii","jj","add","b","matrix","d1","d2","Float32Array","axpy","subtract","scale","scalar","scal","zeros","j","fill","k","ones","random","map","Math","multiply","r1","c1","r2","c2","out","sum","kk","gemm","transpose","tmp","inverse","m","identity","augmented","augment","gauss","left","right","set","get","equals","pivot","leadValue","copy","lead","swap","pivotize","row","result","sign","abs","lu","L","U","P","A","size","magic","x","y","diag","min","determinant","pop","product","trace","diagonal","value","slice","copyWithin","callback","each","forEach","push","subarray","join","toArray","Array","toVector","./vector",3,4,"combine","vector","l1","l2","normalize","magnitude","project","dot","count","range","start","step","end","args","arguments","backwards","ceil","nrm2","values","sqrt","angle","acos","index","Number","POSITIVE_INFINITY","max","idamax","isamax","NEGATIVE_INFINITY"],"mappings":"CAAA,SAAUA,GAAG,GAAoB,gBAAVC,UAAoC,mBAATC,QAAsBA,OAAOD,QAAQD,QAAS,IAAmB,kBAATG,SAAqBA,OAAOC,IAAKD,UAAUH,OAAO,CAAC,GAAIK,EAAkCA,GAAb,mBAATC,QAAwBA,OAA+B,mBAATC,QAAwBA,OAA6B,mBAAPC,MAAsBA,KAAYC,KAAKJ,EAAEK,WAAaV,MAAO,WAAqC,MAAO,SAAUW,GAAEC,EAAEC,EAAEC,GAAG,QAASC,GAAEC,EAAEC,GAAG,IAAIJ,EAAEG,GAAG,CAAC,IAAIJ,EAAEI,GAAG,CAAC,GAAIE,GAAkB,kBAATC,UAAqBA,OAAQ,KAAIF,GAAGC,EAAE,MAAOA,GAAEF,GAAE,EAAI,IAAGI,EAAE,MAAOA,GAAEJ,GAAE,EAAI,IAAIhB,GAAE,GAAIqB,OAAM,uBAAuBL,EAAE,IAAK,MAAMhB,GAAEsB,KAAK,mBAAmBtB,EAAE,GAAIuB,GAAEV,EAAEG,IAAIf,WAAYW,GAAEI,GAAG,GAAGQ,KAAKD,EAAEtB,QAAQ,SAASU,GAAG,GAAIE,GAAED,EAAEI,GAAG,GAAGL,EAAG,OAAOI,GAAEF,EAAEA,EAAEF,IAAIY,EAAEA,EAAEtB,QAAQU,EAAEC,EAAEC,EAAEC,GAAG,MAAOD,GAAEG,GAAGf,QAAkD,IAAI,GAA1CmB,GAAkB,kBAATD,UAAqBA,QAAgBH,EAAE,EAAEA,EAAEF,EAAEW,OAAOT,IAAID,EAAED,EAAEE,GAAI,OAAOD,KAAKW,GAAG,SAASP,EAAQjB,EAAOD,IACz0B,WACE,YAEA,IAAI0B,GAASR,EAAQ,eACjBS,EAAST,EAAQ,cAErBjB,GAAOD,QAAQ0B,OAASA,EACxBzB,EAAOD,QAAQ2B,OAASA,OAGvBC,cAAc,EAAEC,cAAc,IAAIC,GAAG,SAASZ,EAAQjB,EAAOD,IAChE,WACE,YAaA,SAAS0B,GAAQK,EAAMC,GAIrB,GAHAxB,KAAKyB,KAAOC,aACZ1B,KAAK2B,SAEDJ,GAAQA,EAAKK,UAAYL,YAAgBJ,KACO,yBAAhDU,OAAOC,UAAUC,SAAShB,KAAKQ,EAAKK,SACpCJ,EAAQG,MAAO,CACjB,GAAIJ,EAAKP,SAAWQ,EAAQG,MAAM,GAAKH,EAAQG,MAAM,GACnD,KAAM,IAAIf,OAAM,+CAElBZ,MAAK2B,MAAQH,EAAQG,MACrB3B,KAAKuB,KAAOA,EACZvB,KAAKyB,KAAOF,EAAKS,gBACZ,CAAA,GAA6C,mBAAzCH,OAAOC,UAAUC,SAAShB,KAAKQ,GACxC,MAAOL,GAAOe,UAAUV,EACfA,aAAgBJ,IACzBnB,KAAK2B,MAAQH,GAAWA,EAAQG,MAAQH,EAAQG,OAASJ,EAAKP,OAAQ,GACtEhB,KAAKuB,KAAO,GAAIA,GAAKE,KAAKF,EAAKA,MAC/BvB,KAAKyB,KAAOF,EAAKE,MACRF,YAAgBL,KACzBlB,KAAK2B,OAASJ,EAAKI,MAAM,GAAIJ,EAAKI,MAAM,IACxC3B,KAAKuB,KAAO,GAAIA,GAAKE,KAAKF,EAAKA,MAC/BvB,KAAKyB,KAAOF,EAAKE,OAjCrB,GAAIN,GAAST,EAAQ,YACjBwB,EAAQ,IAEZ,KACEA,EAAQxB,EAAQ,SAChB,MAAOyB,IAgCTjB,EAAOkB,eAAiB,SAAUb,EAAMI,GACtC,GAAI5B,GAAO8B,OAAOQ,OAAOnB,EAAOY,UAKhC,OAJA/B,GAAK4B,MAAQA,EACb5B,EAAKwB,KAAOA,EACZxB,EAAK0B,KAAOF,EAAKS,YAEVjC,GAGTmB,EAAOe,UAAY,SAAUK,GAC3B,GACIf,GACAgB,EAFAZ,IAIJA,GAAM,GAAKW,EAAMtB,OACjBW,EAAM,GAAKW,EAAM,GAAGtB,OACpBuB,EAAIZ,EAAM,GAEVJ,EAAO,GAAIG,cAAaC,EAAM,GAAGA,EAAM,GAEvC,KAAK,GAAIa,GAAK,EAAGA,EAAKb,EAAM,KAAMa,EAChC,IAAK,GAAIC,GAAK,EAAGA,EAAKd,EAAM,KAAMc,EAChClB,EAAKiB,EAAGD,EAAIE,GAAMH,EAAME,GAAIC,EAEhC,OAAOvB,GAAOkB,eAAeb,EAAMI,IASrCT,EAAOwB,IAAM,SAAUjC,EAAGkC,GACxB,MAAO,IAAIzB,GAAOT,GAAGiC,IAAIC,IAS3BzB,EAAOY,UAAUY,IAAM,SAAUE,GAC/B,GAAIvC,GAAIL,KAAK2B,MAAM,GACfY,EAAIvC,KAAK2B,MAAM,GACfkB,EAAK7C,KAAKuB,KACVuB,EAAKF,EAAOrB,IAEhB,IAAIlB,IAAMuC,EAAOjB,MAAM,IAAMY,IAAMK,EAAOjB,MAAM,GAC9C,KAAM,IAAIf,OAAM,uBAAyBP,EAAI,IAAMkC,EAAI,KAAOK,EAAOjB,MAAM,GAAK,IAAMiB,EAAOjB,MAAM,GAErG,KAAIO,GAAUlC,KAAKyB,OAASC,cAAgB1B,KAAKyB,OAASsB,aAGxD,IAAK,GAAIP,GAAK,EAAQnC,EAALmC,EAAQA,IACvB,IAAK,GAAIC,GAAK,EAAQF,EAALE,EAAQA,IACvBI,EAAGL,EAAGD,EAAIE,IAAOK,EAAGN,EAAGD,EAAIE,OAJ/BP,GAAMc,KAAKF,EAAID,EAOjB,OAAO7C,OASTkB,EAAO+B,SAAW,SAAUxC,EAAGkC,GAC7B,MAAO,IAAIzB,GAAOT,GAAGwC,SAASN,IAShCzB,EAAOY,UAAUmB,SAAW,SAAUL,GAClC,GAAIvC,GAAIL,KAAK2B,MAAM,GACfY,EAAIvC,KAAK2B,MAAM,GACfkB,EAAK7C,KAAKuB,KACVuB,EAAKF,EAAOrB,IAEhB,IAAIlB,IAAMuC,EAAOjB,MAAM,IAAMY,IAAMK,EAAOjB,MAAM,GAC9C,KAAM,IAAIf,OAAM,qBAElB,KAAIsB,GAAUlC,KAAKyB,OAASC,cAAgB1B,KAAKyB,OAASsB,aAGxD,IAAK,GAAIP,GAAK,EAAQnC,EAALmC,EAAQA,IACvB,IAAK,GAAIC,GAAK,EAAQF,EAALE,EAAQA,IACvBI,EAAGL,EAAGD,EAAIE,IAAOK,EAAGN,EAAGD,EAAIE,OAJ/BP,GAAMc,KAAKF,EAAID,EAAI,GAOrB,OAAO7C,OASXkB,EAAOgC,MAAQ,SAAUzC,EAAG0C,GAC1B,MAAO,IAAIjC,GAAOT,GAAGyC,MAAMC,IAQ7BjC,EAAOY,UAAUoB,MAAQ,SAAUC,GACjC,GAAI9C,GAAIL,KAAK2B,MAAM,GACfY,EAAIvC,KAAK2B,MAAM,GACfkB,EAAK7C,KAAKuB,IAEd,KAAIW,GAAUlC,KAAKyB,OAASC,cAAgB1B,KAAKyB,OAASsB,aAGxD,IAAK,GAAIP,GAAK,EAAQnC,EAALmC,EAAQA,IACvB,IAAK,GAAIC,GAAK,EAAQF,EAALE,EAAQA,IACvBI,EAAGL,EAAGD,EAAIE,IAAOU,MAJrBjB,GAAMkB,KAAKP,EAAIM,EAOjB,OAAOnD,OAWTkB,EAAOmC,MAAQ,SAAU1C,EAAG2C,EAAG7B,GAC7B,GAAS,GAALd,GAAe,GAAL2C,EACZ,KAAM,IAAI1C,OAAM,eAElBa,GAAOA,EAAOA,EAAOC,YACrB,IAAIH,GAAO,GAAIE,GAAKd,EAAI2C,EACxB,IAAI/B,EAAKgC,KAEPhC,EAAKgC,KAAK,OAEV,KAAK,GAAIC,GAAI,EAAO7C,EAAI2C,EAARE,EAAWA,IACzBjC,EAAKiC,GAAK,CAGd,OAAOtC,GAAOkB,eAAeb,GAAOZ,EAAG2C,KAWzCpC,EAAOuC,KAAO,SAAU9C,EAAG2C,EAAG7B,GAC5B,GAAS,GAALd,GAAe,GAAL2C,EACZ,KAAM,IAAI1C,OAAM,eAElBa,GAAOA,EAAOA,EAAOC,YACrB,IAAIH,GAAO,GAAIE,GAAKd,EAAI2C,EACxB,IAAI/B,EAAKgC,KAEPhC,EAAKgC,KAAK,OAEV,KAAK,GAAIC,GAAI,EAAO7C,EAAI2C,EAARE,EAAWA,IACzBjC,EAAKiC,GAAK,CAGd,OAAOtC,GAAOkB,eAAeb,GAAOZ,EAAG2C,KAYzCpC,EAAOwC,OAAS,SAAU/C,EAAG2C,EAAG7B,GAC9B,MAAOP,GACJmC,MAAM1C,EAAG2C,EAAG7B,GACZkC,IAAIC,KAAKF,SASdxC,EAAO2C,SAAW,SAAUpD,EAAGkC,GAC7B,MAAOlC,GAAEoD,SAASlB,IASpBzB,EAAOY,UAAU+B,SAAW,SAAUjB,GACpC,GAAIkB,GAAK9D,KAAK2B,MAAM,GAChBoC,EAAK/D,KAAK2B,MAAM,GAChBqC,EAAKpB,EAAOjB,MAAM,GAClBsC,EAAKrB,EAAOjB,MAAM,GAClBkB,EAAK7C,KAAKuB,KACVuB,EAAKF,EAAOrB,IAEhB,IAAIwC,IAAOC,EACT,KAAM,IAAIpD,OAAM,qBAElB,IAAIsD,GAAMhD,EAAOkB,eACf,GAAIpC,MAAKyB,KAAKqC,EAAKG,IAClBH,EAAIG,IAGH1C,EAAO2C,EAAI3C,IACf,KAAIW,GAAUgC,EAAIzC,OAASC,cAAgBwC,EAAIzC,OAASsB,aAGtD,IAAK,GAAIP,GAAK,EAAQsB,EAALtB,EAASA,IACxB,IAAK,GAAIC,GAAK,EAAQwB,EAALxB,EAASA,IAAM,CAE9B,IAAK,GADD0B,GAAM,EACDC,EAAK,EAAQL,EAALK,EAASA,IACxBD,GAAOtB,EAAGL,EAAGuB,EAAGK,GAAMtB,EAAGL,EAAG2B,EAAGH,EAEjC1C,GAAKiB,EAAGyB,EAAGxB,GAAM0B,MARrBjC,GAAMmC,KAAKxB,EAAIC,EAAIvB,EAAMuC,EAAIG,EAAIF,EAanC,OAAOG,IAOThD,EAAOoD,UAAY,SAAU1B,GAC3B,MAAO,IAAI1B,GAAO0B,GAAQ0B,aAO5BpD,EAAOY,UAAUwC,UAAY,WAC3B,GAGI3D,GAAG2C,EAHHjD,EAAIL,KAAK2B,MAAM,GACfY,EAAIvC,KAAK2B,MAAM,EAInB,IAAItB,IAAMkC,EAAG,CACX,IAAK5B,EAAI,EAAON,EAAI,EAARM,EAAWA,IACrB,IAAK2C,EAAI3C,EAAI,EAAON,EAAJiD,EAAOA,IAAK,CAC1B,GAAIiB,GAAMvE,KAAKuB,KAAK+B,EAAIjD,EAAIM,EAC5BX,MAAKuB,KAAK+B,EAAIjD,EAAIM,GAAKX,KAAKuB,KAAKZ,EAAIN,EAAIiD,GACzCtD,KAAKuB,KAAKZ,EAAIN,EAAIiD,GAAKiB,EAG3B,MAAOvE,MAGT,GAAIuB,GAAO,GAAIvB,MAAKyB,KAAKc,EAAIlC,EAC7B,KAAKM,EAAI,EAAON,EAAJM,EAAOA,IACjB,IAAK2C,EAAI,EAAOf,EAAJe,EAAOA,IACjB/B,EAAK+B,EAAIjD,EAAIM,GAAKX,KAAKuB,KAAKZ,EAAI4B,EAAIe,EAExC,OAAOpC,GAAOkB,eAAeb,GAAOgB,EAAGlC,KAQzCa,EAAOY,UAAU0C,QAAU,WACzB,GAAI1D,GAAId,KAAK2B,MAAM,GACf8C,EAAIzE,KAAK2B,MAAM,EAEnB,IAAIb,IAAM2D,EACR,KAAM,IAAI7D,OAAM,qBAElB,IAOID,GAAG2C,EAPHoB,EAAWxD,EAAOwD,SAAS5D,GAC3B6D,EAAYzD,EAAO0D,QAAQ5E,KAAM0E,GACjCG,EAAQF,EAAUE,QAElBC,EAAO5D,EAAOmC,MAAMvC,EAAG2D,GACvBM,EAAQ7D,EAAOmC,MAAMvC,EAAG2D,GACxBrE,EAAIyE,EAAMlD,MAAM,EAEpB,KAAKhB,EAAI,EAAOG,EAAJH,EAAOA,IACjB,IAAK2C,EAAI,EAAOlD,EAAJkD,EAAOA,IACTmB,EAAJnB,EACFwB,EAAKE,IAAIrE,EAAG2C,EAAGuB,EAAMI,IAAItE,EAAG2C,IAE5ByB,EAAMC,IAAIrE,EAAG2C,EAAIxC,EAAG+D,EAAMI,IAAItE,EAAG2C,GAIvC,KAAKwB,EAAKI,OAAOhE,EAAOwD,SAAS5D,IAC/B,KAAM,IAAIF,OAAM,2BAElB,OAAOmE,IAOT7D,EAAOY,UAAU+C,MAAQ,WACvB,GAKIM,GACAxE,EAAG2C,EAAGE,EACN4B,EAPAtE,EAAId,KAAK2B,MAAM,GACf8C,EAAIzE,KAAK2B,MAAM,GAEf0D,EAAO,GAAInE,GAAOlB,MAClBsF,EAAO,CAKX,KAAK3E,EAAI,EAAOG,EAAJH,EAAOA,IAAK,CACtB,GAAS2E,GAALb,EACF,MAAO,IAAI7D,OAAM,qBAGnB,KADA0C,EAAI3C,EAC+B,IAA5B0E,EAAK9D,KAAK+B,EAAImB,EAAIa,IAEvB,GADAhC,IACIxC,IAAMwC,IACRA,EAAI3C,EACJ2E,IAEIb,IAAMa,GACR,MAAO,IAAI1E,OAAM,qBAOvB,IAHAyE,EAAKE,KAAK5E,EAAG2C,GAEb6B,EAAQE,EAAK9D,KAAKZ,EAAI8D,EAAIa,GACZ,IAAVH,EAEF,IAAK3B,EAAI,EAAOiB,EAAJjB,EAAOA,IACjB6B,EAAK9D,KAAMZ,EAAI8D,EAAKjB,GAAK6B,EAAK9D,KAAMZ,EAAI8D,EAAKjB,GAAK2B,CAItD,KAAK7B,EAAI,EAAOxC,EAAJwC,EAAOA,IAEjB,GADA8B,EAAYC,EAAK9D,KAAK+B,EAAImB,EAAIa,GAC1BhC,IAAM3C,EACR,IAAK6C,EAAI,EAAOiB,EAAJjB,EAAOA,IACjB6B,EAAK9D,KAAK+B,EAAImB,EAAIjB,GAAK6B,EAAK9D,KAAK+B,EAAImB,EAAIjB,GAAM6B,EAAK9D,KAAKZ,EAAI8D,EAAIjB,GAAK4B,CAG5EE,KAGF,IAAK3E,EAAI,EAAOG,EAAJH,EAAOA,IAAK,CAEtB,IADAwE,EAAQ,EACH7B,EAAI,EAAOmB,EAAJnB,EAAOA,IACZ6B,IACHA,EAAQE,EAAK9D,KAAKZ,EAAI8D,EAAInB,GAE9B,IAAI6B,EAEF,IAAK3B,EAAI,EAAOiB,EAAJjB,EAAOA,IACjB6B,EAAK9D,KAAMZ,EAAI8D,EAAKjB,GAAK6B,EAAK9D,KAAMZ,EAAI8D,EAAKjB,GAAK2B,EAGxD,MAAOE,IAQTnE,EAAOY,UAAU0D,SAAW,WAC1B,GAGIL,GACAG,EACAG,EAEA9E,EAAG2C,EAPHxC,EAAId,KAAK2B,MAAM,GACf+D,EAASxE,EAAOwD,SAAS5D,GACzB6E,EAAO,CAMX,KAAKhF,EAAI,EAAOG,EAAJH,EAAOA,IAAK,CAItB,IAHAwE,EAAQ,EACRM,EAAM9E,EAED2C,EAAI3C,EAAOG,EAAJwC,EAAOA,IACjBgC,EAAO1B,KAAKgC,IAAI5F,KAAKiF,IAAI3B,EAAG3C,IAChB2E,EAARH,IACFA,EAAQG,EACRG,EAAMnC,EAIN3C,KAAM8E,IACRC,EAAOH,KAAK5E,EAAG8E,GACfE,GAAQ,IAIZ,OAAQD,EAAQC,IAQlBzE,EAAOY,UAAU+D,GAAK,WACpB,GAOIlF,GAAG2C,EAAGE,EAPN1C,EAAId,KAAK2B,MAAM,GAEfmE,EAAI5E,EAAOwD,SAAS5D,GACpBiF,EAAI7E,EAAOmC,MAAMvC,EAAGA,GACpBkF,EAAIhG,KAAKwF,WACTS,EAAI/E,EAAO2C,SAASmC,EAAE,GAAIhG,MAG1BmE,GAAO,EAAG,EAEd,KAAKxD,EAAI,EAAOG,EAAJH,EAAOA,IAAK,CACtB,IAAK2C,EAAI,EAAO3C,EAAI,EAAR2C,EAAWA,IAAK,CAE1B,IADAa,EAAI,GAAK,EACJX,EAAI,EAAOF,EAAJE,EAAOA,IACjBW,EAAI,IAAM4B,EAAEd,IAAIzB,EAAG7C,GAAKmF,EAAEb,IAAI3B,EAAGE,EAEnCuC,GAAEf,IAAI1B,EAAG3C,EAAGsF,EAAEhB,IAAI3B,EAAG3C,GAAKwD,EAAI,IAGhC,IAAKb,EAAI3C,EAAOG,EAAJwC,EAAOA,IAAK,CAEtB,IADAa,EAAI,GAAK,EACJX,EAAI,EAAOF,EAAJE,EAAOA,IACjBW,EAAI,IAAM4B,EAAEd,IAAIzB,EAAG7C,GAAKmF,EAAEb,IAAI3B,EAAGE,EAEnCsC,GAAEd,IAAI1B,EAAG3C,GAAIsF,EAAEhB,IAAI3B,EAAG3C,GAAKwD,EAAI,IAAM4B,EAAEd,IAAItE,EAAGA,KAIlD,OAAQmF,EAAGC,EAAGC,IAUhB9E,EAAO0D,QAAU,SAAUnE,EAAGkC,GAC5B,MAAO,IAAIzB,GAAOT,GAAGmE,QAAQjC,IAQ/BzB,EAAOY,UAAU8C,QAAU,SAAUhC,GACnC,GAA4B,IAAxBA,EAAOjB,MAAMX,OAChB,MAAOhB,KAER,IAMIW,GAAG2C,EANHQ,EAAK9D,KAAK2B,MAAM,GAChBoC,EAAK/D,KAAK2B,MAAM,GAChBqC,EAAKpB,EAAOjB,MAAM,GAClBsC,EAAKrB,EAAOjB,MAAM,GAClBkB,EAAK7C,KAAKuB,KACVuB,EAAKF,EAAOrB,IAGhB,IAAIuC,IAAOE,EACT,KAAM,IAAIpD,OAAM,qBAElB,IAAIW,GAAO,GAAIvB,MAAKyB,MAAMsC,EAAKE,GAAMH,EAErC,KAAKnD,EAAI,EAAOmD,EAAJnD,EAAQA,IAClB,IAAK2C,EAAI,EAAOS,EAAJT,EAAQA,IAClB/B,EAAKZ,GAAKoD,EAAKE,GAAMX,GAAKT,EAAGlC,EAAImD,EAAKR,EAE1C,KAAK3C,EAAI,EAAOmD,EAAJnD,EAAQA,IAClB,IAAK2C,EAAI,EAAOW,EAAJX,EAAQA,IAClB/B,EAAKZ,GAAKoD,EAAKE,GAAMX,EAAIS,GAAMjB,EAAGnC,EAAImD,EAAKR,EAK/C,OAHAtD,MAAK2B,OAASmC,EAAIC,EAAKE,GACvBjE,KAAKuB,KAAOA,EAELvB,MAUTkB,EAAOwD,SAAW,SAAUwB,EAAMzE,GAChC,GAAW,EAAPyE,EACF,KAAM,IAAItF,OAAM,eAElBa,GAAOA,EAAOA,EAAOC,YACrB,IACIf,GADAiC,EAAS1B,EAAOmC,MAAM6C,EAAMA,EAAMzE,EAEtC,KAAKd,EAAI,EAAOuF,EAAJvF,EAAUA,IACpBiC,EAAOrB,KAAKZ,EAAIuF,EAAOvF,GAAK,CAE9B,OAAOiC,IAUT1B,EAAOiF,MAAQ,SAAUD,EAAMzE,GAI7B,QAASlC,GAAEa,EAAGgG,EAAGC,GACf,OAAQD,EAAQ,EAAJC,EAAQ,GAAKjG,EAJ3B,GAAW,EAAP8F,EACF,KAAM,IAAItF,OAAM,eAMlBa,GAAOA,EAAOA,EAAOC,YACrB,IACIf,GAAG2C,EADH6C,EAAQjF,EAAOmC,MAAM6C,EAAMA,EAAMzE,EAErC,KAAKd,EAAI,EAAOuF,EAAJvF,EAAUA,IACpB,IAAK2C,EAAI,EAAO4C,EAAJ5C,EAAUA,IACpB6C,EAAM5E,MAAM2E,EAAOvF,EAAI,GAAKuF,GAAQA,EAAO5C,EAAI,IAC7C/D,EAAE2G,EAAMA,EAAO5C,EAAI,EAAG3C,GAAKuF,EAAO3G,EAAE2G,EAAM5C,EAAG3C,GAAK,CAExD,OAAOwF,IAOTjF,EAAOY,UAAUwE,KAAO,WAKtB,IAAK,GAJDjG,GAAIL,KAAK2B,MAAM,GACfY,EAAIvC,KAAK2B,MAAM,GACfJ,EAAO,GAAIvB,MAAKyB,KAAKmC,KAAK2C,IAAIlG,EAAGkC,IAE5B5B,EAAI,EAAON,EAAJM,GAAa4B,EAAJ5B,EAAOA,IAC9BY,EAAKZ,GAAKX,KAAKuB,KAAKZ,EAAI4B,EAAI5B,EAE9B,OAAO,IAAIQ,GAAOI,IAOpBL,EAAOY,UAAU0E,YAAc,WAC7B,GAAIxG,KAAK2B,MAAM,KAAO3B,KAAK2B,MAAM,GAC/B,KAAM,IAAIf,OAAM,uBAUlB,KAAK,GARDiF,GAAK7F,KAAK6F,KACVG,EAAIH,EAAGY,MACPV,EAAIF,EAAGY,MACPX,EAAID,EAAGY,MAEPC,EAAU,EACV5F,EAAId,KAAK2B,MAAM,GAEVhB,EAAI,EAAOG,EAAJH,EAAOA,IACrB+F,GAAWZ,EAAEb,IAAItE,EAAGA,GAAKoF,EAAEd,IAAItE,EAAGA,EAEpC,OAAOqF,GAAES,MAAQC,GAOnBxF,EAAOY,UAAU6E,MAAQ,WACvB,GAEIhG,GAAGG,EAFH8F,EAAW5G,KAAKsG,OAChBZ,EAAS,CAGb,KAAK/E,EAAI,EAAGG,EAAI8F,EAAS5F,OAAYF,EAAJH,EAAOA,IACtC+E,GAAUkB,EAAS3B,IAAItE,EAEzB,OAAO+E,IASTxE,EAAOgE,OAAS,SAAUzE,EAAGkC,GAC3B,MAAOlC,GAAEyE,OAAOvC,IAQlBzB,EAAOY,UAAUoD,OAAS,SAAUtC,GAClC,GAAIvC,GAAIL,KAAK2B,MAAM,GACfY,EAAIvC,KAAK2B,MAAM,GACfkB,EAAK7C,KAAKuB,KACVuB,EAAKF,EAAOrB,IAEhB,IAAIlB,IAAMuC,EAAOjB,MAAM,IAAMY,IAAMK,EAAOjB,MAAM,IAAM3B,KAAKyB,OAASmB,EAAOnB,KACzE,OAAO,CAET,KAAK,GAAId,GAAI,EAAON,EAAIkC,EAAR5B,EAAWA,IACzB,GAAIkC,EAAGlC,KAAOmC,EAAGnC,GACf,OAAO,CAEX,QAAO,GASTO,EAAOY,UAAUmD,IAAM,SAAUtE,EAAG2C,GAClC,GAAQ,EAAJ3C,GAAa,EAAJ2C,GAAS3C,EAAIX,KAAK2B,MAAM,GAAK,GAAK2B,EAAItD,KAAK2B,MAAM,GAAK,EACjE,KAAM,IAAIf,OAAM,sBAElB,OAAOZ,MAAKuB,KAAKZ,EAAEX,KAAK2B,MAAM,GAAG2B,IAUnCpC,EAAOY,UAAUkD,IAAM,SAAUrE,EAAG2C,EAAGuD,GACrC,GAAQ,EAAJlG,GAAa,EAAJ2C,GAAS3C,EAAIX,KAAK2B,MAAM,GAAK,GAAK2B,EAAItD,KAAK2B,MAAM,GAAK,EACjE,KAAM,IAAIf,OAAM,sBAGlB,OADAZ,MAAKuB,KAAKZ,EAAEX,KAAK2B,MAAM,GAAG2B,GAAKuD,EACxB7G,MASTkB,EAAOY,UAAUyD,KAAO,SAAU5E,EAAG2C,GACnC,GAAQ,EAAJ3C,GAAa,EAAJ2C,GAAS3C,EAAIX,KAAK2B,MAAM,GAAK,GAAK2B,EAAItD,KAAK2B,MAAM,GAAK,EACjE,KAAM,IAAIf,OAAM,sBAElB,IAAI2B,GAAIvC,KAAK2B,MAAM,GAGf0D,EAAOrF,KAAKuB,KAAKuF,MAAMnG,EAAI4B,GAAI5B,EAAI,GAAK4B,EAM5C,OAJAvC,MAAKuB,KAAKwF,WAAWpG,EAAI4B,EAAGe,EAAIf,GAAIe,EAAI,GAAKf,GAE7CvC,KAAKuB,KAAKyD,IAAIK,EAAM/B,EAAIf,GAEjBvC,MAQTkB,EAAOY,UAAU6B,IAAM,SAAUqD,GAC/B,GAAItB,GAAS,GAAIxE,GAAOlB,KAGxB,OAFA0F,GAAOnE,KAAOvB,KAAKuB,KAAKoC,IAAIqD,GAErBtB,GASTxE,EAAOY,UAAUmF,KAAO,SAAUD,GAEhC,GAAIzE,GAAIvC,KAAK2B,MAAM,EAMnB,OAJA3B,MAAKuB,KAAK2F,QAAQ,SAAUL,EAAOlG,GACjCqG,EAASH,EAAOlG,EAAI4B,EAAI,EAAG5B,EAAI4B,KAG1BvC,MAOTkB,EAAOY,UAAUC,SAAW,WAK1B,IAAK,GAJD2D,MACArF,EAAIL,KAAK2B,MAAM,GACfY,EAAIvC,KAAK2B,MAAM,GAEVhB,EAAI,EAAON,EAAJM,EAAOA,IAErB+E,EAAOyB,KAAK,IAAMnH,KAAKuB,KAAK6F,SAASzG,EAAI4B,GAAI5B,EAAI,GAAK4B,GAAIR,WAAa,IAEzE,OAAO,IAAM2D,EAAO2B,KAAK,QAAU,KAOrCnG,EAAOY,UAAUwF,QAAU,WAKzB,IAAK,GAJD5B,MACArF,EAAIL,KAAK2B,MAAM,GACfY,EAAIvC,KAAK2B,MAAM,GAEVhB,EAAI,EAAON,EAAJM,EAAOA,IAErB+E,EAAOyB,KAAKI,MAAMzF,UAAUgF,MAAM/F,KAAKf,KAAKuB,KAAK6F,SAASzG,EAAI4B,GAAI5B,EAAI,GAAK4B,IAE7E,OAAOmD,IAOTxE,EAAOY,UAAU0F,SAAW,WAC1B,GAAInH,GAAIL,KAAK2B,MAAM,GACfY,EAAIvC,KAAK2B,MAAM,EAEnB,IAAU,IAANtB,GAAiB,IAANkC,EACb,KAAM,IAAI3B,OAAM,uBAElB,OAAO,IAAIO,GAAOnB,KAAKuB,OAGzB9B,EAAOD,QAAU0B,OAGhBuG,WAAW,EAAEvF,MAAQ,IAAIwF,GAAG,SAAShH,EAAQjB,EAAOD,SAEjDmI,GAAG,SAASjH,EAAQjB,EAAOD,IACjC,WACE,YAWA,SAAS2B,GAAQI,GACfvB,KAAKyB,KAAOC,aACZ1B,KAAKgB,OAAS,EAEVO,YAAgBJ,GAClBnB,KAAK4H,QAAQrG,GACJA,YAAgBgG,QACzBvH,KAAKuB,KAAO,GAAIvB,MAAKyB,KAAKF,GAC1BvB,KAAKgB,OAASO,EAAKP,QACVO,GAAQA,EAAKK,QAA0D,yBAAhDC,OAAOC,UAAUC,SAAShB,KAAKQ,EAAKK,UACpE5B,KAAKuB,KAAOA,EACZvB,KAAKgB,OAASO,EAAKP,OACnBhB,KAAKyB,KAAOF,EAAKS,aArBrB,GAAIE,GAAQ,IACZ,KACEA,EAAQxB,EAAQ,SAChB,MAAOyB,IA4BThB,EAAOuB,IAAM,SAAUjC,EAAGkC,GACxB,MAAO,IAAIxB,GAAOV,GAAGiC,IAAIC,IAQ3BxB,EAAOW,UAAUY,IAAM,SAAUmF,GAC/B,GAAIC,GAAK9H,KAAKgB,OACV+G,EAAKF,EAAO7G,MAChB,IAAI8G,IAAOC,EACT,KAAM,IAAInH,OAAM,sBAClB,KAAKkH,IAAOC,EACV,MAAO/H,KAET,KAAIkC,GAAUlC,KAAKyB,OAASC,cAAgB1B,KAAKyB,OAASsB,aAGxD,IAAK,GAAIpC,GAAI,EAAOmH,EAAJnH,EAAQA,IACtBX,KAAKuB,KAAKZ,IAAMkH,EAAOtG,KAAKZ,OAH9BuB,GAAMc,KAAK6E,EAAOtG,KAAMvB,KAAKuB,KAM/B,OAAOvB,OASTmB,EAAO8B,SAAW,SAAUxC,EAAGkC,GAC7B,MAAO,IAAIxB,GAAOV,GAAGwC,SAASN,IAQhCxB,EAAOW,UAAUmB,SAAW,SAAU4E,GACpC,GAAIC,GAAK9H,KAAKgB,OACV+G,EAAKF,EAAO7G,MAChB,IAAI8G,IAAOC,EACT,KAAM,IAAInH,OAAM,qBAElB,KAAKkH,IAAOC,EACV,MAAO/H,KAET,KAAIkC,GAAUlC,KAAKyB,OAASC,cAAgB1B,KAAKyB,OAASsB,aAErD,CACH,GAAIpC,EACJ,KAAKA,EAAI,EAAOmH,EAAJnH,EAAQA,IAClBX,KAAKuB,KAAKZ,IAAMkH,EAAOtG,KAAKZ,OAJ9BuB,GAAMc,KAAK6E,EAAOtG,KAAMvB,KAAKuB,KAAM,GAOrC,OAAOvB,OASTmB,EAAO+B,MAAQ,SAAU2E,EAAQ1E,GAC/B,MAAO,IAAIhC,GAAO0G,GAAQ3E,MAAMC,IAQlChC,EAAOW,UAAUoB,MAAQ,SAAUC,GACjC,IAAIjB,GAAUlC,KAAKyB,OAASC,cAAgB1B,KAAKyB,OAASsB,aAErD,CACH,GAAIpC,EACJ,KAAKA,EAAIX,KAAKgB,OAAS,EAAGL,GAAK,EAAGA,IAChCX,KAAKuB,KAAKZ,IAAMwC,MAJlBjB,GAAMkB,KAAKpD,KAAKuB,KAAM4B,EAOxB,OAAOnD,OAQTmB,EAAO6G,UAAY,SAAUH,GAC3B,MAAO,IAAI1G,GAAO0G,GAAQG,aAO5B7G,EAAOW,UAAUkG,UAAY,WAC3B,MAAOhI,MAAKkD,MAAM,EAAIlD,KAAKiI,cAU7B9G,EAAO+G,QAAU,SAAUzH,EAAGkC,GAC5B,MAAOlC,GAAEyH,QAAQ,GAAI/G,GAAOwB,KAS9BxB,EAAOW,UAAUoG,QAAU,SAAUL,GACnC,MAAOA,GAAO3E,MAAMlD,KAAKmI,IAAIN,GAAUA,EAAOM,IAAIN,KAUpD1G,EAAOkC,MAAQ,SAAU+E,EAAO3G,GAC9B,GAAY,EAAR2G,EACF,KAAM,IAAIxH,OAAM,eACb,IAAc,IAAVwH,EACP,MAAO,IAAIjH,EAEbM,GAAOA,EAAOA,EAAOC,YACrB,IACIf,GADAY,EAAO,GAAIE,GAAK2G,EAEpB,IAAI7G,EAAKgC,KACPhC,EAAKgC,KAAK,OAEV,KAAK5C,EAAI,EAAOyH,EAAJzH,EAAWA,IACrBY,EAAKZ,GAAK,CAGd,OAAO,IAAIQ,GAAOI,IAUpBJ,EAAOsC,KAAO,SAAU2E,EAAO3G,GAC7B,GAAY,EAAR2G,EACF,KAAM,IAAIxH,OAAM,eACb,IAAc,IAAVwH,EACP,MAAO,IAAIjH,EAEbM,GAAOA,EAAOA,EAAOC,YACrB,IACIf,GADAY,EAAO,GAAIE,GAAK2G,EAEpB,IAAI7G,EAAKgC,KACPhC,EAAKgC,KAAK,OAEV,KAAK5C,EAAI,EAAOyH,EAAJzH,EAAWA,IACrBY,EAAKZ,GAAK,CAGd,OAAO,IAAIQ,GAAOI,IAcpBJ,EAAOkH,MAAQ,WACb,GAEIC,GAAOC,EAAMC,EAFbC,KAAU3B,MAAM/F,KAAK2H,UAAW,GAChCC,GAAY,EAGZlH,EAAOC,YAIX,QAHqC,kBAA1B+G,GAAKA,EAAKzH,OAAS,KAC5BS,EAAOgH,EAAKhC,OAEPgC,EAAKzH,QACV,IAAK,GACHwH,EAAMC,EAAKhC,MACX8B,EAAO,EACPD,EAAQG,EAAKhC,KACb,MACF,KAAK,GACH+B,EAAMC,EAAKhC,MACX8B,EAAOE,EAAKhC,MACZ6B,EAAQG,EAAKhC,KACb,MACF,SACE,KAAM,IAAI7F,OAAM,iBAGpB,GAAkB,EAAd4H,EAAMF,EAAW,CACnB,GAAIjD,GAAOmD,CACXA,GAAMF,EACNA,EAAQjD,EACRsD,GAAY,EAGd,GAAIJ,EAAOC,EAAMF,EACf,KAAM,IAAI1H,OAAM,gBAElB,IACID,GAAG2C,EADHuE,EAAS1G,EAAOkC,MAAMO,KAAKgF,MAAMJ,EAAMF,GAASC,GAAO9G,EAE3D,KAAKd,EAAI2H,EAAOhF,EAAI,EAAOkF,EAAJ7H,EAASA,GAAK4H,EAAMjF,IACzCuE,EAAOtG,KAAK+B,GAAKqF,EAAYH,EAAM7H,EAAI2H,EAAQ3H,CAEjD,OAAOkH,IAWT1G,EAAOuC,OAAS,SAAU0E,EAAO3G,GAC/B,MAAON,GACJkC,MAAM+E,EAAO3G,GACbkC,IAAIC,KAAKF,SASdvC,EAAOgH,IAAM,SAAU1H,EAAGkC,GACxB,MAAOlC,GAAE0H,IAAIxF,IAQfxB,EAAOW,UAAUqG,IAAM,SAAUN,GAC/B,GAAI7H,KAAKgB,SAAW6G,EAAO7G,OACzB,KAAM,IAAIJ,OAAM,qBAElB,IAAIH,GAAIT,KAAKuB,KACToB,EAAIkF,EAAOtG,IAEf,IAAIW,IAAUlC,KAAKyB,OAASC,cAAgB1B,KAAKyB,OAASsB,cACxD,MAAOb,GAAMiG,IAAI1H,EAAGkC,EAEtB,IACIhC,GAAGG,EADH4E,EAAS,CAGb,KAAK/E,EAAI,EAAGG,EAAId,KAAKgB,OAAYF,EAAJH,EAAOA,IAClC+E,GAAUjF,EAAEE,GAAKgC,EAAEhC,EAErB,OAAO+E,IAOTvE,EAAOW,UAAUmG,UAAY,WAC3B,IAAKjI,KAAKgB,OACR,MAAO,EAET,IAAIkB,IAAUlC,KAAKyB,OAASC,cAAgB1B,KAAKyB,OAASsB,cACxD,MAAOb,GAAM2G,KAAK7I,KAAKuB,KAEzB,IAEIZ,GAAGG,EAFH4E,EAAS,EACToD,EAAS9I,KAAKuB,IAElB,KAAKZ,EAAI,EAAGG,EAAId,KAAKgB,OAAYF,EAAJH,EAAOA,IAClC+E,GAAUoD,EAAOnI,GAAKmI,EAAOnI,EAE/B,OAAOiD,MAAKmF,KAAKrD,IASnBvE,EAAO6H,MAAQ,SAAUvI,EAAGkC,GAC1B,MAAOlC,GAAEuI,MAAMrG,IAQjBxB,EAAOW,UAAUkH,MAAQ,SAAUnB,GACjC,MAAOjE,MAAKqF,KAAKjJ,KAAKmI,IAAIN,GAAU7H,KAAKiI,YAAcJ,EAAOI,cAShE9G,EAAO+D,OAAS,SAAUzE,EAAGkC,GAC3B,MAAOlC,GAAEyE,OAAOvC,IAQlBxB,EAAOW,UAAUoD,OAAS,SAAU2C,GAClC,GAAI7H,KAAKgB,SAAW6G,EAAO7G,OACzB,OAAO,CAMT,KAJA,GAAIP,GAAIT,KAAKuB,KACToB,EAAIkF,EAAOtG,KACXZ,EAAI,EAAGG,EAAId,KAAKgB,OAEVF,EAAJH,GAASF,EAAEE,KAAOgC,EAAEhC,IAAMA,GAEhC,OAAOA,KAAMG,GAQfK,EAAOW,UAAUmD,IAAM,SAAUiE,GAC/B,GAAY,EAARA,GAAaA,EAAQlJ,KAAKgB,OAAS,EACrC,KAAM,IAAIJ,OAAM,sBAElB,OAAOZ,MAAKuB,KAAK2H,IAOnB/H,EAAOW,UAAUyE,IAAM,WACrB,GAEIM,GACAlG,EAAGG,EAHHyF,EAAM4C,OAAOC,kBACbN,EAAS9I,KAAKuB,IAIlB,KAAKZ,EAAI,EAAGG,EAAIgI,EAAO9H,OAAYF,EAAJH,EAAOA,IACpCkG,EAAQiC,EAAOnI,GACH4F,EAARM,IACFN,EAAMM,EAGV,OAAON,IAOTpF,EAAOW,UAAUuH,IAAM,WACrB,GAAInH,GAASlC,KAAKyB,OAASC,aACzB,MAAO1B,MAAKuB,KAAKW,EAAMoH,OAAOtJ,KAAKgB,OAAQhB,KAAKuB,KAAM,GACnD,IAAIW,GAASlC,KAAKyB,OAASsB,aAC9B,MAAO/C,MAAKuB,KAAKW,EAAMqH,OAAOvJ,KAAKgB,OAAQhB,KAAKuB,KAAM,GAExD,IAEIsF,GACAlG,EAAGG,EAHHuI,EAAMF,OAAOK,kBACbV,EAAS9I,KAAKuB,IAIlB,KAAKZ,EAAI,EAAGG,EAAId,KAAKgB,OAAYF,EAAJH,EAAOA,IAClCkG,EAAQiC,EAAOnI,GACXkG,EAAQwC,IACVA,EAAMxC,EAGV,OAAOwC,IASTlI,EAAOW,UAAUkD,IAAM,SAAUkE,EAAOrC,GACtC,GAAY,EAARqC,GAAaA,EAAQlJ,KAAKgB,OAAS,EACrC,KAAM,IAAIJ,OAAM,sBAGlB,OADAZ,MAAKuB,KAAK2H,GAASrC,EACZ7G,MASTmB,EAAOyG,QAAU,SAAUnH,EAAGkC,GAC5B,MAAO,IAAIxB,GAAOV,GAAGmH,QAAQjF,IAQ/BxB,EAAOW,UAAU8F,QAAU,SAAUC,GACnC,IAAKA,EAAO7G,OACV,MAAOhB,KACT,KAAKA,KAAKgB,OAIR,MAHAhB,MAAKuB,KAAO,GAAIsG,GAAOpG,KAAKoG,EAAOtG,MACnCvB,KAAKgB,OAAS6G,EAAO7G,OACrBhB,KAAKyB,KAAOoG,EAAOpG,KACZzB,IAGT,IAAI8H,GAAK9H,KAAKgB,OACV+G,EAAKF,EAAO7G,OACZ6B,EAAK7C,KAAKuB,KACVuB,EAAK+E,EAAOtG,KAEZA,EAAO,GAAIvB,MAAKyB,KAAKqG,EAAKC,EAC9B,KAAI7F,GAAUlC,KAAKyB,OAASC,cAAgB1B,KAAKyB,OAASsB,aAGxD,IAAK,GAAIpC,GAAI,EAAOmH,EAAJnH,EAAQA,IACtBY,EAAKZ,GAAKkC,EAAGlC,OAHfuB,GAAMmD,KAAKxC,EAAItB,EAKjB,KAAK,GAAI+B,GAAI,EAAOyE,EAAJzE,EAAQA,IACtB/B,EAAKuG,EAAKxE,GAAKR,EAAGQ,EAKpB,OAHAtD,MAAKuB,KAAOA,EACZvB,KAAKgB,OAAS8G,EAAKC,EAEZ/H,MAQTmB,EAAOW,UAAUqF,KAAO,SAAUN,GAChC,MAAO7G,MAAK4H,QAAQ,GAAIzG,IAAQ0F,MAQlC1F,EAAOW,UAAU6B,IAAM,SAAUqD,GAC/B,GAAIrG,EACJ,KAAKA,EAAI,EAAGA,EAAIX,KAAKgB,OAAQL,IAC3BX,KAAKuB,KAAKZ,GAAKqG,EAAShH,KAAKuB,KAAKZ,GAEpC,OAAOX,OASTmB,EAAOW,UAAUmF,KAAO,SAAUD,GAChC,GAAIrG,EACJ,KAAKA,EAAI,EAAGA,EAAIX,KAAKgB,OAAQL,IAC3BqG,EAAShH,KAAKuB,KAAKZ,GAAIA,EAEzB,OAAOX,OAOTmB,EAAOW,UAAUC,SAAW,WAC1B,GACIpB,GADA+E,EAAS,EAEb,KAAK/E,EAAI,EAAGA,EAAIX,KAAKgB,OAAQL,IAC3B+E,GAAU/E,EAAI,EAAI,KAAOX,KAAKuB,KAAKZ,GAAKX,KAAKuB,KAAKZ,EAEpD,OAAO,IAAM+E,EAAS,KAOxBvE,EAAOW,UAAUwF,QAAU,WACzB,MAAKtH,MAAKuB,KAGHgG,MAAMzF,UAAUgF,MAAM/F,KAAKf,KAAKuB,UAGzC9B,EAAOD,QAAU2B,OAGhBe,MAAQ,SAAS,IAAI","file":"vectorious-4.0.0.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.vectorious = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function () {\n  'use strict';\n\n  var Matrix = require('./matrix.js'),\n      Vector = require('./vector.js');\n\n  module.exports.Matrix = Matrix;\n  module.exports.Vector = Vector;\n})();\n\n},{\"./matrix.js\":2,\"./vector.js\":4}],2:[function(require,module,exports){\n(function () {\n  'use strict';\n\n  var Vector = require('./vector'),\n      nblas = null;\n\n  try {\n    nblas = require('nblas');\n  } catch (error) {}\n\n  /**\n   * @method constructor\n   * @desc Creates a `Matrix` from the supplied arguments.\n   **/\n  function Matrix (data, options) {\n    this.type = Float64Array;\n    this.shape = [];\n\n    if (data && data.buffer && !(data instanceof Vector) &&\n        Object.prototype.toString.call(data.buffer) === '[object ArrayBuffer]' &&\n        options.shape) {\n      if (data.length !== options.shape[0] * options.shape[1])\n        throw new Error(\"Shape does not match typed array dimensions.\");\n\n      this.shape = options.shape;\n      this.data = data;\n      this.type = data.constructor;\n    } else if (Object.prototype.toString.call(data) === '[object Array]') {\n      return Matrix.fromArray(data);\n    } else if (data instanceof Vector) {\n      this.shape = options && options.shape ? options.shape : [data.length, 1];\n      this.data = new data.type(data.data);\n      this.type = data.type;\n    } else if (data instanceof Matrix) {\n      this.shape = [data.shape[0], data.shape[1]];\n      this.data = new data.type(data.data);\n      this.type = data.type;\n    }\n  }\n\n  Matrix.fromTypedArray = function (data, shape) {\n    var self = Object.create(Matrix.prototype);\n    self.shape = shape;\n    self.data = data;\n    self.type = data.constructor;\n\n    return self;\n  };\n\n  Matrix.fromArray = function (array) {\n    var shape = [],\n        data,\n        c;   // number of columns\n\n    shape[0] = array.length;\n    shape[1] = array[0].length;\n    c = shape[1];\n\n    data = new Float64Array(shape[0]*shape[1]);\n\n    for (var ii = 0; ii < shape[0]; ++ii)\n      for (var jj = 0; jj < shape[1]; ++jj)\n        data[ii*c + jj] = array[ii][jj];\n\n    return Matrix.fromTypedArray(data, shape);\n  };\n\n  /**\n   * Static method. Adds two matrices `a` and `b` together.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} a new matrix containing the sum of `a` and `b`\n   **/\n  Matrix.add = function (a, b) {\n    return new Matrix(a).add(b);\n  };\n\n  /**\n   * Adds `matrix` to current matrix.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.add = function (matrix) {\n    var r = this.shape[0],          // rows in this matrix\n        c = this.shape[1],          // columns in this matrix\n        d1 = this.data,\n        d2 = matrix.data;\n\n    if (r !== matrix.shape[0] || c !== matrix.shape[1])\n      throw new Error('sizes do not match: ' + r + 'x' + c + ', ' + matrix.shape[0] + 'x' + matrix.shape[1]);\n\n    if (nblas && (this.type === Float64Array || this.type === Float32Array))\n      nblas.axpy(d2, d1);\n    else {\n      for (var ii = 0; ii < r; ii++)\n        for (var jj = 0; jj < c; jj++)\n          d1[ii*c + jj] += d2[ii*c + jj];\n    }\n\n    return this;\n  };\n\n  /**\n   * Static method. Subtracts the matrix `b` from matrix `a`.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} a new matrix containing the difference between `a` and `b`\n   **/\n  Matrix.subtract = function (a, b) {\n    return new Matrix(a).subtract(b);\n  };\n\n  /**\n   * Subtracts `matrix` from current matrix.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.subtract = function (matrix) {\n      var r = this.shape[0],          // rows in this matrix\n          c = this.shape[1],          // columns in this matrix\n          d1 = this.data,\n          d2 = matrix.data;\n\n      if (r !== matrix.shape[0] || c !== matrix.shape[1])\n        throw new Error('sizes do not match');\n\n      if (nblas && (this.type === Float64Array || this.type === Float32Array))\n        nblas.axpy(d2, d1, -1);\n      else {\n        for (var ii = 0; ii < r; ii++)\n          for (var jj = 0; jj < c; jj++)\n            d1[ii*c + jj] -= d2[ii*c + jj];\n      }\n\n      return this;\n  };\n\n  /**\n   * Static method. Multiplies all elements of a matrix `a` with a specified `scalar`.\n   * @param {Matrix} a\n   * @param {Number} scalar\n   * @returns {Matrix} a new scaled matrix\n   **/\n  Matrix.scale = function (a, scalar) {\n    return new Matrix(a).scale(scalar);\n  };\n\n  /**\n   * Multiplies all elements of current matrix with a specified `scalar`.\n   * @param {Number} scalar\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.scale = function (scalar) {\n    var r = this.shape[0],          // rows in this matrix\n        c = this.shape[1],          // columns in this matrix\n        d1 = this.data;\n\n    if (nblas && (this.type === Float64Array || this.type === Float32Array))\n      nblas.scal(d1, scalar);\n    else {\n      for (var ii = 0; ii < r; ii++)\n        for (var jj = 0; jj < c; jj++)\n          d1[ii*c + jj] *= scalar;\n    }\n\n    return this;\n  };\n\n  /**\n   * Static method. Creates an `i x j` matrix containing zeros (`0`), takes an\n   * optional `type` argument which should be an instance of `TypedArray`.\n   * @param {Number} i\n   * @param {Number} j\n   * @param {TypedArray} type\n   * @returns {Matrix} a matrix of the specified dimensions and `type`\n   **/\n  Matrix.zeros = function (i, j, type) {\n    if (i <= 0 || j <= 0)\n      throw new Error('invalid size');\n\n    type = type ? type : Float64Array;\n    var data = new type(i * j);\n    if (data.fill) {\n      // fill not implmeneted on chrome version 43\n      data.fill(0.0);\n    } else {\n      for (var k = 0; k < i * j; k++)\n        data[k] = +0.0;\n    }\n\n    return Matrix.fromTypedArray(data, [i, j]);\n  };\n\n  /**\n   * Static method. Creates an `i x j` matrix containing ones (`1`), takes an\n   * optional `type` argument which should be an instance of `TypedArray`.\n   * @param {Number} i\n   * @param {Number} j\n   * @param {TypedArray} type\n   * @returns {Matrix} a matrix of the specified dimensions and `type`\n   **/\n  Matrix.ones = function (i, j, type) {\n    if (i <= 0 || j <= 0)\n      throw new Error('invalid size');\n\n    type = type ? type : Float64Array;\n    var data = new type(i * j);\n    if (data.fill) {\n      // fill not implmeneted on chrome version 43\n      data.fill(1.0);\n    } else {\n      for (var k = 0; k < i * j; k++)\n        data[k] = +1.0;\n    }\n\n    return Matrix.fromTypedArray(data, [i, j]);\n  };\n\n  /**\n   * Static method. Creates an `i x j` matrix containing random values between\n   * `0` and `1`, takes an optional `type` argument which should be an instance\n   * of `TypedArray`.\n   * @param {Number} i\n   * @param {Number} j\n   * @param {TypedArray} type\n   * @returns {Matrix} a matrix of the specified dimensions and `type`\n   **/\n  Matrix.random = function (i, j, type) {\n    return Matrix\n      .zeros(i, j, type)\n      .map(Math.random);\n  };\n\n  /**\n   * Static method. Multiplies two matrices `a` and `b` of matching dimensions.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} a new resultant matrix containing the matrix product of `a` and `b`\n   **/\n  Matrix.multiply = function (a, b) {\n    return a.multiply(b);\n  };\n\n  /**\n   * Multiplies two matrices `a` and `b` of matching dimensions.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} a new resultant matrix containing the matrix product of `a` and `b`\n   **/\n  Matrix.prototype.multiply = function (matrix) {\n    var r1 = this.shape[0],   // rows in this matrix\n        c1 = this.shape[1],   // columns in this matrix\n        r2 = matrix.shape[0], // rows in multiplicand\n        c2 = matrix.shape[1], // columns in multiplicand\n        d1 = this.data,\n        d2 = matrix.data;\n\n    if (c1 !== r2)\n      throw new Error('sizes do not match');\n\n    var out = Matrix.fromTypedArray(\n      new this.type(r1 * c2),\n      [r1, c2]\n    );\n\n    var data = out.data;\n    if (nblas && (out.type === Float64Array || out.type === Float32Array))\n      nblas.gemm(d1, d2, data, r1, c2, c1);\n    else {\n      for (var ii = 0; ii < r1; ii++) {\n        for (var jj = 0; jj < c2; jj++) {\n          var sum = +0;\n          for (var kk = 0; kk < c1; kk++)\n            sum += d1[ii*c1+kk] * d2[jj+kk*c2];\n\n          data[ii*c2+jj] = sum;\n        }\n      }\n    }\n\n    return out;\n  };\n\n  /**\n   * Static method. Transposes a matrix (mirror across the diagonal).\n   * @returns {Matrix} a new resultant transposed matrix\n   **/\n  Matrix.transpose = function (matrix) {\n    return new Matrix(matrix).transpose();\n  };\n\n  /**\n   * Transposes a matrix (mirror across the diagonal).\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.transpose = function () {\n    var r = this.shape[0],\n        c = this.shape[1];\n\n    var i, j;\n\n    if (r === c) {\n      for (i = 0; i < r - 1; i++) {\n        for (j = i + 1; j < r; j++) {\n          var tmp = this.data[j * r + i];\n          this.data[j * r + i] = this.data[i * r + j];\n          this.data[i * r + j] = tmp;\n        }\n      }\n      return this;\n    }\n\n    var data = new this.type(c * r);\n    for (i = 0; i < r; i++)\n      for (j = 0; j < c; j++)\n        data[j * r + i] = this.data[i * c + j];\n\n    return Matrix.fromTypedArray(data, [c, r]);\n  };\n\n  /**\n   * Determines the inverse of any invertible square matrix using\n   * Gaussian elimination.\n   * @returns {Matrix} the inverse of the matrix\n   **/\n  Matrix.prototype.inverse = function () {\n    var l = this.shape[0],\n        m = this.shape[1];\n\n    if (l !== m)\n      throw new Error('invalid dimensions');\n\n    var identity = Matrix.identity(l);\n    var augmented = Matrix.augment(this, identity);\n    var gauss = augmented.gauss();\n\n    var left = Matrix.zeros(l, m),\n        right = Matrix.zeros(l, m),\n        n = gauss.shape[1],\n        i, j;\n    for (i = 0; i < l; i++) {\n      for (j = 0; j < n; j++) {\n        if (j < m)\n          left.set(i, j, gauss.get(i, j));\n        else\n          right.set(i, j - l, gauss.get(i, j));\n      }\n    }\n\n    if (!left.equals(Matrix.identity(l)))\n      throw new Error('matrix is not invertible');\n\n    return right;\n  };\n\n  /**\n   * Performs Gaussian elimination on a matrix.\n   * @returns {Matrix} the matrix in reduced row echelon form\n   **/\n  Matrix.prototype.gauss = function () {\n    var l = this.shape[0],\n        m = this.shape[1];\n\n    var copy = new Matrix(this),\n        lead = 0,\n        pivot,\n        i, j, k,\n        leadValue;\n\n    for (i = 0; i < l; i++) {\n      if (m <= lead)\n        return new Error('matrix is singular');\n\n      j = i;\n      while (copy.data[j * m + lead] === 0) {\n        j++;\n        if (l === j) {\n          j = i;\n          lead++;\n\n          if (m === lead)\n            return new Error('matrix is singular');\n        }\n      }\n\n      copy.swap(i, j);\n\n      pivot = copy.data[i * m + lead];\n      if (pivot !== 0) {\n        // scale down the row by value of pivot\n        for (k = 0; k < m; k++)\n          copy.data[(i * m) + k] = copy.data[(i * m) + k] / pivot;\n      }\n\n\n      for (j = 0; j < l; j++) {\n        leadValue = copy.data[j * m + lead];\n        if (j !== i)\n          for (k = 0; k < m; k++)\n            copy.data[j * m + k] = copy.data[j * m + k] - (copy.data[i * m + k] * leadValue);\n      }\n\n      lead++;\n    }\n\n    for (i = 0; i < l; i++) {\n      pivot = 0;\n      for (j = 0; j < m; j++)\n        if (!pivot)\n          pivot = copy.data[i * m + j];\n\n      if (pivot)\n        // scale down the row by value of pivot\n        for (k = 0; k < m; k++)\n          copy.data[(i * m) + k] = copy.data[(i * m) + k] / pivot;\n    }\n\n    return copy;\n  };\n\n  /**\n   * Pivots a matrix until elements are in upper triangular form\n   * @returns {Array} a tuple of the resultant pivotized matrix and its sign\n   * (used in LU factorization).\n   **/\n  Matrix.prototype.pivotize = function () {\n    var l = this.shape[0],\n        result = Matrix.identity(l),\n        sign = 1,\n        pivot,\n        lead,\n        row;\n\n    var i, j;\n    for (i = 0; i < l; i++) {\n      pivot = 0;\n      row = i;\n\n      for (j = i; j < l; j++) {\n        lead = Math.abs(this.get(j, i));\n        if (pivot < lead) {\n          pivot = lead;\n          row = j;\n        }\n      }\n\n      if (i !== row) {\n        result.swap(i, row);\n        sign *= -1;\n      }\n    }\n\n    return [result, sign];\n  };\n\n  /**\n   * Performs LU factorization on a matrix.\n   * @returns {Array} a triple (3-tuple) of the lower triangular resultant matrix `L`, the upper\n   * triangular resultant matrix `U` and the pivot matrix `P`\n   **/\n  Matrix.prototype.lu = function () {\n    var l = this.shape[0];\n\n    var L = Matrix.identity(l),\n        U = Matrix.zeros(l, l),\n        P = this.pivotize(),\n        A = Matrix.multiply(P[0], this);\n\n    var i, j, k,\n        sum = [0, 0];\n\n    for (i = 0; i < l; i++) {\n      for (j = 0; j < i + 1; j++) {\n        sum[0] = 0;\n        for (k = 0; k < j; k++)\n          sum[0] += U.get(k, i) * L.get(j, k);\n\n        U.set(j, i, A.get(j, i) - sum[0]);\n      }\n\n      for (j = i; j < l; j++) {\n        sum[1] = 0;\n        for (k = 0; k < j; k++)\n          sum[1] += U.get(k, i) * L.get(j, k);\n\n        L.set(j, i, (A.get(j, i) - sum[1]) / U.get(i, i));\n      }\n    }\n\n    return [L, U, P];\n  };\n\n  /**\n   * Static method. Augments two matrices `a` and `b` of matching dimensions\n   * (appends `b` to `a`).\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} the resultant matrix of `b` augmented to `a`\n   **/\n  Matrix.augment = function (a, b) {\n    return new Matrix(a).augment(b);\n  };\n\n  /**\n   * Augments `matrix` with current matrix.\n   * @param {Matrix} matrix\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.augment = function (matrix) {\n    if (matrix.shape.length === 0)\n     return this;\n\n    var r1 = this.shape[0],\n        c1 = this.shape[1],\n        r2 = matrix.shape[0],\n        c2 = matrix.shape[1],\n        d1 = this.data,\n        d2 = matrix.data,\n        i, j;\n\n    if (r1 !== r2)\n      throw new Error(\"Rows do not match.\");\n\n    var data = new this.type((c1 + c2) * r1);\n\n    for (i = 0; i < r1; i++)\n      for (j = 0; j < c1; j++)\n        data[i * (c1 + c2) + j] = d1[i * r1 + j];\n\n    for (i = 0; i < r1; i++)\n      for (j = 0; j < c2; j++)\n        data[i * (c1 + c2) + j + c1] = d2[i * r1 + j];\n\n    this.shape = [r1, c1 + c2];\n    this.data = data;\n\n    return this;\n  };\n\n  /**\n   * Static method. Creates an identity matrix of `size`, takes an optional `type` argument\n   * which should be an instance of `TypedArray`.\n   * @param {Number} size\n   * @param {TypedArray} type\n   * @returns {Matrix} an identity matrix of the specified `size` and `type`\n   **/\n  Matrix.identity = function (size, type) {\n    if (size < 0)\n      throw new Error('invalid size');\n\n    type = type ? type : Float64Array;\n    var matrix = Matrix.zeros(size, size, type),\n        i, j;\n    for (i = 0; i < size; i++)\n      matrix.data[i * size + i] = 1.0;\n\n    return matrix;\n  };\n\n  /**\n   * Static method. Creates a magic square matrix of `size`, takes an optional `type` argument\n   * which should be an instance of `TypedArray`.\n   * @param {Number} size\n   * @param {Number} type\n   * @returns {Matrix} a magic square matrix of the specified `size` and `type`\n   **/\n  Matrix.magic = function (size, type) {\n    if (size < 0)\n      throw new Error('invalid size');\n\n    function f(n, x, y) {\n      return (x + y * 2 + 1) % n;\n    }\n\n    type = type ? type : Float64Array;\n    var magic = Matrix.zeros(size, size, type),\n        i, j;\n    for (i = 0; i < size; i++)\n      for (j = 0; j < size; j++)\n        magic.data[(size - i - 1) * size + (size - j - 1)] =\n          f(size, size - j - 1, i) * size + f(size, j, i) + 1;\n\n    return magic;\n  };\n\n  /**\n   * Gets the diagonal of a matrix.\n   * @returns {Vector} the diagonal of the matrix as a vector\n   **/\n  Matrix.prototype.diag = function () {\n    var r = this.shape[0],\n        c = this.shape[1],\n        data = new this.type(Math.min(r, c));\n\n    for (var i = 0; i < r && i < c; i++)\n      data[i] = this.data[i * c + i];\n\n    return new Vector(data);\n  };\n\n  /**\n   * Gets the determinant of any square matrix using LU factorization.\n   * @returns {Number} the determinant of the matrix\n   **/\n  Matrix.prototype.determinant = function () {\n    if (this.shape[0] !== this.shape[1])\n      throw new Error('matrix is not square');\n\n    var lu = this.lu();\n    var P = lu.pop(),\n        U = lu.pop(),\n        L = lu.pop();\n\n    var product = 1,\n        l = this.shape[0];\n\n    for (var i = 0; i < l; i++)\n      product *= L.get(i, i) * U.get(i, i);\n\n    return P.pop() * product;\n  };\n\n  /**\n   * Gets the trace of the matrix (the sum of all diagonal elements).\n   * @returns {Number} the trace of the matrix\n   **/\n  Matrix.prototype.trace = function () {\n    var diagonal = this.diag(),\n        result = 0,\n        i, l;\n\n    for (i = 0, l = diagonal.length; i < l; i++)\n      result += diagonal.get(i);\n\n    return result;\n  };\n\n  /**\n   * Static method. Checks the equality of two matrices `a` and `b`.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Boolean} `true` if equal, `false` otherwise\n   **/\n  Matrix.equals = function (a, b) {\n    return a.equals(b);\n  };\n\n  /**\n   * Checks the equality of `matrix` and current matrix.\n   * @param {Matrix} matrix\n   * @returns {Boolean} `true` if equal, `false` otherwise\n   **/\n  Matrix.prototype.equals = function (matrix) {\n    var r = this.shape[0],\n        c = this.shape[1],\n        d1 = this.data,\n        d2 = matrix.data;\n\n    if (r !== matrix.shape[0] || c !== matrix.shape[1] || this.type !== matrix.type)\n      return false;\n\n    for (var i = 0; i < r * c; i++)\n      if (d1[i] !== d2[i])\n        return false;\n\n    return true;\n  };\n\n  /**\n   * Gets the value of the element in row `i`, column `j` of current matrix\n   * @param {Number} i\n   * @param {Number} j\n   * @returns {Number} the element at row `i`, column `j` of current matrix\n   **/\n  Matrix.prototype.get = function (i, j) {\n    if (i < 0 || j < 0 || i > this.shape[0] - 1 || j > this.shape[1] - 1)\n      throw new Error('index out of bounds');\n\n    return this.data[i*this.shape[1]+j];\n  };\n\n  /**\n   * Sets the element at row `i`, column `j` to value\n   * @param {Number} i\n   * @param {Number} j\n   * @param {Number} value\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.set = function (i, j, value) {\n    if (i < 0 || j < 0 || i > this.shape[0] - 1 || j > this.shape[1] - 1)\n      throw new Error('index out of bounds');\n\n    this.data[i*this.shape[1]+j] = value;\n    return this;\n  };\n\n  /**\n   * Swaps two rows `i` and `j` in a matrix\n   * @param {Number} i\n   * @param {Number} j\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.swap = function (i, j) {\n    if (i < 0 || j < 0 || i > this.shape[0] - 1 || j > this.shape[0] - 1)\n      throw new Error('index out of bounds');\n\n    var c = this.shape[1];\n\n    // copy first row\n    var copy = this.data.slice(i * c, (i + 1) * c);\n    // move second row into first row spot\n    this.data.copyWithin(i * c, j * c, (j + 1) * c);\n    // copy first row back into second row spot\n    this.data.set(copy, j * c);\n\n    return this;\n  };\n\n  /**\n   * Maps a function `callback` to all elements of a copy of current matrix.\n   * @param {Function} callback\n   * @returns {Matrix} the resultant mapped matrix\n   **/\n  Matrix.prototype.map = function (callback) {\n    var result = new Matrix(this);\n    result.data = this.data.map(callback);\n\n    return result;\n  };\n\n  /**\n   * Functional version of for-looping the rows in a matrix, is\n   * equivalent to `Array.prototype.forEach`.\n   * @param {Function} callback\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.each = function (callback) {\n\n    var c = this.shape[1];\n\n    this.data.forEach(function (value, i) {\n      callback(value, i / c | 0, i % c);\n    });\n\n    return this;\n  };\n\n  /**\n   * Converts current matrix into a readable formatted string\n   * @returns {String} a string of the matrix' contents\n   **/\n  Matrix.prototype.toString = function () {\n    var result = [],\n        r = this.shape[0],\n        c = this.shape[1];\n\n    for (var i = 0; i < r; i++)\n      // get string version of current row and store it\n      result.push('[' + this.data.subarray(i * c, (i + 1) * c ).toString() + ']');\n\n    return '[' + result.join(', \\n') + ']';\n  };\n\n  /**\n   * Converts current matrix into a two-dimensional array\n   * @returns {Array} an array of the matrix' contents\n   **/\n  Matrix.prototype.toArray = function () {\n    var result = [],\n        r = this.shape[0],\n        c = this.shape[1];\n\n    for (var i = 0; i < r; i++)\n      // copy current row into a native array and store it\n      result.push(Array.prototype.slice.call(this.data.subarray(i * c, (i + 1) * c)));\n\n    return result;\n  };\n\n  /**\n   * Converts current matrix into a two-dimensional Vector\n   * @returns {Array} a Vector of the matrix' contents\n   **/\n  Matrix.prototype.toVector = function () {\n    var r = this.shape[0],\n        c = this.shape[1];\n\n    if (r !== 1 && c !== 1)\n      throw new Error('invalid matrix shape');\n\n    return new Vector(this.data);\n  };\n\n  module.exports = Matrix;\n})();\n\n},{\"./vector\":4,\"nblas\":3}],3:[function(require,module,exports){\n\n},{}],4:[function(require,module,exports){\n(function () {\n  'use strict';\n\n  var nblas = null;\n  try {\n    nblas = require('nblas');\n  } catch (error) {}\n\n  /**\n   * @method constructor\n   * @desc Creates a two-dimensional `Vector` from the supplied arguments.\n   **/\n  function Vector (data) {\n    this.type = Float64Array;\n    this.length = 0;\n\n    if (data instanceof Vector) {\n      this.combine(data);\n    } else if (data instanceof Array) {\n      this.data = new this.type(data);\n      this.length = data.length;\n    } else if (data && data.buffer && Object.prototype.toString.call(data.buffer) === '[object ArrayBuffer]') {\n      this.data = data;\n      this.length = data.length;\n      this.type = data.constructor;\n    }\n  }\n\n  /**\n   * Static method. Adds two vectors `a` and `b` together.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Vector} a vector containing the sum of `a` and `b`\n   **/\n  Vector.add = function (a, b) {\n    return new Vector(a).add(b);\n  };\n\n  /**\n   * Adds `vector` to the current vector.\n   * @param {Vector} vector\n   * @returns {Vector} this\n   **/\n  Vector.prototype.add = function (vector) {\n    var l1 = this.length,\n        l2 = vector.length;\n    if (l1 !== l2)\n      throw new Error('sizes do not match!');\n    if (!l1 && !l2)\n      return this;\n\n    if (nblas && (this.type === Float64Array || this.type === Float32Array))\n      nblas.axpy(vector.data, this.data);\n    else {\n      for (var i = 0; i < l1; i++)\n        this.data[i] += vector.data[i];\n    }\n\n    return this;\n  };\n\n  /**\n   * Static method. Subtracts the vector `b` from vector `a`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Vector} a vector containing the difference between `a` and `b`\n   **/\n  Vector.subtract = function (a, b) {\n    return new Vector(a).subtract(b);\n  };\n\n  /**\n   * Subtracts `vector` from the current vector.\n   * @param {Vector} vector\n   * @returns {Vector} this\n   **/\n  Vector.prototype.subtract = function (vector) {\n    var l1 = this.length,\n        l2 = vector.length;\n    if (l1 !== l2)\n      throw new Error('sizes do not match');\n\n    if (!l1 && !l2)\n      return this;\n\n    if (nblas && (this.type === Float64Array || this.type === Float32Array))\n      nblas.axpy(vector.data, this.data, -1);\n    else {\n      var i;\n      for (i = 0; i < l1; i++)\n        this.data[i] += vector.data[i];\n    }\n\n    return this;\n  };\n\n  /**\n   * Static method. Multiplies all elements of `vector` with a specified `scalar`.\n   * @param {Vector} vector\n   * @param {Number} scalar\n   * @returns {Vector} a resultant scaled vector\n   **/\n  Vector.scale = function (vector, scalar) {\n    return new Vector(vector).scale(scalar);\n  };\n\n  /**\n   * Multiplies all elements of current vector with a specified `scalar`.\n   * @param {Number} scalar\n   * @returns {Vector} this\n   **/\n  Vector.prototype.scale = function (scalar) {\n    if (nblas && (this.type === Float64Array || this.type === Float32Array))\n      nblas.scal(this.data, scalar);\n    else {\n      var i;\n      for (i = this.length - 1; i >= 0; i--)\n        this.data[i] *= scalar;\n    }\n\n    return this;\n  };\n\n  /**\n   * Static method. Normalizes `vector`, i.e. divides all elements with the magnitude.\n   * @param {Vector} vector\n   * @returns {Vector} a resultant normalized vector\n   **/\n  Vector.normalize = function (vector) {\n    return new Vector(vector).normalize();\n  };\n\n  /**\n   * Normalizes current vector.\n   * @returns {Vector} a resultant normalized vector\n   **/\n  Vector.prototype.normalize = function () {\n    return this.scale(1 / this.magnitude());\n  };\n\n  /**\n   * Static method. Projects the vector `a` onto the vector `b` using\n   * the projection formula `(b * (a * b / b * b))`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Vector} a new resultant projected vector\n   **/\n  Vector.project = function (a, b) {\n    return a.project(new Vector(b));\n  };\n\n  /**\n   * Projects the current vector onto `vector` using\n   * the projection formula `(b * (a * b / b * b))`.\n   * @param {Vector} vector\n   * @returns {Vector} `vector`\n   **/\n  Vector.prototype.project = function (vector) {\n    return vector.scale(this.dot(vector) / vector.dot(vector));\n  };\n\n  /**\n   * Static method. Creates a vector containing zeros (`0`) of `count` size, takes\n   * an optional `type` argument which should be an instance of `TypedArray`.\n   * @param {Number} count\n   * @param {TypedArray} type\n   * @returns {Vector} a new vector of the specified size and `type`\n   **/\n  Vector.zeros = function (count, type) {\n    if (count < 0)\n      throw new Error('invalid size');\n    else if (count === 0)\n      return new Vector();\n\n    type = type ? type : Float64Array;\n    var data = new type(count),\n        i;\n    if (data.fill)\n      data.fill(+0.0);\n    else {\n      for (i = 0; i < count; i++)\n        data[i] = +0.0;\n    }\n\n    return new Vector(data);\n  };\n\n  /**\n   * Static method. Creates a vector containing ones (`1`) of `count` size, takes\n   * an optional `type` argument which should be an instance of `TypedArray`.\n   * @param {Number} count\n   * @param {TypedArray} type\n   * @returns {Vector} a new vector of the specified size and `type`\n   **/\n  Vector.ones = function (count, type) {\n    if (count < 0)\n      throw new Error('invalid size');\n    else if (count === 0)\n      return new Vector();\n\n    type = type ? type : Float64Array;\n    var data = new type(count),\n        i;\n    if (data.fill)\n      data.fill(1.0);\n    else {\n      for (i = 0; i < count; i++)\n        data[i] = 1;\n    }\n\n    return new Vector(data);\n  };\n\n  /**\n   * Static method. Creates a vector containing a range (can be either ascending or descending)\n   * of numbers specified by the arguments provided (e.g. `Vector.range(0, .5, 2)`\n   * gives a vector containing all numbers in the interval `[0, 2)` separated by\n   * steps of `0.5`), takes an optional `type` argument which should be an instance of\n   * `TypedArray`.\n   * @param {Number} start\n   * @param {Number} step - optional\n   * @param {Number} end\n   * @returns {Vector} a new vector containing the specified range of the specified `type`\n   **/\n  Vector.range = function () {\n    var args = [].slice.call(arguments, 0),\n        backwards = false,\n        start, step, end;\n\n    var type = Float64Array;\n    if (typeof args[args.length - 1] === 'function')\n      type = args.pop();\n\n    switch(args.length) {\n      case 2:\n        end = args.pop();\n        step = 1;\n        start = args.pop();\n        break;\n      case 3:\n        end = args.pop();\n        step = args.pop();\n        start = args.pop();\n        break;\n      default:\n        throw new Error('invalid range');\n    }\n\n    if (end - start < 0) {\n      var copy = end;\n      end = start;\n      start = copy;\n      backwards = true;\n    }\n\n    if (step > end - start)\n      throw new Error('invalid range');\n\n    var vector = Vector.zeros(Math.ceil((end - start) / step), type),\n        i, j;\n    for (i = start, j = 0; i < end; i += step, j++)\n      vector.data[j] = backwards ? end - i + start : i;\n\n    return vector;\n  };\n\n  /**\n   * Static method. Creates a vector containing random values between `0` and `1`\n   * of `count` size, takes an optional `type` argument which should be an instance\n   * of `TypedArray`.\n   * @param {Number} count\n   * @param {TypedArray} type\n   * @returns {Vector} a new vector of the specified size and `type`\n   **/\n  Vector.random = function (count, type) {\n    return Vector\n      .zeros(count, type)\n      .map(Math.random);\n  };\n\n  /**\n   * Static method. Performs dot multiplication with two vectors `a` and `b`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Number} the dot product of the two vectors\n   **/\n  Vector.dot = function (a, b) {\n    return a.dot(b);\n  };\n\n  /**\n   * Performs dot multiplication with current vector and `vector`\n   * @param {Vector} vector\n   * @returns {Number} the dot product of the two vectors\n   **/\n  Vector.prototype.dot = function (vector) {\n    if (this.length !== vector.length)\n      throw new Error('sizes do not match');\n\n    var a = this.data,\n        b = vector.data;\n\n    if (nblas && (this.type === Float64Array || this.type === Float32Array))\n      return nblas.dot(a, b);\n\n    var result = 0,\n        i, l;\n\n    for (i = 0, l = this.length; i < l; i++)\n      result += a[i] * b[i];\n\n    return result;\n  };\n\n  /**\n   * Calculates the magnitude of a vector (also called L2 norm or Euclidean length).\n   * @returns {Number} the magnitude (L2 norm) of the vector\n   **/\n  Vector.prototype.magnitude = function () {\n    if (!this.length)\n      return 0;\n\n    if (nblas && (this.type === Float64Array || this.type === Float32Array))\n      return nblas.nrm2(this.data);\n\n    var result = 0,\n        values = this.data,\n        i, l;\n    for (i = 0, l = this.length; i < l; i++)\n      result += values[i] * values[i];\n\n    return Math.sqrt(result);\n  };\n\n  /**\n   * Static method. Determines the angle between two vectors `a` and `b`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Number} the angle between the two vectors in radians\n   **/\n  Vector.angle = function (a, b) {\n    return a.angle(b);\n  };\n\n  /**\n   * Determines the angle between the current vector and `vector`.\n   * @param {Vector} vector\n   * @returns {Number} the angle between the two vectors in radians\n   **/\n  Vector.prototype.angle = function (vector) {\n    return Math.acos(this.dot(vector) / this.magnitude() * vector.magnitude());\n  };\n\n  /**\n   * Static method. Checks the equality of two vectors `a` and `b`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Boolean} `true` if the two vectors are equal, `false` otherwise\n   **/\n  Vector.equals = function (a, b) {\n    return a.equals(b);\n  };\n\n  /**\n   * Checks the equality of the current vector and `vector`.\n   * @param {Vector} vector\n   * @returns {Boolean} `true` if the two vectors are equal, `false` otherwise\n   **/\n  Vector.prototype.equals = function (vector) {\n    if (this.length !== vector.length)\n      return false;\n\n    var a = this.data,\n        b = vector.data,\n        i = 0, l = this.length;\n\n    while(i < l && a[i] === b[i]) { i++; }\n\n    return i === l;\n  };\n\n  /**\n   * Gets the element at `index` from current vector.\n   * @param {Number} index\n   * @returns {Number} the element at `index`\n   **/\n  Vector.prototype.get = function (index) {\n    if (index < 0 || index > this.length - 1)\n      throw new Error('index out of bounds');\n\n    return this.data[index];\n  };\n\n  /**\n   * Gets the minimum value (smallest) element of current vector.\n   * @returns {Number} the smallest element of the current vector\n   **/\n  Vector.prototype.min = function () {\n    var min = Number.POSITIVE_INFINITY,\n        values = this.data,\n        value,\n        i, l;\n\n    for (i = 0, l = values.length; i < l; i++) {\n      value = values[i];\n      if (value < min)\n        min = value;\n    }\n\n    return min;\n  };\n\n  /**\n   * Gets the maximum value (largest) element of current vector.\n   * @returns {Number} the largest element of current vector\n   **/\n  Vector.prototype.max = function () {\n    if (nblas && this.type === Float64Array)\n      return this.data[nblas.idamax(this.length, this.data, 1)];\n    else if (nblas && this.type === Float32Array)\n      return this.data[nblas.isamax(this.length, this.data, 1)];\n\n    var max = Number.NEGATIVE_INFINITY,\n        values = this.data,\n        value,\n        i, l;\n\n    for (i = 0, l = this.length; i < l; i++) {\n      value = values[i];\n      if (value > max)\n        max = value;\n    }\n\n    return max;\n  };\n\n  /**\n   * Sets the element at `index` to `value`.\n   * @param {Number} index\n   * @param {Number} value\n   * @returns {Vector} this\n   **/\n  Vector.prototype.set = function (index, value) {\n    if (index < 0 || index > this.length - 1)\n      throw new Error('index out of bounds');\n\n    this.data[index] = value;\n    return this;\n  };\n\n  /**\n   * Static method. Combines two vectors `a` and `b` (appends `b` to `a`).\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Vector} `b` appended to vector `a`\n   **/\n  Vector.combine = function (a, b) {\n    return new Vector(a).combine(b);\n  };\n\n  /**\n   * Combines the current vector with `vector`\n   * @param {Vector} vector\n   * @returns {Vector} `vector` combined with current vector\n   **/\n  Vector.prototype.combine = function (vector) {\n    if (!vector.length)\n      return this;\n    if (!this.length) {\n      this.data = new vector.type(vector.data);\n      this.length = vector.length;\n      this.type = vector.type;\n      return this;\n    }\n\n    var l1 = this.length,\n        l2 = vector.length,\n        d1 = this.data,\n        d2 = vector.data;\n\n    var data = new this.type(l1 + l2);\n    if (nblas && (this.type === Float64Array || this.type === Float32Array))\n      nblas.copy(d1, data);\n    else\n      for (var i = 0; i < l1; i++)\n        data[i] = d1[i];\n\n    for (var j = 0; j < l2; j++)\n      data[l1 + j] = d2[j];\n\n    this.data = data;\n    this.length = l1 + l2;\n\n    return this;\n  };\n\n  /**\n   * Pushes a new `value` into current vector.\n   * @param {Number} value\n   * @returns {Vector} `this`\n   **/\n  Vector.prototype.push = function (value) {\n    return this.combine(new Vector([value]));\n  };\n\n  /**\n   * Maps a function `callback` to all elements of current vector.\n   * @param {Function} callback\n   * @returns {Vector} `this`\n   **/\n  Vector.prototype.map = function (callback) {\n    var i;\n    for (i = 0; i < this.length; i++)\n      this.data[i] = callback(this.data[i]);\n\n    return this;\n  };\n\n  /**\n   * Functional version of for-looping the vector, is equivalent\n   * to `Array.prototype.forEach`.\n   * @param {Function} callback\n   * @returns {Vector} `this`\n   **/\n  Vector.prototype.each = function (callback) {\n    var i;\n    for (i = 0; i < this.length; i++)\n      callback(this.data[i], i);\n\n    return this;\n  };\n\n  /**\n   * Converts current vector into a readable formatted string.\n   * @returns {String} a string of the vector's contents\n   **/\n  Vector.prototype.toString = function () {\n    var result = '',\n        i;\n    for (i = 0; i < this.length; i++)\n      result += i > 0 ? ', ' + this.data[i] : this.data[i];\n\n    return '[' + result + ']';\n  };\n\n  /**\n   * Converts current vector into a JavaScript array.\n   * @returns {Array} an array containing all elements of current vector\n   **/\n  Vector.prototype.toArray = function () {\n    if (!this.data)\n      return [];\n\n    return Array.prototype.slice.call(this.data);\n  };\n\n  module.exports = Vector;\n})();\n\n},{\"nblas\":3}]},{},[1])(1)\n});"],"sourceRoot":"/source/"}