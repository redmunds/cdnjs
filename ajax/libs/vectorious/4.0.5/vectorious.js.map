{"version":3,"sources":["vectorious-4.0.5.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","vectorious","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"Matrix","data","options","type","Float64Array","shape","buffer","Vector","Object","prototype","toString","constructor","fromArray","nblas","error","fromTypedArray","create","array","c","ii","jj","add","b","matrix","d1","d2","Float32Array","axpy","subtract","scale","scalar","scal","zeros","j","fill","k","ones","random","map","Math","multiply","r1","c1","r2","c2","out","sum","kk","gemm","transpose","tmp","inverse","m","identity","augmented","augment","gauss","left","right","set","get","equals","pivot","leadValue","copy","lead","swap","pivotize","row","result","sign","abs","lu","L","U","P","A","size","magic","x","y","diag","min","determinant","pop","product","trace","diagonal","value","slice","copyWithin","callback","each","forEach","push","subarray","join","toArray","Array","toVector","./vector",2,3,"combine","vector","l1","l2","normalize","magnitude","project","dot","count","range","start","step","end","args","arguments","backwards","ceil","nrm2","values","sqrt","angle","acos","index","Number","POSITIVE_INFINITY","max","idamax","isamax","NEGATIVE_INFINITY",4,"./matrix.js","./vector.js"],"mappings":"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","file":"vectorious-4.0.5.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.vectorious = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function () {\n  'use strict';\n\n  var Vector = require('./vector'),\n      nblas = null;\n\n  try {\n    nblas = require('nblas');\n  } catch (error) {}\n\n  /**\n   * @method constructor\n   * @desc Creates a `Matrix` from the supplied arguments.\n   **/\n  function Matrix (data, options) {\n    this.type = Float64Array;\n    this.shape = [];\n\n    if (data && data.buffer && !(data instanceof Vector) &&\n        Object.prototype.toString.call(data.buffer) === '[object ArrayBuffer]' &&\n        options.shape) {\n      if (data.length !== options.shape[0] * options.shape[1])\n        throw new Error(\"Shape does not match typed array dimensions.\");\n\n      this.shape = options.shape;\n      this.data = data;\n      this.type = data.constructor;\n    } else if (Object.prototype.toString.call(data) === '[object Array]') {\n      return Matrix.fromArray(data);\n    } else if (data instanceof Vector) {\n      this.shape = options && options.shape ? options.shape : [data.length, 1];\n      this.data = new data.type(data.data);\n      this.type = data.type;\n    } else if (data instanceof Matrix) {\n      this.shape = [data.shape[0], data.shape[1]];\n      this.data = new data.type(data.data);\n      this.type = data.type;\n    }\n  }\n\n  Matrix.fromTypedArray = function (data, shape) {\n    var self = Object.create(Matrix.prototype);\n    self.shape = shape;\n    self.data = data;\n    self.type = data.constructor;\n\n    return self;\n  };\n\n  Matrix.fromArray = function (array) {\n    var shape = [],\n        data,\n        c;   // number of columns\n\n    shape[0] = array.length;\n    shape[1] = array[0].length;\n    c = shape[1];\n\n    data = new Float64Array(shape[0]*shape[1]);\n\n    for (var ii = 0; ii < shape[0]; ++ii)\n      for (var jj = 0; jj < shape[1]; ++jj)\n        data[ii*c + jj] = array[ii][jj];\n\n    return Matrix.fromTypedArray(data, shape);\n  };\n\n  /**\n   * Static method. Adds two matrices `a` and `b` together.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} a new matrix containing the sum of `a` and `b`\n   **/\n  Matrix.add = function (a, b) {\n    return new Matrix(a).add(b);\n  };\n\n  /**\n   * Adds `matrix` to current matrix.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.add = function (matrix) {\n    var r = this.shape[0],          // rows in this matrix\n        c = this.shape[1],          // columns in this matrix\n        d1 = this.data,\n        d2 = matrix.data;\n\n    if (r !== matrix.shape[0] || c !== matrix.shape[1])\n      throw new Error('sizes do not match: ' + r + 'x' + c + ', ' + matrix.shape[0] + 'x' + matrix.shape[1]);\n\n    if (nblas && (this.type === Float64Array || this.type === Float32Array))\n      nblas.axpy(d2, d1);\n    else {\n      for (var ii = 0; ii < r; ii++)\n        for (var jj = 0; jj < c; jj++)\n          d1[ii*c + jj] += d2[ii*c + jj];\n    }\n\n    return this;\n  };\n\n  /**\n   * Static method. Subtracts the matrix `b` from matrix `a`.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} a new matrix containing the difference between `a` and `b`\n   **/\n  Matrix.subtract = function (a, b) {\n    return new Matrix(a).subtract(b);\n  };\n\n  /**\n   * Subtracts `matrix` from current matrix.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.subtract = function (matrix) {\n      var r = this.shape[0],          // rows in this matrix\n          c = this.shape[1],          // columns in this matrix\n          d1 = this.data,\n          d2 = matrix.data;\n\n      if (r !== matrix.shape[0] || c !== matrix.shape[1])\n        throw new Error('sizes do not match');\n\n      if (nblas && (this.type === Float64Array || this.type === Float32Array))\n        nblas.axpy(d2, d1, -1);\n      else {\n        for (var ii = 0; ii < r; ii++)\n          for (var jj = 0; jj < c; jj++)\n            d1[ii*c + jj] -= d2[ii*c + jj];\n      }\n\n      return this;\n  };\n\n  /**\n   * Static method. Multiplies all elements of a matrix `a` with a specified `scalar`.\n   * @param {Matrix} a\n   * @param {Number} scalar\n   * @returns {Matrix} a new scaled matrix\n   **/\n  Matrix.scale = function (a, scalar) {\n    return new Matrix(a).scale(scalar);\n  };\n\n  /**\n   * Multiplies all elements of current matrix with a specified `scalar`.\n   * @param {Number} scalar\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.scale = function (scalar) {\n    var r = this.shape[0],          // rows in this matrix\n        c = this.shape[1],          // columns in this matrix\n        d1 = this.data;\n\n    if (nblas && (this.type === Float64Array || this.type === Float32Array))\n      nblas.scal(d1, scalar);\n    else {\n      for (var ii = 0; ii < r; ii++)\n        for (var jj = 0; jj < c; jj++)\n          d1[ii*c + jj] *= scalar;\n    }\n\n    return this;\n  };\n\n  /**\n   * Static method. Creates an `i x j` matrix containing zeros (`0`), takes an\n   * optional `type` argument which should be an instance of `TypedArray`.\n   * @param {Number} i\n   * @param {Number} j\n   * @param {TypedArray} type\n   * @returns {Matrix} a matrix of the specified dimensions and `type`\n   **/\n  Matrix.zeros = function (i, j, type) {\n    if (i <= 0 || j <= 0)\n      throw new Error('invalid size');\n\n    type = type ? type : Float64Array;\n    var data = new type(i * j);\n    if (data.fill) {\n      // fill not implmeneted on chrome version 43\n      data.fill(0.0);\n    } else {\n      for (var k = 0; k < i * j; k++)\n        data[k] = +0.0;\n    }\n\n    return Matrix.fromTypedArray(data, [i, j]);\n  };\n\n  /**\n   * Static method. Creates an `i x j` matrix containing ones (`1`), takes an\n   * optional `type` argument which should be an instance of `TypedArray`.\n   * @param {Number} i\n   * @param {Number} j\n   * @param {TypedArray} type\n   * @returns {Matrix} a matrix of the specified dimensions and `type`\n   **/\n  Matrix.ones = function (i, j, type) {\n    if (i <= 0 || j <= 0)\n      throw new Error('invalid size');\n\n    type = type ? type : Float64Array;\n    var data = new type(i * j);\n    if (data.fill) {\n      // fill not implmeneted on chrome version 43\n      data.fill(1.0);\n    } else {\n      for (var k = 0; k < i * j; k++)\n        data[k] = +1.0;\n    }\n\n    return Matrix.fromTypedArray(data, [i, j]);\n  };\n\n  /**\n   * Static method. Creates an `i x j` matrix containing random values between\n   * `0` and `1`, takes an optional `type` argument which should be an instance\n   * of `TypedArray`.\n   * @param {Number} i\n   * @param {Number} j\n   * @param {TypedArray} type\n   * @returns {Matrix} a matrix of the specified dimensions and `type`\n   **/\n  Matrix.random = function (i, j, type) {\n    return Matrix\n      .zeros(i, j, type)\n      .map(Math.random);\n  };\n\n  /**\n   * Static method. Multiplies two matrices `a` and `b` of matching dimensions.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} a new resultant matrix containing the matrix product of `a` and `b`\n   **/\n  Matrix.multiply = function (a, b) {\n    return a.multiply(b);\n  };\n\n  /**\n   * Multiplies two matrices `a` and `b` of matching dimensions.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} a new resultant matrix containing the matrix product of `a` and `b`\n   **/\n  Matrix.prototype.multiply = function (matrix) {\n    var r1 = this.shape[0],   // rows in this matrix\n        c1 = this.shape[1],   // columns in this matrix\n        r2 = matrix.shape[0], // rows in multiplicand\n        c2 = matrix.shape[1], // columns in multiplicand\n        d1 = this.data,\n        d2 = matrix.data;\n\n    if (c1 !== r2)\n      throw new Error('sizes do not match');\n\n    var out = Matrix.fromTypedArray(\n      new this.type(r1 * c2),\n      [r1, c2]\n    );\n\n    var data = out.data;\n    if (nblas && (out.type === Float64Array || out.type === Float32Array))\n      nblas.gemm(d1, d2, data, r1, c2, c1);\n    else {\n      for (var ii = 0; ii < r1; ii++) {\n        for (var jj = 0; jj < c2; jj++) {\n          var sum = +0;\n          for (var kk = 0; kk < c1; kk++)\n            sum += d1[ii*c1+kk] * d2[jj+kk*c2];\n\n          data[ii*c2+jj] = sum;\n        }\n      }\n    }\n\n    return out;\n  };\n\n  /**\n   * Static method. Transposes a matrix (mirror across the diagonal).\n   * @returns {Matrix} a new resultant transposed matrix\n   **/\n  Matrix.transpose = function (matrix) {\n    return new Matrix(matrix).transpose();\n  };\n\n  /**\n   * Transposes a matrix (mirror across the diagonal).\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.transpose = function () {\n    var r = this.shape[0],\n        c = this.shape[1];\n\n    var i, j;\n\n    if (r === c) {\n      for (i = 0; i < r - 1; i++) {\n        for (j = i + 1; j < r; j++) {\n          var tmp = this.data[j * r + i];\n          this.data[j * r + i] = this.data[i * r + j];\n          this.data[i * r + j] = tmp;\n        }\n      }\n      return this;\n    }\n\n    var data = new this.type(c * r);\n    for (i = 0; i < r; i++)\n      for (j = 0; j < c; j++)\n        data[j * r + i] = this.data[i * c + j];\n\n    return Matrix.fromTypedArray(data, [c, r]);\n  };\n\n  /**\n   * Determines the inverse of any invertible square matrix using\n   * Gaussian elimination.\n   * @returns {Matrix} the inverse of the matrix\n   **/\n  Matrix.prototype.inverse = function () {\n    var l = this.shape[0],\n        m = this.shape[1];\n\n    if (l !== m)\n      throw new Error('invalid dimensions');\n\n    var identity = Matrix.identity(l);\n    var augmented = Matrix.augment(this, identity);\n    var gauss = augmented.gauss();\n\n    var left = Matrix.zeros(l, m),\n        right = Matrix.zeros(l, m),\n        n = gauss.shape[1],\n        i, j;\n    for (i = 0; i < l; i++) {\n      for (j = 0; j < n; j++) {\n        if (j < m)\n          left.set(i, j, gauss.get(i, j));\n        else\n          right.set(i, j - l, gauss.get(i, j));\n      }\n    }\n\n    if (!left.equals(Matrix.identity(l)))\n      throw new Error('matrix is not invertible');\n\n    return right;\n  };\n\n  /**\n   * Performs Gaussian elimination on a matrix.\n   * @returns {Matrix} the matrix in reduced row echelon form\n   **/\n  Matrix.prototype.gauss = function () {\n    var l = this.shape[0],\n        m = this.shape[1];\n\n    var copy = new Matrix(this),\n        lead = 0,\n        pivot,\n        i, j, k,\n        leadValue;\n\n    for (i = 0; i < l; i++) {\n      if (m <= lead)\n        return new Error('matrix is singular');\n\n      j = i;\n      while (copy.data[j * m + lead] === 0) {\n        j++;\n        if (l === j) {\n          j = i;\n          lead++;\n\n          if (m === lead)\n            return new Error('matrix is singular');\n        }\n      }\n\n      copy.swap(i, j);\n\n      pivot = copy.data[i * m + lead];\n      if (pivot !== 0) {\n        // scale down the row by value of pivot\n        for (k = 0; k < m; k++)\n          copy.data[(i * m) + k] = copy.data[(i * m) + k] / pivot;\n      }\n\n\n      for (j = 0; j < l; j++) {\n        leadValue = copy.data[j * m + lead];\n        if (j !== i)\n          for (k = 0; k < m; k++)\n            copy.data[j * m + k] = copy.data[j * m + k] - (copy.data[i * m + k] * leadValue);\n      }\n\n      lead++;\n    }\n\n    for (i = 0; i < l; i++) {\n      pivot = 0;\n      for (j = 0; j < m; j++)\n        if (!pivot)\n          pivot = copy.data[i * m + j];\n\n      if (pivot)\n        // scale down the row by value of pivot\n        for (k = 0; k < m; k++)\n          copy.data[(i * m) + k] = copy.data[(i * m) + k] / pivot;\n    }\n\n    return copy;\n  };\n\n  /**\n   * Pivots a matrix until elements are in upper triangular form\n   * @returns {Array} a tuple of the resultant pivotized matrix and its sign\n   * (used in LU factorization).\n   **/\n  Matrix.prototype.pivotize = function () {\n    var l = this.shape[0],\n        result = Matrix.identity(l),\n        sign = 1,\n        pivot,\n        lead,\n        row;\n\n    var i, j;\n    for (i = 0; i < l; i++) {\n      pivot = 0;\n      row = i;\n\n      for (j = i; j < l; j++) {\n        lead = Math.abs(this.get(j, i));\n        if (pivot < lead) {\n          pivot = lead;\n          row = j;\n        }\n      }\n\n      if (i !== row) {\n        result.swap(i, row);\n        sign *= -1;\n      }\n    }\n\n    return [result, sign];\n  };\n\n  /**\n   * Performs LU factorization on a matrix.\n   * @returns {Array} a triple (3-tuple) of the lower triangular resultant matrix `L`, the upper\n   * triangular resultant matrix `U` and the pivot matrix `P`\n   **/\n  Matrix.prototype.lu = function () {\n    var l = this.shape[0];\n\n    var L = Matrix.identity(l),\n        U = Matrix.zeros(l, l),\n        P = this.pivotize(),\n        A = Matrix.multiply(P[0], this);\n\n    var i, j, k,\n        sum = [0, 0];\n\n    for (i = 0; i < l; i++) {\n      for (j = 0; j < i + 1; j++) {\n        sum[0] = 0;\n        for (k = 0; k < j; k++)\n          sum[0] += U.get(k, i) * L.get(j, k);\n\n        U.set(j, i, A.get(j, i) - sum[0]);\n      }\n\n      for (j = i; j < l; j++) {\n        sum[1] = 0;\n        for (k = 0; k < j; k++)\n          sum[1] += U.get(k, i) * L.get(j, k);\n\n        L.set(j, i, (A.get(j, i) - sum[1]) / U.get(i, i));\n      }\n    }\n\n    return [L, U, P];\n  };\n\n  /**\n   * Static method. Augments two matrices `a` and `b` of matching dimensions\n   * (appends `b` to `a`).\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Matrix} the resultant matrix of `b` augmented to `a`\n   **/\n  Matrix.augment = function (a, b) {\n    return new Matrix(a).augment(b);\n  };\n\n  /**\n   * Augments `matrix` with current matrix.\n   * @param {Matrix} matrix\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.augment = function (matrix) {\n    if (matrix.shape.length === 0)\n     return this;\n\n    var r1 = this.shape[0],\n        c1 = this.shape[1],\n        r2 = matrix.shape[0],\n        c2 = matrix.shape[1],\n        d1 = this.data,\n        d2 = matrix.data,\n        i, j;\n\n    if (r1 !== r2)\n      throw new Error(\"Rows do not match.\");\n\n    var length = c1 + c2,\n        data = new this.type(length * r1);\n\n    for (i = 0; i < r1; i++)\n      for (j = 0; j < c1; j++)\n        data[i * length + j] = d1[i * c1 + j];\n\n    for (i = 0; i < r2; i++)\n      for (j = 0; j < c2; j++)\n        data[i * length + j + c1] = d2[i * c2 + j];\n\n    this.shape = [r1, length];\n    this.data = data;\n\n    return this;\n  };\n\n  /**\n   * Static method. Creates an identity matrix of `size`, takes an optional `type` argument\n   * which should be an instance of `TypedArray`.\n   * @param {Number} size\n   * @param {TypedArray} type\n   * @returns {Matrix} an identity matrix of the specified `size` and `type`\n   **/\n  Matrix.identity = function (size, type) {\n    if (size < 0)\n      throw new Error('invalid size');\n\n    type = type ? type : Float64Array;\n    var matrix = Matrix.zeros(size, size, type),\n        i, j;\n    for (i = 0; i < size; i++)\n      matrix.data[i * size + i] = 1.0;\n\n    return matrix;\n  };\n\n  /**\n   * Static method. Creates a magic square matrix of `size`, takes an optional `type` argument\n   * which should be an instance of `TypedArray`.\n   * @param {Number} size\n   * @param {Number} type\n   * @returns {Matrix} a magic square matrix of the specified `size` and `type`\n   **/\n  Matrix.magic = function (size, type) {\n    if (size < 0)\n      throw new Error('invalid size');\n\n    function f(n, x, y) {\n      return (x + y * 2 + 1) % n;\n    }\n\n    type = type ? type : Float64Array;\n    var magic = Matrix.zeros(size, size, type),\n        i, j;\n    for (i = 0; i < size; i++)\n      for (j = 0; j < size; j++)\n        magic.data[(size - i - 1) * size + (size - j - 1)] =\n          f(size, size - j - 1, i) * size + f(size, j, i) + 1;\n\n    return magic;\n  };\n\n  /**\n   * Gets the diagonal of a matrix.\n   * @returns {Vector} the diagonal of the matrix as a vector\n   **/\n  Matrix.prototype.diag = function () {\n    var r = this.shape[0],\n        c = this.shape[1],\n        data = new this.type(Math.min(r, c));\n\n    for (var i = 0; i < r && i < c; i++)\n      data[i] = this.data[i * c + i];\n\n    return new Vector(data);\n  };\n\n  /**\n   * Gets the determinant of any square matrix using LU factorization.\n   * @returns {Number} the determinant of the matrix\n   **/\n  Matrix.prototype.determinant = function () {\n    if (this.shape[0] !== this.shape[1])\n      throw new Error('matrix is not square');\n\n    var lu = this.lu();\n    var P = lu.pop(),\n        U = lu.pop(),\n        L = lu.pop();\n\n    var product = 1,\n        l = this.shape[0];\n\n    for (var i = 0; i < l; i++)\n      product *= L.get(i, i) * U.get(i, i);\n\n    return P.pop() * product;\n  };\n\n  /**\n   * Gets the trace of the matrix (the sum of all diagonal elements).\n   * @returns {Number} the trace of the matrix\n   **/\n  Matrix.prototype.trace = function () {\n    var diagonal = this.diag(),\n        result = 0,\n        i, l;\n\n    for (i = 0, l = diagonal.length; i < l; i++)\n      result += diagonal.get(i);\n\n    return result;\n  };\n\n  /**\n   * Static method. Checks the equality of two matrices `a` and `b`.\n   * @param {Matrix} a\n   * @param {Matrix} b\n   * @returns {Boolean} `true` if equal, `false` otherwise\n   **/\n  Matrix.equals = function (a, b) {\n    return a.equals(b);\n  };\n\n  /**\n   * Checks the equality of `matrix` and current matrix.\n   * @param {Matrix} matrix\n   * @returns {Boolean} `true` if equal, `false` otherwise\n   **/\n  Matrix.prototype.equals = function (matrix) {\n    var r = this.shape[0],\n        c = this.shape[1],\n        d1 = this.data,\n        d2 = matrix.data;\n\n    if (r !== matrix.shape[0] || c !== matrix.shape[1] || this.type !== matrix.type)\n      return false;\n\n    for (var i = 0; i < r * c; i++)\n      if (d1[i] !== d2[i])\n        return false;\n\n    return true;\n  };\n\n  /**\n   * Gets the value of the element in row `i`, column `j` of current matrix\n   * @param {Number} i\n   * @param {Number} j\n   * @returns {Number} the element at row `i`, column `j` of current matrix\n   **/\n  Matrix.prototype.get = function (i, j) {\n    if (i < 0 || j < 0 || i > this.shape[0] - 1 || j > this.shape[1] - 1)\n      throw new Error('index out of bounds');\n\n    return this.data[i*this.shape[1]+j];\n  };\n\n  /**\n   * Sets the element at row `i`, column `j` to value\n   * @param {Number} i\n   * @param {Number} j\n   * @param {Number} value\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.set = function (i, j, value) {\n    if (i < 0 || j < 0 || i > this.shape[0] - 1 || j > this.shape[1] - 1)\n      throw new Error('index out of bounds');\n\n    this.data[i*this.shape[1]+j] = value;\n    return this;\n  };\n\n  /**\n   * Swaps two rows `i` and `j` in a matrix\n   * @param {Number} i\n   * @param {Number} j\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.swap = function (i, j) {\n    if (i < 0 || j < 0 || i > this.shape[0] - 1 || j > this.shape[0] - 1)\n      throw new Error('index out of bounds');\n\n    var c = this.shape[1];\n\n    // copy first row\n    var copy = this.data.slice(i * c, (i + 1) * c);\n    // move second row into first row spot\n    this.data.copyWithin(i * c, j * c, (j + 1) * c);\n    // copy first row back into second row spot\n    this.data.set(copy, j * c);\n\n    return this;\n  };\n\n  /**\n   * Maps a function `callback` to all elements of a copy of current matrix.\n   * @param {Function} callback\n   * @returns {Matrix} the resultant mapped matrix\n   **/\n  Matrix.prototype.map = function (callback) {\n    var result = new Matrix(this);\n    result.data = this.data.map(callback);\n\n    return result;\n  };\n\n  /**\n   * Functional version of for-looping the rows in a matrix, is\n   * equivalent to `Array.prototype.forEach`.\n   * @param {Function} callback\n   * @returns {Matrix} `this`\n   **/\n  Matrix.prototype.each = function (callback) {\n\n    var c = this.shape[1];\n\n    this.data.forEach(function (value, i) {\n      callback(value, i / c | 0, i % c);\n    });\n\n    return this;\n  };\n\n  /**\n   * Converts current matrix into a readable formatted string\n   * @returns {String} a string of the matrix' contents\n   **/\n  Matrix.prototype.toString = function () {\n    var result = [],\n        r = this.shape[0],\n        c = this.shape[1];\n\n    for (var i = 0; i < r; i++)\n      // get string version of current row and store it\n      result.push('[' + this.data.subarray(i * c, (i + 1) * c ).toString() + ']');\n\n    return '[' + result.join(', \\n') + ']';\n  };\n\n  /**\n   * Converts current matrix into a two-dimensional array\n   * @returns {Array} an array of the matrix' contents\n   **/\n  Matrix.prototype.toArray = function () {\n    var result = [],\n        r = this.shape[0],\n        c = this.shape[1];\n\n    for (var i = 0; i < r; i++)\n      // copy current row into a native array and store it\n      result.push(Array.prototype.slice.call(this.data.subarray(i * c, (i + 1) * c)));\n\n    return result;\n  };\n\n  /**\n   * Converts current matrix into a two-dimensional Vector\n   * @returns {Array} a Vector of the matrix' contents\n   **/\n  Matrix.prototype.toVector = function () {\n    var r = this.shape[0],\n        c = this.shape[1];\n\n    if (r !== 1 && c !== 1)\n      throw new Error('invalid matrix shape');\n\n    return new Vector(this.data);\n  };\n\n  module.exports = Matrix;\n}());\n\n},{\"./vector\":3,\"nblas\":2}],2:[function(require,module,exports){\n\n},{}],3:[function(require,module,exports){\n(function () {\n  'use strict';\n\n  var nblas = null;\n  try {\n    nblas = require('nblas');\n  } catch (error) {}\n\n  /**\n   * @method constructor\n   * @desc Creates a two-dimensional `Vector` from the supplied arguments.\n   **/\n  function Vector (data) {\n    this.type = Float64Array;\n    this.length = 0;\n\n    if (data instanceof Vector) {\n      this.combine(data);\n    } else if (data instanceof Array) {\n      this.data = new this.type(data);\n      this.length = data.length;\n    } else if (data && data.buffer && Object.prototype.toString.call(data.buffer) === '[object ArrayBuffer]') {\n      this.data = data;\n      this.length = data.length;\n      this.type = data.constructor;\n    }\n  }\n\n  /**\n   * Static method. Adds two vectors `a` and `b` together.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Vector} a vector containing the sum of `a` and `b`\n   **/\n  Vector.add = function (a, b) {\n    return new Vector(a).add(b);\n  };\n\n  /**\n   * Adds `vector` to the current vector.\n   * @param {Vector} vector\n   * @returns {Vector} this\n   **/\n  Vector.prototype.add = function (vector) {\n    var l1 = this.length,\n        l2 = vector.length;\n    if (l1 !== l2)\n      throw new Error('sizes do not match!');\n    if (!l1 && !l2)\n      return this;\n\n    if (nblas && (this.type === Float64Array || this.type === Float32Array))\n      nblas.axpy(vector.data, this.data);\n    else {\n      for (var i = 0; i < l1; i++)\n        this.data[i] += vector.data[i];\n    }\n\n    return this;\n  };\n\n  /**\n   * Static method. Subtracts the vector `b` from vector `a`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Vector} a vector containing the difference between `a` and `b`\n   **/\n  Vector.subtract = function (a, b) {\n    return new Vector(a).subtract(b);\n  };\n\n  /**\n   * Subtracts `vector` from the current vector.\n   * @param {Vector} vector\n   * @returns {Vector} this\n   **/\n  Vector.prototype.subtract = function (vector) {\n    var l1 = this.length,\n        l2 = vector.length;\n    if (l1 !== l2)\n      throw new Error('sizes do not match');\n\n    if (!l1 && !l2)\n      return this;\n\n    if (nblas && (this.type === Float64Array || this.type === Float32Array))\n      nblas.axpy(vector.data, this.data, -1);\n    else {\n      var i;\n      for (i = 0; i < l1; i++)\n        this.data[i] += vector.data[i];\n    }\n\n    return this;\n  };\n\n  /**\n   * Static method. Multiplies all elements of `vector` with a specified `scalar`.\n   * @param {Vector} vector\n   * @param {Number} scalar\n   * @returns {Vector} a resultant scaled vector\n   **/\n  Vector.scale = function (vector, scalar) {\n    return new Vector(vector).scale(scalar);\n  };\n\n  /**\n   * Multiplies all elements of current vector with a specified `scalar`.\n   * @param {Number} scalar\n   * @returns {Vector} this\n   **/\n  Vector.prototype.scale = function (scalar) {\n    if (nblas && (this.type === Float64Array || this.type === Float32Array))\n      nblas.scal(this.data, scalar);\n    else {\n      var i;\n      for (i = this.length - 1; i >= 0; i--)\n        this.data[i] *= scalar;\n    }\n\n    return this;\n  };\n\n  /**\n   * Static method. Normalizes `vector`, i.e. divides all elements with the magnitude.\n   * @param {Vector} vector\n   * @returns {Vector} a resultant normalized vector\n   **/\n  Vector.normalize = function (vector) {\n    return new Vector(vector).normalize();\n  };\n\n  /**\n   * Normalizes current vector.\n   * @returns {Vector} a resultant normalized vector\n   **/\n  Vector.prototype.normalize = function () {\n    return this.scale(1 / this.magnitude());\n  };\n\n  /**\n   * Static method. Projects the vector `a` onto the vector `b` using\n   * the projection formula `(b * (a * b / b * b))`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Vector} a new resultant projected vector\n   **/\n  Vector.project = function (a, b) {\n    return a.project(new Vector(b));\n  };\n\n  /**\n   * Projects the current vector onto `vector` using\n   * the projection formula `(b * (a * b / b * b))`.\n   * @param {Vector} vector\n   * @returns {Vector} `vector`\n   **/\n  Vector.prototype.project = function (vector) {\n    return vector.scale(this.dot(vector) / vector.dot(vector));\n  };\n\n  /**\n   * Static method. Creates a vector containing zeros (`0`) of `count` size, takes\n   * an optional `type` argument which should be an instance of `TypedArray`.\n   * @param {Number} count\n   * @param {TypedArray} type\n   * @returns {Vector} a new vector of the specified size and `type`\n   **/\n  Vector.zeros = function (count, type) {\n    if (count < 0)\n      throw new Error('invalid size');\n    else if (count === 0)\n      return new Vector();\n\n    type = type ? type : Float64Array;\n    var data = new type(count),\n        i;\n    if (data.fill)\n      data.fill(+0.0);\n    else {\n      for (i = 0; i < count; i++)\n        data[i] = +0.0;\n    }\n\n    return new Vector(data);\n  };\n\n  /**\n   * Static method. Creates a vector containing ones (`1`) of `count` size, takes\n   * an optional `type` argument which should be an instance of `TypedArray`.\n   * @param {Number} count\n   * @param {TypedArray} type\n   * @returns {Vector} a new vector of the specified size and `type`\n   **/\n  Vector.ones = function (count, type) {\n    if (count < 0)\n      throw new Error('invalid size');\n    else if (count === 0)\n      return new Vector();\n\n    type = type ? type : Float64Array;\n    var data = new type(count),\n        i;\n    if (data.fill)\n      data.fill(1.0);\n    else {\n      for (i = 0; i < count; i++)\n        data[i] = 1;\n    }\n\n    return new Vector(data);\n  };\n\n  /**\n   * Static method. Creates a vector containing a range (can be either ascending or descending)\n   * of numbers specified by the arguments provided (e.g. `Vector.range(0, .5, 2)`\n   * gives a vector containing all numbers in the interval `[0, 2)` separated by\n   * steps of `0.5`), takes an optional `type` argument which should be an instance of\n   * `TypedArray`.\n   * @param {Number} start\n   * @param {Number} step - optional\n   * @param {Number} end\n   * @returns {Vector} a new vector containing the specified range of the specified `type`\n   **/\n  Vector.range = function () {\n    var args = [].slice.call(arguments, 0),\n        backwards = false,\n        start, step, end;\n\n    var type = Float64Array;\n    if (typeof args[args.length - 1] === 'function')\n      type = args.pop();\n\n    switch(args.length) {\n      case 2:\n        end = args.pop();\n        step = 1;\n        start = args.pop();\n        break;\n      case 3:\n        end = args.pop();\n        step = args.pop();\n        start = args.pop();\n        break;\n      default:\n        throw new Error('invalid range');\n    }\n\n    if (end - start < 0) {\n      var copy = end;\n      end = start;\n      start = copy;\n      backwards = true;\n    }\n\n    if (step > end - start)\n      throw new Error('invalid range');\n\n    var vector = Vector.zeros(Math.ceil((end - start) / step), type),\n        i, j;\n    for (i = start, j = 0; i < end; i += step, j++)\n      vector.data[j] = backwards ? end - i + start : i;\n\n    return vector;\n  };\n\n  /**\n   * Static method. Creates a vector of `count` elements containing random\n   * values between `0` and `1`, takes an optional `type` argument which\n   * should be an instance of `TypedArray`.\n   * @param {Number} count\n   * @param {TypedArray} type\n   * @returns {Vector} a new vector of the specified size and `type`\n   **/\n  Vector.random = function (count, type) {\n    return Vector\n      .zeros(count, type)\n      .map(Math.random);\n  };\n\n  /**\n   * Static method. Performs dot multiplication with two vectors `a` and `b`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Number} the dot product of the two vectors\n   **/\n  Vector.dot = function (a, b) {\n    return a.dot(b);\n  };\n\n  /**\n   * Performs dot multiplication with current vector and `vector`\n   * @param {Vector} vector\n   * @returns {Number} the dot product of the two vectors\n   **/\n  Vector.prototype.dot = function (vector) {\n    if (this.length !== vector.length)\n      throw new Error('sizes do not match');\n\n    var a = this.data,\n        b = vector.data;\n\n    if (nblas && (this.type === Float64Array || this.type === Float32Array))\n      return nblas.dot(a, b);\n\n    var result = 0,\n        i, l;\n\n    for (i = 0, l = this.length; i < l; i++)\n      result += a[i] * b[i];\n\n    return result;\n  };\n\n  /**\n   * Calculates the magnitude of a vector (also called L2 norm or Euclidean length).\n   * @returns {Number} the magnitude (L2 norm) of the vector\n   **/\n  Vector.prototype.magnitude = function () {\n    if (!this.length)\n      return 0;\n\n    if (nblas && (this.type === Float64Array || this.type === Float32Array))\n      return nblas.nrm2(this.data);\n\n    var result = 0,\n        values = this.data,\n        i, l;\n    for (i = 0, l = this.length; i < l; i++)\n      result += values[i] * values[i];\n\n    return Math.sqrt(result);\n  };\n\n  /**\n   * Static method. Determines the angle between two vectors `a` and `b`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Number} the angle between the two vectors in radians\n   **/\n  Vector.angle = function (a, b) {\n    return a.angle(b);\n  };\n\n  /**\n   * Determines the angle between the current vector and `vector`.\n   * @param {Vector} vector\n   * @returns {Number} the angle between the two vectors in radians\n   **/\n  Vector.prototype.angle = function (vector) {\n    return Math.acos(this.dot(vector) / this.magnitude() * vector.magnitude());\n  };\n\n  /**\n   * Static method. Checks the equality of two vectors `a` and `b`.\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Boolean} `true` if the two vectors are equal, `false` otherwise\n   **/\n  Vector.equals = function (a, b) {\n    return a.equals(b);\n  };\n\n  /**\n   * Checks the equality of the current vector and `vector`.\n   * @param {Vector} vector\n   * @returns {Boolean} `true` if the two vectors are equal, `false` otherwise\n   **/\n  Vector.prototype.equals = function (vector) {\n    if (this.length !== vector.length)\n      return false;\n\n    var a = this.data,\n        b = vector.data,\n        i = 0, l = this.length;\n\n    while(i < l && a[i] === b[i]) { i++; }\n\n    return i === l;\n  };\n\n  /**\n   * Gets the element at `index` from current vector.\n   * @param {Number} index\n   * @returns {Number} the element at `index`\n   **/\n  Vector.prototype.get = function (index) {\n    if (index < 0 || index > this.length - 1)\n      throw new Error('index out of bounds');\n\n    return this.data[index];\n  };\n\n  /**\n   * Gets the minimum value (smallest) element of current vector.\n   * @returns {Number} the smallest element of the current vector\n   **/\n  Vector.prototype.min = function () {\n    var min = Number.POSITIVE_INFINITY,\n        values = this.data,\n        value,\n        i, l;\n\n    for (i = 0, l = values.length; i < l; i++) {\n      value = values[i];\n      if (value < min)\n        min = value;\n    }\n\n    return min;\n  };\n\n  /**\n   * Gets the maximum value (largest) element of current vector.\n   * @returns {Number} the largest element of current vector\n   **/\n  Vector.prototype.max = function () {\n    if (nblas && this.type === Float64Array)\n      return this.data[nblas.idamax(this.length, this.data, 1)];\n    else if (nblas && this.type === Float32Array)\n      return this.data[nblas.isamax(this.length, this.data, 1)];\n\n    var max = Number.NEGATIVE_INFINITY,\n        values = this.data,\n        value,\n        i, l;\n\n    for (i = 0, l = this.length; i < l; i++) {\n      value = values[i];\n      if (value > max)\n        max = value;\n    }\n\n    return max;\n  };\n\n  /**\n   * Sets the element at `index` to `value`.\n   * @param {Number} index\n   * @param {Number} value\n   * @returns {Vector} this\n   **/\n  Vector.prototype.set = function (index, value) {\n    if (index < 0 || index > this.length - 1)\n      throw new Error('index out of bounds');\n\n    this.data[index] = value;\n    return this;\n  };\n\n  /**\n   * Static method. Combines two vectors `a` and `b` (appends `b` to `a`).\n   * @param {Vector} a\n   * @param {Vector} b\n   * @returns {Vector} `b` appended to vector `a`\n   **/\n  Vector.combine = function (a, b) {\n    return new Vector(a).combine(b);\n  };\n\n  /**\n   * Combines the current vector with `vector`\n   * @param {Vector} vector\n   * @returns {Vector} `vector` combined with current vector\n   **/\n  Vector.prototype.combine = function (vector) {\n    if (!vector.length)\n      return this;\n    if (!this.length) {\n      this.data = new vector.type(vector.data);\n      this.length = vector.length;\n      this.type = vector.type;\n      return this;\n    }\n\n    var l1 = this.length,\n        l2 = vector.length,\n        d1 = this.data,\n        d2 = vector.data;\n\n    var data = new this.type(l1 + l2);\n    if (nblas && (this.type === Float64Array || this.type === Float32Array))\n      nblas.copy(d1, data);\n    else\n      for (var i = 0; i < l1; i++)\n        data[i] = d1[i];\n\n    for (var j = 0; j < l2; j++)\n      data[l1 + j] = d2[j];\n\n    this.data = data;\n    this.length = l1 + l2;\n\n    return this;\n  };\n\n  /**\n   * Pushes a new `value` into current vector.\n   * @param {Number} value\n   * @returns {Vector} `this`\n   **/\n  Vector.prototype.push = function (value) {\n    return this.combine(new Vector([value]));\n  };\n\n  /**\n   * Maps a function `callback` to all elements of current vector.\n   * @param {Function} callback\n   * @returns {Vector} `this`\n   **/\n  Vector.prototype.map = function (callback) {\n    var i;\n    for (i = 0; i < this.length; i++)\n      this.data[i] = callback(this.data[i]);\n\n    return this;\n  };\n\n  /**\n   * Functional version of for-looping the vector, is equivalent\n   * to `Array.prototype.forEach`.\n   * @param {Function} callback\n   * @returns {Vector} `this`\n   **/\n  Vector.prototype.each = function (callback) {\n    var i;\n    for (i = 0; i < this.length; i++)\n      callback(this.data[i], i);\n\n    return this;\n  };\n\n  /**\n   * Converts current vector into a readable formatted string.\n   * @returns {String} a string of the vector's contents\n   **/\n  Vector.prototype.toString = function () {\n    var result = '',\n        i;\n    for (i = 0; i < this.length; i++)\n      result += i > 0 ? ', ' + this.data[i] : this.data[i];\n\n    return '[' + result + ']';\n  };\n\n  /**\n   * Converts current vector into a JavaScript array.\n   * @returns {Array} an array containing all elements of current vector\n   **/\n  Vector.prototype.toArray = function () {\n    if (!this.data)\n      return [];\n\n    return Array.prototype.slice.call(this.data);\n  };\n\n  module.exports = Vector;\n})();\n\n},{\"nblas\":2}],4:[function(require,module,exports){\n(function () {\n  'use strict';\n\n  var Matrix = require('./matrix.js'),\n      Vector = require('./vector.js');\n\n  module.exports.Matrix = Matrix;\n  module.exports.Vector = Vector;\n})();\n\n},{\"./matrix.js\":1,\"./vector.js\":3}]},{},[4])(4)\n});"],"sourceRoot":"/source/"}