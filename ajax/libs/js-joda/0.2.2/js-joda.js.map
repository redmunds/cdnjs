{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 3c5130d7b8bf8d4a0eea","webpack:///./src/js-joda.js","webpack:///./src/LocalDate.js","webpack:///./src/assert.js","webpack:///./src/errors.js","webpack:///./~/es6-error/dist/index.js","webpack:///./src/MathUtil.js","webpack:///./src/chrono/IsoChronology.js","webpack:///./src/temporal/ChronoField.js","webpack:///./src/temporal/TemporalField.js","webpack:///./src/temporal/ValueRange.js","webpack:///./src/Year.js","webpack:///./src/Clock.js","webpack:///./src/Instant.js","webpack:///./src/temporal/ChronoUnit.js","webpack:///./src/Duration.js","webpack:///./src/LocalTime.js","webpack:///./src/temporal/TemporalAccessor.js","webpack:///./src/temporal/TemporalQueries.js","webpack:///./src/ZoneOffset.js","webpack:///./src/Month.js"],"names":[],"mappings":"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","file":"js-joda.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsjoda\"] = factory();\n\telse\n\t\troot[\"jsjoda\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 3c5130d7b8bf8d4a0eea\n **/","export { LocalDate } from './LocalDate';\nexport { Instant } from './Instant';\nexport { Clock } from './Clock';\nexport { ZoneOffset } from './ZoneOffset';\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/js-joda.js\n **/","import {assert} from './assert';\n\nimport { MathUtil } from './MathUtil';\nimport {DateTimeException} from './errors';\n\nimport { IsoChronology } from './chrono/IsoChronology';\nimport {ChronoField} from './temporal/ChronoField';\n\nimport {Clock} from './Clock';\nimport {Month} from './Month';\nimport {Year} from './Year';\nimport {LocalTime} from './LocalTime';\n\n/**\n * The number of days in a 400 year cycle.\n */\nconst  DAYS_PER_CYCLE = 146097;\n\n\n  /**\n   * The number of days from year zero to year 1970.\n   * There are five 400 year cycles from year zero to 2000.\n   * There are 7 leap years from 1970 to 2000.\n   */\nconst  DAYS_0000_TO_1970 = (DAYS_PER_CYCLE * 5) - (30 * 365 + 7);\n\n/**\n * A date without a time-zone in the ISO-8601 calendar system,\n * such as 2007-12-03.\n *\n * LocalDate is an immutable date-time object that represents a date,\n * often viewed as year-month-day. Other date fields, such as day-of-year,\n * day-of-week and week-of-year, can also be accessed.\n * For example, the value \"2nd October 2007\" can be stored in a LocalDate.\n *\n * This class does not store or represent a time or time-zone.\n * Instead, it is a description of the date, as used for birthdays.\n * It cannot represent an instant on the time-line without additional information\n * such as an offset or time-zone.\n */\n\nexport class LocalDate {\n\n    /**\n     *\n     * @param {number} year\n     * @param {Month, number} month\n     * @param {number} dayOfMonth\n     */\n    constructor(year, month, dayOfMonth){\n        if (month instanceof Month) {\n            month = month.value();\n        }\n        LocalDate.validate(year, month, dayOfMonth);\n        this._year = year;\n        this._month = month;\n        this._day = dayOfMonth;\n    }\n\n    /**\n     * Obtains an instance of {@code LocalDate} from a year, month and day.\n     * <p>\n     * This returns a {@code LocalDate} with the specified year, month and day-of-month.\n     * The day must be valid for the year and month, otherwise an exception will be thrown.\n     *\n     * @param {number} year  the year to represent, from MIN_YEAR to MAX_YEAR\n     * @param {Month, number} month  the month-of-year to represent, from 1 (January) to 12 (December)\n     * @param {number} dayOfMonth  the day-of-month to represent, from 1 to 31\n     * @return LocalDate the local date, not null\n     * @throws DateTimeException if the value of any field is out of range,\n     *  or if the day-of-month is invalid for the month-year\n     */\n    static of(year, month, dayOfMonth) {\n        return new LocalDate(year, month, dayOfMonth);\n    }\n\n    /**\n     *\n     * @return {number} gets the year\n     */\n    year() {\n        return this._year;\n    }\n\n    /**\n     *\n     * @return {number} gets the month\n     */\n    monthValue() {\n        return this._month;\n    }\n    \n    month() {\n        return Month.of(this._month);\n    }\n\n    /**\n     *\n     * @return {number} gets the day of month\n     */\n    dayOfMonth() {\n        return this._day;\n    }\n\n    /**\n     * Returns a copy of this LocalDate with the specified number of days added.\n     * \n     * This method adds the specified amount to the days field incrementing the\n     * month and year fields as necessary to ensure the result remains valid.\n     * The result is only invalid if the maximum/minimum year is exceeded.\n     * \n     * For example, 2008-12-31 plus one day would result in 2009-01-01.\n     * \n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} daysToAdd - the days to add, may be negative\n     * @return {LocalDate} a LocalDate based on this date with the days added, not null\n     * @throws AssertionError if the result exceeds the supported date range\n     */\n    plusDays(daysToAdd) {\n        if (daysToAdd === 0) {\n            return this;\n        }\n        var mjDay = this.toEpochDay() + daysToAdd;\n        return LocalDate.ofEpochDay(mjDay);\n    }\n\n    /*\n     * Returns a copy of this LocalDate with the specified number of days subtracted.\n     * \n     * This method subtracts the specified amount from the days field decrementing the\n     * month and year fields as necessary to ensure the result remains valid.\n     * The result is only invalid if the maximum/minimum year is exceeded.\n     * \n     * For example, 2009-01-01 minus one day would result in 2008-12-31.\n     * \n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} daysToSubtract - the days to subtract, may be negative\n     * @return {LocalDate} a LocalDate based on this date with the days subtracted, not null\n     * @throws AssertionError if the result exceeds the supported date range\n     */\n    minusDays(daysToSubtract) {\n        return this.plusDays(daysToSubtract * -1);\n    }\n\n    /**\n     * Converts this date to the Epoch Day.\n     *\n     * The Epoch Day count is a simple incrementing count of days where day 0 is 1970-01-01 (ISO).\n     * This definition is the same for all chronologies, enabling conversion.\n     *\n     * @return {number} the Epoch Day equivalent to this date\n     */\n    toEpochDay() {\n        var y = this.year();\n        var m = this.monthValue();\n        var total = 0;\n        total += 365 * y;\n        if (y >= 0) {\n            total += MathUtil.intDiv(y + 3, 4) - MathUtil.intDiv(y + 99, 100) + MathUtil.intDiv(y + 399, 400);\n        } else {\n            total -= MathUtil.intDiv(y, -4) - MathUtil.intDiv(y, -100) + MathUtil.intDiv(y, -400);\n        }\n        total += MathUtil.intDiv(367 * m - 362, 12);\n        total += this.dayOfMonth() - 1;\n        if (m > 2) {\n            total--;\n            if (!IsoChronology.isLeapYear(y)) {\n                total--;\n            }\n        }\n        return total - DAYS_0000_TO_1970;\n    }\n\n    /**\n     * Obtains the current date from the system clock in the default time-zone or\n     * if specified, the current date from the specified clock.\n     *\n     * This will query the specified clock to obtain the current date - today.\n     * Using this method allows the use of an alternate clock for testing.\n     *\n     * @param clock  the clock to use, if null, the system clock and default time-zone is used.\n     * @return the current date, not null\n     */\n    static now(clock = Clock.systemDefaultZone()) {\n        var now = clock.instant();\n        var offset = clock.offset(now);\n        var epochSec = now.epochSecond() + offset.totalSeconds();\n        var epochDay = MathUtil.floorDiv(epochSec, LocalTime.SECONDS_PER_DAY);\n        return LocalDate.ofEpochDay(epochDay);\n    }\n\n    /**\n     * Checks if this date is equal to another date.\n     *\n     * Compares this LocalDate with another ensuring that the date is the same.\n     *\n     * Only objects of type LocalDate are compared, other types return false.\n     *\n     * @param otherDate  the object to check, null returns false\n     * @return true if this is equal to the other date\n     */\n    equals(otherDate) {\n        if (this === otherDate) {\n            return true;\n        }\n        if (otherDate instanceof LocalDate) {\n            return this._compareTo(otherDate) === 0;\n        }\n        return false;\n    }\n\n    _compareTo(otherDate){\n        var cmp = this.year() - otherDate.year();\n        if (cmp === 0) {\n            cmp = (this.monthValue() - otherDate.monthValue());\n            if (cmp === 0) {\n                cmp = (this.dayOfMonth() - otherDate.dayOfMonth());\n            }\n        }\n        return cmp;\n    }\n\n    /**\n     * Outputs this date as a String, such as 2007-12-03.\n     * The output will be in the ISO-8601 format uuuu-MM-dd.\n     *\n     * @return {string} a string representation of this date, not null\n     */\n    toString() {\n        var dayString, monthString, yearString;\n\n        var yearValue = this.year();\n        var monthValue = this.monthValue();\n        var dayValue = this.dayOfMonth();\n\n        var absYear = Math.abs(yearValue);\n\n        if (absYear < 1000) {\n            if (yearValue < 0) {\n                yearString = '-' + ('' + (yearValue - 10000)).slice(-4);\n            } else {\n                yearString = ('' + (yearValue + 10000)).slice(-4);\n            }\n        } else {\n            if (yearValue > 9999) {\n                yearString = '+' + yearValue;\n            } else {\n                yearString = '' + yearValue;\n            }\n        }\n\n        if (monthValue < 10) {\n            monthString = '-0' + monthValue;\n        } else {\n            monthString = '-' + monthValue;\n        }\n\n        if (dayValue < 10) {\n            dayString = '-0' + dayValue;\n        } else {\n            dayString = '-' + dayValue;\n        }\n\n        return yearString + monthString + dayString;\n    }\n\n    /**\n     * Obtains an instance of LocalDate from the epoch day count.\n     *\n     * This returns a LocalDate with the specified epoch-day.\n     * The {@link ChronoField#EPOCH_DAY EPOCH_DAY} is a simple incrementing count\n     * of days where day 0 is 1970-01-01. Negative numbers represent earlier days.\n     *\n     * @param {number} epochDay - the Epoch Day to convert, based on the epoch 1970-01-01\n     * @return {LocalDate} the local date, not null\n     * @throws AssertionError if the epoch days exceeds the supported date range\n     */\n\n    static ofEpochDay(epochDay) {\n        var adjust, adjustCycles, dom, doyEst, marchDoy0, marchMonth0, month, year, yearEst, zeroDay;\n        zeroDay = epochDay + DAYS_0000_TO_1970;\n        zeroDay -= 60;\n        adjust = 0;\n        if (zeroDay < 0) {\n            adjustCycles = MathUtil.intDiv(zeroDay + 1, DAYS_PER_CYCLE) - 1;\n            adjust = adjustCycles * 400;\n            zeroDay += -adjustCycles * DAYS_PER_CYCLE;\n        }\n        yearEst = MathUtil.intDiv(400 * zeroDay + 591, DAYS_PER_CYCLE);\n        doyEst = zeroDay - (365 * yearEst + MathUtil.intDiv(yearEst, 4) - MathUtil.intDiv(yearEst, 100) + MathUtil.intDiv(yearEst, 400));\n        if (doyEst < 0) {\n            yearEst--;\n            doyEst = zeroDay - (365 * yearEst + MathUtil.intDiv(yearEst, 4) - MathUtil.intDiv(yearEst, 100) + MathUtil.intDiv(yearEst, 400));\n        }\n        yearEst += adjust;\n        marchDoy0 = doyEst;\n        marchMonth0 = MathUtil.intDiv(marchDoy0 * 5 + 2, 153);\n        month = (marchMonth0 + 2) % 12 + 1;\n        dom = marchDoy0 - MathUtil.intDiv(marchMonth0 * 306 + 5, 10) + 1;\n        yearEst += MathUtil.intDiv(marchMonth0, 10);\n        year = yearEst;\n        return new LocalDate(year, month, dom);\n    }\n    \n    /**\n     * Obtains an instance of {@code LocalDate} from a year and day-of-year.\n     * <p>\n     * This returns a {@code LocalDate} with the specified year and day-of-year.\n     * The day-of-year must be valid for the year, otherwise an exception will be thrown.\n     *\n     * @param {number} year  the year to represent, from MIN_YEAR to MAX_YEAR\n     * @param {number} dayOfYear  the day-of-year to represent, from 1 to 366\n     * @return LocalDate the local date, not null\n     * @throws DateTimeException if the value of any field is out of range,\n     *  or if the day-of-year is invalid for the year\n     */\n    static ofYearDay(year, dayOfYear) {\n        ChronoField.YEAR.checkValidValue(year);\n        //TODO: ChronoField.DAY_OF_YEAR.checkValidValue(dayOfYear);\n        var leap = IsoChronology.isLeapYear(year);\n        if (dayOfYear === 366 && leap === false) {\n            assert(false, 'Invalid date \\'DayOfYear 366\\' as \\'' + year + '\\' is not a leap year', DateTimeException);\n        }\n        var moy = Month.of(Math.floor((dayOfYear - 1) / 31 + 1));\n        var monthEnd = moy.firstDayOfYear(leap) + moy.length(leap) - 1;\n        if (dayOfYear > monthEnd) {\n            moy = moy.plus(1);\n        }\n        var dom = dayOfYear - moy.firstDayOfYear(leap) + 1;\n        return new LocalDate(year, moy.value(), dom);\n    }\n    \n    /**\n     * Returns a copy of this {@code LocalDate} with the day-of-month altered.\n     * <p>\n     * If the resulting date is invalid, an exception is thrown.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} dayOfMonth  the day-of-month to set in the result, from 1 to 28-31\n     * @return {LocalDate} based on this date with the requested day, not null\n     * @throws DateTimeException if the day-of-month value is invalid,\n     *  or if the day-of-month is invalid for the month-year\n     */\n    withDayOfMonth(dayOfMonth) {\n        if (this._day === dayOfMonth) {\n            return this;\n        }\n        return LocalDate.of(this._year, this._month, dayOfMonth);\n    }\n    \n    /**\n     * Returns a copy of this {@code LocalDate} with the month-of-year altered.\n     * <p>\n     * If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} month  the month-of-year to set in the result, from 1 (January) to 12 (December)\n     * @return {@code LocalDate} based on this date with the requested month, not null\n     * @throws DateTimeException if the month-of-year value is invalid\n     */\n    withMonth(month) {\n        if (this._month === month) {\n            return this;\n        }\n        return LocalDate.of(this._year, month, this._day);\n    }\n\n    /**\n     * @private\n     */\n    static validate(year, month, dayOfMonth) {\n        var dom;\n        ChronoField.YEAR.checkValidValue(year);\n        ChronoField.MONTH_OF_YEAR.checkValidValue(month);\n        ChronoField.DAY_OF_MONTH.checkValidValue(dayOfMonth);\n        if (dayOfMonth > 28) {\n            dom = 31;\n            switch (month) {\n                case 2:\n                    dom = IsoChronology.isLeapYear(year) ? 29 : 28;\n                    break;\n                case 4:\n                case 6:\n                case 9:\n                case 11:\n                    dom = 30;\n            }\n            if (dayOfMonth > dom) {\n                if (dayOfMonth === 29) {\n                    assert(false, 'Invalid date \\'February 29\\' as \\'' + year + '\\' is not a leap year', DateTimeException);\n                } else {\n                    assert(false, 'Invalid date \\'' + year + '\\' \\'' + month + '\\' \\'' + dayOfMonth + '\\'', DateTimeException);\n                }\n            }\n        }\n    }\n\n}\n\n/**\n * The minimum supported {@code LocalDate}\n * This could be used by an application as a \"far past\" date.\n */\nLocalDate.MIN = LocalDate.of(Year.MIN_VALUE, 1, 1);\n/**\n * The maximum supported {@code LocalDate}\n * This could be used by an application as a \"far future\" date.\n */\nLocalDate.MAX = LocalDate.of(Year.MAX_VALUE, 12, 31);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/LocalDate.js\n **/","import {NullPointerException} from './errors';\n\nexport function assert(assertion, msg, error) {\n    if(!assertion){\n        if (error) {\n            throw new error(msg);\n        } else {\n            throw new Error(msg);\n        }\n    }\n}\n\nexport function requireNonNull(value, parameterName) {\n    if (value == null) {\n        throw new NullPointerException(parameterName + ' must not be null');\n    }\n    return value;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/assert.js\n **/","import ExtendableError from 'es6-error';\n\nexport class DateTimeException extends ExtendableError {\n    constructor(message = 'DateTimeException', cause = null) {\n        let msg = message;\n        if (cause !== null && cause instanceof Error) {\n            msg += '\\n-------\\nCaused by: ' + cause.stack + '\\n-------\\n';\n        }\n        super(msg);\n    }\n}\n\nexport class DateTimeParseException extends ExtendableError {\n    constructor(message = 'DateTimeParseException', text = '', index = 0, cause = null) {\n        let msg = message + ': ' + text + ', at index: ' + index;\n        if (cause !== null && cause instanceof Error) {\n            msg += '\\n-------\\nCaused by: ' + cause.stack + '\\n-------\\n';\n        }\n        super(msg);\n    }\n}\n\nexport class UnsupportedTemporalTypeException extends ExtendableError {\n    constructor(message = 'UnsupportedTemporalTypeException') {\n        super(message);\n    }\n}\n\nexport class ArithmeticException extends ExtendableError {\n    constructor(message = 'ArithmeticException') {\n        super(message);\n    }\n}\n\nexport class NullPointerException extends ExtendableError {\n    constructor(message = 'NullPointerException') {\n        super(message);\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/errors.js\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ExtendableError = (function (_Error) {\n  _inherits(ExtendableError, _Error);\n\n  function ExtendableError() {\n    var message = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];\n\n    _classCallCheck(this, ExtendableError);\n\n    _get(Object.getPrototypeOf(ExtendableError.prototype), 'constructor', this).call(this, message);\n\n    // extending Error is weird and does not propagate `message`\n    Object.defineProperty(this, 'message', {\n      enumerable: false,\n      value: message\n    });\n\n    Object.defineProperty(this, 'name', {\n      enumerable: false,\n      value: this.constructor.name\n    });\n\n    if (Error.hasOwnProperty('captureStackTrace')) {\n      Error.captureStackTrace(this, this.constructor);\n      return;\n    }\n\n    Object.defineProperty(this, 'stack', {\n      enumerable: false,\n      value: new Error(message).stack\n    });\n  }\n\n  return ExtendableError;\n})(Error);\n\nexports['default'] = ExtendableError;\nmodule.exports = exports['default'];\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/es6-error/dist/index.js\n ** module id = 4\n ** module chunks = 0\n **/","import {ArithmeticException} from './errors';\n\nexport const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ? Number.MAX_SAFE_INTEGER : Math.pow(2, 53) - 1; // Number.MAX_SAFE_INTEGER not defined in #@#$%! PhantomJS\nexport const MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER ? Number.MIN_SAFE_INTEGER : -(Math.pow(2, 53) - 1); // Number.MIN_SAFE_INTEGER not defined in #@#$%! PhantomJS\n\n/**\n * Math helper with static function for integer operations\n */\nexport class MathUtil {\n    static intDiv(x, y) {\n        var r = x/y;\n        if(r < 0){\n            return Math.ceil(r);\n        } else {\n            return Math.floor(r);\n        }\n    }\n\n    static intMod(x, y) {\n        var r = x - MathUtil.intDiv(x, y) * y;\n        if(r < 0){\n            return Math.ceil(r);\n        } else {\n            return Math.floor(r);\n        }\n    }\n\n    static floorDiv(x, y){\n        var r = Math.floor(x / y);\n        return r;\n    }\n\n    static floorMod(x, y){\n        var r = x - MathUtil.floorDiv(x, y) * y;\n        return r;\n    }\n    \n    static safeAdd(x, y) {\n        if (x === 0) {\n            let r = y;\n            if (r > MAX_SAFE_INTEGER || r < MIN_SAFE_INTEGER) {\n                throw new ArithmeticException('Invalid addition beyond MAX_SAFE_INTEGER!');\n            }\n            return r;\n        }\n        if (y === 0) {\n            let r = x;\n            if (r > MAX_SAFE_INTEGER || r < MIN_SAFE_INTEGER) {\n                throw new ArithmeticException('Invalid addition beyond MAX_SAFE_INTEGER!');\n            }\n            return r;\n        }\n        if (x === undefined || y === undefined) {\n            throw new ArithmeticException('Invalid addition using undefined as argument');\n        }\n        if (isNaN(x) || isNaN(y)) {\n            throw new ArithmeticException('Invalid addition using NaN as argument');\n        }\n        let r = x + y;\n        // detect overflow, since neither x nor y are 0 (checked above) r cannot be === x or === y\n        // TODO: is this correct and complete?\n        if (r > MAX_SAFE_INTEGER || r < MIN_SAFE_INTEGER || r === x || r === y) {\n            throw new ArithmeticException('Invalid addition beyond MAX_SAFE_INTEGER!');\n        }\n        return r;\n    }\n    \n    static safeSubtract(x, y) {\n        if (x === 0) {\n            let r = y;\n            if (r > MAX_SAFE_INTEGER || r < MIN_SAFE_INTEGER) {\n                throw new ArithmeticException('Invalid addition beyond MAX_SAFE_INTEGER!');\n            }\n            return r;\n        }\n        if (y === 0) {\n            let r = x;\n            if (r > MAX_SAFE_INTEGER || r < MIN_SAFE_INTEGER) {\n                throw new ArithmeticException('Invalid addition beyond MAX_SAFE_INTEGER!');\n            }\n            return r;\n        }\n        if (x === undefined || y === undefined) {\n            throw new ArithmeticException('Invalid subtraction using undefined as argument');\n        }\n        if (isNaN(x) || isNaN(y)) {\n            throw new ArithmeticException('Invalid subtraction using NaN as argument');\n        }\n        let r = x - y;\n        // detect overflow, since neither x nor y are 0 (checked above) r cannot be === x or === y\n        // TODO: is this correct and complete?\n        if (r < MIN_SAFE_INTEGER || r > MAX_SAFE_INTEGER || r === x || r === y) {\n            throw new ArithmeticException('Invalid subtraction beyond MIN_SAFE_INTEGER!');\n        }\n        return r;\n    }\n\n    static safeMultiply(x, y) {\n        if (x == 1) {\n            return y;\n        }\n        if (y == 1) {\n            return x;\n        }\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        let r = x * y;\n        if (r < MIN_SAFE_INTEGER || r > MAX_SAFE_INTEGER || r / y != x || (x == MIN_SAFE_INTEGER && y == -1) || (y == MIN_SAFE_INTEGER && x == -1)) {\n            throw new ArithmeticException('Multiplication overflows: ' + x + ' * ' + y);\n        }\n        return r;\n    }\n\n    /**\n     * Compares two Numbers.\n     *\n     * @param {Number} a  the first value\n     * @param {Number} b  the second value\n     * @return {Number} the result\n     */\n    static compareNumbers(a, b) {\n        if (a < b) {\n            return -1;\n        }\n        if (a > b) {\n            return 1;\n        }\n        return 0;\n    }\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/MathUtil.js\n **/","export class IsoChronology {\n    /**\n     * Checks if the year is a leap year, according to the ISO proleptic\n     * calendar system rules.\n     *\n     * This method applies the current rules for leap years across the whole time-line.\n     * In general, a year is a leap year if it is divisible by four without\n     * remainder. However, years divisible by 100, are not leap years, with\n     * the exception of years divisible by 400 which are.\n     *\n     * For example, 1904 is a leap year it is divisible by 4.\n     * 1900 was not a leap year as it is divisible by 100, however 2000 was a\n     * leap year as it is divisible by 400.\n     *\n     * The calculation is proleptic - applying the same rules into the far future and far past.\n     * This is historically inaccurate, but is correct for the ISO-8601 standard.\n     *\n     * @param {number} prolepticYear - the ISO proleptic year to check\n     * @return true if the year is leap, false otherwise\n     */\n    static isLeapYear(prolepticYear) {\n        return ((prolepticYear & 3) === 0) && ((prolepticYear % 100) !== 0 || (prolepticYear % 400) === 0);\n    }\n}\n\nIsoChronology.INSTANCE = new IsoChronology();\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/chrono/IsoChronology.js\n **/","import {MAX_SAFE_INTEGER, MIN_SAFE_INTEGER} from '../MathUtil';\nimport { TemporalField } from './TemporalField';\nimport { ValueRange } from './ValueRange';\nimport {Year} from '../Year';\n\nexport class ChronoField extends TemporalField {\n\n    constructor(name, baseUnit, rangeUnit, range, displayNameKey) {\n        super();\n        this.name = function () {\n            return name;\n        };\n        this.baseUnit = function () {\n            return baseUnit;\n        };\n        this.rangeUnit = function () {\n            return rangeUnit;\n        };\n        this.range = function () {\n            return range;\n        };\n        this.displayNameKey = function () {\n            return displayNameKey;\n        };\n    }\n\n    checkValidValue(value) {\n        return this.range().checkValidValue(value, this.name());\n    }\n    \n    /**\n     * Get the range of valid values for this field using the temporal object to\n     * refine the result.\n     * <p>\n     * This uses the temporal object to find the range of valid values for the field.\n     * This is similar to {@link #range()}, however this method refines the result\n     * using the temporal. For example, if the field is {@code DAY_OF_MONTH} the\n     * {@code range} method is not accurate as there are four possible month lengths,\n     * 28, 29, 30 and 31 days. Using this method with a date allows the range to be\n     * accurate, returning just one of those four options.\n     * <p>\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#range(TemporalField)}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.rangeRefinedBy(temporal);\n     *   temporal = temporal.range(thisField);\n     * </pre>\n     * It is recommended to use the second approach, {@code range(TemporalField)},\n     * as it is a lot clearer to read in code.\n     * <p>\n     * Implementations should perform any queries or calculations using the fields\n     * available in {@link ChronoField}.\n     * If the field is not supported a {@code DateTimeException} must be thrown.\n     *\n     * @param {TemporalAccessor} temporal  the temporal object used to refine the result, not null\n     * @return {Va;lueRange} the range of valid values for this field, not null\n     * @throws DateTimeException if the range for the field cannot be obtained\n     */\n    rangeRefinedBy(temporal) {\n        return temporal.range(this);\n    }\n\n}\n\n// TODO: why can't we use ChronoUnit.NANOS, ... in these initializers??\n//ChronoField.NANO_OF_SECOND = new ChronoField('NanoOfSecond', ChronoUnit.NANOS, ChronoUnit.SECONDS, ValueRange.of(0, 999999999));\nChronoField.NANO_OF_SECOND = new ChronoField('NanoOfSecond', null, null, ValueRange.of(0, 999999999));\n\nChronoField.MICRO_OF_SECOND = new ChronoField('MicroOfSecond', null, null, ValueRange.of(0, 999999));\n\nChronoField.MILLI_OF_SECOND = new ChronoField('MilliOfSecond', null, null, ValueRange.of(0, 999));\n\nChronoField.DAY_OF_MONTH = new ChronoField('DayOfMonth', null, null, ValueRange.of(1, 28, 31), 'day');\n\nChronoField.MONTH_OF_YEAR = new ChronoField('MonthOfYear', null, null, ValueRange.of(1, 12), 'month');\n\nChronoField.YEAR = new ChronoField('Year', null, null, ValueRange.of(Year.MIN_VALUE, Year.MAX_VALUE), 'year');\n\nChronoField.INSTANT_SECONDS = new ChronoField('InstantSeconds', null, null, ValueRange.of(MIN_SAFE_INTEGER, MAX_SAFE_INTEGER));\n    \n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/temporal/ChronoField.js\n **/","export class TemporalField {\n    constructor() {\n        \n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/temporal/TemporalField.js\n **/","import {assert} from '../assert';\nimport {DateTimeException} from '../errors';\n\n/**\n * The range of valid values for a date-time field.\n * \n * All TemporalField instances have a valid range of values.\n * For example, the ISO day-of-month runs from 1 to somewhere between 28 and 31.\n * This class captures that valid range.\n * \n * It is important to be aware of the limitations of this class.\n * Only the minimum and maximum values are provided.\n * It is possible for there to be invalid values within the outer range.\n * For example, a weird field may have valid values of 1, 2, 4, 6, 7, thus\n * have a range of '1 - 7', despite that fact that values 3 and 5 are invalid.\n * \n * Instances of this class are not tied to a specific field.\n *\n */\n\nexport class ValueRange {\n\n    constructor(minSmallest, minLargest, maxSmallest, maxLargest) {\n        assert(!(minSmallest > minLargest), 'Smallest minimum value \\'' + minSmallest +\n            '\\' must be less than largest minimum value \\'' + minLargest + '\\'');\n        assert(!(maxSmallest > maxLargest), 'Smallest maximum value \\'' + maxSmallest +\n            '\\' must be less than largest maximum value \\'' + maxLargest + '\\'');\n        assert(!(minLargest > maxLargest), 'Minimum value \\'' + minLargest +\n            '\\' must be less than maximum value \\'' + maxLargest + '\\'');\n\n        this.minimum = function () {\n            return minSmallest;\n        };\n        this.largestMinimum = function () {\n            return minLargest;\n        };\n        this.maximum = function () {\n            return maxLargest;\n        };\n        this.smallestMaximum = function () {\n            return maxSmallest;\n        };\n    }\n\n    isValidValue(value) {\n        return (this.minimum() <= value && value <= this.maximum());\n    }\n\n    checkValidValue(value, field) {\n        var msg;\n        if (!this.isValidValue(value)) {\n            if (field != null) {\n                msg = ('Invalid value for ' + field + ' (valid values ' + (this.toString()) + '): ') + value;\n            } else {\n                msg = ('Invalid value (valid values ' + (this.toString()) + '): ') + value;\n            }\n            return assert(false, msg, DateTimeException);\n        }\n    }\n\n    /*\n     * Outputs this range as a String.\n     * \n     * The format will be '{min}/{largestMin} - {smallestMax}/{max}',\n     * where the largestMin or smallestMax sections may be omitted, together\n     * with associated slash, if they are the same as the min or max.\n     *\n     * @return {string} a string representation of this range, not null\n     */\n\n    toString() {\n        var str = this.minimum() + (this.minimum() !== this.largestMinimum() ? '/' + (this.largestMinimum()) : '');\n        str += ' - ';\n        str += this.smallestMaximum() + (this.smallestMaximum() !== this.maximum() ? '/' + (this.maximum()) : '');\n        return str;\n    }\n\n    /*\n     * called with 2 params: Obtains a fixed value range.\n     *\n     * This factory obtains a range where the minimum and maximum values are fixed.\n     * For example, the ISO month-of-year always runs from 1 to 12.\n     *\n     * @param min  the minimum value\n     * @param max  the maximum value\n     * @return the ValueRange for min, max, not null\n\n     * called with 3 params: Obtains a variable value range.\n     *\n     * This factory obtains a range where the minimum value is fixed and the maximum value may vary.\n     * For example, the ISO day-of-month always starts at 1, but ends between 28 and 31.\n     *\n     * @param min  the minimum value\n     * @param maxSmallest  the smallest maximum value\n     * @param maxLargest  the largest maximum value\n     * @return the ValueRange for min, smallest max, largest max, not null\n\n     * called with 4 params: Obtains a fully variable value range.\n     *\n     * This factory obtains a range where both the minimum and maximum value may vary.\n     *\n     * @param minSmallest  the smallest minimum value\n     * @param minLargest  the largest minimum value\n     * @param maxSmallest  the smallest maximum value\n     * @param maxLargest  the largest maximum value\n     * @return {ValueRange} the ValueRange for smallest min, largest min, smallest max, largest max, not null\n     */\n\n    static of() {\n        if (arguments.length === 2) {\n            return new ValueRange(arguments[0], arguments[0], arguments[1], arguments[1]);\n        } else if (arguments.length === 3) {\n            return new ValueRange(arguments[0], arguments[0], arguments[1], arguments[2]);\n        } else if (arguments.length === 4) {\n            return new ValueRange(arguments[0], arguments[1], arguments[2], arguments[3]);\n        } else {\n            return assert(false, 'Invalid number of arguments ' + arguments.length);\n        }\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/temporal/ValueRange.js\n **/","/**\n * A year in the ISO-8601 calendar system, such as {@code 2007}.\n * <p>\n * {@code Year} is an immutable date-time object that represents a year.\n * Any field that can be derived from a year can be obtained.\n * <p>\n * <b>Note that years in the ISO chronology only align with years in the\n * Gregorian-Julian system for modern years. Parts of Russia did not switch to the\n * modern Gregorian/ISO rules until 1920.\n * As such, historical years must be treated with caution.</b>\n * <p>\n * This class does not store or represent a month, day, time or time-zone.\n * For example, the value \"2007\" can be stored in a {@code Year}.\n * <p>\n * Years represented by this class follow the ISO-8601 standard and use\n * the proleptic numbering system. Year 1 is preceded by year 0, then by year -1.\n * <p>\n * The ISO-8601 calendar system is the modern civil calendar system used today\n * in most of the world. It is equivalent to the proleptic Gregorian calendar\n * system, in which today's rules for leap years are applied for all time.\n * For most applications written today, the ISO-8601 rules are entirely suitable.\n * However, any application that makes use of historical dates, and requires them\n * to be accurate will find the ISO-8601 approach unsuitable.\n *\n */\nexport class Year {\n    \n}\n\n/**\n * The minimum supported year\n */\nYear.MIN_VALUE = -999999;\n/**\n * The maximum supported year\n */\nYear.MAX_VALUE = 999999;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Year.js\n **/","import {Instant} from './Instant';\nimport {ZoneOffset} from './ZoneOffset';\n\n/**\n * A clock providing access to the current instant, date and time using a time-zone.\n * <p>\n * Instances of this class are used to find the current instant, which can be\n * interpreted using the stored time-zone to find the current date and time.\n * As such, a clock can be used instead of {@link System#currentTimeMillis()}\n * and {@link TimeZone#getDefault()}.\n * <p>\n * Use of a {@code Clock} is optional. All key date-time classes also have a\n * {@code now()} factory method that uses the system clock in the default time zone.\n * The primary purpose of this abstraction is to allow alternate clocks to be\n * plugged in as and when required. Applications use an object to obtain the\n * current time rather than a static method. This can simplify testing.\n * <p>\n * Best practice for applications is to pass a {@code Clock} into any method\n * that requires the current instant.\n *\n * This approach allows an alternate clock, such as {@link #fixed(Instant, ZoneId) fixed}\n * or {@link #offset(Clock, Duration) offset} to be used during testing.\n * <p>\n * The {@code system} factory methods provide clocks based on the best available\n * system clock This may use {@link System#currentTimeMillis()}, or a higher\n * resolution clock if one is available.\n */\n\n/**\n * The javascript Clock implementation differs from the openjdk.\n *\n * Javascript only provides the UTC millis of epoch and the ZoneOffset in minutes of the system default time.\n * Javascript do not provide the system default ZoneId.\n *\n * the system default ZoneId is only guessable by the ZoneOffset, like moment-timezone does by returning one ZoneId\n * with the same ZoneOffset.\n *\n * Therefore we are doing a shortcut here, by defining a SystemUTCClock and a SystemDefaultClock, the Clock itself\n * is returning the ZoneOffset and not the ZoneRules as in the jdk. We should change it, when introducing the iana\n * timezone database and implementing the timezone domains.\n *\n */\n\nexport class Clock {\n    /**\n     * Obtains a clock that returns the current instant using the\n     * system clock, converting to date and time using the Date.getTime() UTC millis.\n     * <p>\n     * This clock, rather than {@link #systemDefaultZone()}, should be used when\n     * you need the current instant without the date or time.\n     * <p>\n     * @return a clock that uses the system clock in the UTC zone, not null\n     */\n    static systemUTC() {\n        return new SystemUTCClock();\n    }\n\n    /**\n     * Obtains a clock that returns the current instant using the best available\n     * system clock, converting to date and time using the default time-zone.\n     * <p>\n     * This clock is based on the available system clock using the Date.getTime() UTC millis\n     * <p>\n     * Using this method hard codes a dependency to the default time-zone into your application.\n     *\n     * The {@link #systemUTC() UTC clock} should be used when you need the current instant\n     * without the date or time.\n     * <p>\n     *\n     * @return a clock that uses the system clock in the default zone, not null\n     * @see ZoneId#systemDefault()\n     */\n    static systemDefaultZone() {\n        return new SystemDefaultClock();\n    }\n\n    /**\n     * Obtains a clock that always returns the same instant.\n     * <p>\n     * This clock simply returns the specified instant.\n     * As such, it is not a clock in the conventional sense.\n     * The main use case for this is in testing, where the fixed clock ensures\n     * tests are not dependent on the current clock.\n     *\n     * @param fixedInstant  the instant to use as the clock, not null\n     * @param zoneOffset  the zoneOffset to use as zone Offset, not null\n     * @return a clock that always returns the same instant, not null\n     */\n    static fixed(fixedInstant, zoneOffset) {\n        return new FixedClock(fixedInstant, zoneOffset);\n    }\n\n    /**\n      * Gets the current millisecond instant of the clock.\n      * <p>\n      * This returns the millisecond-based instant, measured from 1970-01-01T00:00Z (UTC).\n      * This is equivalent to the definition of {@link Date#getTime()}.\n      * <p>\n      * Most applications should avoid this method and use {@link Instant} to represent\n      * an instant on the time-line rather than a raw millisecond value.\n      * This method is provided to allow the use of the clock in high performance use cases\n      * where the creation of an object would be unacceptable.\n      * <p>\n      * The default implementation currently calls {@link #instant}.\n      *\n      * @return the current millisecond instant from this clock, measured from\n      *  the Java epoch of 1970-01-01T00:00Z (UTC), not null\n      */\n    millis(){\n        throw new TypeError('millis() function is not implemented');\n    }\n\n    /**\n     * Gets the current instant of the clock.\n     * <p>\n     * This returns an instant representing the current instant as defined by the clock.\n     *\n     * @return the current instant from this clock, not null\n     */\n    instant(){\n        throw new TypeError('instant() function is not implemented');\n    }\n\n    /**\n     * in opposite to the jdk implementation the Clock itself returns the offset, that is because\n     * javascript provides only the UTC and the \"local\" (system default time zone.\n     * it is not possible the get the system default ZoneId without guessing. If we would define ZoneRules, we had to\n     * define something like a virtual, not standard ZoneId like \"SystemDefault\".\n     * Until we to not have a tzdb, we leave this question open\n     */\n    offset(){\n        throw new TypeError('offset() function is not implemented');\n    }\n}\n\nclass SystemClock extends Clock {\n    millis() {\n        return new Date().getTime();\n    }\n\n    instant() {\n        return Instant.ofEpochMilli(this.millis());\n    }\n\n    offset() {\n        return ZoneOffset.ofTotalSeconds(0);\n    }\n}\n\n/**\n * Implementation of a clock that always returns the latest time from\n * {@link Date#getTime()}.\n */\nclass SystemUTCClock extends SystemClock{\n    toString(){\n        return 'SystemClock[UTC]';\n    }\n}\n\n/**\n * Implementation of a clock that always returns the latest time from\n * sytem default Zone {@link Date#getTime()} and {@link Date#getTimeZoneOffset()}.\n */\nclass SystemDefaultClock extends SystemClock{\n    offset(instant) {\n        var offsetInMinutes = new Date().getTimezoneOffset(instant.epochMilli());\n        return ZoneOffset.ofTotalMinutes(offsetInMinutes);\n    }\n\n    toString(){\n        return 'SystemClock[default]';\n    }\n}\n\n/**\n * Implementation of a clock that always returns the same instant.\n * This is typically used for testing.\n */\nclass FixedClock extends Clock{\n    constructor(fixedInstant, zoneOffset) {\n        super();\n        this._instant = fixedInstant;\n        this._zoneOffset = zoneOffset;\n    }\n\n    instant() {\n        return this._instant;\n    }\n\n    offset() {\n        return this._zoneOffset;\n    }\n\n    toString(){\n        return 'FixedClock[]';\n    }\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Clock.js\n **/","import {ChronoField} from './temporal/ChronoField';\nimport {ChronoUnit} from './temporal/ChronoUnit';\nimport {Clock} from './Clock';\nimport {DateTimeException, UnsupportedTemporalTypeException} from './errors';\nimport {LocalTime} from './LocalTime';\nimport {MathUtil} from './MathUtil';\nimport {TemporalAccessor} from './temporal/TemporalAccessor';\n\n// TODO verify the arbitrary values for min/ max seconds, set to 999_999 Years for now\nconst MIN_SECONDS = -31619087596800; // -999999-01-01\nconst MAX_SECONDS = 31494784694400; // 999999-12-31\nconst NANOS_PER_MILLI = 1000000;\n\n/**\n * An instantaneous point on the time-line.\n * \n * This class models a single instantaneous point on the time-line.\n * This might be used to record event time-stamps in the application.\n * \n * Time-scale\n * \n * The length of the solar day is the standard way that humans measure time.\n * This has traditionally been subdivided into 24 hours of 60 minutes of 60 seconds,\n * forming a 86400 second day.\n * \n * Modern timekeeping is based on atomic clocks which precisely define an SI second\n * relative to the transitions of a Caesium atom. The length of an SI second was defined\n * to be very close to the 86400th fraction of a day.\n * \n * Unfortunately, as the Earth rotates the length of the day varies.\n * In addition, over time the average length of the day is getting longer as the Earth slows.\n * As a result, the length of a solar day in 2012 is slightly longer than 86400 SI seconds.\n * The actual length of any given day and the amount by which the Earth is slowing\n * are not predictable and can only be determined by measurement.\n * The UT1 time-scale captures the accurate length of day, but is only available some\n * time after the day has completed.\n * \n * The UTC time-scale is a standard approach to bundle up all the additional fractions\n * of a second from UT1 into whole seconds, known as <i>leap-seconds</i>.\n * A leap-second may be added or removed depending on the Earth's rotational changes.\n * As such, UTC permits a day to have 86399 SI seconds or 86401 SI seconds where\n * necessary in order to keep the day aligned with the Sun.\n * \n * The modern UTC time-scale was introduced in 1972, introducing the concept of whole leap-seconds.\n * Between 1958 and 1972, the definition of UTC was complex, with minor sub-second leaps and\n * alterations to the length of the notional second. As of 2012, discussions are underway\n * to change the definition of UTC again, with the potential to remove leap seconds or\n * introduce other changes.\n * \n * Given the complexity of accurate timekeeping described above, this Java API defines\n * its own time-scale, the <i>Java Time-Scale</i>.\n * \n * The Java Time-Scale divides each calendar day into exactly 86400\n * subdivisions, known as seconds.  These seconds may differ from the\n * SI second.  It closely matches the de facto international civil time\n * scale, the definition of which changes from time to time.\n * \n * The Java Time-Scale has slightly different definitions for different\n * segments of the time-line, each based on the consensus international\n * time scale that is used as the basis for civil time. Whenever the\n * internationally-agreed time scale is modified or replaced, a new\n * segment of the Java Time-Scale must be defined for it.  Each segment\n * must meet these requirements:\n * <ul>\n * <li>the Java Time-Scale shall closely match the underlying international\n *  civil time scale;</li>\n * <li>the Java Time-Scale shall exactly match the international civil\n *  time scale at noon each day;</li>\n * <li>the Java Time-Scale shall have a precisely-defined relationship to\n *  the international civil time scale.</li>\n * </ul>\n * There are currently, as of 2013, two segments in the Java time-scale.\n * \n * For the segment from 1972-11-03 (exact boundary discussed below) until\n * further notice, the consensus international time scale is UTC (with\n * leap seconds).  In this segment, the Java Time-Scale is identical to\n * <a href=\"http://www.cl.cam.ac.uk/~mgk25/time/utc-sls/\">UTC-SLS</a>.\n * This is identical to UTC on days that do not have a leap second.\n * On days that do have a leap second, the leap second is spread equally\n * over the last 1000 seconds of the day, maintaining the appearance of\n * exactly 86400 seconds per day.\n * \n * For the segment prior to 1972-11-03, extending back arbitrarily far,\n * the consensus international time scale is defined to be UT1, applied\n * proleptically, which is equivalent to the (mean) solar time on the\n * prime meridian (Greenwich). In this segment, the Java Time-Scale is\n * identical to the consensus international time scale. The exact\n * boundary between the two segments is the instant where UT1 = UTC\n * between 1972-11-03T00:00 and 1972-11-04T12:00.\n * \n * Implementations of the Java time-scale using the JSR-310 API are not\n * required to provide any clock that is sub-second accurate, or that\n * progresses monotonically or smoothly. Implementations are therefore\n * not required to actually perform the UTC-SLS slew or to otherwise be\n * aware of leap seconds. JSR-310 does, however, require that\n * implementations must document the approach they use when defining a\n * clock representing the current instant.\n * See {@link Clock} for details on the available clocks.\n * \n * The Java time-scale is used for all date-time classes.\n * This includes {@code Instant}, {@code LocalDate}, {@code LocalTime}, {@code OffsetDateTime},\n * {@code ZonedDateTime} and {@code Duration}.\n *\n */\nexport class Instant extends TemporalAccessor {\n    \n    constructor(seconds, nanoOfSecond){\n        super();\n        Instant.validate(seconds, nanoOfSecond);\n        this._seconds = seconds;\n        this._nanos = nanoOfSecond;\n    }\n\n    /**\n     * Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z.\n     * \n     * The epoch second count is a simple incrementing count of seconds where\n     * second 0 is 1970-01-01T00:00:00Z.\n     * The nanosecond part of the day is returned by {@code getNanosOfSecond}.\n     *\n     * @return the seconds from the epoch of 1970-01-01T00:00:00Z\n     */\n    epochSecond(){\n        return this._seconds;\n    }\n\n    /**\n     * Gets the number of milli seconds from the Java epoch of 1970-01-01T00:00:00Z.\n     * \n     * The epoch milli second count is a simple incrementing count of milli seconds where\n     * milli second 0 is 1970-01-01T00:00:00Z.\n     *\n     * @return the milli seconds from the epoch of 1970-01-01T00:00:00Z\n     */\n    epochMilli(){\n        return this._seconds * 1000 + this._nanos / 1000000;\n    }\n\n    /**\n     * Gets the number of nanoseconds, later along the time-line, from the start\n     * of the second.\n     * \n     * The nanosecond-of-second value measures the total number of nanoseconds from\n     * the second returned by {@code getEpochSecond}.\n     *\n     * @return the nanoseconds within the second, always positive, never exceeds 999,999,999\n     */\n    nano(){\n        return this._nanos;\n    }\n\n    /**\n     * Obtains the current instant from the system clock, or if specified\n     * the current instant from the specified clock.\n     *\n     * This will query the specified clock to obtain the current time.\n     *\n     * @param clock  the clock to use, defaults to the system clock\n     * @return the current instant, not null\n     */\n    static now(clock = Clock.systemUTC()){\n        return clock.instant();\n    }\n\n    /**\n     * Returns a copy of this instant with the specified duration in seconds added.\n     * \n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param secondsToAdd  the seconds to add, positive or negative\n     * @return an {@code Instant} based on this instant with the specified seconds added, not null\n     * @throws DateTimeException if the result exceeds the maximum or minimum instant\n     */\n    plusSeconds(secondsToAdd) {\n        return this._plus(secondsToAdd, 0);\n    }\n\n    /**\n     * Returns a copy of this instant with the specified duration in seconds subtracted.\n     * \n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param secondsToSubtract  the seconds to subtract, positive or negative\n     * @return an {@code Instant} based on this instant with the specified seconds subtracted, not null\n     * @throws DateTimeException if the result exceeds the maximum or minimum instant\n     */\n    minusSeconds(secondsToSubtract) {\n        return this.plusSeconds(secondsToSubtract * -1);\n    }\n\n    /**\n     * Returns a copy of this instant with the specified duration in nanoseconds added.\n     * \n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param nanosToAdd  the nanoseconds to add, positive or negative\n     * @return an {@code Instant} based on this instant with the specified nanoseconds added, not null\n     * @throws DateTimeException if the result exceeds the maximum or minimum instant\n     */\n    plusNanos(nanosToAdd) {\n        return this._plus(0, nanosToAdd);\n    }\n\n    /**\n     * Returns a copy of this instant with the specified duration added.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param secondsToAdd  the seconds to add, positive or negative\n     * @param nanosToAdd  the nanos to add, positive or negative\n     * @return an {@code Instant} based on this instant with the specified seconds added, not null\n     * @throws DateTimeException if the result exceeds the maximum or minimum instant\n     */\n    _plus(secondsToAdd, nanosToAdd) {\n        if ((secondsToAdd | nanosToAdd) == 0) {\n            return this;\n        }\n        var epochSec = this._seconds + secondsToAdd;\n        epochSec = epochSec + MathUtil.intDiv(nanosToAdd, LocalTime.NANOS_PER_SECOND);\n        var _nanosToAdd = nanosToAdd % LocalTime.NANOS_PER_SECOND;\n        var nanoAdjustment = this._nanos + _nanosToAdd;\n        return Instant.ofEpochSecond(epochSec, nanoAdjustment);\n    }\n\n    /**\n     * Checks if this instant is equal to the specified instant.\n     * <p>\n     * The comparison is based on the time-line position of the instants.\n     *\n     * @param otherInstant  the other instant, null/ undefined returns false\n     * @return true if the other instant is equal to this one\n     */\n    equals(otherInstant) {\n        if(this === otherInstant){\n            return true;\n        }\n        if(otherInstant instanceof Instant){\n            return this.epochSecond() === otherInstant.epochSecond() &&\n                this.nano() === otherInstant.nano();\n        }\n        return false;\n    }\n    \n    /**\n     * Calculates the period between this instant and another instant in\n     * terms of the specified unit.\n     * <p>\n     * This calculates the period between two instants in terms of a single unit.\n     * The start and end points are {@code this} and the specified instant.\n     * The result will be negative if the end is before the start.\n     * The calculation returns a whole number, representing the number of\n     * complete units between the two instants.\n     * The {@code Temporal} passed to this method is converted to a\n     * {@code Instant} using {@link #from(TemporalAccessor)}.\n     * For example, the period in days between two dates can be calculated\n     * using {@code startInstant.until(endInstant, SECONDS)}.\n     * <p>\n     * This method operates in association with {@link TemporalUnit#between}.\n     * The result of this method is a {@code long} representing the amount of\n     * the specified unit. By contrast, the result of {@code between} is an\n     * object that can be used directly in addition/subtraction:\n     * <pre>\n     *   long period = start.until(end, SECONDS);   // this method\n     *   dateTime.plus(SECONDS.between(start, end));      // use in plus/minus\n     * </pre>\n     * <p>\n     * The calculation is implemented in this method for {@link ChronoUnit}.\n     * The units {@code NANOS}, {@code MICROS}, {@code MILLIS}, {@code SECONDS},\n     * {@code MINUTES}, {@code HOURS}, {@code HALF_DAYS} and {@code DAYS}\n     * are supported. Other {@code ChronoUnit} values will throw an exception.\n     * <p>\n     * If the unit is not a {@code ChronoUnit}, then the result of this method\n     * is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}\n     * passing {@code this} as the first argument and the input temporal as\n     * the second argument.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Temporal} endExclusive  the end date, which is converted to an {@code Instant}, not null\n     * @param {TemporalUnit} unit  the unit to measure the period in, not null\n     * @return {Number} the amount of the period between this date and the end date\n     * @throws DateTimeException if the period cannot be calculated\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    until(endExclusive, unit) {\n        let end = Instant.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            switch (unit) {\n                case ChronoUnit.NANOS: return this._nanosUntil(end);\n                case ChronoUnit.MICROS: return this._nanosUntil(end) / 1000;\n                case ChronoUnit.MILLIS: return MathUtil.safeSubtract(end.toEpochMilli(), this.toEpochMilli());\n                case ChronoUnit.SECONDS: return this._secondsUntil(end);\n                case ChronoUnit.MINUTES: return MathUtil.intDiv(this._secondsUntil(end), LocalTime.SECONDS_PER_MINUTE);\n                case ChronoUnit.HOURS: return MathUtil.intDiv(this._secondsUntil(end), LocalTime.SECONDS_PER_HOUR);\n                case ChronoUnit.HALF_DAYS: return MathUtil.intDiv(this._secondsUntil(end), (12 * LocalTime.SECONDS_PER_HOUR));\n                case ChronoUnit.DAYS: return MathUtil.intDiv(this._secondsUntil(end), LocalTime.SECONDS_PER_DAY);\n            }\n            throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n        }\n        return unit.between(this, end);\n    }\n\n    _nanosUntil(end) {\n        let secsDiff = MathUtil.safeSubtract(end.epochSecond(), this.epochSecond());\n        let totalNanos = MathUtil.safeMultiply(secsDiff, LocalTime.NANOS_PER_SECOND);\n        return MathUtil.safeAdd(totalNanos, end.nano() - this.nano());\n    }\n\n    _secondsUntil(end) {\n        let secsDiff = MathUtil.safeSubtract(end.epochSecond(), this.epochSecond());\n        let nanosDiff = end.nano() - this.nano();\n        if (secsDiff > 0 && nanosDiff < 0) {\n            secsDiff--;\n        } else if (secsDiff < 0 && nanosDiff > 0) {\n            secsDiff++;\n        }\n        return secsDiff;\n    }\n\n    /**\n     * Gets the value of the specified field from this instant as an {@code int}.\n     * <p>\n     * This queries this instant for the value for the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The {@link #isSupported(TemporalField) supported fields} will return valid\n     * values based on this date-time, except {@code INSTANT_SECONDS} which is too\n     * large to fit in an {@code int} and throws a {@code DateTimeException}.\n     * All other {@code ChronoField} instances will throw a {@code DateTimeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n     * passing {@code this} as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {TemporalField} field  the field to get, not null\n     * @return {Number} the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    get(field) {\n        if (field instanceof ChronoField) {\n            switch (field) {\n                case ChronoField.NANO_OF_SECOND: return this._nanos;\n                case ChronoField.MICRO_OF_SECOND: return MathUtil.intDiv(this._nanos, 1000);\n                case ChronoField.MILLI_OF_SECOND: return MathUtil.intDiv(this._nanos, NANOS_PER_MILLI);\n                case ChronoField.INSTANT_SECONDS:\n                    ChronoField.INSTANT_SECONDS.checkValidIntValue(this._seconds);\n            }\n            throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n        }\n        return this.range(field).checkValidIntValue(field.getFrom(this), field);\n    }\n\n    /**\n     * Gets the value of the specified field from this instant as a {@code long}.\n     * <p>\n     * This queries this instant for the value for the specified field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The {@link #isSupported(TemporalField) supported fields} will return valid\n     * values based on this date-time.\n     * All other {@code ChronoField} instances will throw a {@code DateTimeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n     * passing {@code this} as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {TemporalField} field  the field to get, not null\n     * @return {Number} the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    getLong(field) {\n        if (field instanceof ChronoField) {\n            switch (field) {\n                case ChronoField.NANO_OF_SECOND: return this._nanos;\n                case ChronoField.MICRO_OF_SECOND: return MathUtil.intDiv(this._nanos, 1000);\n                case ChronoField.MILLI_OF_SECOND: return MathUtil.intDiv(this._nanos, NANOS_PER_MILLI);\n                case ChronoField.INSTANT_SECONDS: return this._seconds;\n            }\n            throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n        }\n        return field.getFrom(this);\n    }\n    \n    /**\n     * Checks if the specified field is supported.\n     * <p>\n     * This checks if this instant can be queried for the specified field.\n     * If false, then calling the {@link #range(TemporalField) range} and\n     * {@link #get(TemporalField) get} methods will throw an exception.\n     * <p>\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields are:\n     * <ul>\n     * <li>{@code NANO_OF_SECOND}\n     * <li>{@code MICRO_OF_SECOND}\n     * <li>{@code MILLI_OF_SECOND}\n     * <li>{@code INSTANT_SECONDS}\n     * </ul>\n     * All other {@code ChronoField} instances will return false.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}\n     * passing {@code this} as the argument.\n     * Whether the field is supported is determined by the field.\n     *\n     * @param {TemporalField, TemporalUnit} fieldOrUnit  the field to check, null returns false\n     * @return true if the field is supported on this instant, false if not\n     */\n    isSupported(fieldOrUnit) {\n        if (fieldOrUnit instanceof ChronoField) {\n            return fieldOrUnit === ChronoField.INSTANT_SECONDS || fieldOrUnit === ChronoField.NANO_OF_SECOND || fieldOrUnit === ChronoField.MICRO_OF_SECOND || fieldOrUnit === ChronoField.MILLI_OF_SECOND;\n        }\n        if (fieldOrUnit instanceof ChronoUnit) {\n            return fieldOrUnit.isTimeBased() || fieldOrUnit === ChronoUnit.DAYS;\n        }\n        return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n    }\n\n    /**\n     * Obtains an instance of {@code Instant} from a temporal object.\n     * <p>\n     * A {@code TemporalAccessor} represents some form of date and time information.\n     * This factory converts the arbitrary temporal object to an instance of {@code Instant}.\n     * <p>\n     * The conversion extracts the {@link ChronoField#INSTANT_SECONDS INSTANT_SECONDS}\n     * and {@link ChronoField#NANO_OF_SECOND NANO_OF_SECOND} fields.\n     * <p>\n     * This method matches the signature of the functional interface {@link TemporalQuery}\n     * allowing it to be used as a query via method reference, {@code Instant::from}.\n     *\n     * @param {TemporalAccessor} temporal  the temporal object to convert, not null\n     * @return {Instant} the instant, not null\n     * @throws DateTimeException if unable to convert to an {@code Instant}\n     */\n    static from(temporal) {\n        try {\n            let instantSecs = temporal.getLong(ChronoField.INSTANT_SECONDS);\n            let nanoOfSecond = temporal.get(ChronoField.NANO_OF_SECOND);\n            return Instant.ofEpochSecond(instantSecs, nanoOfSecond);\n        } catch (ex) {\n            throw new DateTimeException('Unable to obtain Instant from TemporalAccessor: ' +\n                    temporal + ', type ' + typeof temporal, ex);\n        }\n    }\n\n    /**\n     * Obtains an instance of {@code Instant} using seconds from the\n     * epoch of 1970-01-01T00:00:00Z.\n     *\n     * @param epochSecond  the number of seconds from 1970-01-01T00:00:00Z\n     * @param nanoAdjustment nanoseconds start from the start of epochSecond, if null the nanosecond field is set to zero.\n     * @return an instant, not null\n     * @throws DateTimeException if the instant exceeds the maximum or minimum instant\n     */\n    static ofEpochSecond(epochSecond, nanoAdjustment=0){\n        var secs = epochSecond + MathUtil.floorDiv(nanoAdjustment, LocalTime.NANOS_PER_SECOND);\n        var nos = MathUtil.floorMod(nanoAdjustment, LocalTime.NANOS_PER_SECOND);\n        return Instant._create(secs, nos);\n    }\n\n    /**\n     * Obtains an instance of {@code Instant} using milliseconds from the\n     * epoch of 1970-01-01T00:00:00Z.\n     * <p>\n     * The seconds and nanoseconds are extracted from the specified milliseconds.\n     *\n     * @param epochMilli  the number of milliseconds from 1970-01-01T00:00:00Z\n     * @return an instant, not null\n     * @throws DateTimeException if the instant exceeds the maximum or minimum instant\n     */\n    static ofEpochMilli(epochMilli) {\n        var secs = MathUtil.floorDiv(epochMilli, 1000);\n        var mos = MathUtil.floorMod(epochMilli, 1000);\n        return Instant._create(secs, mos * 1000000);\n    }\n\n    static _create(seconds, nanoOfSecond){\n        if(seconds === 0 && nanoOfSecond === 0){\n            return Instant.EPOCH;\n        }\n        return new Instant(seconds, nanoOfSecond);\n    }\n\n    static validate(seconds, nanoOfSecond){\n        if (seconds < MIN_SECONDS || seconds > MAX_SECONDS) {\n            throw new DateTimeException('Instant exceeds minimum or maximum instant');\n        }\n    }\n}\n\nInstant.EPOCH = new Instant(0,0);\nInstant.MIN = Instant.ofEpochSecond(MIN_SECONDS, 0);\nInstant.MAX = Instant.ofEpochSecond(MAX_SECONDS, 999999999);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Instant.js\n **/","import {Duration} from '../Duration';\nimport {Year} from '../Year';\n\n/**\n * A standard set of date periods units.\n * <p>\n * This set of units provide unit-based access to manipulate a date, time or date-time.\n * The standard set of units can be extended by implementing {@link TemporalUnit}.\n * <p>\n * These units are intended to be applicable in multiple calendar systems.\n * For example, most non-ISO calendar systems define units of years, months and days,\n * just with slightly different rules.\n * The documentation of each unit explains how it operates.\n *\n */\nexport class ChronoUnit /*implements TemporalUnit*/ {\n\n    /**\n     * \n     * @param {String} name\n     * @param {Duration} estimatedDuration\n     */\n    constructor (name, estimatedDuration) {\n        this._name = name;\n        this._duration = estimatedDuration;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the estimated duration of this unit in the ISO calendar system.\n     * <p>\n     * All of the units in this class have an estimated duration.\n     * Days vary due to daylight saving time, while months have different lengths.\n     *\n     * @return {Duration} the estimated duration of this unit, not null\n     */\n    duration() {\n        return this._duration;\n    }\n\n    /**\n     * Checks if the duration of the unit is an estimate.\n     * <p>\n     * All time units in this class are considered to be accurate, while all date\n     * units in this class are considered to be estimated.\n     * <p>\n     * This definition ignores leap seconds, but considers that Days vary due to\n     * daylight saving time and months have different lengths.\n     *\n     * @return {boolean} true if the duration is estimated, false if accurate\n     */\n    isDurationEstimated() {\n        return this.isDateBased() || this === ChronoUnit.FOREVER;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if this unit is a date unit.\n     *\n     * @return true if a date unit, false if a time unit\n     */\n    isDateBased() {\n        return this.compareTo(ChronoUnit.DAYS) >= 0 && this !== ChronoUnit.FOREVER;\n    }\n\n    /**\n     * Checks if this unit is a time unit.\n     *\n     * @return true if a time unit, false if a date unit\n     */\n    isTimeBased() {\n        return this.compareTo(ChronoUnit.DAYS) < 0;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if this unit is supported by the specified temporal object.\n     * <p>\n     * This checks that the implementing date-time can add/subtract this unit.\n     * This can be used to avoid throwing an exception.\n     * <p>\n     * This default implementation derives the value using\n     * {@link Temporal#plus(long, TemporalUnit)}.\n     *\n     * @param {Temporal} temporal  the temporal object to check, not null\n     * @return {boolean} true if the unit is supported\n     */\n    isSupportedBy(temporal) {\n        if (this === ChronoUnit.FOREVER) {\n            return false;\n        }\n        /* TODO: classes not implemented yet */\n/*\n        if (temporal instanceof ChronoLocalDate) {\n            return isDateBased();\n        }\n        if (temporal instanceof ChronoLocalDateTime || temporal instanceof ChronoZonedDateTime) {\n            return true;\n        }\n*/\n        try {\n            temporal.plus(1, this);\n            return true;\n        } catch (e) {\n            try {\n                temporal.plus(-1, this);\n                return true;\n            } catch (e2) {\n                return false;\n            }\n        }\n    }\n\n    /**\n     * Returns a copy of the specified temporal object with the specified period added.\n     * <p>\n     * The period added is a multiple of this unit. For example, this method\n     * could be used to add \"3 days\" to a date by calling this method on the\n     * instance representing \"days\", passing the date and the period \"3\".\n     * The period to be added may be negative, which is equivalent to subtraction.\n     * <p>\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#plus(long, TemporalUnit)}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisUnit.addTo(temporal);\n     *   temporal = temporal.plus(thisUnit);\n     * </pre>\n     * It is recommended to use the second approach, {@code plus(TemporalUnit)},\n     * as it is a lot clearer to read in code.\n     * <p>\n     * Implementations should perform any queries or calculations using the units\n     * available in {@link ChronoUnit} or the fields available in {@link ChronoField}.\n     * If the unit is not supported an {@code UnsupportedTemporalTypeException} must be thrown.\n     * <p>\n     * Implementations must not alter the specified temporal object.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable implementations.\n     *\n     * @param {Temporal} temporal  the temporal object to adjust, not null\n     * @param {Number} amount  the amount of this unit to add, positive or negative\n     * @return {Temporal} the adjusted temporal object, not null\n     * @throws DateTimeException if the amount cannot be added\n     * @throws UnsupportedTemporalTypeException if the unit is not supported by the temporal\n     */\n    addTo(temporal, amount) {\n        return temporal.plus(amount, this);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Calculates the amount of time between two temporal objects.\n     * <p>\n     * This calculates the amount in terms of this unit. The start and end\n     * points are supplied as temporal objects and must be of compatible types.\n     * The implementation will convert the second type to be an instance of the\n     * first type before the calculating the amount.\n     * The result will be negative if the end is before the start.\n     * For example, the amount in hours between two temporal objects can be\n     * calculated using {@code HOURS.between(startTime, endTime)}.\n     * <p>\n     * The calculation returns a whole number, representing the number of\n     * complete units between the two temporals.\n     * For example, the amount in hours between the times 11:30 and 13:29\n     * will only be one hour as it is one minute short of two hours.\n     * <p>\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#until(Temporal, TemporalUnit)}:\n     * <pre>\n     *   // these two lines are equivalent\n     *   between = thisUnit.between(start, end);\n     *   between = start.until(end, thisUnit);\n     * </pre>\n     * The choice should be made based on which makes the code more readable.\n     * <p>\n     * For example, this method allows the number of days between two dates to\n     * be calculated:\n     * <pre>\n     *  daysBetween = DAYS.between(start, end);\n     *  // or alternatively\n     *  daysBetween = start.until(end, DAYS);\n     * </pre>\n     * <p>\n     * Implementations should perform any queries or calculations using the units\n     * available in {@link ChronoUnit} or the fields available in {@link ChronoField}.\n     * If the unit is not supported an {@code UnsupportedTemporalTypeException} must be thrown.\n     * Implementations must not alter the specified temporal objects.\n     *\n     * @implSpec\n     * Implementations must begin by checking to if the two temporals have the\n     * same type using {@code .constructor.name}. If they do not, then the result must be\n     * obtained by calling {@code temporal1.until(temporal2, this)}.\n     *\n     * @param {Temporal} temporal1  the base temporal object, not null\n     * @param {Temporal} temporal2  the other temporal object, exclusive, not null\n     * @return {Number} the amount of time between temporal1 and temporal2\n     *  in terms of this unit; positive if temporal2 is later than\n     *  temporal1, negative if earlier\n     * @throws DateTimeException if the amount cannot be calculated, or the end\n     *  temporal cannot be converted to the same type as the start temporal\n     * @throws UnsupportedTemporalTypeException if the unit is not supported by the temporal\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    between(temporal1, temporal2) {\n        return temporal1.until(temporal2, this);\n    }\n\n    //-----------------------------------------------------------------------\n    toString() {\n        return this._name;\n    }\n\n    /**\n     * Compares this ChronoUnit to the specified {TemporalUnit}.\n     * <p>\n     * The comparison is based on the total length of the durations.\n     *\n     * @param {TemporalUnit} other  the other unit to compare to, not null\n     * @return the comparator value, negative if less, positive if greater\n     */\n    compareTo(other) {\n        return this.duration().compareTo(other.duration());\n    }\n\n}\n/**\n * Unit that represents the concept of a nanosecond, the smallest supported unit of time.\n * For the ISO calendar system, it is equal to the 1,000,000,000th part of the second unit.\n */\nChronoUnit.NANOS = new ChronoUnit('Nanos', Duration.ofNanos(1));\n/**\n * Unit that represents the concept of a microsecond.\n * For the ISO calendar system, it is equal to the 1,000,000th part of the second unit.\n */\nChronoUnit.MICROS = new ChronoUnit('Micros', Duration.ofNanos(1000));\n/**\n * Unit that represents the concept of a millisecond.\n * For the ISO calendar system, it is equal to the 1000th part of the second unit.\n */\nChronoUnit.MILLIS = new ChronoUnit('Millis', Duration.ofNanos(1000000));\n/**\n * Unit that represents the concept of a second.\n * For the ISO calendar system, it is equal to the second in the SI system\n * of units, except around a leap-second.\n */\nChronoUnit.SECONDS = new ChronoUnit('Seconds', Duration.ofSeconds(1));\n/**\n * Unit that represents the concept of a minute.\n * For the ISO calendar system, it is equal to 60 seconds.\n */\nChronoUnit.MINUTES = new ChronoUnit('Minutes', Duration.ofSeconds(60));\n/**\n * Unit that represents the concept of an hour.\n * For the ISO calendar system, it is equal to 60 minutes.\n */\nChronoUnit.HOURS = new ChronoUnit('Hours', Duration.ofSeconds(3600));\n/**\n * Unit that represents the concept of half a day, as used in AM/PM.\n * For the ISO calendar system, it is equal to 12 hours.\n */\nChronoUnit.HALF_DAYS = new ChronoUnit('HalfDays', Duration.ofSeconds(43200));\n/**\n * Unit that represents the concept of a day.\n * For the ISO calendar system, it is the standard day from midnight to midnight.\n * The estimated duration of a day is {@code 24 Hours}.\n * <p>\n * When used with other calendar systems it must correspond to the day defined by\n * the rising and setting of the Sun on Earth. It is not required that days begin\n * at midnight - when converting between calendar systems, the date should be\n * equivalent at midday.\n */\nChronoUnit.DAYS = new ChronoUnit('Days', Duration.ofSeconds(86400));\n/**\n * Unit that represents the concept of a week.\n * For the ISO calendar system, it is equal to 7 days.\n * <p>\n * When used with other calendar systems it must correspond to an integral number of days.\n */\nChronoUnit.WEEKS = new ChronoUnit('Weeks', Duration.ofSeconds(7 * 86400));\n/**\n * Unit that represents the concept of a month.\n * For the ISO calendar system, the length of the month varies by month-of-year.\n * The estimated duration of a month is one twelfth of {@code 365.2425 Days}.\n * <p>\n * When used with other calendar systems it must correspond to an integral number of days.\n */\nChronoUnit.MONTHS = new ChronoUnit('Months', Duration.ofSeconds(31556952 / 12));\n/**\n * Unit that represents the concept of a year.\n * For the ISO calendar system, it is equal to 12 months.\n * The estimated duration of a year is {@code 365.2425 Days}.\n * <p>\n * When used with other calendar systems it must correspond to an integral number of days\n * or months roughly equal to a year defined by the passage of the Earth around the Sun.\n */\nChronoUnit.YEARS = new ChronoUnit('Years', Duration.ofSeconds(31556952));\n/**\n * Unit that represents the concept of a decade.\n * For the ISO calendar system, it is equal to 10 years.\n * <p>\n * When used with other calendar systems it must correspond to an integral number of days\n * and is normally an integral number of years.\n */\nChronoUnit.DECADES = new ChronoUnit('Decades', Duration.ofSeconds(31556952 * 10));\n/**\n * Unit that represents the concept of a century.\n * For the ISO calendar system, it is equal to 100 years.\n * <p>\n * When used with other calendar systems it must correspond to an integral number of days\n * and is normally an integral number of years.\n */\nChronoUnit.CENTURIES = new ChronoUnit('Centuries', Duration.ofSeconds(31556952 * 100));\n/**\n * Unit that represents the concept of a millennium.\n * For the ISO calendar system, it is equal to 1000 years.\n * <p>\n * When used with other calendar systems it must correspond to an integral number of days\n * and is normally an integral number of years.\n */\nChronoUnit.MILLENNIA = new ChronoUnit('Millennia', Duration.ofSeconds(31556952 * 1000));\n/**\n * Unit that represents the concept of an era.\n * The ISO calendar system doesn't have eras thus it is impossible to add\n * an era to a date or date-time.\n * The estimated duration of the era is artificially defined as {Year.MAX_VALUE} + 1.\n * <p>\n * When used with other calendar systems there are no restrictions on the unit.\n */\nChronoUnit.ERAS = new ChronoUnit('Eras', Duration.ofSeconds(31556952 * (Year.MAX_VALUE + 1)));\n/**\n * Artificial unit that represents the concept of forever.\n * This is primarily used with {@link TemporalField} to represent unbounded fields\n * such as the year or era.\n * The estimated duration of the era is artificially defined as the largest duration\n * supported by {@code Duration}.\n */\nChronoUnit.FOREVER = new ChronoUnit('Forever', Duration.ofSeconds(Number.MAX_SAFE_INTEGER, 999999999));\n\n\n/** WEBPACK FOOTER **\n ** ./src/temporal/ChronoUnit.js\n **/","import {assert, requireNonNull} from './assert';\nimport {ChronoField} from './temporal/ChronoField';\nimport {ChronoUnit} from './temporal/ChronoUnit';\nimport {ArithmeticException, DateTimeParseException, UnsupportedTemporalTypeException} from './errors';\nimport {LocalTime} from './LocalTime';\nimport {MathUtil, MAX_SAFE_INTEGER, MIN_SAFE_INTEGER} from './MathUtil';\n\n/**\n * A time-based amount of time, such as '34.5 seconds'.\n * <p>\n * This class models a quantity or amount of time in terms of seconds and nanoseconds.\n * It can be accessed using other duration-based units, such as minutes and hours.\n * In addition, the {@link ChronoUnit#DAYS DAYS} unit can be used and is treated as\n * exactly equal to 24 hours, thus ignoring daylight savings effects.\n * See {@link Period} for the date-based equivalent to this class.\n * <p>\n * A physical duration could be of infinite length.\n * For practicality, the duration is stored with constraints similar to {@link Instant}.\n * The duration uses nanosecond resolution with a maximum value of the seconds that can\n * be held in a {@code long}. This is greater than the current estimated age of the universe.\n * <p>\n * The range of a duration requires the storage of a number larger than a {@code long}.\n * To achieve this, the class stores a {@code long} representing seconds and an {@code int}\n * representing nanosecond-of-second, which will always be between 0 and 999,999,999.\n * <p>\n * The duration is measured in \"seconds\", but these are not necessarily identical to\n * the scientific \"SI second\" definition based on atomic clocks.\n * This difference only impacts durations measured near a leap-second and should not affect\n * most applications.\n * See {@link Instant} for a discussion as to the meaning of the second and time-scales.\n *\n */\nexport class Duration\n        /*implements TemporalAmount, Comparable<Duration>, Serializable */ {\n\n    /**\n     * Constructs an instance of {@code Duration} using seconds and nanoseconds.\n     *\n     * @param {Number} seconds  the length of the duration in seconds, positive or negative\n     * @param {Number} nanos  the nanoseconds within the second, from 0 to 999,999,999\n     */\n    //TODO: private ? \n    constructor(seconds, nanos) {\n        //super();\n        this._seconds = seconds;\n        this._nanos = nanos;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@code Duration} from a number of standard 24 hour days.\n     * <p>\n     * The seconds are calculated based on the standard definition of a day,\n     * where each day is 86400 seconds which implies a 24 hour day.\n     * The nanosecond in second field is set to zero.\n     *\n     * @param {Number} days  the number of days, positive or negative\n     * @return {@code Duration}, not null\n     * @throws ArithmeticException if the input days exceeds the capacity of {@code Duration}\n     */\n    static ofDays(days) {\n        return Duration.create(MathUtil.safeMultiply(days, LocalTime.SECONDS_PER_DAY), 0);\n    }\n\n    /**\n     * Obtains an instance of {@code Duration} from a number of standard hours.\n     * <p>\n     * The seconds are calculated based on the standard definition of an hour,\n     * where each hour is 3600 seconds.\n     * The nanosecond in second field is set to zero.\n     *\n     * @param {Number} hours  the number of hours, positive or negative\n     * @return {@code Duration}, not null\n     * @throws ArithmeticException if the input hours exceeds the capacity of {@code Duration}\n     */\n    static ofHours(hours) {\n        return Duration.create(MathUtil.safeMultiply(hours, LocalTime.SECONDS_PER_HOUR), 0);\n    }\n\n    /**\n     * Obtains an instance of {@code Duration} from a number of standard minutes.\n     * <p>\n     * The seconds are calculated based on the standard definition of a minute,\n     * where each minute is 60 seconds.\n     * The nanosecond in second field is set to zero.\n     *\n     * @param {Number} minutes  the number of minutes, positive or negative\n     * @return {@code Duration}, not null\n     * @throws ArithmeticException if the input minutes exceeds the capacity of {@code Duration}\n     */\n    static ofMinutes(minutes) {\n        return Duration.create(MathUtil.safeMultiply(minutes, LocalTime.SECONDS_PER_MINUTE), 0);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@code Duration} from a number of seconds\n     * and an adjustment in nanoseconds.\n     * <p>\n     * This method allows an arbitrary number of nanoseconds to be passed in.\n     * The factory will alter the values of the second and nanosecond in order\n     * to ensure that the stored nanosecond is in the range 0 to 999,999,999.\n     * For example, the following will result in the exactly the same duration:\n     * <pre>\n     *  Duration.ofSeconds(3, 1);\n     *  Duration.ofSeconds(4, -999_999_999);\n     *  Duration.ofSeconds(2, 1000_000_001);\n     * </pre>\n     *\n     * @param {Number} seconds  the number of seconds, positive or negative\n     * @param {Number} nanoAdjustment  the nanosecond adjustment to the number of seconds, positive or negative\n     * @return {@code Duration}, not null\n     * @throws ArithmeticException if the adjustment causes the seconds to exceed the capacity of {@code Duration}\n     */\n    static ofSeconds(seconds, nanoAdjustment = 0) {\n        var secs = MathUtil.safeAdd(seconds, MathUtil.floorDiv(nanoAdjustment, LocalTime.NANOS_PER_SECOND));\n        var nos = MathUtil.floorMod(nanoAdjustment, LocalTime.NANOS_PER_SECOND);\n        return Duration.create(secs, nos);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@code Duration} from a number of milliseconds.\n     * <p>\n     * The seconds and nanoseconds are extracted from the specified milliseconds.\n     *\n     * @param {Number} millis  the number of milliseconds, positive or negative\n     * @return {@code Duration}, not null\n     */\n    static ofMillis(millis) {\n        var secs = MathUtil.intDiv(millis, 1000);\n        var mos = MathUtil.intMod(millis, 1000);\n        if (mos < 0) {\n            mos += 1000;\n            secs--;\n        }\n        return Duration.create(secs, mos * 1000000);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@code Duration} from a number of nanoseconds.\n     * <p>\n     * The seconds and nanoseconds are extracted from the specified nanoseconds.\n     *\n     * @param {Number} nanos  the number of nanoseconds, positive or negative\n     * @return {@code Duration}, not null\n     */\n    static ofNanos(nanos) {\n        var secs = MathUtil.intDiv(nanos, LocalTime.NANOS_PER_SECOND);\n        var nos = MathUtil.intMod(nanos, LocalTime.NANOS_PER_SECOND);\n        if (nos < 0) {\n            nos += LocalTime.NANOS_PER_SECOND;\n            secs--;\n        }\n        return this.create(secs, nos);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@code Duration} from a duration in the specified unit.\n     * <p>\n     * The parameters represent the two parts of a phrase like '6 Hours'. For example:\n     * <pre>\n     *  Duration.of(3, SECONDS);\n     *  Duration.of(465, HOURS);\n     * </pre>\n     * Only a subset of units are accepted by this method.\n     * The unit must either have an {@link TemporalUnit#isDurationEstimated() exact duration} or\n     * be {@link ChronoUnit#DAYS} which is treated as 24 hours. Other units throw an exception.\n     *\n     * @param {Number} amount  the amount of the duration, measured in terms of the unit, positive or negative\n     * @param {TemporalUnit} unit  the unit that the duration is measured in, must have an exact duration, not null\n     * @return {@code Duration}, not null\n     * @throws DateTimeException if the period unit has an estimated duration\n     * @throws ArithmeticException if a numeric overflow occurs\n     */\n    static of(amount, unit) {\n        return Duration.ZERO.plus(amount, unit);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@code Duration} from an amount.\n     * <p>\n     * This obtains a duration based on the specified amount.\n     * A TemporalAmount represents an amount of time, which may be date-based\n     * or time-based, which this factory extracts to a duration.\n     * <p>\n     * The conversion loops around the set of units from the amount and uses\n     * the duration of the unit to calculate the total Duration.\n     * Only a subset of units are accepted by this method.\n     * The unit must either have an exact duration or be ChronoUnit.DAYS which\n     * is treated as 24 hours. If any other units are found then an exception is thrown.\n     *\n     * @param {Number} amount  the temporal amount to convert, not null\n     * @return {Duration} the resulting duration, not null\n     * @throws DateTimeException if the amount cannot be converted\n     * @throws ArithmeticException if a numeric overflow occurs\n     */\n    static from(amount) {\n        requireNonNull(amount, 'amount');\n        var duration = Duration.ZERO;\n        amount.units().forEach((unit) => {\n            duration = duration.plus(amount.get(unit), unit);\n        });\n        return duration;\n    }\n    \n    /**\n     * Obtains an instance of {@code Duration} representing the duration between two instants.\n     * <p>\n     * Obtains a {@code Duration} representing the duration between two instants.\n     * This calculates the duration between two temporal objects of the same type.\n     * The difference in seconds is calculated using {@link Temporal#until(Temporal, TemporalUnit)}.\n     * The difference in nanoseconds is calculated using by querying the\n     * {@link ChronoField#NANO_OF_SECOND NANO_OF_SECOND} field.\n     * <p>\n     * The result of this method can be a negative period if the end is before the start.\n     * To guarantee to obtain a positive duration call abs() on the result.\n     *\n     * @param {Temporal} startInclusive  the start instant, inclusive, not null\n     * @param {Temporal} endExclusive  the end instant, exclusive, not null\n     * @return {@code Duration}, not null\n     * @throws DateTimeException if the seconds between the temporals cannot be obtained\n     * @throws ArithmeticException if the calculation exceeds the capacity of {@code Duration}\n     */\n    static between(startInclusive, endExclusive) {\n        requireNonNull(startInclusive, 'startInclusive');\n        requireNonNull(endExclusive, 'endExclusive');\n        var secs = startInclusive.until(endExclusive, ChronoUnit.SECONDS);\n        var nanos = 0;\n        if (startInclusive.isSupported(ChronoField.NANO_OF_SECOND) && endExclusive.isSupported(ChronoField.NANO_OF_SECOND)) {\n            try {\n                let startNos = startInclusive.getLong(ChronoField.NANO_OF_SECOND);\n                nanos = endExclusive.getLong(ChronoField.NANO_OF_SECOND) - startNos;\n                if (secs > 0 && nanos < 0) {\n                    nanos += LocalTime.NANOS_PER_SECOND;\n                } else if (secs < 0 && nanos > 0) {\n                    nanos -= LocalTime.NANOS_PER_SECOND;\n                } else if (secs == 0 && nanos != 0) {\n                    // two possible meanings for result, so recalculate secs\n                    let adjustedEnd = endExclusive.with(ChronoField.NANO_OF_SECOND, startNos);\n                    secs = startInclusive.until(adjustedEnd, ChronoUnit.SECONDS);\n                }\n            } catch (e) {\n                // ignore and only use seconds\n            }\n        }\n        return this.ofSeconds(secs, nanos);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains a {@code Duration} from a text string such as {@code PnDTnHnMn.nS}.\n     * <p>\n     * This will parse a textual representation of a duration, including the\n     * string produced by {@code toString()}. The formats accepted are based\n     * on the ISO-8601 duration format {@code PnDTnHnMn.nS} with days\n     * considered to be exactly 24 hours.\n     * <p>\n     * The string starts with an optional sign, denoted by the ASCII negative\n     * or positive symbol. If negative, the whole period is negated.\n     * The ASCII letter \"P\" is next in upper or lower case.\n     * There are then four sections, each consisting of a number and a suffix.\n     * The sections have suffixes in ASCII of \"D\", \"H\", \"M\" and \"S\" for\n     * days, hours, minutes and seconds, accepted in upper or lower case.\n     * The suffixes must occur in order. The ASCII letter \"T\" must occur before\n     * the first occurrence, if any, of an hour, minute or second section.\n     * At least one of the four sections must be present, and if \"T\" is present\n     * there must be at least one section after the \"T\".\n     * The number part of each section must consist of one or more ASCII digits.\n     * The number may be prefixed by the ASCII negative or positive symbol.\n     * The number of days, hours and minutes must parse to a {@code long}.\n     * The number of seconds must parse to a {@code long} with optional fraction.\n     * The decimal point may be either a dot or a comma.\n     * The fractional part may have from zero to 9 digits.\n     * <p>\n     * The leading plus/minus sign, and negative values for other units are\n     * not part of the ISO-8601 standard.\n     * <p>\n     * Examples:\n     * <pre>\n     *    \"PT20.345S\" -> parses as \"20.345 seconds\"\n     *    \"PT15M\"     -> parses as \"15 minutes\" (where a minute is 60 seconds)\n     *    \"PT10H\"     -> parses as \"10 hours\" (where an hour is 3600 seconds)\n     *    \"P2D\"       -> parses as \"2 days\" (where a day is 24 hours or 86400 seconds)\n     *    \"P2DT3H4M\"  -> parses as \"2 days, 3 hours and 4 minutes\"\n     *    \"P-6H3M\"    -> parses as \"-6 hours and +3 minutes\"\n     *    \"-P6H3M\"    -> parses as \"-6 hours and -3 minutes\"\n     *    \"-P-6H+3M\"  -> parses as \"+6 hours and -3 minutes\"\n     * </pre>\n     *\n     * @param {String} text  the text to parse, not null\n     * @return {Duration} the parsed duration, not null\n     * @throws DateTimeParseException if the text cannot be parsed to a duration\n     */\n    static parse(text) {\n        requireNonNull(text, 'text');\n        /**\n         * The pattern for parsing.\n         */\n        const PATTERN = new RegExp('([-+]?)P(?:([-+]?[0-9]+)D)?(T(?:([-+]?[0-9]+)H)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)(?:[.,]([0-9]{0,9}))?S)?)?', 'i');\n        var matches = PATTERN.exec(text);\n        if (matches !== null) {\n            // check for letter T but no time sections\n            if ('T' === matches[3] == false) {\n                var negate = '-' === matches[1];\n                var dayMatch = matches[2];\n                var hourMatch = matches[4];\n                var minuteMatch = matches[5];\n                var secondMatch = matches[6];\n                var fractionMatch = matches[7];\n                if (dayMatch != null || hourMatch != null || minuteMatch != null || secondMatch != null) {\n                    var daysAsSecs = Duration._parseNumber(text, dayMatch, LocalTime.SECONDS_PER_DAY, 'days');\n                    var hoursAsSecs = Duration._parseNumber(text, hourMatch, LocalTime.SECONDS_PER_HOUR, 'hours');\n                    var minsAsSecs = Duration._parseNumber(text, minuteMatch, LocalTime.SECONDS_PER_MINUTE, 'minutes');\n                    var seconds = Duration._parseNumber(text, secondMatch, 1, 'seconds');\n                    var negativeSecs = secondMatch != null && secondMatch.charAt(0) == '-';\n                    var nanos = Duration._parseFraction(text,  fractionMatch, negativeSecs ? -1 : 1);\n                    try {\n                        return Duration.create(negate, daysAsSecs, hoursAsSecs, minsAsSecs, seconds, nanos);\n                    } catch (ex) {\n                        throw new DateTimeParseException('Text cannot be parsed to a Duration: overflow', text, 0, ex);\n                    }\n                }\n            }\n        }\n        throw new DateTimeParseException('Text cannot be parsed to a Duration', text, 0);\n    }\n\n    static _parseNumber(text, parsed, multiplier, errorText) {\n        // regex limits to [-+]?[0-9]+\n        if (parsed == null) {\n            return 0;\n        }\n        try {\n            if (parsed[0] === '+') {\n                parsed = parsed.substring(1);\n            }\n            var val = parseFloat(parsed);\n            return MathUtil.safeMultiply(val, multiplier);\n        } catch (ex) {\n            throw new DateTimeParseException('Text cannot be parsed to a Duration: ' + errorText, text, 0, ex);\n        }\n    }\n\n    static _parseFraction(text, parsed, negate) {\n        // regex limits to [0-9]{0,9}\n        if (parsed == null || parsed.length == 0) {\n            return 0;\n        }\n        try {\n            parsed = (parsed + '000000000').substring(0, 9);\n            return parseFloat(parsed) * negate;\n        } catch (ex) {\n            throw new DateTimeParseException('Text cannot be parsed to a Duration: fraction', text, 0, ex);\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * to handle function overriding this function accepts any number of arguments, checks their type and delegates to the appropriate function\n     *\n     * @return {Duration}\n     */\n    static create() {\n        if (arguments.length == 1) {\n            return Duration.createSeconds(arguments[0]);\n        } else if (arguments.length == 2) {\n            return Duration.createSecondsNanos(arguments[0], arguments[1]);\n        } else {\n            return Duration.createNegateDaysHoursMinutesSecondsNanos(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);\n        }\n    }\n\n    static createNegateDaysHoursMinutesSecondsNanos(negate, daysAsSecs, hoursAsSecs, minsAsSecs, secs, nanos) {\n        var seconds = MathUtil.safeAdd(daysAsSecs, MathUtil.safeAdd(hoursAsSecs, MathUtil.safeAdd(minsAsSecs, secs)));\n        if (negate) {\n            return Duration.ofSeconds(seconds, nanos).negated();\n        }\n        return Duration.ofSeconds(seconds, nanos);\n    }\n\n    /**\n     * Obtains an instance of {@code Duration} using seconds and nanoseconds.\n     *\n     * @param {Number} seconds  the length of the duration in seconds, positive or negative\n     * @param {Number} nanoAdjustment  the nanosecond adjustment within the second, from 0 to 999,999,999\n     */\n    static createSecondsNanos(seconds = 0, nanoAdjustment = 0) {\n        if ((seconds | nanoAdjustment) == 0) {\n            return Duration.ZERO;\n        }\n        // if seconds is a float, we need to adjust the nanos from it as well\n        if (seconds >= 0) {\n            nanoAdjustment += seconds % 1 * LocalTime.NANOS_PER_SECOND;\n        } else {\n            nanoAdjustment -= seconds % 1 * LocalTime.NANOS_PER_SECOND;\n        }\n        seconds = Math.floor(seconds);\n        nanoAdjustment = Math.round(nanoAdjustment);\n\n        return new Duration(seconds, nanoAdjustment);\n    }\n    \n    /**\n     * Creates an instance of {@code Duration} from a number of seconds.\n     *\n     * @param {Number} seconds  the number of seconds, up to scale 9, positive or negative\n     * @return {Duration}, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    static createSeconds(seconds) {\n        let nanos = Math.round(seconds * Math.pow(10, 9));\n        let div = MathUtil.intDiv(nanos, LocalTime.NANOS_PER_SECOND);\n        let rem = MathUtil.intMod(nanos, LocalTime.NANOS_PER_SECOND);\n        return Duration.ofSeconds(div, rem);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value of the requested unit.\n     * <p>\n     * This returns a value for each of the two supported units,\n     * {@link ChronoUnit#SECONDS SECONDS} and {@link ChronoUnit#NANOS NANOS}.\n     * All other units throw an exception.\n     *\n     * @param {TemporalUnit} unit the {@code TemporalUnit} for which to return the value\n     * @return {Number} the var value of the unit\n     * @throws DateTimeException if the unit is not supported\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     */\n    get(unit) {\n        if (unit === ChronoUnit.SECONDS) {\n            return this._seconds;\n        } else if (unit === ChronoUnit.NANOS) {\n            return this._nanos;\n        } else {\n            throw new UnsupportedTemporalTypeException('Unsupported unit: ' + unit);\n        }\n    }\n\n    units() {\n        return [ChronoUnit.SECONDS, ChronoUnit.NANOS];\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if this duration is zero length.\n     * <p>\n     * A {@code Duration} represents a directed distance between two points on\n     * the time-line and can therefore be positive, zero or negative.\n     * This method checks whether the length is zero.\n     *\n     * @return {boolean} true if this duration has a total length equal to zero\n     */\n    isZero() {\n        return (this._seconds | this._nanos) == 0;\n    }\n\n    /**\n     * Checks if this duration is negative, excluding zero.\n     * <p>\n     * A {@code Duration} represents a directed distance between two points on\n     * the time-line and can therefore be positive, zero or negative.\n     * This method checks whether the length is less than zero.\n     *\n     * @return {boolean} true if this duration has a total length less than zero\n     */\n    isNegative() {\n        return this._seconds < 0;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the number of seconds in this duration.\n     * <p>\n     * The length of the duration is stored using two fields - seconds and nanoseconds.\n     * The nanoseconds part is a value from 0 to 999,999,999 that is an adjustment to\n     * the length in seconds.\n     * The total duration is defined by calling this method and {@link #getNano()}.\n     * <p>\n     * A {@code Duration} represents a directed distance between two points on the time-line.\n     * A negative duration is expressed by the negative sign of the seconds part.\n     * A duration of -1 nanosecond is stored as -1 seconds plus 999,999,999 nanoseconds.\n     *\n     * @return {Number} the whole seconds part of the length of the duration, positive or negative\n     */\n    seconds() {\n        return this._seconds;\n    }\n\n    /**\n     * Gets the number of nanoseconds within the second in this duration.\n     * <p>\n     * The length of the duration is stored using two fields - seconds and nanoseconds.\n     * The nanoseconds part is a value from 0 to 999,999,999 that is an adjustment to\n     * the length in seconds.\n     * The total duration is defined by calling this method and {@link #getSeconds()}.\n     * <p>\n     * A {@code Duration} represents a directed distance between two points on the time-line.\n     * A negative duration is expressed by the negative sign of the seconds part.\n     * A duration of -1 nanosecond is stored as -1 seconds plus 999,999,999 nanoseconds.\n     *\n     * @return {Number} the nanoseconds within the second part of the length of the duration, from 0 to 999,999,999\n     */\n    nano() {\n        return this._nanos;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this duration with the specified amount of seconds.\n     * <p>\n     * This returns a duration with the specified seconds, retaining the\n     * nano-of-second part of this duration.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} seconds  the seconds to represent, may be negative\n     * @return {@code Duration} based on this period with the requested seconds, not null\n     */\n    withSeconds(seconds) {\n        return Duration.create(seconds, this._nanos);\n    }\n\n    /**\n     * Returns a copy of this duration with the specified nano-of-second.\n     * <p>\n     * This returns a duration with the specified nano-of-second, retaining the\n     * seconds part of this duration.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} nanoOfSecond  the nano-of-second to represent, from 0 to 999,999,999\n     * @return {@code Duration} based on this period with the requested nano-of-second, not null\n     * @throws DateTimeException if the nano-of-second is invalid\n     */\n    withNanos(nanoOfSecond) {\n        ChronoField.NANO_OF_SECOND.checkValidIntValue(nanoOfSecond);\n        return Duration.create(this._seconds, nanoOfSecond);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this duration with the specified duration added.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Duration} duration  the duration to add, positive or negative, not null\n     * @return {@code Duration} based on this duration with the specified duration added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusDuration(duration) {\n        return this.plus(duration.seconds(), duration.nano());\n    }\n\n\n    /**\n     * to handle function overriding this function accepts two arguments, checks their type and delegates to the appropriate function\n     * \n     * @param a\n     * @param b\n     */\n    plus(a, b){\n        if (a instanceof Duration) {\n            requireNonNull(a, 'duration');\n            return this.plusDuration(a);\n        }\n        if (b instanceof ChronoUnit) {\n            requireNonNull(a, 'amount');\n            requireNonNull(b, 'unit');\n            return this.plusAmountUnit(a, b);\n        }\n        requireNonNull(a, 'seconds');\n        requireNonNull(b, 'nanos');\n        return this.plusSecondsNanos(a, b);\n    }\n    \n    /**\n     * Returns a copy of this duration with the specified duration added.\n     * <p>\n     * The duration amount is measured in terms of the specified unit.\n     * Only a subset of units are accepted by this method.\n     * The unit must either have an {@link TemporalUnit#isDurationEstimated() exact duration} or\n     * be {@link ChronoUnit#DAYS} which is treated as 24 hours. Other units throw an exception.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} amountToAdd  the amount to add, measured in terms of the unit, positive or negative\n     * @param {TemporalUnit} unit  the unit that the amount is measured in, must have an exact duration, not null\n     * @return {@code Duration} based on this duration with the specified duration added, not null\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusAmountUnit(amountToAdd, unit) {\n        requireNonNull(unit, 'unit');\n        if (unit == ChronoUnit.DAYS) {\n            return this.plusSecondsNanos(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_DAY), 0);\n        }\n        if (unit.isDurationEstimated()) {\n            throw new UnsupportedTemporalTypeException('Unit must not have an estimated duration');\n        }\n        if (amountToAdd == 0) {\n            return this;\n        }\n        if (unit instanceof ChronoUnit) {\n            switch (unit) {\n                case ChronoUnit.NANOS: return this.plusNanos(amountToAdd);\n                case ChronoUnit.MICROS: return this.plusSecondsNanos(MathUtil.intDiv(amountToAdd, (1000000 * 1000)) * 1000, MathUtil.intMod(amountToAdd, (1000000 * 1000)) * 1000);\n                case ChronoUnit.MILLIS: return this.plusMillis(amountToAdd);\n                case ChronoUnit.SECONDS: return this.plusSeconds(amountToAdd);\n            }\n            return this.plusSecondsNanos(MathUtil.safeMultiply(unit.duration().seconds(), amountToAdd), 0);\n        }\n        var duration = unit.duration().multipliedBy(amountToAdd);\n        return this.plusSecondsNanos(duration.seconds(), duration.nano());\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this duration with the specified duration in 24 hour days added.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} daysToAdd  the days to add, positive or negative\n     * @return {@code Duration} based on this duration with the specified days added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusDays(daysToAdd) {\n        return this.plusSecondsNanos(MathUtil.safeMultiply(daysToAdd, LocalTime.SECONDS_PER_DAY), 0);\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in hours added.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} hoursToAdd  the hours to add, positive or negative\n     * @return {@code Duration} based on this duration with the specified hours added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusHours(hoursToAdd) {\n        return this.plusSecondsNanos(MathUtil.safeMultiply(hoursToAdd, LocalTime.SECONDS_PER_HOUR), 0);\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in minutes added.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} minutesToAdd  the minutes to add, positive or negative\n     * @return {@code Duration} based on this duration with the specified minutes added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusMinutes(minutesToAdd) {\n        return this.plusSecondsNanos(MathUtil.safeMultiply(minutesToAdd, LocalTime.SECONDS_PER_MINUTE), 0);\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in seconds added.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} secondsToAdd  the seconds to add, positive or negative\n     * @return {@code Duration} based on this duration with the specified seconds added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusSeconds(secondsToAdd) {\n        return this.plusSecondsNanos(secondsToAdd, 0);\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in milliseconds added.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} millisToAdd  the milliseconds to add, positive or negative\n     * @return {@code Duration} based on this duration with the specified milliseconds added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusMillis(millisToAdd) {\n        return this.plusSecondsNanos(MathUtil.intDiv(millisToAdd, 1000), MathUtil.intMod(millisToAdd, 1000) * 1000000);\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in nanoseconds added.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} nanosToAdd  the nanoseconds to add, positive or negative\n     * @return {@code Duration} based on this duration with the specified nanoseconds added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusNanos(nanosToAdd) {\n        return this.plusSecondsNanos(0, nanosToAdd);\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration added.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} secondsToAdd  the seconds to add, positive or negative\n     * @param {Number} nanosToAdd  the nanos to add, positive or negative\n     * @return {@code Duration} based on this duration with the specified seconds added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusSecondsNanos(secondsToAdd, nanosToAdd) {\n        if ((secondsToAdd | nanosToAdd) == 0) {\n            return this;\n        }\n        var epochSec = MathUtil.safeAdd(this._seconds, secondsToAdd);\n        epochSec = MathUtil.safeAdd(epochSec, MathUtil.intDiv(nanosToAdd, LocalTime.NANOS_PER_SECOND));\n        nanosToAdd = MathUtil.intMod(nanosToAdd, LocalTime.NANOS_PER_SECOND);\n        var nanoAdjustment = MathUtil.safeAdd(this._nanos, nanosToAdd);  // safe int+LocalTime.NANOS_PER_SECOND\n        return Duration.ofSeconds(epochSec, nanoAdjustment);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * to handle function overriding this function accepts two arguments, checks their type and delegates to the appropriate function\n     *\n     * @param a\n     * @param b\n     */\n    minus(a, b) {\n        if (a instanceof Duration) {\n            requireNonNull(a, 'duration');\n            return this.minusDuration(a);\n        }\n        if (b instanceof ChronoUnit) {\n            requireNonNull(a, 'amount');\n            requireNonNull(b, 'unit');\n            return this.minusAmountUnit(a, b);\n        }\n        requireNonNull(a, 'seconds');\n        requireNonNull(b, 'nanos');\n        return this.minusSecondsNanos(a, b);\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration subtracted.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Duration} duration  the duration to subtract, positive or negative, not null\n     * @return {@code Duration} based on this duration with the specified duration subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusDuration(duration) {\n        var secsToSubtract = duration.seconds();\n        var nanosToSubtract = duration.nano();\n        if (secsToSubtract == MIN_SAFE_INTEGER) {\n            return this.plus(MAX_SAFE_INTEGER, -nanosToSubtract).plus(1, 0);\n        }\n        return this.plus(-secsToSubtract, -nanosToSubtract);\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration subtracted.\n     * <p>\n     * The duration amount is measured in terms of the specified unit.\n     * Only a subset of units are accepted by this method.\n     * The unit must either have an {@link TemporalUnit#isDurationEstimated() exact duration} or\n     * be {@link ChronoUnit#DAYS} which is treated as 24 hours. Other units throw an exception.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} amountToSubtract  the amount to subtract, measured in terms of the unit, positive or negative\n     * @param {TemporalUnit} unit  the unit that the amount is measured in, must have an exact duration, not null\n     * @return {@code Duration} based on this duration with the specified duration subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusAmountUnit(amountToSubtract, unit) {\n        return (amountToSubtract == MIN_SAFE_INTEGER ? this.plusAmountUnit(MAX_SAFE_INTEGER, unit).plus(1, unit) : this.plusAmountUnit(-amountToSubtract, unit));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this duration with the specified duration in 24 hour days subtracted.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} daysToSubtract  the days to subtract, positive or negative\n     * @return {@code Duration} based on this duration with the specified days subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusDays(daysToSubtract) {\n        return (daysToSubtract == MIN_SAFE_INTEGER ? this.plusDays(MAX_SAFE_INTEGER).plusDays(1) : this.plusDays(-daysToSubtract));\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in hours subtracted.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} hoursToSubtract  the hours to subtract, positive or negative\n     * @return {@code Duration} based on this duration with the specified hours subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusHours(hoursToSubtract) {\n        return (hoursToSubtract == MIN_SAFE_INTEGER ? this.plusHours(MAX_SAFE_INTEGER).plusHours(1) : this.plusHours(-hoursToSubtract));\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in minutes subtracted.\n     * <p>\n     * The number of hours is multiplied by 60 to obtain the number of seconds to subtract.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} minutesToSubtract  the minutes to subtract, positive or negative\n     * @return {@code Duration} based on this duration with the specified minutes subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusMinutes(minutesToSubtract) {\n        return (minutesToSubtract == MIN_SAFE_INTEGER ? this.plusMinutes(MAX_SAFE_INTEGER).plusMinutes(1) : this.plusMinutes(-minutesToSubtract));\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in seconds subtracted.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} secondsToSubtract  the seconds to subtract, positive or negative\n     * @return {@code Duration} based on this duration with the specified seconds subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusSeconds(secondsToSubtract) {\n        return (secondsToSubtract == MIN_SAFE_INTEGER ? this.plusSeconds(MAX_SAFE_INTEGER).plusSeconds(1) : this.plusSeconds(-secondsToSubtract));\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in milliseconds subtracted.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} millisToSubtract  the milliseconds to subtract, positive or negative\n     * @return {@code Duration} based on this duration with the specified milliseconds subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusMillis(millisToSubtract) {\n        return (millisToSubtract == MIN_SAFE_INTEGER ? this.plusMillis(MAX_SAFE_INTEGER).plusMillis(1) : this.plusMillis(-millisToSubtract));\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in nanoseconds subtracted.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} nanosToSubtract  the nanoseconds to subtract, positive or negative\n     * @return {@code Duration} based on this duration with the specified nanoseconds subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusNanos(nanosToSubtract) {\n        return (nanosToSubtract == MIN_SAFE_INTEGER ? this.plusNanos(MAX_SAFE_INTEGER).plusNanos(1) : this.plusNanos(-nanosToSubtract));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this duration multiplied by the scalar.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} multiplicand  the value to multiply the duration by, positive or negative\n     * @return {@code Duration} based on this duration multiplied by the specified scalar, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    multipliedBy(multiplicand) {\n        if (multiplicand == 0) {\n            return Duration.ZERO;\n        }\n        if (multiplicand == 1) {\n            return this;\n        }\n        return Duration.create(MathUtil.safeMultiply(this.toSeconds(), multiplicand));\n    }\n\n    /**\n     * Returns a copy of this duration divided by the specified value.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} divisor  the value to divide the duration by, positive or negative, not zero\n     * @return {@code Duration} based on this duration divided by the specified divisor, not null\n     * @throws ArithmeticException if the divisor is zero or if numeric overflow occurs\n     */\n    dividedBy(divisor) {\n        if (divisor == 0) {\n            throw new ArithmeticException('Cannot divide by zero');\n        }\n        if (divisor == 1) {\n            return this;\n        }\n        return Duration.create(this.toSeconds() / divisor);\n    }\n\n    /**\n     * Converts this duration to the total length in seconds and\n     * fractional nanoseconds expressed as a {@code BigDecimal}.\n     *\n     * @return {Number} the total length of the duration in seconds, with a scale of 9, not null\n     */\n    toSeconds() {\n        var nanoFloat = MathUtil.safeMultiply(this._nanos, Math.pow(10, -9));\n        return MathUtil.safeAdd(this._seconds, nanoFloat);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this duration with the length negated.\n     * <p>\n     * This method swaps the sign of the total length of this duration.\n     * For example, {@code PT1.3S} will be returned as {@code PT-1.3S}.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @return {@code Duration} based on this duration with the amount negated, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    negated() {\n        return this.multipliedBy(-1);\n    }\n\n    /**\n     * Returns a copy of this duration with a positive length.\n     * <p>\n     * This method returns a positive duration by effectively removing the sign from any negative total length.\n     * For example, {@code PT-1.3S} will be returned as {@code PT1.3S}.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @return {@code Duration} based on this duration with an absolute length, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    abs() {\n        return this.isNegative() ? this.negated() : this;\n    }\n\n    //-------------------------------------------------------------------------\n    /**\n     * Adds this duration to the specified temporal object.\n     * <p>\n     * This returns a temporal object of the same observable type as the input\n     * with this duration added.\n     * <p>\n     * In most cases, it is clearer to reverse the calling pattern by using\n     * {@link Temporal#plus(TemporalAmount)}.\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   dateTime = thisDuration.addTo(dateTime);\n     *   dateTime = dateTime.plus(thisDuration);\n     * </pre>\n     * <p>\n     * The calculation will add the seconds, then nanos.\n     * Only non-zero amounts will be added.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Temporal} temporal  the temporal object to adjust, not null\n     * @return {Temporal} an object of the same type with the adjustment made, not null\n     * @throws DateTimeException if unable to add\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    addTo(temporal) {\n        if (this._seconds != 0) {\n            temporal = temporal.plus(this._seconds, ChronoUnit.SECONDS);\n        }\n        if (this._nanos != 0) {\n            temporal = temporal.plus(this._nanos, ChronoUnit.NANOS);\n        }\n        return temporal;\n    }\n\n    /**\n     * Subtracts this duration from the specified temporal object.\n     * <p>\n     * This returns a temporal object of the same observable type as the input\n     * with this duration subtracted.\n     * <p>\n     * In most cases, it is clearer to reverse the calling pattern by using\n     * {@link Temporal#minus(TemporalAmount)}.\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   dateTime = thisDuration.subtractFrom(dateTime);\n     *   dateTime = dateTime.minus(thisDuration);\n     * </pre>\n     * <p>\n     * The calculation will subtract the seconds, then nanos.\n     * Only non-zero amounts will be added.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Temporal} temporal  the temporal object to adjust, not null\n     * @return {Temporal} an object of the same type with the adjustment made, not null\n     * @throws DateTimeException if unable to subtract\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    subtractFrom(temporal) {\n        if (this._seconds != 0) {\n            temporal = temporal.minus(this._seconds, ChronoUnit.SECONDS);\n        }\n        if (this._nanos != 0) {\n            temporal = temporal.minus(this._nanos, ChronoUnit.NANOS);\n        }\n        return temporal;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the number of days in this duration.\n     * <p>\n     * This returns the total number of days in the duration by dividing the\n     * number of seconds by 86400.\n     * This is based on the standard definition of a day as 24 hours.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @return the number of days in the duration, may be negative\n     */\n    toDays() {\n        return this._seconds / LocalTime.SECONDS_PER_DAY;\n    }\n\n    /**\n     * Gets the number of hours in this duration.\n     * <p>\n     * This returns the total number of hours in the duration by dividing the\n     * number of seconds by 3600.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @return {Number} the number of hours in the duration, may be negative\n     */\n    toHours() {\n        return this._seconds / LocalTime.SECONDS_PER_HOUR;\n    }\n\n    /**\n     * Gets the number of minutes in this duration.\n     * <p>\n     * This returns the total number of minutes in the duration by dividing the\n     * number of seconds by 60.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @return {Number} the number of minutes in the duration, may be negative\n     */\n    toMinutes() {\n        return this._seconds / LocalTime.SECONDS_PER_MINUTE;\n    }\n\n    /**\n     * Converts this duration to the total length in milliseconds.\n     * <p>\n     * If this duration is too large to fit in a {@code long} milliseconds, then an\n     * exception is thrown.\n     * <p>\n     * If this duration has greater than millisecond precision, then the conversion\n     * will drop any excess precision information as though the amount in nanoseconds\n     * was subject to integer division by one million.\n     *\n     * @return {Number} the total length of the duration in milliseconds\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    toMillis() {\n        var millis = Math.round(MathUtil.safeMultiply(this._seconds, 1000));\n        millis = MathUtil.safeAdd(millis, MathUtil.intDiv(this._nanos, 1000000));\n        return millis;\n    }\n\n    /**\n     * Converts this duration to the total length in nanoseconds expressed as a {@code long}.\n     * <p>\n     * If this duration is too large to fit in a {@code long} nanoseconds, then an\n     * exception is thrown.\n     *\n     * @return {Number} the total length of the duration in nanoseconds\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    toNanos() {\n        var totalNanos = MathUtil.safeMultiply(this._seconds, LocalTime.NANOS_PER_SECOND);\n        totalNanos = MathUtil.safeAdd(totalNanos, this._nanos);\n        return totalNanos;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares this duration to the specified {@code Duration}.\n     * <p>\n     * The comparison is based on the total length of the durations.\n     *\n     * @param {Duration} otherDuration  the other duration to compare to, not null\n     * @return {Number} the comparator value, negative if less, positive if greater\n     */\n    compareTo(otherDuration) {\n        requireNonNull(otherDuration, 'otherDuration');\n        assert(otherDuration instanceof Duration,  'otherDuration must be a Duration');\n        var cmp = MathUtil.compareNumbers(this._seconds, otherDuration.seconds());\n        if (cmp != 0) {\n            return cmp;\n        }\n        return this._nanos - otherDuration.nano();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if this duration is equal to the specified {@code Duration}.\n     * <p>\n     * The comparison is based on the total length of the durations.\n     *\n     * @param {Duration} otherDuration  the other duration, null returns false\n     * @return {boolean} true if the other duration is equal to this one\n     */\n    equals(otherDuration) {\n        if (this === otherDuration) {\n            return true;\n        }\n        if (otherDuration instanceof Duration) {\n            return this.seconds() == otherDuration.seconds() &&\n                   this.nano() == otherDuration.nano();\n        }\n        return false;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * A string representation of this duration using ISO-8601 seconds\n     * based representation, such as {@code PT8H6M12.345S}.\n     * <p>\n     * The format of the returned string will be {@code PTnHnMnS}, where n is\n     * the relevant hours, minutes or seconds part of the duration.\n     * Any fractional seconds are placed after a decimal povar i the seconds section.\n     * If a section has a zero value, it is omitted.\n     * The hours, minutes and seconds will all have the same sign.\n     * <p>\n     * Examples:\n     * <pre>\n     *    \"20.345 seconds\"                 -> \"PT20.345S\n     *    \"15 minutes\" (15 * 60 seconds)   -> \"PT15M\"\n     *    \"10 hours\" (10 * 3600 seconds)   -> \"PT10H\"\n     *    \"2 days\" (2 * 86400 seconds)     -> \"PT48H\"\n     * </pre>\n     * Note that multiples of 24 hours are not output as days to avoid confusion\n     * with {@code Period}.\n     *\n     * @return an ISO-8601 representation of this duration, not null\n     */\n    toString() {\n        if (this === Duration.ZERO) {\n            return 'PT0S';\n        }\n        var hours = MathUtil.intDiv(this._seconds, LocalTime.SECONDS_PER_HOUR);\n        var minutes = MathUtil.intDiv(MathUtil.intMod(this._seconds, LocalTime.SECONDS_PER_HOUR), LocalTime.SECONDS_PER_MINUTE);\n        var secs = MathUtil.intMod(this._seconds, LocalTime.SECONDS_PER_MINUTE);\n        var rval = 'PT';\n        if (hours != 0) {\n            rval += hours + 'H';\n        }\n        if (minutes != 0) {\n            rval += minutes + 'M';\n        }\n        if (secs == 0 && this._nanos == 0 && rval.length > 2) {\n            return rval;\n        }\n        if (secs < 0 && this._nanos > 0) {\n            if (secs == -1) {\n                rval += '-0';\n            } else {\n                rval += secs + 1;\n            }\n        } else {\n            rval += secs;\n        }\n        if (this._nanos > 0) {\n            rval += '.';\n            let nanoString;\n            if (secs < 0) {\n                nanoString = '' + (2 * LocalTime.NANOS_PER_SECOND - this._nanos);\n            } else {\n                nanoString = '' + (LocalTime.NANOS_PER_SECOND + this._nanos);\n            }\n            // remove the leading '1'\n            nanoString = nanoString.slice(1, nanoString.length);\n            rval += nanoString;\n            while (rval.charAt(rval.length - 1) == '0') {\n                rval = rval.slice(0, rval.length - 1);\n            }\n        }\n        rval += 'S';\n        return rval;\n    }\n\n}\n/**\n * Constant for a duration of zero.\n */\nDuration.ZERO = new Duration(0, 0);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Duration.js\n **/","export class LocalTime {\n\n}\n\nLocalTime.HOURS_PER_DAY = 24;\nLocalTime.MINUTES_PER_HOUR = 60;\nLocalTime.MINUTES_PER_DAY = LocalTime.MINUTES_PER_HOUR * LocalTime.HOURS_PER_DAY;\n\nLocalTime.SECONDS_PER_MINUTE = 60;\nLocalTime.SECONDS_PER_HOUR = LocalTime.SECONDS_PER_MINUTE * LocalTime.MINUTES_PER_HOUR;\nLocalTime.SECONDS_PER_DAY = LocalTime.SECONDS_PER_HOUR * LocalTime.HOURS_PER_DAY;\n\nLocalTime.NANOS_PER_SECOND = 1000000000;\n\n\n/** WEBPACK FOOTER **\n ** ./src/LocalTime.js\n **/","import {ChronoField} from './ChronoField';\nimport {TemporalQueries} from './TemporalQueries';\nimport {UnsupportedTemporalTypeException} from '../errors';\n\nexport class TemporalAccessor {\n    /**\n     * Queries this date-time.\n     * <p>\n     * This queries this date-time using the specified query strategy object.\n     * <p>\n     * Queries are a key tool for extracting information from date-times.\n     * They exists to externalize the process of querying, permitting different\n     * approaches, as per the strategy design pattern.\n     * Examples might be a query that checks if the date is the day before February 29th\n     * in a leap year, or calculates the number of days to your next birthday.\n     * <p>\n     * The most common query implementations are method references, such as\n     * {@code LocalDate::from} and {@code ZoneId::from}.\n     * Further implementations are on {@link TemporalQueries}.\n     * Queries may also be defined by applications.\n     *\n     * @implSpec\n     * Implementations of this method must behave as follows:\n     * <pre>\n        if (query == TemporalQueries.zoneId()\n            || query == TemporalQueries.chronology()\n            || query == TemporalQueries.precision()) {\n                return null;\n        }\n        return query.queryFrom(this);\n     * </pre>\n     *\n     * @param {TemporalQuery} query  the query to invoke, not null\n     * @return the query result, null may be returned (defined by the query)\n     * @throws DateTimeException if unable to query\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    query(query) {\n        if (query == TemporalQueries.zoneId()\n                || query == TemporalQueries.chronology()\n                || query == TemporalQueries.precision()) {\n            return null;\n        }\n        return query.queryFrom(this);\n    }\n    \n    /**\n     * Gets the range of valid values for the specified field.\n     * <p>\n     * All fields can be expressed as a {@code long} integer.\n     * This method returns an object that describes the valid range for that value.\n     * The value of this temporal object is used to enhance the accuracy of the returned range.\n     * If the date-time cannot return the range, because the field is unsupported or for\n     * some other reason, an exception will be thrown.\n     * <p>\n     * Note that the result only describes the minimum and maximum valid values\n     * and it is important not to read too much into them. For example, there\n     * could be values within the range that are invalid for the field.\n     *\n     * <h3>Specification for implementors</h3>\n     * Implementations must check and handle all fields defined in {@link ChronoField}.\n     * If the field is supported, then the range of the field must be returned.\n     * If unsupported, then a {@code DateTimeException} must be thrown.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessorl)}\n     * passing {@code this} as the argument.\n     * <p>\n     * Implementations must not alter either this object.\n     *\n     * @param {TemporalField} field  the field to query the range for, not null\n     * @return {ValueRange} the range of valid values for the field, not null\n     * @throws DateTimeException if the range for the field cannot be obtained\n     */\n    range(field) {\n        if (field instanceof ChronoField) {\n            if (this.isSupported(field)) {\n                return field.range();\n            }\n            throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n        }\n        return field.rangeRefinedBy(this);\n    }\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/temporal/TemporalAccessor.js\n **/","/**\n * Common implementations of {@code TemporalQuery}.\n * <p>\n * This class provides common implementations of {@link TemporalQuery}.\n * These queries are primarily used as optimizations, allowing the internals\n * of other objects to be extracted effectively. Note that application code\n * can also use the {@code from(TemporalAccessor)} method on most temporal\n * objects as a method reference matching the query interface, such as\n * {@code LocalDate::from} and {@code ZoneId::from}.\n * <p>\n * There are two equivalent ways of using a {@code TemporalQuery}.\n * The first is to invoke the method on the interface directly.\n * The second is to use {@link TemporalAccessor#query(TemporalQuery)}:\n * <pre>\n *   // these two lines are equivalent, but the second approach is recommended\n *   dateTime = query.queryFrom(dateTime);\n *   dateTime = dateTime.query(query);\n * </pre>\n * It is recommended to use the second approach, {@code query(TemporalQuery)},\n * as it is a lot clearer to read in code.\n *\n */\nexport class TemporalQueries {\n\n    /**\n     * A strict query for the {@code ZoneId}.\n     * <p>\n     * This queries a {@code TemporalAccessor} for the zone.\n     * The zone is only returned if the date-time conceptually contains a {@code ZoneId}.\n     * It will not be returned if the date-time only conceptually has an {@code ZoneOffset}.\n     * Thus a {@link ZonedDateTime} will return the result of\n     * {@code getZone()}, but an {@link OffsetDateTime} will\n     * return null.\n     * <p>\n     * In most cases, applications should use {@link #ZONE} as this query is too strict.\n     * <p>\n     * The result from JDK classes implementing {@code TemporalAccessor} is as follows:<br>\n     * {@code LocalDate} returns null<br>\n     * {@code LocalTime} returns null<br>\n     * {@code LocalDateTime} returns null<br>\n     * {@code ZonedDateTime} returns the associated zone<br>\n     * {@code OffsetTime} returns null<br>\n     * {@code OffsetDateTime} returns null<br>\n     * {@code ChronoLocalDate} returns null<br>\n     * {@code ChronoLocalDateTime} returns null<br>\n     * {@code ChronoZonedDateTime} returns the associated zone<br>\n     * {@code Era} returns null<br>\n     * {@code DayOfWeek} returns null<br>\n     * {@code Month} returns null<br>\n     * {@code Year} returns null<br>\n     * {@code YearMonth} returns null<br>\n     * {@code MonthDay} returns null<br>\n     * {@code ZoneOffset} returns null<br>\n     * {@code Instant} returns null<br>\n     *\n     * @return a query that can obtain the zone ID of a temporal, not null\n     */\n    static zoneId() {\n        return TemporalQueries.ZONE_ID;\n    }\n\n    /**\n     * A query for the {@code Chronology}.\n     * <p>\n     * This queries a {@code TemporalAccessor} for the chronology.\n     * If the target {@code TemporalAccessor} represents a date, or part of a date,\n     * then it should return the chronology that the date is expressed in.\n     * As a result of this definition, objects only representing time, such as\n     * {@code LocalTime}, will return null.\n     * <p>\n     * The result from js-joda classes implementing {@code TemporalAccessor} is as follows:<br>\n     * {@code LocalDate} returns {@code IsoChronology.INSTANCE}<br>\n     * {@code LocalTime} returns null (does not represent a date)<br>\n     * {@code LocalDateTime} returns {@code IsoChronology.INSTANCE}<br>\n     * {@code ZonedDateTime} returns {@code IsoChronology.INSTANCE}<br>\n     * {@code OffsetTime} returns null (does not represent a date)<br>\n     * {@code OffsetDateTime} returns {@code IsoChronology.INSTANCE}<br>\n     * {@code ChronoLocalDate} returns the associated chronology<br>\n     * {@code ChronoLocalDateTime} returns the associated chronology<br>\n     * {@code ChronoZonedDateTime} returns the associated chronology<br>\n     * {@code Era} returns the associated chronology<br>\n     * {@code DayOfWeek} returns null (shared across chronologies)<br>\n     * {@code Month} returns {@code IsoChronology.INSTANCE}<br>\n     * {@code Year} returns {@code IsoChronology.INSTANCE}<br>\n     * {@code YearMonth} returns {@code IsoChronology.INSTANCE}<br>\n     * {@code MonthDay} returns null {@code IsoChronology.INSTANCE}<br>\n     * {@code ZoneOffset} returns null (does not represent a date)<br>\n     * {@code Instant} returns null (does not represent a date)<br>\n     * <p>\n     * The method {@link Chronology#from(TemporalAccessor)} can be used as a\n     * {@code TemporalQuery}\n     * That method is equivalent to this query, except that it throws an\n     * exception if a chronology cannot be obtained.\n     *\n     * @return a query that can obtain the chronology of a temporal, not null\n     */\n    static chronology() {\n        return TemporalQueries.CHRONO;\n    }\n\n    /**\n     * A query for the smallest supported unit.\n     * <p>\n     * This queries a {@code TemporalAccessor} for the time precision.\n     * If the target {@code TemporalAccessor} represents a consistent or complete date-time,\n     * date or time then this must return the smallest precision actually supported.\n     * Note that fields such as {@code NANO_OF_DAY} and {@code NANO_OF_SECOND}\n     * are defined to always return ignoring the precision, thus this is the only\n     * way to find the actual smallest supported unit.\n     * For example, were {@code GregorianCalendar} to implement {@code TemporalAccessor}\n     * it would return a precision of {@code MILLIS}.\n     * <p>\n     * The result from js-joda classes implementing {@code TemporalAccessor} is as follows:<br>\n     * {@code LocalDate} returns {@code DAYS}<br>\n     * {@code LocalTime} returns {@code NANOS}<br>\n     * {@code LocalDateTime} returns {@code NANOS}<br>\n     * {@code ZonedDateTime} returns {@code NANOS}<br>\n     * {@code OffsetTime} returns {@code NANOS}<br>\n     * {@code OffsetDateTime} returns {@code NANOS}<br>\n     * {@code ChronoLocalDate} returns {@code DAYS}<br>\n     * {@code ChronoLocalDateTime} returns {@code NANOS}<br>\n     * {@code ChronoZonedDateTime} returns {@code NANOS}<br>\n     * {@code Era} returns {@code ERAS}<br>\n     * {@code DayOfWeek} returns {@code DAYS}<br>\n     * {@code Month} returns {@code MONTHS}<br>\n     * {@code Year} returns {@code YEARS}<br>\n     * {@code YearMonth} returns {@code MONTHS}<br>\n     * {@code MonthDay} returns null (does not represent a complete date or time)<br>\n     * {@code ZoneOffset} returns null (does not represent a date or time)<br>\n     * {@code Instant} returns {@code NANOS}<br>\n     *\n     * @return a query that can obtain the precision of a temporal, not null\n     */\n    static precision() {\n        return TemporalQueries.PRECISION;\n    }\n\n    /**\n     * A lenient query for the {@code ZoneId}, falling back to the {@code ZoneOffset}.\n     * <p>\n     * This queries a {@code TemporalAccessor} for the zone.\n     * It first tries to obtain the zone, using {@link #zoneId()}.\n     * If that is not found it tries to obtain the {@link #offset()}.\n     * <p>\n     * In most cases, applications should use this query rather than {@code #zoneId()}.\n     * <p>\n     * This query examines the {@link ChronoField#OFFSET_SECONDS offset-seconds}\n     * field and uses it to create a {@code ZoneOffset}.\n     * <p>\n     * The method {@link ZoneId#from(TemporalAccessor)} can be used as a\n     * {@code TemporalQuery} via a method reference, {@code ZoneId::from}.\n     * That method is equivalent to this query, except that it throws an\n     * exception if a zone cannot be obtained.\n     *\n     * @return a query that can obtain the zone ID or offset of a temporal, not null\n     */\n    static zone() {\n        return TemporalQueries.ZONE;\n    }\n\n    /**\n     * A query for {@code ZoneOffset} returning null if not found.\n     * <p>\n     * This returns a {@code TemporalQuery} that can be used to query a temporal\n     * object for the offset. The query will return null if the temporal\n     * object cannot supply an offset.\n     * <p>\n     * The query implementation examines the {@link ChronoField#OFFSET_SECONDS OFFSET_SECONDS}\n     * field and uses it to create a {@code ZoneOffset}.\n     * <p>\n     * The method {@link java.time.ZoneOffset#from(TemporalAccessor)} can be used as a\n     * {@code TemporalQuery} via a method reference, {@code ZoneOffset::from}.\n     * This query and {@code ZoneOffset::from} will return the same result if the\n     * temporal object contains an offset. If the temporal object does not contain\n     * an offset, then the method reference will throw an exception, whereas this\n     * query will return null.\n     *\n     * @return a query that can obtain the offset of a temporal, not null\n     */\n    static offset() {\n        return TemporalQueries.OFFSET;\n    }\n\n    /**\n     * A query for {@code LocalDate} returning null if not found.\n     * <p>\n     * This returns a {@code TemporalQuery} that can be used to query a temporal\n     * object for the local date. The query will return null if the temporal\n     * object cannot supply a local date.\n     * <p>\n     * The query implementation examines the {@link ChronoField#EPOCH_DAY EPOCH_DAY}\n     * field and uses it to create a {@code LocalDate}.\n     *\n     * @return a query that can obtain the date of a temporal, not null\n     */\n    static localDate() {\n        return TemporalQueries.LOCAL_DATE;\n    }\n\n    /**\n     * A query for {@code LocalTime} returning null if not found.\n     * <p>\n     * This returns a {@code TemporalQuery} that can be used to query a temporal\n     * object for the local time. The query will return null if the temporal\n     * object cannot supply a local time.\n     * <p>\n     * The query implementation examines the {@link ChronoField#NANO_OF_DAY NANO_OF_DAY}\n     * field and uses it to create a {@code LocalTime}.\n     *\n     * @return a query that can obtain the time of a temporal, not null\n     */\n    static localTime() {\n        return TemporalQueries.LOCAL_TIME;\n    }\n}\n\n/** \n * Factory to create something similar to the JSR-310 {TemporalQuery} interface, takes a function and returns a new TemporalQuery object that presents that function\n * as the queryFrom() function.\n * TODO: maybe should be moved to a separate file?\n * @param queryFromFunction\n */\nfunction createTemporalQuery(queryFromFunction) {\n    class TemporalQuery {\n    }\n    TemporalQuery.prototype.queryFrom = queryFromFunction;   \n    return new TemporalQuery();\n}\n//-----------------------------------------------------------------------\n/**\n * A strict query for the {@code ZoneId}.\n */\nTemporalQueries.ZONE_ID = createTemporalQuery((temporal) => {\n    return temporal.query(TemporalQueries.ZONE_ID);\n});\n\n/**\n * A query for the {@code Chronology}.\n */\nTemporalQueries.CHRONO = createTemporalQuery((temporal) => {\n    return temporal.query(TemporalQueries.CHRONO);\n});\n\n/**\n * A query for the smallest supported unit.\n */\nTemporalQueries.PRECISION = createTemporalQuery((temporal) => {\n    return temporal.query(TemporalQueries.PRECISION);\n});\n\n//-----------------------------------------------------------------------\n/**\n * A query for {@code ZoneOffset} returning null if not found.\n */\nTemporalQueries.OFFSET = createTemporalQuery((temporal) => {\n    if (temporal.isSupported(TemporalQueries.OFFSET_SECONDS)) {\n        return ZoneOffset.ofTotalSeconds(temporal.get(TemporalQueries.OFFSET_SECONDS));\n    }\n    return null;\n});\n\n/**\n * A lenient query for the {@code ZoneId}, falling back to the {@code ZoneOffset}.\n */\nTemporalQueries.ZONE = createTemporalQuery((temporal) => {\n    var zone = temporal.query(TemporalQueries.ZONE_ID);\n    return (zone != null ? zone : temporal.query(TemporalQueries.OFFSET));\n});\n\n/**\n * A query for {@code LocalDate} returning null if not found.\n */\nTemporalQueries.LOCAL_DATE = createTemporalQuery((temporal) => {\n    if (temporal.isSupported(TemporalQueries.EPOCH_DAY)) {\n        return LocalDate.ofEpochDay(temporal.getLong(TemporalQueries.EPOCH_DAY));\n    }\n    return null;\n});\n\n/**\n * A query for {@code LocalTime} returning null if not found.\n */\nTemporalQueries.LOCAL_TIME = createTemporalQuery((temporal) => {\n    if (temporal.isSupported(TemporalQueries.NANO_OF_DAY)) {\n        return LocalTime.ofNanoOfDay(temporal.getLong(TemporalQueries.NANO_OF_DAY));\n    }\n    return null;\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/temporal/TemporalQueries.js\n **/","import {DateTimeException} from './errors';\nimport {LocalTime} from './LocalTime';\n\nconst MAX_SECONDS = 18 * LocalTime.SECONDS_PER_HOUR;\nvar SECONDS_CACHE = {};\n\nexport class ZoneOffset {\n    constructor(totalSeconds){\n        ZoneOffset.validateTotalSeconds(totalSeconds);\n        this._totalSeconds = totalSeconds;\n    }\n\n    totalSeconds() {\n        return this._totalSeconds;\n    }\n\n    /**\n     * Checks if this offset is equal to another offset.\n     *\n     * The comparison is based on the amount of the offset in seconds.\n     * This is equivalent to a comparison by ID.\n     *\n     * @param obj  the object to check, null returns false\n     * @return true if this is equal to the other offset\n     */\n    equals(obj) {\n        if (this === obj) {\n            return true;\n        }\n        if (obj instanceof ZoneOffset) {\n            return this._totalSeconds === obj._totalSeconds;\n        }\n        return false;\n    }\n\n    static validateTotalSeconds(totalSeconds){\n        if (Math.abs(totalSeconds) > MAX_SECONDS) {\n            throw new DateTimeException('Zone offset not in valid range: -18:00 to +18:00');\n        }\n    }\n\n    static validate(hours, minutes, seconds) {\n        if (hours < -18 || hours > 18) {\n            throw new DateTimeException('Zone offset hours not in valid range: value ' + hours +\n                    ' is not in the range -18 to 18');\n        }\n        if (hours > 0) {\n            if (minutes < 0 || seconds < 0) {\n                throw new DateTimeException('Zone offset minutes and seconds must be positive because hours is positive');\n            }\n        } else if (hours < 0) {\n            if (minutes > 0 || seconds > 0) {\n                throw new DateTimeException('Zone offset minutes and seconds must be negative because hours is negative');\n            }\n        } else if ((minutes > 0 && seconds < 0) || (minutes < 0 && seconds > 0)) {\n            throw new DateTimeException('Zone offset minutes and seconds must have the same sign');\n        }\n        if (Math.abs(minutes) > 59) {\n            throw new DateTimeException('Zone offset minutes not in valid range: abs(value) ' +\n                    Math.abs(minutes) + ' is not in the range 0 to 59');\n        }\n        if (Math.abs(seconds) > 59) {\n            throw new DateTimeException('Zone offset seconds not in valid range: abs(value) ' +\n                    Math.abs(seconds) + ' is not in the range 0 to 59');\n        }\n        if (Math.abs(hours) == 18 && (Math.abs(minutes) > 0 || Math.abs(seconds) > 0)) {\n            throw new DateTimeException('Zone offset not in valid range: -18:00 to +18:00');\n        }\n    }\n\n    static ofHours(hours) {\n        return ZoneOffset.ofHoursMinutesSeconds(hours, 0, 0);\n    }\n\n    static ofHoursMinutes(hours, minutes) {\n        return ZoneOffset.ofHoursMinutesSeconds(hours, minutes, 0);\n    }\n\n    static ofHoursMinutesSeconds(hours, minutes, seconds) {\n        ZoneOffset.validate(hours, minutes, seconds);\n        var totalSeconds = hours * LocalTime.SECONDS_PER_HOUR + minutes * LocalTime.SECONDS_PER_MINUTE + seconds;\n        return ZoneOffset.ofTotalSeconds(totalSeconds);\n    }\n\n    static ofTotalMinutes(totalMinutes) {\n        var totalSeconds = totalMinutes * LocalTime.SECONDS_PER_MINUTE;\n        return ZoneOffset.ofTotalSeconds(totalSeconds);\n    }\n\n    static ofTotalSeconds(totalSeconds) {\n        if (totalSeconds % (15 * LocalTime.SECONDS_PER_MINUTE) === 0) {\n            var totalSecs = totalSeconds;\n            var result = SECONDS_CACHE[totalSecs];\n            if (result == null) {\n                result = new ZoneOffset(totalSeconds);\n                SECONDS_CACHE[totalSecs] = result;\n            }\n            return result;\n        } else {\n            return new ZoneOffset(totalSeconds);\n        }\n    }\n\n}\n\nZoneOffset.UTC = ZoneOffset.ofTotalSeconds(0);\nZoneOffset.MIN = ZoneOffset.ofTotalSeconds(-MAX_SECONDS);\nZoneOffset.MAX = ZoneOffset.ofTotalSeconds(MAX_SECONDS);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/ZoneOffset.js\n **/","import {assert} from './assert';\nimport {ChronoField} from './temporal/ChronoField';\nimport {ChronoUnit} from './temporal/ChronoUnit';\nimport {DateTimeException, UnsupportedTemporalTypeException} from './errors';\nimport {IsoChronology} from './chrono/IsoChronology';\nimport {TemporalAccessor} from './temporal/TemporalAccessor';\nimport {TemporalQueries} from './temporal/TemporalQueries';\n\n/**\n * A month-of-year, such as 'July'.\n * <p>\n * {@code Month} is representing the 12 months of the year -\n * January, February, March, April, May, June, July, August, September, October,\n * November and December.\n * <p>\n * In addition to the textual name, each month-of-year has an {@code int} value.\n * The {@code int} value follows normal usage and the ISO-8601 standard,\n * from 1 (January) to 12 (December). It is recommended that applications use the static values defined by this class\n * rather than the {@code int} value to ensure code clarity.\n * <p>\n * This class represents a common concept that is found in many calendar systems.\n * As such, this class may be used by any calendar system that has the month-of-year\n * concept defined exactly equivalent to the ISO-8601 calendar system.\n *\n */\nexport class Month extends TemporalAccessor {\n    \n    /**\n     *\n     * @param {number} value\n     */\n    constructor(value) {\n        super();\n        this._value = value;\n    }\n\n    /**\n     *\n     * @return {number} gets the value\n     */\n    value() {\n        return this._value;\n    }\n    \n    /**\n     * Checks if the specified field is supported.\n     * <p>\n     * This checks if this month-of-year can be queried for the specified field.\n     * If false, then calling the {@link #range(TemporalField) range} and\n     * {@link #get(TemporalField) get} methods will throw an exception.\n     * <p>\n     * If the field is {@link ChronoField#MONTH_OF_YEAR MONTH_OF_YEAR} then\n     * this method returns true.\n     * All other {@code ChronoField} instances will return false.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}\n     * passing {@code this} as the argument.\n     * Whether the field is supported is determined by the field.\n     *\n     * @param {TemporalField} field  the field to check, null returns false\n     * @return {boolean} true if the field is supported on this month-of-year, false if not\n     */\n    isSupported(field) {\n        if (null === field) {\n            return false;\n        }\n        if (field instanceof ChronoField) {\n            return field === ChronoField.MONTH_OF_YEAR;\n        }\n        return field != null && field.isSupportedBy(this);\n    }\n\n    /**\n     * Gets the value of the specified field from this month-of-year as an {@code int}.\n     * <p>\n     * This queries this month for the value of the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is {@link ChronoField#MONTH_OF_YEAR MONTH_OF_YEAR} then the\n     * value of the month-of-year, from 1 to 12, will be returned.\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n     * passing {@code this} as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {TemporalField} field  the field to get, not null\n     * @return {Number} the value for the field, within the valid range of values\n     * @throws DateTimeException if a value for the field cannot be obtained or\n     *         the value is outside the range of valid values for the field\n     * @throws UnsupportedTemporalTypeException if the field is not supported or\n     *         the range of values exceeds an {@code int}\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    get(field) {\n        if (field === ChronoField.MONTH_OF_YEAR) {\n            return this.value();\n        }\n        return range(field).checkValidIntValue(getLong(field), field);\n    }\n\n    /**\n     * Gets the value of the specified field from this month-of-year as a {@code long}.\n     * <p>\n     * This queries this month for the value of the specified field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     * <p>\n     * If the field is {@link ChronoField#MONTH_OF_YEAR MONTH_OF_YEAR} then the\n     * value of the month-of-year, from 1 to 12, will be returned.\n     * All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.\n     * <p>\n     * If the field is not a {@code ChronoField}, then the result of this method\n     * is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}\n     * passing {@code this} as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {TemporalField} field  the field to get, not null\n     * @return {Number} the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws UnsupportedTemporalTypeException if the field is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    getLong(field) {\n        if (field === ChronoField.MONTH_OF_YEAR) {\n            return this.value();\n        } else if (field instanceof ChronoField) {\n            throw new UnsupportedTemporalTypeException('Unsupported field: ' + field);\n        }\n        return field.getFrom(this);\n    }\n    \n    /**\n     * Returns the month-of-year that is the specified number of months after this one.\n     * <p>\n     * The calculation rolls around the end of the year from December to January.\n     * The specified period may be negative.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} months  the months to add, positive or negative\n     * @return {Month} the resulting month, not null\n     */\n    plus(months) {\n        var amount = Math.floor((months % 12)) + 12; // + 12 to make sure negative arguments are positive, the total is \"corrected\" by the next % 12\n        var newMonthVal = ((this.value() + amount) % 12);\n        /* December is 12, not 0, but 12 % 12 = 0 */\n        newMonthVal = newMonthVal == 0 ? 12 : newMonthVal;\n        return Month.of(newMonthVal);\n    }\n\n    /**\n     * Returns the month-of-year that is the specified number of months before this one.\n     * <p>\n     * The calculation rolls around the start of the year from January to December.\n     * The specified period may be negative.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} months  the months to subtract, positive or negative\n     * @return {Month} the resulting month, not null\n     */\n    minus(months) {\n        return this.plus(-(months % 12));\n    }\n\n    /**\n     * Gets the length of this month in days.\n     * <p>\n     * This takes a flag to determine whether to return the length for a leap year or not.\n     * <p>\n     * February has 28 days in a standard year and 29 days in a leap year.\n     * April, June, September and November have 30 days.\n     * All other months have 31 days.\n     *\n     * @param {boolean} leapYear  true if the length is required for a leap year\n     * @return {number} the length of this month in days, from 28 to 31\n     */\n    length(leapYear) {\n        switch (this) {\n            case Month.FEBRUARY:\n                return (leapYear ? 29 : 28);\n            case Month.APRIL:\n            case Month.JUNE:\n            case Month.SEPTEMBER:\n            case Month.NOVEMBER:\n                return 30;\n            default:\n                return 31;\n        }\n    }\n\n    /**\n     * Gets the minimum length of this month in days.\n     * <p>\n     * February has a minimum length of 28 days.\n     * April, June, September and November have 30 days.\n     * All other months have 31 days.\n     *\n     * @return {number} the minimum length of this month in days, from 28 to 31\n     */\n    minLength() {\n        switch (this) {\n            case Month.FEBRUARY:\n                return 28;\n            case Month.APRIL:\n            case Month.JUNE:\n            case Month.SEPTEMBER:\n            case Month.NOVEMBER:\n                return 30;\n            default:\n                return 31;\n        }\n    }\n\n    /**\n     * Gets the maximum length of this month in days.\n     * <p>\n     * February has a maximum length of 29 days.\n     * April, June, September and November have 30 days.\n     * All other months have 31 days.\n     *\n     * @return {number} the maximum length of this month in days, from 29 to 31\n     */\n    maxLength() {\n        switch (this) {\n            case Month.FEBRUARY:\n                return 29;\n            case Month.APRIL:\n            case Month.JUNE:\n            case Month.SEPTEMBER:\n            case Month.NOVEMBER:\n                return 30;\n            default:\n                return 31;\n        }\n    }\n\n    /**\n     * Gets the day-of-year corresponding to the first day of this month.\n     * <p>\n     * This returns the day-of-year that this month begins on, using the leap\n     * year flag to determine the length of February.\n     *\n     * @param {boolean} leapYear  true if the length is required for a leap year\n     * @return {number} the day of year corresponding to the first day of this month, from 1 to 336\n     */\n    firstDayOfYear(leapYear) {\n        var leap = leapYear ? 1 : 0;\n        switch (this) {\n            case Month.JANUARY:\n                return 1;\n            case Month.FEBRUARY:\n                return 32;\n            case Month.MARCH:\n                return 60 + leap;\n            case Month.APRIL:\n                return 91 + leap;\n            case Month.MAY:\n                return 121 + leap;\n            case Month.JUNE:\n                return 152 + leap;\n            case Month.JULY:\n                return 182 + leap;\n            case Month.AUGUST:\n                return 213 + leap;\n            case Month.SEPTEMBER:\n                return 244 + leap;\n            case Month.OCTOBER:\n                return 274 + leap;\n            case Month.NOVEMBER:\n                return 305 + leap;\n            case Month.DECEMBER:\n            default:\n                return 335 + leap;\n        }\n    }\n\n    /**\n     * Gets the month corresponding to the first month of this quarter.\n     * <p>\n     * The year can be divided into four quarters.\n     * This method returns the first month of the quarter for the base month.\n     * January, February and March return January.\n     * April, May and June return April.\n     * July, August and September return July.\n     * October, November and December return October.\n     *\n     * @return {Month} the first month of the quarter corresponding to this month, not null\n     */\n    firstMonthOfQuarter() {\n        switch (this) {\n            case Month.JANUARY:\n            case Month.FEBRUARY:\n            case Month.MARCH:\n                return Month.JANUARY;\n            case Month.APRIL:\n            case Month.MAY:\n            case Month.JUNE:\n                return Month.APRIL;\n            case Month.JULY:\n            case Month.AUGUST:\n            case Month.SEPTEMBER:\n                return Month.JULY;\n            case Month.OCTOBER:\n            case Month.NOVEMBER:\n            case Month.DECEMBER:\n            default:\n                return Month.OCTOBER;\n        }\n    }\n    \n        /**\n     * Queries this month-of-year using the specified query.\n     * <p>\n     * This queries this month-of-year using the specified query strategy object.\n     * The {@code TemporalQuery} object defines the logic to be used to\n     * obtain the result. Read the documentation of the query to understand\n     * what the result of this method will be.\n     * <p>\n     * The result of this method is obtained by invoking the\n     * {@link TemporalQuery#queryFrom(TemporalAccessor)} method on the\n     * specified query passing {@code this} as the argument.\n     *\n     * @param {TemporalQuery} query  the query to invoke, not null\n     * @return the query result, null may be returned (defined by the query)\n     * @throws DateTimeException if unable to query (defined by the query)\n     * @throws ArithmeticException if numeric overflow occurs (defined by the query)\n     */\n    query(query) {\n        assert(query != null, 'query() parameter must not be null', DateTimeException);\n        if (query === TemporalQueries.chronology()) {\n            return IsoChronology.INSTANCE;\n        } else if (query === TemporalQueries.precision()) {\n            return ChronoUnit.MONTHS;\n        }\n        return super.query(query);\n    }\n\n\n\n    /**\n     * toString implementation... in JDK this is inherited from the Enum class\n     * \n     * @returns {String}\n     */\n    toString(leapYear) {\n        var leap = leapYear ? 1 : 0;\n        switch (this) {\n            case Month.JANUARY:\n                return 'JANUARY';\n            case Month.FEBRUARY:\n                return 'FEBRUARY';\n            case Month.MARCH:\n                return 'MARCH';\n            case Month.APRIL:\n                return 'APRIL';\n            case Month.MAY:\n                return 'MAY';\n            case Month.JUNE:\n                return 'JUNE';\n            case Month.JULY:\n                return 'JULY';\n            case Month.AUGUST:\n                return 'AUGUST';\n            case Month.SEPTEMBER:\n                return 'SEPTEMBER';\n            case Month.OCTOBER:\n                return 'OCTOBER';\n            case Month.NOVEMBER:\n                return 'NOVEMBER';\n            case Month.DECEMBER:\n                return 'DECEMBER';\n            default:\n                return 'unknown Month, value: ' + this.value();\n        }\n    }\n\n    /**\n     *\n     * @param {number} month\n     * @return {Month} not null\n     **/\n    static of(month) {\n        if (month < 1 || month > 12) {\n           assert(false, 'Invalid value for MonthOfYear: ' + month, DateTimeException);\n       }\n        return MONTHS[month-1];\n    }\n}\n\nMonth.JANUARY = new Month(1);\nMonth.FEBRUARY = new Month(2);\nMonth.MARCH = new Month(3);\nMonth.APRIL = new Month(4);\nMonth.MAY = new Month(5);\nMonth.JUNE = new Month(6);\nMonth.JULY = new Month(7);\nMonth.AUGUST = new Month(8);\nMonth.SEPTEMBER = new Month(9);\nMonth.OCTOBER = new Month(10);\nMonth.NOVEMBER = new Month(11);\nMonth.DECEMBER = new Month(12);\n\nvar MONTHS = [\n    Month.JANUARY, Month.FEBRUARY, Month.MARCH, Month.APRIL, Month.MAY, Month.JUNE,\n    Month.JULY, Month.AUGUST, Month.SEPTEMBER, Month.OCTOBER, Month.NOVEMBER, Month.DECEMBER\n];\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Month.js\n **/"],"sourceRoot":""}