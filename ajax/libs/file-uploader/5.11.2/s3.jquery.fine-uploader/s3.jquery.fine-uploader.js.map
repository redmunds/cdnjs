{"version":3,"sources":["?","../client/js/jquery-plugin.js","../client/js/util.js","../client/js/export.js","../client/js/error/error.js","../client/js/version.js","../client/js/features.js","../client/js/promise.js","../client/js/blob-proxy.js","../client/js/button.js","../client/js/upload-data.js","../client/js/uploader.basic.api.js","../client/js/uploader.basic.js","../client/js/ajax.requester.js","../client/js/upload-handler/upload.handler.js","../client/js/upload-handler/upload.handler.controller.js","../client/js/upload-handler/form.upload.handler.js","../client/js/upload-handler/xhr.upload.handler.js","../client/js/deletefile.ajax.requester.js","../client/js/image-support/megapix-image.js","../client/js/image-support/image.js","../client/js/image-support/exif.js","../client/js/identify.js","../client/js/image-support/validation.image.js","../client/js/session.js","../client/js/session.ajax.requester.js","../client/js/image-support/scaler.js","../client/js/third-party/ExifRestorer.js","../client/js/total-progress.js","../client/js/paste.js","../client/js/form-support.js","../client/js/third-party/crypto-js/core.js","../client/js/third-party/crypto-js/enc-base64.js","../client/js/third-party/crypto-js/hmac.js","../client/js/third-party/crypto-js/sha1.js","../client/js/third-party/crypto-js/sha256.js","../client/js/third-party/crypto-js/lib-typedarrays.js","../client/js/s3/util.js","../client/js/non-traditional-common/uploader.basic.api.js","../client/js/s3/uploader.basic.js","../client/js/s3/request-signer.js","../client/js/uploadsuccess.ajax.requester.js","../client/js/s3/multipart.initiate.ajax.requester.js","../client/js/s3/multipart.complete.ajax.requester.js","../client/js/s3/multipart.abort.ajax.requester.js","../client/js/s3/s3.xhr.upload.handler.js","../client/js/s3/s3.form.upload.handler.js","../client/js/dnd.js","../client/js/uploader.api.js","../client/js/uploader.js","../client/js/templating.js","../client/js/ui.handler.events.js","../client/js/ui.handler.click.filebuttons.js","../client/js/ui.handler.click.filename.js","../client/js/ui.handler.focusin.filenameinput.js","../client/js/ui.handler.focus.filenameinput.js","../client/js/ui.handler.edit.filename.js","../client/js/s3/uploader.js"],"names":["global","$","$el","pluginOptions","init","options","xformedOpts","transformVariables","newUploaderInstance","getNewUploaderInstance","uploader","addCallbacks","params","uploaderType","pluginOption","namespace","charAt","toUpperCase","slice","toLowerCase","qq","FineUploader","dataStore","key","val","data","undefined","instanceToStore","option","optionVal","transformedOpts","callbacks","each","_options","prop","nonJqueryCallback","name","callbackEventTarget","exec","substring","originalArgs","Array","prototype","call","arguments","transformedArgs","nonJqueryCallbackRetVal","jqueryEventCallbackRetVal","idx","arg","push","maybeWrapInJquery","apply","this","triggerHandler","error","log","message","source","dest","xformed","arrayVals","element","inArray","isPlainObject","isArray","arrayVal","arrayObjDest","merge","isValidCommand","command","type","match","delegateCommand","xformedArgs","origArgs","retVal","transformedVal","nodeType","cloneNode","fn","fineUploader","optionsOrCommand","self","selfArgs","retVals","index","el","length","jQuery","hide","style","display","attach","addEventListener","attachEvent","detach","removeEventListener","detachEvent","contains","descendant","compareDocumentPosition","insertBefore","elementB","parentNode","remove","removeChild","css","styles","Error","opacity","filter","Math","round","extend","hasClass","considerParent","re","RegExp","test","className","addClass","removeClass","replace","getByClass","first","candidates","result","querySelector","querySelectorAll","getElementsByTagName","getFirstByClass","children","child","firstChild","nextSibling","setText","text","innerText","textContent","clearText","hasAttribute","attrName","attrVal","getAttribute","canvasToBlob","canvas","mime","quality","dataUriToBlob","toDataURL","dataUri","arrayBuffer","byteString","createBlob","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","Blob","intArray","mimeString","split","indexOf","atob","decodeURI","ArrayBuffer","Uint8Array","character","charCodeAt","level","console","isObject","variable","Object","toString","isFunction","value","buffer","constructor","isItemList","maybeItemList","isNodeList","maybeNodeList","item","namedItem","isString","maybeString","trimStr","string","String","trim","format","str","args","newStr","nextIdxToReplace","strBefore","strAfter","isFile","maybeFile","File","isFileList","maybeFileList","FileList","isFileOrInput","maybeFileOrInput","isInput","maybeInput","notFile","evaluateType","normalizedType","HTMLInputElement","tagName","isBlob","maybeBlob","isXhrUploadSupported","input","document","createElement","multiple","FormData","createXhrInstance","upload","XMLHttpRequest","ActiveXObject","isFolderDropSupported","dataTransfer","items","webkitGetAsEntry","isFileChunkingSupported","androidStock","webkitSlice","mozSlice","sliceBlob","fileOrBlob","start","end","slicer","arrayBufferToHex","bytesAsHex","bytes","byt","byteAsHexStr","readBlobToHex","blob","startOffset","initialBlob","fileReader","FileReader","promise","Promise","onload","success","onerror","failure","readAsArrayBuffer","second","extendNested","override","target","sourceFn","super_","srcPropName","srcPropVal","arr","elt","from","len","hasOwnProperty","getUniqueId","c","r","random","v","ie","navigator","userAgent","ie7","ie8","ie10","ie11","edge","safari","vendor","chrome","opera","firefox","windows","platform","android","ios6","ios","ios7","ios8","ios800","iosChrome","iosSafari","iosSafariWebView","preventDefault","e","returnValue","toElement","div","html","innerHTML","iterableItem","callback","keyOrIndex","Storage","getItem","bind","oldFunc","context","newArgs","concat","obj2url","obj","temp","prefixDone","uristrings","prefix","add","nextObj","i","nextTemp","encodeURIComponent","join","obj2FormData","formData","arrayKeyName","obj2Inputs","form","setAttribute","appendChild","parseJson","json","JSON","parse","eval","getExtension","filename","extIdx","lastIndexOf","substr","getFilename","blobOrFileInput","fileName","DisposeSupport","disposers","dispose","disposer","shift","addDisposer","disposeFunction","define","amd","module","exports","version","supportedFeatures","supportsUploading","supportsUploadingBlobs","supportsFileDrop","supportsAjaxFileUploading","supportsFolderDrop","supportsChunking","supportsResume","supportsUploadViaPaste","supportsUploadCors","supportsDeleteFileXdr","supportsDeleteFileCorsXhr","supportsDeleteFileCors","supportsFolderSelection","supportsImagePreviews","supportsUploadProgress","testSupportsFileInputElement","supported","tempInput","disabled","ex","isChrome21OrHigher","isChrome14OrHigher","isCrossOriginXhrSupported","xhr","withCredentials","isXdrSupported","XDomainRequest","isCrossOriginAjaxSupported","isFolderSelectionSupported","webkitdirectory","isLocalStorageSupported","localStorage","setItem","isDragAndDropSupported","span","postMessage","ajaxUploading","blobUploading","canDetermineSize","chunking","deleteFileCors","deleteFileCorsXdr","deleteFileCorsXhr","dialogElement","HTMLDialogElement","fileDrop","folderDrop","folderSelection","imagePreviews","imageValidation","itemSizeValidation","pause","progressBar","resume","scaling","tiffPreviews","unlimitedScaledImageSize","uploading","uploadCors","uploadCustomHeaders","uploadNonMultipart","uploadViaPaste","isGenericPromise","maybePromise","then","successArgs","failureArgs","successCallbacks","failureCallbacks","doneCallbacks","state","onSuccess","onFailure","done","BlobProxy","referenceBlob","onCreate","create","UploadButton","o","disposeSupport","acceptFiles","focusClass","folders","hoverClass","ios8BrowserCrashWorkaround","onChange","title","buttonId","createInput","BUTTON_ID_ATTR_NAME","setMultiple","position","right","top","fontFamily","fontSize","margin","padding","cursor","height","overflow","direction","getInput","getButtonId","isMultiple","optInput","removeAttribute","setAcceptFiles","reset","UploadData","uploaderProxy","byUuid","byStatus","byProxyGroupId","byBatchId","getDataByIds","idOrIds","entries","id","getDataByUuids","uuids","uuid","getDataByStatus","status","statusResults","statuses","statusEnum","statusResultIndexes","dataIndex","addFile","spec","SUBMITTING","originalName","size","batchId","proxyGroupId","onStatusChange","retrieve","optionalFilter","setStatus","newStatus","oldStatus","byStatusOldStatusIndex","splice","uuidChanged","newUuid","oldUuid","updateName","newName","updateSize","newSize","setParentId","targetId","parentId","getIdsInProxyGroup","getIdsInBatch","SUBMITTED","REJECTED","QUEUED","CANCELED","PAUSED","UPLOADING","UPLOAD_RETRYING","UPLOAD_SUCCESSFUL","UPLOAD_FAILED","DELETE_FAILED","DELETING","DELETED","basePublicApi","addBlobs","blobDataOrArray","endpoint","addFiles","addInitialFiles","cannedFileList","cannedFile","_addCannedFile","_maybeHandleIos8SafariWorkaround","_storedIds","_currentBatchId","processBlob","_handleNewFile","blobs","defaultName","verifiedFiles","processBlobData","blobData","processCanvas","processCanvasData","canvasData","normalizedQuality","processFileOrInput","fileOrInput","files","file","normalizeData","fileContainer","_prepareItemsForUpload","cancel","_handler","cancelAll","storedIdsCopy","storedFileId","clearStoredFiles","continueUpload","uploadData","_uploadData","enabled","getName","_uploadFile","deleteFile","_onSubmitDelete","doesExist","fileOrBlobId","isValid","drawThumbnail","fileId","imgOrCanvas","maxSize","fromServer","customResizeFunction","promiseToReturn","fileOrUrl","_imageGenerator","_thumbnailUrls","scale","getFile","container","generate","modifiedContainer","reason","getButton","_getButton","_buttonIdsForFileIds","getEndpoint","_endpointStore","get","getInProgress","getParentId","uploadDataEntry","getUploads","getResumableFilesData","getSize","getNetUploads","_netUploaded","getRemainingAllowedItems","allowedItems","_currentItemLimit","_netUploadedOrQueued","getUuid","debug","pauseUpload","_autoRetries","_retryTimeouts","_preventRetries","_buttons","button","_paramsStore","_pasteHandler","session","refreshOnReset","_refreshSessionData","_succeededSinceLastAllComplete","_failedSinceLastAllComplete","_totalProgress","retry","_manualRetry","scaleImage","specs","Scaler","setCustomHeaders","headers","_customHeadersStore","set","setDeleteFileCustomHeaders","_deleteFileCustomHeadersStore","setDeleteFileEndpoint","_deleteFileEndpointStore","setDeleteFileParams","_deleteFileParamsStore","setEndpoint","setForm","elementOrId","_updateFormSupportAndParams","setItemLimit","newItemLimit","setName","setParams","setUuid","uploadStoredFiles","_itemError","_uploadStoredFiles","basePrivateApi","sessionData","deleteFileEndpoint","deleteFileParams","thumbnailUrl","_annotateWithButtonId","associatedInput","qqButtonId","_getButtonId","_batchError","onError","_createDeleteHandler","DeleteFileAjaxRequester","method","maxConnections","uuidParamName","request","uuidName","customHeaders","paramsStore","endpointStore","cors","onDelete","_onDelete","onDeleteComplete","xhrOrXdr","isError","_onDeleteComplete","_createPasteHandler","PasteSupport","targetElement","paste","pasteReceived","_handleCheckedCallback","onPasteReceived","_handlePasteSuccess","identifier","_createStore","initialValue","_readOnlyValues_","store","catchall","perIdReadOnlyValues","readOnlyValues","copy","orig","getReadOnlyValues","includeReadOnlyValues","existing","values","addReadOnly","_createUploadDataTracker","_onUploadStatusChange","_maybeAllComplete","setTimeout","_createUploadButton","accept","validation","allowedExtensions","allowMultiple","workarounds","iosEmptyVideos","_isAllowedExtension","classes","buttonFocus","buttonHover","ios8BrowserCrash","inputName","_onInputChange","fileInputTitle","_disposeSupport","_createUploadHandler","additionalOptions","lastOnProgress","preventRetryParam","preventRetryResponseProperty","onProgress","loaded","total","_onProgress","onComplete","_onComplete","onCancel","cancelFinalizationEffort","_onCancel","onUploadPrep","_onUploadPrep","onUpload","_onUpload","onUploadChunk","chunkData","_onUploadChunk","onUploadChunkSuccess","onResume","onAutoRetry","responseJSON","_onAutoRetry","onUuidChanged","setSize","_setSize","getDataByUuid","isQueued","UploadHandlerController","_fileOrBlobRejected","_formatSize","max","toFixed","sizeSymbols","_generateExtraButtonSpecs","_extraButtonSpecs","extraButtons","extraButtonOptionEntry","extraButtonSpec","_initExtraButton","extraButtonsSpec","_defaultButtonId","buttonOrFileInputOrFile","inputs","fileInput","fileBlobOrInput","_getNotFinished","_getValidationBase","_getValidationDescriptor","fileWrapper","_getValidationDescriptors","fileWrappers","fileDescriptors","_handleCameraAccess","camera","acceptIosCamera","optionRoot","details","callbackRetVal","successParam","newFileWrapperList","actualFile","handler","_customNewFileHandler","_handleNewFileGeneric","addFileToHandler","_trackButton","fileList","extSuppliedName","extension","_initFormSupportAndParams","_formSupport","FormSupport","attachedToForm","getFormInputsAsObject","autoUpload","newAutoUpload","newEndpoint","_isDeletePossible","expected","allowXdr","allowed","valid","allowedExt","extRegex","code","maybeNameOrNames","messages","names","validationBase","extensionsForMessage","placeholderMatch","replacement","allowedExtension","formatFileName","sizeLimit","minSizeLimit","placeholder","_onBeforeManualRetry","notFinished","_onAllComplete","ios8SafariUploads","alert","unsupportedBrowserIos8Safari","_maybeParseAndSendUploadError","response","errorReason","defaultResponseError","_maybeProcessNextItemAfterOnValidateCallback","validItem","stopOnFirstInvalidFile","validationDescriptor","onValidate","_onValidateCallbackSuccess","_onValidateCallbackFailure","successful","failed","onAllComplete","_shouldAutoRetry","_onBeforeAutoRetry","autoAttemptDelay","itemLimit","onManualRetry","clearTimeout","storedItemIndex","expunge","fileIndex","onIndividualProgress","_onSubmit","_onSubmitCallbackSuccess","_onSubmitted","onSubmitted","_storeForLater","onSuccessCallback","additionalMandatedParams","adjustedOnSuccessCallback","onSubmitDelete","_deleteHandler","sendDelete","_onTotalProgress","onTotalProgress","_onValidateBatchCallbackFailure","_onValidateBatchCallbackSuccess","validationDescriptors","errorMessage","proposedNetFilesUploadedOrQueued","tooManyItemsError","nextIndex","_validateFileOrBlobData","_upload","onValidateBatch","_preventLeaveInProgress","event","onLeave","Session","_session","addFileRecord","refresh","_sessionRequestComplete","onSessionRequestComplete","onNewSize","enableAuto","maxAutoAttempts","formElementOrId","onSubmit","idToUpload","stillSubmitting","validityChecker","ImageValidation","validate","image","errorCode","_wrapCallbacks","safeCallback","errorMsg","exception","callbackName","callbackFunc","FineUploaderBasic","disableCancelForFormUploads","filenameParam","forceMultipart","paramsInBody","totalFileSizeName","maxHeight","maxWidth","minHeight","minWidth","maybeXhr","maybeXhrOrXdr","attemptNumber","fileOrBlobData","typeError","sizeError","minSizeError","emptyError","noFilesError","maxHeightImageError","maxWidthImageError","minHeightImageError","minWidthImageError","retryFailTooManyItems","concurrent","mandatory","paramNames","partIndex","partByteOffset","chunkSize","totalFileSize","totalParts","partSize","recordsExpireIn","resuming","fileOrBlobName","sendCredentials","interceptSubmit","customResizer","sendOriginal","orient","defaultType","defaultQuality","failureText","includeExif","sizes","ImageGenerator","_scaler","handleNewFile","TotalProgress","entry","AjaxRequester","shouldParamsBeInQueryString","queue","requestData","acceptHeader","validMethods","contentType","mandatedParams","allowXRequestedWithAndCacheControl","successfulResponseCodes","DELETE","PATCH","POST","PUT","GET","onSend","isSimpleMethod","containsNonSimpleHeaders","containsNonSimple","header","isXdr","getCorsAjaxTransport","ontimeout","onprogress","getXhrOrXdr","suppliedXhr","dequeue","nextId","sendRequest","xdrError","isResponseSuccessful","getParams","onDemandParams","additionalParams","optXhr","payload","url","createUrl","additionalQueryParams","getXdrLoadHandler","getXdrErrorHandler","onreadystatechange","getXhrReadyStateChangeHandler","registerForUploadProgress","open","setHeaders","send","stringify","addToPath","readyState","lengthComputable","onDemandHeaders","additionalHeaders","allHeaders","setRequestHeader","responseCode","prepareToSend","initTransport","path","cacheBuster","withPath","appendToPath","withParams","withQueryParams","_additionalQueryParams_","withHeaders","withPayload","thePayload","withCacheBuster","qqtimestamp","Date","getTime","canceled","UploadHandler","proxy","fileState","fileItem","onCancelRetVal","getThirdPartyFileId","_getFileState","_setThirdPartyFileId","thirdPartyFileId","_wasCanceled","controller","chunkingPossible","concurrentChunkingPossible","preventRetryResponse","chunked","chunkIdx","_getChunkData","attemptingResume","chunkProgress","_getChunkDataForCallback","finalize","finalizeChunks","normaizedResponse","normalizeResponse","_maybeDeletePersistedChunkData","cleanup","hasMoreParts","remaining","nextPart","nextIdx","_getTotalChunks","reevaluateChunking","sendNext","inProgressChunks","inProgress","connectionManager","available","uploadChunk","clearCachedChunk","responseToReport","inProgressChunkIdx","_maybePersistChunkedState","inProgressIdx","unshift","ignoreFailure","keys","_getXhrs","ckid","ckXhr","abort","_cancelled","moveInProgressToRemaining","free","clearXhr","_open","_openChunks","_waiting","openChunkEntriesCount","openChunksCount","openChunkIndexes","dontAllowNext","allowNext","waitingIndex","connectionsIndex","getProxyOrBlob","getWaitingOrConnected","waitingOrConnected","chunks","parseInt","isUsingConnection","pop","openChunksEntry","simple","uploadFile","maybeNewUuid","_clearXhrs","getProxy","initHandler","handlerType","traditional","handlerModuleSubtype","_removeExpiredChunkingRecords","isDeferredEligibleForUpload","maybeDefer","generatedBlob","updateBlob","maybeSendDeferredFiles","errorResponse","idsInGroup","uploadedThisId","idInGroup","now","originalResponse","_shouldChunkThisFile","blobToUpload","cancelRetVal","isProxied","isResumable","FormUploadHandler","formHandlerInstanceId","onloadCallbacks","detachLoadEvents","postMessageCallbackTimers","isCors","corsMessageReceiver","WindowReceiveMessage","expungeFile","stopReceivingMessages","iframe","getElementById","_getIframeName","getFileIdForIframeName","iframeName","initIframeForUpload","body","registerPostMessageCallback","receiveMessage","_parseJsonResponse","onloadCallback","_detachLoadEvent","_attachLoadEvent","responseDescriptor","contentDocument","_createIframe","_initFormForUpload","targetName","innerHtmlOrMessage","XhrUploadHandler","chunkFiles","resumeEnabled","xhrId","ajaxRequester","_getAjaxRequester","blobOrProxy","_initTempState","_maybePrepareForResume","cachedChunks","tempState","xhrs","ajaxRequesters","responseParser","lastChunkIdx","_getXhr","resumableFilesData","_iterateResumeRecords","notResumable","optInProgress","optRemaining","reverse","paused","totalChunks","parts","newBlob","chunkId","_createXhr","optChunkIdx","_registerXhr","chunkIndex","fileSize","startBytes","endBytes","part","count","startByte","endByte","_getLocalStorageId","formatVersion","_getMimeType","_getPersistableData","ceil","_markNotResumable","localStorageId","removeItem","persistedData","lastUpdated","_registerProgressHandler","progressCalculator","totalSuccessfullyLoadedForFile","loadedForRequest","totalForRequest","estActualChunkLoaded","totalLoadedForFile","chunkLoaded","optAjaxRequester","xhrsId","expirationDays","expirationDate","setDate","getDate","requester","getMandatedParams","_method","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","ctx","width","getContext","drawImage","getImageData","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","doSquash","renderImageToCanvas","maybeCalculateDownsampledDimensions","maxPixels","origHeight","origWidth","newHeight","sqrt","newWidth","modifiedDimensions","save","resize","renderImageToCanvasWithCustomResizer","imageHeight","imageWidth","orientation","targetHeight","targetWidth","transformCoordinate","d","tmpCanvas","vertSquashRatio","dw","dh","dy","tmpCtx","sx","dx","clearRect","restore","qqImageRendered","resizeInfo","sourceCanvas","sourceCanvasContext","targetCanvas","translate","rotate","PI","MegaPixImage","srcImage","errorCallback","Image","URL","createObjectURL","webkitURL","src","listeners","imageLoadListeners","render","imgWidth","imgHeight","opt","optionsKey","optionsValue","oldTargetSrc","onrender","isImg","isCanvas","isImgCorsSupported","crossOrigin","isCanvasSupported","determineMimeOfFileName","nameWithPath","pathSegments","isCrossOrigin","targetAnchor","targetProtocol","targetHostname","targetPort","href","protocol","port","hostname","location","registerImgLoadListeners","registerCanvasDrawImageListener","registerThumbnailRenderedListener","registered","draw","drawPreview","Identify","megapixErrorHandler","isPreviewable","dummyExif","exif","Exif","mpImg","Orientation","failureMsg","drawOnCanvasOrImgFromUrl","canvasOrImg","tempImg","tempImgRender","rendered","drawOnImgFromUrlWithCssScaling","drawFromUrl","fileBlobOrUrl","_testing","TAG_IDS","TAG_INFO","274","parseLittleEndian","hex","pow","seekToApp1","offset","theOffset","thePromise","segmentLength","getApp1Offset","isLittleEndian","app1Start","getDirEntryCount","littleEndian","getIfd","dirEntries","getDirEntries","ifdHex","getTagValues","TAG_VAL_OFFSET","tagsToFind","vals","idHex","tagsToFindIdx","tagValHex","tagValLength","parser","onParseFailure","app1Offset","dirEntryCount","tagValues","isIdentifiable","magicBytes","questionableBytes","identifiable","magicBytesEntries","magicBytesArrayEntry","previewable","isPreviewableSync","PREVIEWABLE_MIME_TYPES","fileMime","isRecognizedImage","image/jpeg","image/gif","image/png","image/bmp","image/tiff","hasNonZeroLimits","limits","atLeastOne","limit","getWidthHeight","sizeDetermination","getFailingLimit","dimensions","failingLimit","limitName","limitValue","limitMatcher","dimensionPropName","actualValue","validationEffort","isJsonResponseValid","handleFileItems","fileItems","someItemsIgnored","err","refreshEffort","refreshCompleteCallback","requesterOptions","SessionAjaxRequester","queryServer","responseText","includeOriginal","failedToScaleText","_getSortedSizes","getFileRecords","originalFileUuid","originalFileName","originalBlobOrBlobData","records","originalBlob","sizeRecord","outputType","_determineOutputType","requestedType","refType","_getName","_generateScaledImage","failedText","api","scaledIds","originalId","record","blobSize","scaledId","qqparentuuid","qqparentsize","param","scalingEffort","scalingOptions","scaler","referenceType","scaledVersionProperties","startOfExt","versionType","scaledName","scaledExt","nameAppendage","sort","a","b","sourceFile","imageGenerator","scaledImageDataUri","signalSuccess","_insertExifHeader","scaledImageDataUriWithExif","originalImage","reader","insertionEffort","originalImageDataUri","ExifRestorer","readAsDataURL","_dataUriToBlob","_createBlob","KEY_STR","encode64","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","origFileBase64","resizedFileBase64","expectedBase64Header","rawImage","decode64","segments","slice2Segments","exifManipulation","exifArray","getExifArray","newImageArray","insertExif","aBuffer","seg","x","imageData","buf","separatePoint","mae","ato","array","rawImageArray","head","endPoint","base64test","perFileProgress","totalLoaded","totalSize","lastLoadedSent","lastTotalSent","callbackProxy","noRetryableFiles","retryable","none","failedId","updateTotalProgress","onNew","newLoaded","newTotal","oldLoaded","oldTotal","detachPasteHandler","isImage","registerPasteHandler","clipboardData","getAsFile","unregisterPasteHandler","startUpload","formEl","_form2Obj","determineNewEndpoint","validateForm","nativeSubmit","checkValidity","maybeUploadOnSubmit","submit","determineFormEl","notIrrelevantType","irrelevantTypes","radioOrCheckbox","ignoreValue","checked","selectValue","select","selected","elements","CryptoJS","C","C_lib","lib","Base","F","overrides","subtype","mixIn","$super","instance","properties","propertyName","clone","WordArray","words","sigBytes","encoder","Hex","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","nBytes","C_enc","enc","hexChars","bite","hexStr","hexStrLength","Latin1","latin1Chars","fromCharCode","latin1Str","latin1StrLength","Utf8","decodeURIComponent","escape","utf8Str","unescape","BufferedBlockAlgorithm","_data","_nDataBytes","_append","_process","doFlush","dataWords","dataSigBytes","blockSize","blockSizeBytes","nBlocksReady","_minBufferSize","nWordsReady","nBytesReady","min","_doProcessBlock","processedWords","Hasher","cfg","_doReset","update","messageUpdate","hash","_doFinalize","_createHelper","hasher","_createHmacHelper","C_algo","HMAC","algo","Base64","map","_map","base64Chars","byte1","byte2","byte3","triplet","j","paddingChar","base64Str","base64StrLength","paddingIndex","bits1","bits2","_hasher","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","innerHash","hmac","W","SHA1","_hash","M","H","n","t","nBitsTotal","nBitsLeft","floor","HmacSHA1","K","isPrime","sqrtN","factor","getFractionalBits","nPrime","SHA256","f","g","h","gamma0x","gamma0","gamma1x","gamma1","ch","maj","sigma0","sigma1","t1","t2","HmacSHA256","superInit","subInit","typedArray","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","byteOffset","byteLength","typedArrayByteLength","s3","util","ALGORITHM_PARAM_NAME","AWS_PARAM_PREFIX","CREDENTIAL_PARAM_NAME","DATE_PARAM_NAME","REDUCED_REDUNDANCY_PARAM_NAME","REDUCED_REDUNDANCY_PARAM_VALUE","SERVER_SIDE_ENCRYPTION_PARAM_NAME","SERVER_SIDE_ENCRYPTION_PARAM_VALUE","SESSION_TOKEN_PARAM_NAME","V4_ALGORITHM_PARAM_VALUE","V4_SIGNATURE_PARAM_NAME","CASE_SENSITIVE_PARAM_NAMES","UNSIGNABLE_REST_HEADER_NAMES","UNPREFIXED_PARAM_NAMES","getBucket","patterns","bucket","pattern","_getPrefixedParamName","getPolicy","policy","conditions","date","drift","clockDrift","accessKey","acl","expectedStatus","sessionToken","successRedirectUrl","getSuccessRedirectAbsoluteUrl","minFileSize","maxFileSize","reducedRedundancy","region","serverSideEncryption","signatureVersion","expiration","getPolicyExpirationDate","Content-Type","success_action_status","success_action_redirect","getV4CredentialsString","getV4PolicyDate","awsParamName","enforceSizeLimits","refreshPolicyCredentials","newSessionToken","sessionTokenFound","oldCondIdx","oldCondObj","oldCondName","oldCondVal","generateAwsParams","signPolicyCallback","awsParams","customParams","policyJson","AWSAccessKeyId","policyAndSignature","updatedAccessKey","updatedSessionToken","signature","minSize","adjustedMinSize","adjustedMaxSize","adjustedDate","getPolicyDate","getCredentialsDate","getUTCFullYear","getUTCMonth","getUTCDate","_minutesToAdd_","minutesToAdd","pad","setMinutes","getMinutes","toISOString","number","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","parseIframeResponse","doc","contentWindow","queryString","search","etag","targetAnchorContainer","encodeQueryStringParam","percentEncoded","nonTraditionalBasePublicApi","setUploadSuccessParams","_uploadSuccessParamsStore","setUploadSuccessEndpoint","_uploadSuccessEndpointStore","nonTraditionalBasePrivateApi","onCompleteArgs","successEndpoint","successCustomHeaders","uploadSuccess","successMethod","uploadSuccessParams","fileParams","onSuccessFromServer","successRequestResult","_failedSuccessRequestCallbacks","onFailureFromServer","submitSuccessRequest","successAjaxRequester","UploadSuccessAjaxRequester","_getEndpointSpecificParams","sendSuccessRequest","successRequestCallback","objectProperties","host","credentials","secretKey","iframeSupport","localBlankPagePath","onCredentialsExpired","setCredentials","_currentCredentials","_aclStore","_cannedKeys","_cannedBuckets","_buckets","_hosts","getKey","ignoreEmpty","setAcl","aclStore","_determineBucket","getHost","_determineHost","getKeyName","_determineKeyName","maxSizeLimit","oldParams","modifiedParams","paramName","credentialsProvider","onExpired","updateCredentials","_determineObjectPropertyValue","property","maybe","keynameLogic","onGetKeynameFailure","onGetKeynameSuccess","keyname","keynameToUse","_handleKeynameFunction","keynameFunc","successCallback","failureCallback","getResponseHeader","s3Key","s3Bucket","RequestSigner","thisSignatureRequester","pendingSignatures","expectingPolicy","signatureSpec","generateHeaders","signatureConstructor","getHeaders","Authorization","getRequestDate","getSignedHeaders","getEndOfUrl","v2","getStringToSign","contentMd5","headersStr","endOfUrl","signApiRequest","signatureEffort","headersWordArray","headersHmacSha1","headersHmacSha1Base64","signPolicy","policyStr","policyWordArray","base64Policy","policyHmacSha1","policyHmacSha1Base64","v4","getCanonicalQueryString","endOfUri","queryParamIdx","canonicalQueryString","encodedQueryParams","encodedQueryParamNames","queryStrings","nameAndVal","paramVal","forEach","encodedQueryParamName","getCanonicalRequest","getCanonicalUri","headerNames","hashedContent","getEncodedHashedPayload","onloadend","DONE","getScope","canonicalRequest","hashedRequest","scope","stringToSignTemplate","hashed","raw","signedHeaders","headerName","headersPattern","matches","dateKey","dateRegionKey","dateRegionServiceKey","signingKey","credentialPattern","credentialCondition","credential","condition","handleSignatureReceived","responseJson","pendingSignatureData","invalid","getStringToSignArtifacts","requestInfo","toSign","generateStringToSign","headerIndexesToRemove","headerIdx","toSignRaw","REQUEST_TYPE","MULTIPART_ABORT","uploadId","MULTIPART_INITIATE","MULTIPART_COMPLETE","MULTIPART_UPLOAD","partNum","content","Host","determineSignatureClientSide","toBeSigned","updatedHeaders","getToSign","signatureArtifacts","stringToSign","getSignature","queryParams","stringToSignRaw","constructStringToSign","artifacts","theHeaders","withUploadId","theUploadId","withContent","theContent","withContentType","theContentType","withPartNum","thePartNum","toUTCString","_artifacts_","pendingRequests","handleSuccessResponse","successIndicator","failureIndicator","parsedResponse","InitiateMultipartAjaxRequester","pendingInitiateRequests","getContentType","getSignatureAjaxRequester","handleInitiateRequestComplete","domParser","DOMParser","responseDoc","parseFromString","uploadIdElements","messageElements","CompleteMultipartAjaxRequester","pendingCompleteRequests","handleCompleteRequestComplete","bucketEls","keyEls","getCompleteRequestBody","etagEntries","implementation","createDocument","etagEntry","partEl","partNumEl","partNumTextEl","createTextNode","etagTextEl","etagEl","XMLSerializer","serializeToString","AbortMultipartAjaxRequester","handleAbortRequestComplete","errorEls","awsErrorMsg","onGetBucket","onGetHost","onGetKeyName","combine","etagMap","etags","requesters","completeMultipart","initHeaders","urlSafe","restSignature","put","domain","track","setup","uploadIdPromise","initiateMultipart","abortMultipart","policySignature","initParams","toSend","cachedBucket","cachedHost","shouldReset","keyName","encodedKey","parsedErrorProps","parseError","awsResponseXml","parsedDoc","errorDetails","codeEls","messageEls","existedInLocalStorage","baseStorageId","bucketName","isValidResponse","innerHtml","responseData","createForm","handleFinishedUpload","handleUpload","DragAndDrop","HIDE_ZONES_EVENT_NAME","HIDE_BEFORE_ENTER_ATTR","uploadDropZones","droppedFiles","dropZoneElements","allowMultipleItems","dropActive","uploadDroppedFiles","uploadDropZone","filesAsArray","dropLog","dropDisabled","processingDroppedFilesComplete","getElement","traverseFileTree","parseEntryPromise","fullPath","indexOfNameInFullPath","qqPath","fileError","isDirectory","getFilesInDirectory","allEntriesRead","entriesLeft","readFailure","accumEntries","existingPromise","dirReader","createReader","readEntries","readSuccess","newEntries","handleDataTransfer","pendingFolderPromises","handleDataTransferPromise","processingDroppedFiles","dropError","setupDropzone","dropArea","dropZone","UploadDropZone","onEnter","stopPropagation","onLeaveNotDescendants","onDrop","isFileDrag","dragEvent","fileDrag","types","leavingDocumentOut","relatedTarget","y","setupDragDrop","dropZones","maybeHideDropZones","HTMLElement","setupExtraDropzone","removeDropzone","dzs","targetEl","errorSpecifics","preventDrop","dropOutsideDisabled","dragoverShouldBeCanceled","disableDropOutside","dropEffect","isValidFileDrag","effectTest","dt","isSafari","effectAllowed","isOrSetDropDisabled","isDisabled","triggerHidezonesEvent","hideZonesEvent","triggerUsingOldApi","createEvent","initEvent","CustomEvent","dispatchEvent","attachEvents","effect","elementFromPoint","clientX","clientY","uiPublicApi","_parent","_templating","addCacheToDom","clearFiles","addExtraDropzone","_dnd","removeExtraDropzone","getItemByFileId","isHiddenForever","getFileContainer","_setupDragAndDrop","_totalFilesInBatch","_filesInBatchAddedToUi","_setupClickAndEditEventHandlers","formattedFilename","updateFilename","uploadPaused","continued","uploadContinued","getId","fileContainerOrChildEl","getFileId","getDropTarget","qqDropTarget","uiPrivateApi","_removeFileItem","removeFile","_fileButtonsClickHandler","FileButtonsClickHandler","_bindFileButtonsClickEvent","_focusinEventSupported","_isEditFilenameEnabled","_filenameClickHandler","_bindFilenameClickEvent","_filenameInputFocusInHandler","_bindFilenameInputFocusInEvent","_filenameInputFocusHandler","_bindFilenameInputFocusEvent","dragAndDrop","extraDropzones","templating","defaultDropZone","getDropZone","showDropProcessing","hideDropProcessing","errorData","lvl","onDeleteFile","onRetry","onPause","onContinue","onGetName","isEditFilenamePossible","FilenameClickHandler","FilenameInputFocusHandler","_filenameEditHandler","onGetUploadStatus","onSetName","onEditingStatusChange","isEditing","qqInput","getEditInput","qqFileContainer","hideFilename","hideEditIcon","showFilename","showEditIcon","markFilenameEditable","hideRetry","setStatusText","_classes","retrying","hidePause","FilenameInputFocusInHandler","hideSpinner","resetTotalProgress","reportDirectoryPaths","qqpath","_addToList","addHandler","updateProgress","hideCancel","hideProgress","waitingForResponse","_displayFileSize","parentRetVal","completeUpload","_markFileAsSuccessful","fail","showCancel","isRetryPossible","showRetry","_controlFailureTextDisplay","newResult","showDeleteButton","_maybeUpdateThumbnail","showSpinner","allowPause","retryNumForDisplay","maxAuto","retryNote","_showCancelLink","showAutoRetryNote","autoRetryNote","resetProgress","_onSubmitDeleteSuccess","forceConfirm","_showDeleteConfirm","_sendDeleteRequest","deletingFailedText","hideDeleteButton","deletingStatusText","confirmMessage","deleteRequestArgs","showConfirm","canned","prependData","prependIndex","dontDisplay","hideScaled","prependFiles","disableCancel","_handledProxyGroup","_clearList","addFileToCache","updateThumbnail","thumbnails","generatePreview","fileSizeOnSubmit","loadedSize","sizeForDisplay","_formatProgress","uploadedSize","formatProgress","mode","responseProperty","failureReason","failedUploadTextDisplay","failUpload","enableTooltip","_showTooltip","showMessage","_setupPastePrompt","namePromptMessage","defaultVal","showPrompt","fileStatus","placeholders","waitUntilResponse","listElement","template","editable","tooManyFilesError","unsupportedBrowser","promptForName","maxCount","notAvailablePath","waitingPath","timeBetweenThumbs","hasDialog","showDialog","confirm","defaultValue","prompt","Templating","templateIdOrEl","containerEl","fileContainerEl","maxThumbs","waitUntilUpdate","thumbnailNotAvailable","waitingForThumbnail","renderFailure","FILE_ID_ATTR","FILE_CLASS_PREFIX","THUMBNAIL_MAX_SIZE_ATTR","THUMBNAIL_SERVER_SCALE_ATTR","HIDE_DROPZONE_ATTR","DROPZPONE_TEXT_ATTR","IN_PROGRESS_CLASS","HIDDEN_FOREVER_CLASS","fileBatch","createDocumentFragment","isCancelDisabled","generatedThumbnails","thumbnailQueueMonitorRunning","thumbGenerationQueue","thumbnailMaxSize","selectorClasses","alertDialog","dialogCancelButton","confirmDialog","dialogMessage","dialogOkButton","promptDialog","drop","list","progressBarContainer","totalProgressBarContainer","totalProgressBar","spinner","continueButton","deleteButton","statusText","editFilenameInput","editNameIcon","dropText","dropProcessing","dropProcessingSpinner","thumbnail","previewGeneration","cachedThumbnailNotAvailableImg","cachedWaitingForThumbnailImg","isEditElementsExist","isRetryElementExist","templateHtml","showThumbnails","serverScale","cacheThumbnailPlaceholders","notAvailableUrl","waitingUrl","updatedImg","displayWaitingImg","waitingImgPlacement","maybeScalePlaceholderViaCss","show","generateNewPreview","getThumbnail","qqThumbnailId","maybeSetDisplayNotAvailableImg","generateNextQueuedPreview","queuedThumbRequest","processUpdateQueuedPreviewRequest","processNewQueuedPreviewRequest","getCancel","getTemplateEl","getContinue","getDialog","getDelete","getDropProcessing","getEditIcon","getPause","getProgress","getRetry","getSpinner","cssClass","previewing","notAvailableImgPlacement","parseAndGetTemplate","scriptEl","scriptHtml","fileListNode","tempTemplateEl","fileListHtml","defaultButton","dropTextEl","uploaderEl","fileTemplate","prependFile","parentEl","beforeEl","optFileOrBlob","relatedThumbnailId","useCachedPreview","showWaitingImg","setProgressBarWidth","percent","bar","progressBarSelector","targetThumbnailId","cachedThumbnailId","targetThumbnail","cachedThumbnail","hideTotalProgress","cantRenderEl","prependInfo","hideForever","batch","fileEl","fileNameEl","thumb","waitingImg","currentNode","getFileList","filenameEl","isFileName","icon","isEditIcon","isEditInput","isCancel","allowContinueButton","isPause","isContinueButton","isDeleteButton","isRetry","textEl","dialog","messageEl","inputEl","cancelBtn","okBtn","closeHandler","cancelClickHandler","okClickHandler","close","showModal","UiEventHandler","s","protectedApi","eventType","attachTo","onHandled","srcElement","getFileIdFromItem","qqFileId","getDisposeSupport","inheritedInternalApi","buttonHandlers","examineEvent","buttonType","firstLetterCapButtonType","handleFilenameEdit","FilenameEditHandler","handleInputFocus","getFilenameSansExtension","filenameSansExt","getOriginalExtension","origName","handleNameUpdate","newFilenameInputEl","origExtension","registerInputBlurHandler","registerInputEnterKeyHandler","keyCode","which","focusInput","focus"],"mappings":"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","file":"s3.jquery.fine-uploader.js","sourcesContent":[null,"/*globals jQuery, qq*/\n(function($) {\n    \"use strict\";\n    var $el,\n        pluginOptions = [\"uploaderType\", \"endpointType\"];\n\n    function init(options) {\n        var xformedOpts = transformVariables(options || {}),\n            newUploaderInstance = getNewUploaderInstance(xformedOpts);\n\n        uploader(newUploaderInstance);\n        addCallbacks(xformedOpts, newUploaderInstance);\n\n        return $el;\n    }\n\n    function getNewUploaderInstance(params) {\n        var uploaderType = pluginOption(\"uploaderType\"),\n            namespace = pluginOption(\"endpointType\");\n\n        // If the integrator has defined a specific type of uploader to load, use that, otherwise assume `qq.FineUploader`\n        if (uploaderType) {\n            // We can determine the correct constructor function to invoke by combining \"FineUploader\"\n            // with the upper camel cased `uploaderType` value.\n            uploaderType = uploaderType.charAt(0).toUpperCase() + uploaderType.slice(1).toLowerCase();\n\n            if (namespace) {\n                return new qq[namespace][\"FineUploader\" + uploaderType](params);\n            }\n\n            return new qq[\"FineUploader\" + uploaderType](params);\n        }\n        else {\n            if (namespace) {\n                return new qq[namespace].FineUploader(params);\n            }\n\n            return new qq.FineUploader(params);\n        }\n    }\n\n    function dataStore(key, val) {\n        var data = $el.data(\"fineuploader\");\n\n        if (val) {\n            if (data === undefined) {\n                data = {};\n            }\n            data[key] = val;\n            $el.data(\"fineuploader\", data);\n        }\n        else {\n            if (data === undefined) {\n                return null;\n            }\n            return data[key];\n        }\n    }\n\n    //the underlying Fine Uploader instance is stored in jQuery's data stored, associated with the element\n    // tied to this instance of the plug-in\n    function uploader(instanceToStore) {\n        return dataStore(\"uploader\", instanceToStore);\n    }\n\n    function pluginOption(option, optionVal) {\n        return dataStore(option, optionVal);\n    }\n\n    // Implement all callbacks defined in Fine Uploader as functions that trigger appropriately names events and\n    // return the result of executing the bound handler back to Fine Uploader\n    function addCallbacks(transformedOpts, newUploaderInstance) {\n        var callbacks = transformedOpts.callbacks = {};\n\n        $.each(newUploaderInstance._options.callbacks, function(prop, nonJqueryCallback) {\n            var name, callbackEventTarget;\n\n            name = /^on(\\w+)/.exec(prop)[1];\n            name = name.substring(0, 1).toLowerCase() + name.substring(1);\n            callbackEventTarget = $el;\n\n            callbacks[prop] = function() {\n                var originalArgs = Array.prototype.slice.call(arguments),\n                    transformedArgs = [],\n                    nonJqueryCallbackRetVal, jqueryEventCallbackRetVal;\n\n                $.each(originalArgs, function(idx, arg) {\n                    transformedArgs.push(maybeWrapInJquery(arg));\n                });\n\n                nonJqueryCallbackRetVal = nonJqueryCallback.apply(this, originalArgs);\n\n                try {\n                    jqueryEventCallbackRetVal = callbackEventTarget.triggerHandler(name, transformedArgs);\n                }\n                catch (error) {\n                    qq.log(\"Caught error in Fine Uploader jQuery event handler: \" + error.message, \"error\");\n                }\n\n                /*jshint -W116*/\n                if (nonJqueryCallbackRetVal != null) {\n                    return nonJqueryCallbackRetVal;\n                }\n                return jqueryEventCallbackRetVal;\n            };\n        });\n\n        newUploaderInstance._options.callbacks = callbacks;\n    }\n\n    //transform jQuery objects into HTMLElements, and pass along all other option properties\n    function transformVariables(source, dest) {\n        var xformed, arrayVals;\n\n        if (dest === undefined) {\n            if (source.uploaderType !== \"basic\") {\n                xformed = { element: $el[0] };\n            }\n            else {\n                xformed = {};\n            }\n        }\n        else {\n            xformed = dest;\n        }\n\n        $.each(source, function(prop, val) {\n            if ($.inArray(prop, pluginOptions) >= 0) {\n                pluginOption(prop, val);\n            }\n            else if (val instanceof $) {\n                xformed[prop] = val[0];\n            }\n            else if ($.isPlainObject(val)) {\n                xformed[prop] = {};\n                transformVariables(val, xformed[prop]);\n            }\n            else if ($.isArray(val)) {\n                arrayVals = [];\n                $.each(val, function(idx, arrayVal) {\n                    var arrayObjDest = {};\n\n                    if (arrayVal instanceof $) {\n                        $.merge(arrayVals, arrayVal);\n                    }\n                    else if ($.isPlainObject(arrayVal)) {\n                        transformVariables(arrayVal, arrayObjDest);\n                        arrayVals.push(arrayObjDest);\n                    }\n                    else {\n                        arrayVals.push(arrayVal);\n                    }\n                });\n                xformed[prop] = arrayVals;\n            }\n            else {\n                xformed[prop] = val;\n            }\n        });\n\n        if (dest === undefined) {\n            return xformed;\n        }\n    }\n\n    function isValidCommand(command) {\n        return $.type(command) === \"string\" &&\n            !command.match(/^_/) && //enforce private methods convention\n            uploader()[command] !== undefined;\n    }\n\n    // Assuming we have already verified that this is a valid command, call the associated function in the underlying\n    // Fine Uploader instance (passing along the arguments from the caller) and return the result of the call back to the caller\n    function delegateCommand(command) {\n        var xformedArgs = [],\n            origArgs = Array.prototype.slice.call(arguments, 1),\n            retVal;\n\n        transformVariables(origArgs, xformedArgs);\n\n        retVal = uploader()[command].apply(uploader(), xformedArgs);\n\n        return maybeWrapInJquery(retVal);\n    }\n\n    // If the value is an `HTMLElement` or `HTMLDocument`, wrap it in a `jQuery` object\n    function maybeWrapInJquery(val) {\n        var transformedVal = val;\n\n        // If the command is returning an `HTMLElement` or `HTMLDocument`, wrap it in a `jQuery` object\n        /*jshint -W116*/\n        if (val != null && typeof val === \"object\" &&\n           (val.nodeType === 1 || val.nodeType === 9) && val.cloneNode) {\n\n            transformedVal = $(val);\n        }\n\n        return transformedVal;\n    }\n\n    $.fn.fineUploader = function(optionsOrCommand) {\n        var self = this, selfArgs = arguments, retVals = [];\n\n        this.each(function(index, el) {\n            $el = $(el);\n\n            if (uploader() && isValidCommand(optionsOrCommand)) {\n                retVals.push(delegateCommand.apply(self, selfArgs));\n\n                if (self.length === 1) {\n                    return false;\n                }\n            }\n            else if (typeof optionsOrCommand === \"object\" || !optionsOrCommand) {\n                init.apply(self, selfArgs);\n            }\n            else {\n                $.error(\"Method \" +  optionsOrCommand + \" does not exist on jQuery.fineUploader\");\n            }\n        });\n\n        if (retVals.length === 1) {\n            return retVals[0];\n        }\n        else if (retVals.length > 1) {\n            return retVals;\n        }\n\n        return this;\n    };\n\n}(jQuery));\n","/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */\n/* jshint -W079 */\nvar qq = function(element) {\n    \"use strict\";\n\n    return {\n        hide: function() {\n            element.style.display = \"none\";\n            return this;\n        },\n\n        /** Returns the function which detaches attached event */\n        attach: function(type, fn) {\n            if (element.addEventListener) {\n                element.addEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.attachEvent(\"on\" + type, fn);\n            }\n            return function() {\n                qq(element).detach(type, fn);\n            };\n        },\n\n        detach: function(type, fn) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.detachEvent(\"on\" + type, fn);\n            }\n            return this;\n        },\n\n        contains: function(descendant) {\n            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)\n            // says a `null` (or ostensibly `undefined`) parameter\n            // passed into `Node.contains` should result in a false return value.\n            // IE7 throws an exception if the parameter is `undefined` though.\n            if (!descendant) {\n                return false;\n            }\n\n            // compareposition returns false in this case\n            if (element === descendant) {\n                return true;\n            }\n\n            if (element.contains) {\n                return element.contains(descendant);\n            } else {\n                /*jslint bitwise: true*/\n                return !!(descendant.compareDocumentPosition(element) & 8);\n            }\n        },\n\n        /**\n         * Insert this element before elementB.\n         */\n        insertBefore: function(elementB) {\n            elementB.parentNode.insertBefore(element, elementB);\n            return this;\n        },\n\n        remove: function() {\n            element.parentNode.removeChild(element);\n            return this;\n        },\n\n        /**\n         * Sets styles for an element.\n         * Fixes opacity in IE6-8.\n         */\n        css: function(styles) {\n            /*jshint eqnull: true*/\n            if (element.style == null) {\n                throw new qq.Error(\"Can't apply style to node as it is not on the HTMLElement prototype chain!\");\n            }\n\n            /*jshint -W116*/\n            if (styles.opacity != null) {\n                if (typeof element.style.opacity !== \"string\" && typeof (element.filters) !== \"undefined\") {\n                    styles.filter = \"alpha(opacity=\" + Math.round(100 * styles.opacity) + \")\";\n                }\n            }\n            qq.extend(element.style, styles);\n\n            return this;\n        },\n\n        hasClass: function(name, considerParent) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));\n        },\n\n        addClass: function(name) {\n            if (!qq(element).hasClass(name)) {\n                element.className += \" \" + name;\n            }\n            return this;\n        },\n\n        removeClass: function(name) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            element.className = element.className.replace(re, \" \").replace(/^\\s+|\\s+$/g, \"\");\n            return this;\n        },\n\n        getByClass: function(className, first) {\n            var candidates,\n                result = [];\n\n            if (first && element.querySelector) {\n                return element.querySelector(\".\" + className);\n            }\n            else if (element.querySelectorAll) {\n                return element.querySelectorAll(\".\" + className);\n            }\n\n            candidates = element.getElementsByTagName(\"*\");\n\n            qq.each(candidates, function(idx, val) {\n                if (qq(val).hasClass(className)) {\n                    result.push(val);\n                }\n            });\n            return first ? result[0] : result;\n        },\n\n        getFirstByClass: function(className) {\n            return qq(element).getByClass(className, true);\n        },\n\n        children: function() {\n            var children = [],\n                child = element.firstChild;\n\n            while (child) {\n                if (child.nodeType === 1) {\n                    children.push(child);\n                }\n                child = child.nextSibling;\n            }\n\n            return children;\n        },\n\n        setText: function(text) {\n            element.innerText = text;\n            element.textContent = text;\n            return this;\n        },\n\n        clearText: function() {\n            return qq(element).setText(\"\");\n        },\n\n        // Returns true if the attribute exists on the element\n        // AND the value of the attribute is NOT \"false\" (case-insensitive)\n        hasAttribute: function(attrName) {\n            var attrVal;\n\n            if (element.hasAttribute) {\n\n                if (!element.hasAttribute(attrName)) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(element.getAttribute(attrName)) == null;\n            }\n            else {\n                attrVal = element[attrName];\n\n                if (attrVal === undefined) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(attrVal) == null;\n            }\n        }\n    };\n};\n\n(function() {\n    \"use strict\";\n\n    qq.canvasToBlob = function(canvas, mime, quality) {\n        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));\n    };\n\n    qq.dataUriToBlob = function(dataUri) {\n        var arrayBuffer, byteString,\n            createBlob = function(data, mime) {\n                var BlobBuilder = window.BlobBuilder ||\n                        window.WebKitBlobBuilder ||\n                        window.MozBlobBuilder ||\n                        window.MSBlobBuilder,\n                    blobBuilder = BlobBuilder && new BlobBuilder();\n\n                if (blobBuilder) {\n                    blobBuilder.append(data);\n                    return blobBuilder.getBlob(mime);\n                }\n                else {\n                    return new Blob([data], {type: mime});\n                }\n            },\n            intArray, mimeString;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return createBlob(arrayBuffer, mimeString);\n    };\n\n    qq.log = function(message, level) {\n        if (window.console) {\n            if (!level || level === \"info\") {\n                window.console.log(message);\n            }\n            else\n            {\n                if (window.console[level]) {\n                    window.console[level](message);\n                }\n                else {\n                    window.console.log(\"<\" + level + \"> \" + message);\n                }\n            }\n        }\n    };\n\n    qq.isObject = function(variable) {\n        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === \"[object Object]\";\n    };\n\n    qq.isFunction = function(variable) {\n        return typeof (variable) === \"function\";\n    };\n\n    /**\n     * Check the type of a value.  Is it an \"array\"?\n     *\n     * @param value value to test.\n     * @returns true if the value is an array or associated with an `ArrayBuffer`\n     */\n    qq.isArray = function(value) {\n        return Object.prototype.toString.call(value) === \"[object Array]\" ||\n            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);\n    };\n\n    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.\n    qq.isItemList = function(maybeItemList) {\n        return Object.prototype.toString.call(maybeItemList) === \"[object DataTransferItemList]\";\n    };\n\n    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`\n    // object that is associated with collections of Nodes.\n    qq.isNodeList = function(maybeNodeList) {\n        return Object.prototype.toString.call(maybeNodeList) === \"[object NodeList]\" ||\n            // If `HTMLCollection` is the actual type of the object, we must determine this\n            // by checking for expected properties/methods on the object\n            (maybeNodeList.item && maybeNodeList.namedItem);\n    };\n\n    qq.isString = function(maybeString) {\n        return Object.prototype.toString.call(maybeString) === \"[object String]\";\n    };\n\n    qq.trimStr = function(string) {\n        if (String.prototype.trim) {\n            return string.trim();\n        }\n\n        return string.replace(/^\\s+|\\s+$/g, \"\");\n    };\n\n    /**\n     * @param str String to format.\n     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.\n     */\n    qq.format = function(str) {\n\n        var args =  Array.prototype.slice.call(arguments, 1),\n            newStr = str,\n            nextIdxToReplace = newStr.indexOf(\"{}\");\n\n        qq.each(args, function(idx, val) {\n            var strBefore = newStr.substring(0, nextIdxToReplace),\n                strAfter = newStr.substring(nextIdxToReplace + 2);\n\n            newStr = strBefore + val + strAfter;\n            nextIdxToReplace = newStr.indexOf(\"{}\", nextIdxToReplace + val.length);\n\n            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)\n            if (nextIdxToReplace < 0) {\n                return false;\n            }\n        });\n\n        return newStr;\n    };\n\n    qq.isFile = function(maybeFile) {\n        return window.File && Object.prototype.toString.call(maybeFile) === \"[object File]\";\n    };\n\n    qq.isFileList = function(maybeFileList) {\n        return window.FileList && Object.prototype.toString.call(maybeFileList) === \"[object FileList]\";\n    };\n\n    qq.isFileOrInput = function(maybeFileOrInput) {\n        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);\n    };\n\n    qq.isInput = function(maybeInput, notFile) {\n        var evaluateType = function(type) {\n            var normalizedType = type.toLowerCase();\n\n            if (notFile) {\n                return normalizedType !== \"file\";\n            }\n\n            return normalizedType === \"file\";\n        };\n\n        if (window.HTMLInputElement) {\n            if (Object.prototype.toString.call(maybeInput) === \"[object HTMLInputElement]\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n        if (maybeInput.tagName) {\n            if (maybeInput.tagName.toLowerCase() === \"input\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    };\n\n    qq.isBlob = function(maybeBlob) {\n        if (window.Blob && Object.prototype.toString.call(maybeBlob) === \"[object Blob]\") {\n            return true;\n        }\n    };\n\n    qq.isXhrUploadSupported = function() {\n        var input = document.createElement(\"input\");\n        input.type = \"file\";\n\n        return (\n            input.multiple !== undefined &&\n                typeof File !== \"undefined\" &&\n                typeof FormData !== \"undefined\" &&\n                typeof (qq.createXhrInstance()).upload !== \"undefined\");\n    };\n\n    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).\n    qq.createXhrInstance = function() {\n        if (window.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        }\n\n        try {\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\n        }\n        catch (error) {\n            qq.log(\"Neither XHR or ActiveX are supported!\", \"error\");\n            return null;\n        }\n    };\n\n    qq.isFolderDropSupported = function(dataTransfer) {\n        return dataTransfer.items &&\n            dataTransfer.items.length > 0 &&\n            dataTransfer.items[0].webkitGetAsEntry;\n    };\n\n    qq.isFileChunkingSupported = function() {\n        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly\n            qq.isXhrUploadSupported() &&\n            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);\n    };\n\n    qq.sliceBlob = function(fileOrBlob, start, end) {\n        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;\n\n        return slicer.call(fileOrBlob, start, end);\n    };\n\n    qq.arrayBufferToHex = function(buffer) {\n        var bytesAsHex = \"\",\n            bytes = new Uint8Array(buffer);\n\n        qq.each(bytes, function(idx, byt) {\n            var byteAsHexStr = byt.toString(16);\n\n            if (byteAsHexStr.length < 2) {\n                byteAsHexStr = \"0\" + byteAsHexStr;\n            }\n\n            bytesAsHex += byteAsHexStr;\n        });\n\n        return bytesAsHex;\n    };\n\n    qq.readBlobToHex = function(blob, startOffset, length) {\n        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),\n            fileReader = new FileReader(),\n            promise = new qq.Promise();\n\n        fileReader.onload = function() {\n            promise.success(qq.arrayBufferToHex(fileReader.result));\n        };\n\n        fileReader.onerror = promise.failure;\n\n        fileReader.readAsArrayBuffer(initialBlob);\n\n        return promise;\n    };\n\n    qq.extend = function(first, second, extendNested) {\n        qq.each(second, function(prop, val) {\n            if (extendNested && qq.isObject(val)) {\n                if (first[prop] === undefined) {\n                    first[prop] = {};\n                }\n                qq.extend(first[prop], val, true);\n            }\n            else {\n                first[prop] = val;\n            }\n        });\n\n        return first;\n    };\n\n    /**\n     * Allow properties in one object to override properties in another,\n     * keeping track of the original values from the target object.\n     *\n     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.\n     *\n     * @param target Update properties in this object from some source\n     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.\n     * @returns {object} The target object\n     */\n    qq.override = function(target, sourceFn) {\n        var super_ = {},\n            source = sourceFn(super_);\n\n        qq.each(source, function(srcPropName, srcPropVal) {\n            if (target[srcPropName] !== undefined) {\n                super_[srcPropName] = target[srcPropName];\n            }\n\n            target[srcPropName] = srcPropVal;\n        });\n\n        return target;\n    };\n\n    /**\n     * Searches for a given element (elt) in the array, returns -1 if it is not present.\n     */\n    qq.indexOf = function(arr, elt, from) {\n        if (arr.indexOf) {\n            return arr.indexOf(elt, from);\n        }\n\n        from = from || 0;\n        var len = arr.length;\n\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from += 1) {\n            if (arr.hasOwnProperty(from) && arr[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n\n    //this is a version 4 UUID\n    qq.getUniqueId = function() {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n            /*jslint eqeq: true, bitwise: true*/\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n\n    //\n    // Browsers and platforms detection\n    qq.ie = function() {\n        return navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\n            navigator.userAgent.indexOf(\"Trident\") !== -1;\n    };\n\n    qq.ie7 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 7\") !== -1;\n    };\n\n    qq.ie8 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 8\") !== -1;\n    };\n\n    qq.ie10 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 10\") !== -1;\n    };\n\n    qq.ie11 = function() {\n        return qq.ie() && navigator.userAgent.indexOf(\"rv:11\") !== -1;\n    };\n\n    qq.edge = function() {\n        return navigator.userAgent.indexOf(\"Edge\") >= 0;\n    };\n\n    qq.safari = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Apple\") !== -1;\n    };\n\n    qq.chrome = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Google\") !== -1;\n    };\n\n    qq.opera = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Opera\") !== -1;\n    };\n\n    qq.firefox = function() {\n        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf(\"Mozilla\") !== -1 && navigator.vendor !== undefined && navigator.vendor === \"\");\n    };\n\n    qq.windows = function() {\n        return navigator.platform === \"Win32\";\n    };\n\n    qq.android = function() {\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1;\n    };\n\n    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,\n    // such as the one that prevents a `Blob` from being uploaded.\n    qq.androidStock = function() {\n        return qq.android() && navigator.userAgent.toLowerCase().indexOf(\"chrome\") < 0;\n    };\n\n    qq.ios6 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 6_\") !== -1;\n    };\n\n    qq.ios7 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 7_\") !== -1;\n    };\n\n    qq.ios8 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_\") !== -1;\n    };\n\n    // iOS 8.0.0\n    qq.ios800 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_0 \") !== -1;\n    };\n\n    qq.ios = function() {\n        /*jshint -W014 */\n        return navigator.userAgent.indexOf(\"iPad\") !== -1\n            || navigator.userAgent.indexOf(\"iPod\") !== -1\n            || navigator.userAgent.indexOf(\"iPhone\") !== -1;\n    };\n\n    qq.iosChrome = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\"CriOS\") !== -1;\n    };\n\n    qq.iosSafari = function() {\n        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf(\"Safari\") !== -1;\n    };\n\n    qq.iosSafariWebView = function() {\n        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();\n    };\n\n    //\n    // Events\n\n    qq.preventDefault = function(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    };\n\n    /**\n     * Creates and returns element from html string\n     * Uses innerHTML to create an element\n     */\n    qq.toElement = (function() {\n        var div = document.createElement(\"div\");\n        return function(html) {\n            div.innerHTML = html;\n            var element = div.firstChild;\n            div.removeChild(element);\n            return element;\n        };\n    }());\n\n    //key and value are passed to callback for each entry in the iterable item\n    qq.each = function(iterableItem, callback) {\n        var keyOrIndex, retVal;\n\n        if (iterableItem) {\n            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items\n            if (window.Storage && iterableItem.constructor === window.Storage) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays\n            // when iterating over items inside the object.\n            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else if (qq.isString(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (keyOrIndex in iterableItem) {\n                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {\n                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                        if (retVal === false) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    //include any args that should be passed to the new function after the context arg\n    qq.bind = function(oldFunc, context) {\n        if (qq.isFunction(oldFunc)) {\n            var args =  Array.prototype.slice.call(arguments, 2);\n\n            return function() {\n                var newArgs = qq.extend([], args);\n                if (arguments.length) {\n                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));\n                }\n                return oldFunc.apply(context, newArgs);\n            };\n        }\n\n        throw new Error(\"first parameter must be a function!\");\n    };\n\n    /**\n     * obj2url() takes a json-object as argument and generates\n     * a querystring. pretty much like jQuery.param()\n     *\n     * how to use:\n     *\n     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`\n     *\n     * will result in:\n     *\n     *    `http://any.url/upload?otherParam=value&a=b&c=d`\n     *\n     * @param  Object JSON-Object\n     * @param  String current querystring-part\n     * @return String encoded querystring\n     */\n    qq.obj2url = function(obj, temp, prefixDone) {\n        /*jshint laxbreak: true*/\n        var uristrings = [],\n            prefix = \"&\",\n            add = function(nextObj, i) {\n                var nextTemp = temp\n                    ? (/\\[\\]$/.test(temp)) // prevent double-encoding\n                    ? temp\n                    : temp + \"[\" + i + \"]\"\n                    : i;\n                if ((nextTemp !== \"undefined\") && (i !== \"undefined\")) {\n                    uristrings.push(\n                        (typeof nextObj === \"object\")\n                            ? qq.obj2url(nextObj, nextTemp, true)\n                            : (Object.prototype.toString.call(nextObj) === \"[object Function]\")\n                            ? encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj())\n                            : encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj)\n                    );\n                }\n            };\n\n        if (!prefixDone && temp) {\n            prefix = (/\\?/.test(temp)) ? (/\\?$/.test(temp)) ? \"\" : \"&\" : \"?\";\n            uristrings.push(temp);\n            uristrings.push(qq.obj2url(obj));\n        } else if ((Object.prototype.toString.call(obj) === \"[object Array]\") && (typeof obj !== \"undefined\")) {\n            qq.each(obj, function(idx, val) {\n                add(val, idx);\n            });\n        } else if ((typeof obj !== \"undefined\") && (obj !== null) && (typeof obj === \"object\")) {\n            qq.each(obj, function(prop, val) {\n                add(val, prop);\n            });\n        } else {\n            uristrings.push(encodeURIComponent(temp) + \"=\" + encodeURIComponent(obj));\n        }\n\n        if (temp) {\n            return uristrings.join(prefix);\n        } else {\n            return uristrings.join(prefix)\n                .replace(/^&/, \"\")\n                .replace(/%20/g, \"+\");\n        }\n    };\n\n    qq.obj2FormData = function(obj, formData, arrayKeyName) {\n        if (!formData) {\n            formData = new FormData();\n        }\n\n        qq.each(obj, function(key, val) {\n            key = arrayKeyName ? arrayKeyName + \"[\" + key + \"]\" : key;\n\n            if (qq.isObject(val)) {\n                qq.obj2FormData(val, formData, key);\n            }\n            else if (qq.isFunction(val)) {\n                formData.append(key, val());\n            }\n            else {\n                formData.append(key, val);\n            }\n        });\n\n        return formData;\n    };\n\n    qq.obj2Inputs = function(obj, form) {\n        var input;\n\n        if (!form) {\n            form = document.createElement(\"form\");\n        }\n\n        qq.obj2FormData(obj, {\n            append: function(key, val) {\n                input = document.createElement(\"input\");\n                input.setAttribute(\"name\", key);\n                input.setAttribute(\"value\", val);\n                form.appendChild(input);\n            }\n        });\n\n        return form;\n    };\n\n    /**\n     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not\n     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.\n     */\n    qq.parseJson = function(json) {\n        /*jshint evil: true*/\n        if (window.JSON && qq.isFunction(JSON.parse)) {\n            return JSON.parse(json);\n        } else {\n            return eval(\"(\" + json + \")\");\n        }\n    };\n\n    /**\n     * Retrieve the extension of a file, if it exists.\n     *\n     * @param filename\n     * @returns {string || undefined}\n     */\n    qq.getExtension = function(filename) {\n        var extIdx = filename.lastIndexOf(\".\") + 1;\n\n        if (extIdx > 0) {\n            return filename.substr(extIdx, filename.length - extIdx);\n        }\n    };\n\n    qq.getFilename = function(blobOrFileInput) {\n        /*jslint regexp: true*/\n\n        if (qq.isInput(blobOrFileInput)) {\n            // get input value and remove path to normalize\n            return blobOrFileInput.value.replace(/.*(\\/|\\\\)/, \"\");\n        }\n        else if (qq.isFile(blobOrFileInput)) {\n            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {\n                return blobOrFileInput.fileName;\n            }\n        }\n\n        return blobOrFileInput.name;\n    };\n\n    /**\n     * A generic module which supports object disposing in dispose() method.\n     * */\n    qq.DisposeSupport = function() {\n        var disposers = [];\n\n        return {\n            /** Run all registered disposers */\n            dispose: function() {\n                var disposer;\n                do {\n                    disposer = disposers.shift();\n                    if (disposer) {\n                        disposer();\n                    }\n                }\n                while (disposer);\n            },\n\n            /** Attach event handler and register de-attacher as a disposer */\n            attach: function() {\n                var args = arguments;\n                /*jslint undef:true*/\n                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));\n            },\n\n            /** Add disposer to the collection */\n            addDisposer: function(disposeFunction) {\n                disposers.push(disposeFunction);\n            }\n        };\n    };\n}());\n","/* globals define, module, global, qq */\n(function() {\n    \"use strict\";\n    if (typeof define === \"function\" && define.amd) {\n        define(function() {\n            return qq;\n        });\n    }\n    else if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = qq;\n    }\n    else {\n        global.qq = qq;\n    }\n}());\n","/* globals qq */\n/**\n * Fine Uploader top-level Error container.  Inherits from `Error`.\n */\n(function() {\n    \"use strict\";\n\n    qq.Error = function(message) {\n        this.message = \"[Fine Uploader \" + qq.version + \"] \" + message;\n    };\n\n    qq.Error.prototype = new Error();\n}());\n","/*global qq */\nqq.version = \"5.11.2\";\n","/* globals qq */\nqq.supportedFeatures = (function() {\n    \"use strict\";\n\n    var supportsUploading,\n        supportsUploadingBlobs,\n        supportsFileDrop,\n        supportsAjaxFileUploading,\n        supportsFolderDrop,\n        supportsChunking,\n        supportsResume,\n        supportsUploadViaPaste,\n        supportsUploadCors,\n        supportsDeleteFileXdr,\n        supportsDeleteFileCorsXhr,\n        supportsDeleteFileCors,\n        supportsFolderSelection,\n        supportsImagePreviews,\n        supportsUploadProgress;\n\n    function testSupportsFileInputElement() {\n        var supported = true,\n            tempInput;\n\n        try {\n            tempInput = document.createElement(\"input\");\n            tempInput.type = \"file\";\n            qq(tempInput).hide();\n\n            if (tempInput.disabled) {\n                supported = false;\n            }\n        }\n        catch (ex) {\n            supported = false;\n        }\n\n        return supported;\n    }\n\n    //only way to test for Filesystem API support since webkit does not expose the DataTransfer interface\n    function isChrome21OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[2][1-9]|Chrome\\/[3-9][0-9]/) !== undefined;\n    }\n\n    //only way to test for complete Clipboard API support at this time\n    function isChrome14OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[1][4-9]|Chrome\\/[2-9][0-9]/) !== undefined;\n    }\n\n    //Ensure we can send cross-origin `XMLHttpRequest`s\n    function isCrossOriginXhrSupported() {\n        if (window.XMLHttpRequest) {\n            var xhr = qq.createXhrInstance();\n\n            //Commonly accepted test for XHR CORS support.\n            return xhr.withCredentials !== undefined;\n        }\n\n        return false;\n    }\n\n    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8\n    function isXdrSupported() {\n        return window.XDomainRequest !== undefined;\n    }\n\n    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,\n    // or if `XDomainRequest` is an available alternative.\n    function isCrossOriginAjaxSupported() {\n        if (isCrossOriginXhrSupported()) {\n            return true;\n        }\n\n        return isXdrSupported();\n    }\n\n    function isFolderSelectionSupported() {\n        // We know that folder selection is only supported in Chrome via this proprietary attribute for now\n        return document.createElement(\"input\").webkitdirectory !== undefined;\n    }\n\n    function isLocalStorageSupported() {\n        try {\n            return !!window.localStorage &&\n                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string\n                qq.isFunction(window.localStorage.setItem);\n        }\n        catch (error) {\n            // probably caught a security exception, so no localStorage for you\n            return false;\n        }\n    }\n\n    function isDragAndDropSupported() {\n        var span = document.createElement(\"span\");\n\n        return (\"draggable\" in span || (\"ondragstart\" in span && \"ondrop\" in span)) &&\n            !qq.android() && !qq.ios();\n    }\n\n    supportsUploading = testSupportsFileInputElement();\n\n    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();\n\n    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();\n\n    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();\n\n    supportsFolderDrop = supportsFileDrop && isChrome21OrHigher();\n\n    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();\n\n    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();\n\n    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();\n\n    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);\n\n    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();\n\n    supportsDeleteFileXdr = isXdrSupported();\n\n    supportsDeleteFileCors = isCrossOriginAjaxSupported();\n\n    supportsFolderSelection = isFolderSelectionSupported();\n\n    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;\n\n    supportsUploadProgress = (function() {\n        if (supportsAjaxFileUploading) {\n            return !qq.androidStock() && !qq.iosChrome();\n        }\n        return false;\n    }());\n\n    return {\n        ajaxUploading: supportsAjaxFileUploading,\n        blobUploading: supportsUploadingBlobs,\n        canDetermineSize: supportsAjaxFileUploading,\n        chunking: supportsChunking,\n        deleteFileCors: supportsDeleteFileCors,\n        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported\n        deleteFileCorsXhr: supportsDeleteFileCorsXhr,\n        dialogElement: !!window.HTMLDialogElement,\n        fileDrop: supportsFileDrop,\n        folderDrop: supportsFolderDrop,\n        folderSelection: supportsFolderSelection,\n        imagePreviews: supportsImagePreviews,\n        imageValidation: supportsImagePreviews,\n        itemSizeValidation: supportsAjaxFileUploading,\n        pause: supportsChunking,\n        progressBar: supportsUploadProgress,\n        resume: supportsResume,\n        scaling: supportsImagePreviews && supportsUploadingBlobs,\n        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)\n        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit\n        uploading: supportsUploading,\n        uploadCors: supportsUploadCors,\n        uploadCustomHeaders: supportsAjaxFileUploading,\n        uploadNonMultipart: supportsAjaxFileUploading,\n        uploadViaPaste: supportsUploadViaPaste\n    };\n\n}());\n","/*globals qq*/\n\n// Is the passed object a promise instance?\nqq.isGenericPromise = function(maybePromise) {\n    \"use strict\";\n    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));\n};\n\nqq.Promise = function() {\n    \"use strict\";\n\n    var successArgs, failureArgs,\n        successCallbacks = [],\n        failureCallbacks = [],\n        doneCallbacks = [],\n        state = 0;\n\n    qq.extend(this, {\n        then: function(onSuccess, onFailure) {\n            if (state === 0) {\n                if (onSuccess) {\n                    successCallbacks.push(onSuccess);\n                }\n                if (onFailure) {\n                    failureCallbacks.push(onFailure);\n                }\n            }\n            else if (state === -1) {\n                onFailure && onFailure.apply(null, failureArgs);\n            }\n            else if (onSuccess) {\n                onSuccess.apply(null, successArgs);\n            }\n\n            return this;\n        },\n\n        done: function(callback) {\n            if (state === 0) {\n                doneCallbacks.push(callback);\n            }\n            else {\n                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);\n            }\n\n            return this;\n        },\n\n        success: function() {\n            state = 1;\n            successArgs = arguments;\n\n            if (successCallbacks.length) {\n                qq.each(successCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            return this;\n        },\n\n        failure: function() {\n            state = -1;\n            failureArgs = arguments;\n\n            if (failureCallbacks.length) {\n                qq.each(failureCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            return this;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Placeholder for a Blob that will be generated on-demand.\n *\n * @param referenceBlob Parent of the generated blob\n * @param onCreate Function to invoke when the blob must be created.  Must be promissory.\n * @constructor\n */\nqq.BlobProxy = function(referenceBlob, onCreate) {\n    \"use strict\";\n\n    qq.extend(this, {\n        referenceBlob: referenceBlob,\n\n        create: function() {\n            return onCreate(referenceBlob);\n        }\n    });\n};\n","/*globals qq*/\n\n/**\n * This module represents an upload or \"Select File(s)\" button.  It's job is to embed an opaque `<input type=\"file\">`\n * element as a child of a provided \"container\" element.  This \"container\" element (`options.element`) is used to provide\n * a custom style for the `<input type=\"file\">` element.  The ability to change the style of the container element is also\n * provided here by adding CSS classes to the container on hover/focus.\n *\n * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be\n * available on all supported browsers.\n *\n * @param o Options to override the default values\n */\nqq.UploadButton = function(o) {\n    \"use strict\";\n\n    var self = this,\n\n        disposeSupport = new qq.DisposeSupport(),\n\n        options = {\n            // Corresponds to the `accept` attribute on the associated `<input type=\"file\">`\n            acceptFiles: null,\n\n            // \"Container\" element\n            element: null,\n\n            focusClass: \"qq-upload-button-focus\",\n\n            // A true value allows folders to be selected, if supported by the UA\n            folders: false,\n\n            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n            hoverClass: \"qq-upload-button-hover\",\n\n            ios8BrowserCrashWorkaround: false,\n\n            // If true adds `multiple` attribute to `<input type=\"file\">`\n            multiple: false,\n\n            // `name` attribute of `<input type=\"file\">`\n            name: \"qqfile\",\n\n            // Called when the browser invokes the onchange handler on the `<input type=\"file\">`\n            onChange: function(input) {},\n\n            title: null\n        },\n        input, buttonId;\n\n    // Overrides any of the default option values with any option values passed in during construction.\n    qq.extend(options, o);\n\n    buttonId = qq.getUniqueId();\n\n    // Embed an opaque `<input type=\"file\">` element as a child of `options.element`.\n    function createInput() {\n        var input = document.createElement(\"input\");\n\n        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);\n        input.setAttribute(\"title\", options.title);\n\n        self.setMultiple(options.multiple, input);\n\n        if (options.folders && qq.supportedFeatures.folderSelection) {\n            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute\n            input.setAttribute(\"webkitdirectory\", \"\");\n        }\n\n        if (options.acceptFiles) {\n            input.setAttribute(\"accept\", options.acceptFiles);\n        }\n\n        input.setAttribute(\"type\", \"file\");\n        input.setAttribute(\"name\", options.name);\n\n        qq(input).css({\n            position: \"absolute\",\n            // in Opera only 'browse' button\n            // is clickable and it is located at\n            // the right side of the input\n            right: 0,\n            top: 0,\n            fontFamily: \"Arial\",\n            // It's especially important to make this an arbitrarily large value\n            // to ensure the rendered input button in IE takes up the entire\n            // space of the container element.  Otherwise, the left side of the\n            // button will require a double-click to invoke the file chooser.\n            // In other browsers, this might cause other issues, so a large font-size\n            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored\n            // in some cases when the font-size is large.  So, this workaround is not applied\n            // to IE8.\n            fontSize: qq.ie() && !qq.ie8() ? \"3500px\" : \"118px\",\n            margin: 0,\n            padding: 0,\n            cursor: \"pointer\",\n            opacity: 0\n        });\n\n        // Setting the file input's height to 100% in IE7 causes\n        // most of the visible button to be unclickable.\n        !qq.ie7() && qq(input).css({height: \"100%\"});\n\n        options.element.appendChild(input);\n\n        disposeSupport.attach(input, \"change\", function() {\n            options.onChange(input);\n        });\n\n        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n        disposeSupport.attach(input, \"mouseover\", function() {\n            qq(options.element).addClass(options.hoverClass);\n        });\n        disposeSupport.attach(input, \"mouseout\", function() {\n            qq(options.element).removeClass(options.hoverClass);\n        });\n\n        disposeSupport.attach(input, \"focus\", function() {\n            qq(options.element).addClass(options.focusClass);\n        });\n        disposeSupport.attach(input, \"blur\", function() {\n            qq(options.element).removeClass(options.focusClass);\n        });\n\n        return input;\n    }\n\n    // Make button suitable container for input\n    qq(options.element).css({\n        position: \"relative\",\n        overflow: \"hidden\",\n        // Make sure browse button is in the right side in Internet Explorer\n        direction: \"ltr\"\n    });\n\n    // Exposed API\n    qq.extend(this, {\n        getInput: function() {\n            return input;\n        },\n\n        getButtonId: function() {\n            return buttonId;\n        },\n\n        setMultiple: function(isMultiple, optInput) {\n            var input = optInput || this.getInput();\n\n            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash\n            // before the file chooser appears if the file input doesn't contain a multiple attribute.\n            // See #1283.\n            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {\n                input.setAttribute(\"multiple\", \"\");\n            }\n\n            else {\n                if (isMultiple) {\n                    input.setAttribute(\"multiple\", \"\");\n                }\n                else {\n                    input.removeAttribute(\"multiple\");\n                }\n            }\n        },\n\n        setAcceptFiles: function(acceptFiles) {\n            if (acceptFiles !== options.acceptFiles) {\n                input.setAttribute(\"accept\", acceptFiles);\n            }\n        },\n\n        reset: function() {\n            if (input.parentNode) {\n                qq(input).remove();\n            }\n\n            qq(options.element).removeClass(options.focusClass);\n            input = null;\n            input = createInput();\n        }\n    });\n\n    input = createInput();\n};\n\nqq.UploadButton.BUTTON_ID_ATTR_NAME = \"qq-button-id\";\n","/*globals qq */\nqq.UploadData = function(uploaderProxy) {\n    \"use strict\";\n\n    var data = [],\n        byUuid = {},\n        byStatus = {},\n        byProxyGroupId = {},\n        byBatchId = {};\n\n    function getDataByIds(idOrIds) {\n        if (qq.isArray(idOrIds)) {\n            var entries = [];\n\n            qq.each(idOrIds, function(idx, id) {\n                entries.push(data[id]);\n            });\n\n            return entries;\n        }\n\n        return data[idOrIds];\n    }\n\n    function getDataByUuids(uuids) {\n        if (qq.isArray(uuids)) {\n            var entries = [];\n\n            qq.each(uuids, function(idx, uuid) {\n                entries.push(data[byUuid[uuid]]);\n            });\n\n            return entries;\n        }\n\n        return data[byUuid[uuids]];\n    }\n\n    function getDataByStatus(status) {\n        var statusResults = [],\n            statuses = [].concat(status);\n\n        qq.each(statuses, function(index, statusEnum) {\n            var statusResultIndexes = byStatus[statusEnum];\n\n            if (statusResultIndexes !== undefined) {\n                qq.each(statusResultIndexes, function(i, dataIndex) {\n                    statusResults.push(data[dataIndex]);\n                });\n            }\n        });\n\n        return statusResults;\n    }\n\n    qq.extend(this, {\n        /**\n         * Adds a new file to the data cache for tracking purposes.\n         *\n         * @param spec Data that describes this file.  Possible properties are:\n         *\n         * - uuid: Initial UUID for this file.\n         * - name: Initial name of this file.\n         * - size: Size of this file, omit if this cannot be determined\n         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.\n         * - batchId: ID of the batch this file belongs to\n         * - proxyGroupId: ID of the proxy group associated with this file\n         *\n         * @returns {number} Internal ID for this file.\n         */\n        addFile: function(spec) {\n            var status = spec.status || qq.status.SUBMITTING,\n                id = data.push({\n                    name: spec.name,\n                    originalName: spec.name,\n                    uuid: spec.uuid,\n                    size: spec.size == null ? -1 : spec.size,\n                    status: status\n                }) - 1;\n\n            if (spec.batchId) {\n                data[id].batchId = spec.batchId;\n\n                if (byBatchId[spec.batchId] === undefined) {\n                    byBatchId[spec.batchId] = [];\n                }\n                byBatchId[spec.batchId].push(id);\n            }\n\n            if (spec.proxyGroupId) {\n                data[id].proxyGroupId = spec.proxyGroupId;\n\n                if (byProxyGroupId[spec.proxyGroupId] === undefined) {\n                    byProxyGroupId[spec.proxyGroupId] = [];\n                }\n                byProxyGroupId[spec.proxyGroupId].push(id);\n            }\n\n            data[id].id = id;\n            byUuid[spec.uuid] = id;\n\n            if (byStatus[status] === undefined) {\n                byStatus[status] = [];\n            }\n            byStatus[status].push(id);\n\n            uploaderProxy.onStatusChange(id, null, status);\n\n            return id;\n        },\n\n        retrieve: function(optionalFilter) {\n            if (qq.isObject(optionalFilter) && data.length)  {\n                if (optionalFilter.id !== undefined) {\n                    return getDataByIds(optionalFilter.id);\n                }\n\n                else if (optionalFilter.uuid !== undefined) {\n                    return getDataByUuids(optionalFilter.uuid);\n                }\n\n                else if (optionalFilter.status) {\n                    return getDataByStatus(optionalFilter.status);\n                }\n            }\n            else {\n                return qq.extend([], data, true);\n            }\n        },\n\n        reset: function() {\n            data = [];\n            byUuid = {};\n            byStatus = {};\n            byBatchId = {};\n        },\n\n        setStatus: function(id, newStatus) {\n            var oldStatus = data[id].status,\n                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);\n\n            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);\n\n            data[id].status = newStatus;\n\n            if (byStatus[newStatus] === undefined) {\n                byStatus[newStatus] = [];\n            }\n            byStatus[newStatus].push(id);\n\n            uploaderProxy.onStatusChange(id, oldStatus, newStatus);\n        },\n\n        uuidChanged: function(id, newUuid) {\n            var oldUuid = data[id].uuid;\n\n            data[id].uuid = newUuid;\n            byUuid[newUuid] = id;\n            delete byUuid[oldUuid];\n        },\n\n        updateName: function(id, newName) {\n            data[id].name = newName;\n        },\n\n        updateSize: function(id, newSize) {\n            data[id].size = newSize;\n        },\n\n        // Only applicable if this file has a parent that we may want to reference later.\n        setParentId: function(targetId, parentId) {\n            data[targetId].parentId = parentId;\n        },\n\n        getIdsInProxyGroup: function(id) {\n            var proxyGroupId = data[id].proxyGroupId;\n\n            if (proxyGroupId) {\n                return byProxyGroupId[proxyGroupId];\n            }\n            return [];\n        },\n\n        getIdsInBatch: function(id) {\n            var batchId = data[id].batchId;\n\n            return byBatchId[batchId];\n        }\n    });\n};\n\nqq.status = {\n    SUBMITTING: \"submitting\",\n    SUBMITTED: \"submitted\",\n    REJECTED: \"rejected\",\n    QUEUED: \"queued\",\n    CANCELED: \"canceled\",\n    PAUSED: \"paused\",\n    UPLOADING: \"uploading\",\n    UPLOAD_RETRYING: \"retrying upload\",\n    UPLOAD_SUCCESSFUL: \"upload successful\",\n    UPLOAD_FAILED: \"upload failed\",\n    DELETE_FAILED: \"delete failed\",\n    DELETING: \"deleting\",\n    DELETED: \"deleted\"\n};\n","/*globals qq*/\n/**\n * Defines the public API for FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.basePublicApi = {\n        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)\n        addBlobs: function(blobDataOrArray, params, endpoint) {\n            this.addFiles(blobDataOrArray, params, endpoint);\n        },\n\n        addInitialFiles: function(cannedFileList) {\n            var self = this;\n\n            qq.each(cannedFileList, function(index, cannedFile) {\n                self._addCannedFile(cannedFile);\n            });\n        },\n\n        addFiles: function(data, params, endpoint) {\n            this._maybeHandleIos8SafariWorkaround();\n\n            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,\n\n                processBlob = qq.bind(function(blob) {\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processBlobData = qq.bind(function(blobData) {\n                    this._handleNewFile(blobData, batchId, verifiedFiles);\n                }, this),\n\n                processCanvas = qq.bind(function(canvas) {\n                    var blob = qq.canvasToBlob(canvas);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName + \".png\"\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processCanvasData = qq.bind(function(canvasData) {\n                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,\n                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: canvasData.name\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processFileOrInput = qq.bind(function(fileOrInput) {\n                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {\n                        var files = Array.prototype.slice.call(fileOrInput.files),\n                            self = this;\n\n                        qq.each(files, function(idx, file) {\n                            self._handleNewFile(file, batchId, verifiedFiles);\n                        });\n                    }\n                    else {\n                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);\n                    }\n                }, this),\n\n                normalizeData = function() {\n                    if (qq.isFileList(data)) {\n                        data = Array.prototype.slice.call(data);\n                    }\n                    data = [].concat(data);\n                },\n\n                self = this,\n                verifiedFiles = [];\n\n            this._currentBatchId = batchId;\n\n            if (data) {\n                normalizeData();\n\n                qq.each(data, function(idx, fileContainer) {\n                    if (qq.isFileOrInput(fileContainer)) {\n                        processFileOrInput(fileContainer);\n                    }\n                    else if (qq.isBlob(fileContainer)) {\n                        processBlob(fileContainer);\n                    }\n                    else if (qq.isObject(fileContainer)) {\n                        if (fileContainer.blob && fileContainer.name) {\n                            processBlobData(fileContainer);\n                        }\n                        else if (fileContainer.canvas && fileContainer.name) {\n                            processCanvasData(fileContainer);\n                        }\n                    }\n                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === \"canvas\") {\n                        processCanvas(fileContainer);\n                    }\n                    else {\n                        self.log(fileContainer + \" is not a valid file container!  Ignoring!\", \"warn\");\n                    }\n                });\n\n                this.log(\"Received \" + verifiedFiles.length + \" files.\");\n                this._prepareItemsForUpload(verifiedFiles, params, endpoint);\n            }\n        },\n\n        cancel: function(id) {\n            this._handler.cancel(id);\n        },\n\n        cancelAll: function() {\n            var storedIdsCopy = [],\n                self = this;\n\n            qq.extend(storedIdsCopy, this._storedIds);\n            qq.each(storedIdsCopy, function(idx, storedFileId) {\n                self.cancel(storedFileId);\n            });\n\n            this._handler.cancelAll();\n        },\n\n        clearStoredFiles: function() {\n            this._storedIds = [];\n        },\n\n        continueUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            if (uploadData.status === qq.status.PAUSED) {\n                this.log(qq.format(\"Paused file ID {} ({}) will be continued.  Not paused.\", id, this.getName(id)));\n                this._uploadFile(id);\n                return true;\n            }\n            else {\n                this.log(qq.format(\"Ignoring continue for file ID {} ({}).  Not paused.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        deleteFile: function(id) {\n            return this._onSubmitDelete(id);\n        },\n\n        // TODO document?\n        doesExist: function(fileOrBlobId) {\n            return this._handler.isValid(fileOrBlobId);\n        },\n\n        // Generate a variable size thumbnail on an img or canvas,\n        // returning a promise that is fulfilled when the attempt completes.\n        // Thumbnail can either be based off of a URL for an image returned\n        // by the server in the upload response, or the associated `Blob`.\n        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer, customResizeFunction) {\n            var promiseToReturn = new qq.Promise(),\n                fileOrUrl, options;\n\n            if (this._imageGenerator) {\n                fileOrUrl = this._thumbnailUrls[fileId];\n                options = {\n                    customResizeFunction: customResizeFunction,\n                    maxSize: maxSize > 0 ? maxSize : null,\n                    scale: maxSize > 0\n                };\n\n                // If client-side preview generation is possible\n                // and we are not specifically looking for the image URl returned by the server...\n                if (!fromServer && qq.supportedFeatures.imagePreviews) {\n                    fileOrUrl = this.getFile(fileId);\n                }\n\n                /* jshint eqeqeq:false,eqnull:true */\n                if (fileOrUrl == null) {\n                    promiseToReturn.failure({container: imgOrCanvas, error: \"File or URL not found.\"});\n                }\n                else {\n                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(\n                        function success(modifiedContainer) {\n                            promiseToReturn.success(modifiedContainer);\n                        },\n\n                        function failure(container, reason) {\n                            promiseToReturn.failure({container: container, error: reason || \"Problem generating thumbnail\"});\n                        }\n                    );\n                }\n            }\n            else {\n                promiseToReturn.failure({container: imgOrCanvas, error: \"Missing image generator module\"});\n            }\n\n            return promiseToReturn;\n        },\n\n        getButton: function(fileId) {\n            return this._getButton(this._buttonIdsForFileIds[fileId]);\n        },\n\n        getEndpoint: function(fileId) {\n            return this._endpointStore.get(fileId);\n        },\n\n        getFile: function(fileOrBlobId) {\n            return this._handler.getFile(fileOrBlobId) || null;\n        },\n\n        getInProgress: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED\n                ]\n            }).length;\n        },\n\n        getName: function(id) {\n            return this._uploadData.retrieve({id: id}).name;\n        },\n\n        // Parent ID for a specific file, or null if this is the parent, or if it has no parent.\n        getParentId: function(id) {\n            var uploadDataEntry = this.getUploads({id: id}),\n                parentId = null;\n\n            if (uploadDataEntry) {\n                if (uploadDataEntry.parentId !== undefined) {\n                    parentId = uploadDataEntry.parentId;\n                }\n            }\n\n            return parentId;\n        },\n\n        getResumableFilesData: function() {\n            return this._handler.getResumableFilesData();\n        },\n\n        getSize: function(id) {\n            return this._uploadData.retrieve({id: id}).size;\n        },\n\n        getNetUploads: function() {\n            return this._netUploaded;\n        },\n\n        getRemainingAllowedItems: function() {\n            var allowedItems = this._currentItemLimit;\n\n            if (allowedItems > 0) {\n                return allowedItems - this._netUploadedOrQueued;\n            }\n\n            return null;\n        },\n\n        getUploads: function(optionalFilter) {\n            return this._uploadData.retrieve(optionalFilter);\n        },\n\n        getUuid: function(id) {\n            return this._uploadData.retrieve({id: id}).uuid;\n        },\n\n        log: function(str, level) {\n            if (this._options.debug && (!level || level === \"info\")) {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str);\n            }\n            else if (level && level !== \"info\") {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str, level);\n\n            }\n        },\n\n        pauseUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            // Pause only really makes sense if the file is uploading or retrying\n            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {\n                if (this._handler.pause(id)) {\n                    this._uploadData.setStatus(id, qq.status.PAUSED);\n                    return true;\n                }\n                else {\n                    this.log(qq.format(\"Unable to pause file ID {} ({}).\", id, this.getName(id)), \"error\");\n                }\n            }\n            else {\n                this.log(qq.format(\"Ignoring pause for file ID {} ({}).  Not in progress.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        reset: function() {\n            this.log(\"Resetting uploader...\");\n\n            this._handler.reset();\n            this._storedIds = [];\n            this._autoRetries = [];\n            this._retryTimeouts = [];\n            this._preventRetries = [];\n            this._thumbnailUrls = [];\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n\n            this._paramsStore.reset();\n            this._endpointStore.reset();\n            this._netUploadedOrQueued = 0;\n            this._netUploaded = 0;\n            this._uploadData.reset();\n            this._buttonIdsForFileIds = [];\n\n            this._pasteHandler && this._pasteHandler.reset();\n            this._options.session.refreshOnReset && this._refreshSessionData();\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n\n            this._totalProgress && this._totalProgress.reset();\n        },\n\n        retry: function(id) {\n            return this._manualRetry(id);\n        },\n\n        scaleImage: function(id, specs) {\n            var self = this;\n\n            return qq.Scaler.prototype.scaleImage(id, specs, {\n                log: qq.bind(self.log, self),\n                getFile: qq.bind(self.getFile, self),\n                uploadData: self._uploadData\n            });\n        },\n\n        setCustomHeaders: function(headers, id) {\n            this._customHeadersStore.set(headers, id);\n        },\n\n        setDeleteFileCustomHeaders: function(headers, id) {\n            this._deleteFileCustomHeadersStore.set(headers, id);\n        },\n\n        setDeleteFileEndpoint: function(endpoint, id) {\n            this._deleteFileEndpointStore.set(endpoint, id);\n        },\n\n        setDeleteFileParams: function(params, id) {\n            this._deleteFileParamsStore.set(params, id);\n        },\n\n        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button\n        setEndpoint: function(endpoint, id) {\n            this._endpointStore.set(endpoint, id);\n        },\n\n        setForm: function(elementOrId) {\n            this._updateFormSupportAndParams(elementOrId);\n        },\n\n        setItemLimit: function(newItemLimit) {\n            this._currentItemLimit = newItemLimit;\n        },\n\n        setName: function(id, newName) {\n            this._uploadData.updateName(id, newName);\n        },\n\n        setParams: function(params, id) {\n            this._paramsStore.set(params, id);\n        },\n\n        setUuid: function(id, newUuid) {\n            return this._uploadData.uuidChanged(id, newUuid);\n        },\n\n        uploadStoredFiles: function() {\n            if (this._storedIds.length === 0) {\n                this._itemError(\"noFilesError\");\n            }\n            else {\n                this._uploadStoredFiles();\n            }\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploaderBasic mode.\n     */\n    qq.basePrivateApi = {\n        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.\n        _addCannedFile: function(sessionData) {\n            var id = this._uploadData.addFile({\n                uuid: sessionData.uuid,\n                name: sessionData.name,\n                size: sessionData.size,\n                status: qq.status.UPLOAD_SUCCESSFUL\n            });\n\n            sessionData.deleteFileEndpoint && this.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);\n            sessionData.deleteFileParams && this.setDeleteFileParams(sessionData.deleteFileParams, id);\n\n            if (sessionData.thumbnailUrl) {\n                this._thumbnailUrls[id] = sessionData.thumbnailUrl;\n            }\n\n            this._netUploaded++;\n            this._netUploadedOrQueued++;\n\n            return id;\n        },\n\n        _annotateWithButtonId: function(file, associatedInput) {\n            if (qq.isFile(file)) {\n                file.qqButtonId = this._getButtonId(associatedInput);\n            }\n        },\n\n        _batchError: function(message) {\n            this._options.callbacks.onError(null, null, message, undefined);\n        },\n\n        _createDeleteHandler: function() {\n            var self = this;\n\n            return new qq.DeleteFileAjaxRequester({\n                method: this._options.deleteFile.method.toUpperCase(),\n                maxConnections: this._options.maxConnections,\n                uuidParamName: this._options.request.uuidName,\n                customHeaders: this._deleteFileCustomHeadersStore,\n                paramsStore: this._deleteFileParamsStore,\n                endpointStore: this._deleteFileEndpointStore,\n                cors: this._options.cors,\n                log: qq.bind(self.log, self),\n                onDelete: function(id) {\n                    self._onDelete(id);\n                    self._options.callbacks.onDelete(id);\n                },\n                onDeleteComplete: function(id, xhrOrXdr, isError) {\n                    self._onDeleteComplete(id, xhrOrXdr, isError);\n                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\n                }\n\n            });\n        },\n\n        _createPasteHandler: function() {\n            var self = this;\n\n            return new qq.PasteSupport({\n                targetElement: this._options.paste.targetElement,\n                callbacks: {\n                    log: qq.bind(self.log, self),\n                    pasteReceived: function(blob) {\n                        self._handleCheckedCallback({\n                            name: \"onPasteReceived\",\n                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),\n                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),\n                            identifier: \"pasted image\"\n                        });\n                    }\n                }\n            });\n        },\n\n        _createStore: function(initialValue, _readOnlyValues_) {\n            var store = {},\n                catchall = initialValue,\n                perIdReadOnlyValues = {},\n                readOnlyValues = _readOnlyValues_,\n                copy = function(orig) {\n                    if (qq.isObject(orig)) {\n                        return qq.extend({}, orig);\n                    }\n                    return orig;\n                },\n                getReadOnlyValues = function() {\n                    if (qq.isFunction(readOnlyValues)) {\n                        return readOnlyValues();\n                    }\n                    return readOnlyValues;\n                },\n                includeReadOnlyValues = function(id, existing) {\n                    if (readOnlyValues && qq.isObject(existing)) {\n                        qq.extend(existing, getReadOnlyValues());\n                    }\n\n                    if (perIdReadOnlyValues[id]) {\n                        qq.extend(existing, perIdReadOnlyValues[id]);\n                    }\n                };\n\n            return {\n                set: function(val, id) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id == null) {\n                        store = {};\n                        catchall = copy(val);\n                    }\n                    else {\n                        store[id] = copy(val);\n                    }\n                },\n\n                get: function(id) {\n                    var values;\n\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id != null && store[id]) {\n                        values = store[id];\n                    }\n                    else {\n                        values = copy(catchall);\n                    }\n\n                    includeReadOnlyValues(id, values);\n\n                    return copy(values);\n                },\n\n                addReadOnly: function(id, values) {\n                    // Only applicable to Object stores\n                    if (qq.isObject(store)) {\n                        // If null ID, apply readonly values to all files\n                        if (id === null) {\n                            if (qq.isFunction(values)) {\n                                readOnlyValues = values;\n                            }\n                            else {\n                                readOnlyValues = readOnlyValues || {};\n                                qq.extend(readOnlyValues, values);\n                            }\n                        }\n                        else {\n                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};\n                            qq.extend(perIdReadOnlyValues[id], values);\n                        }\n                    }\n                },\n\n                remove: function(fileId) {\n                    return delete store[fileId];\n                },\n\n                reset: function() {\n                    store = {};\n                    perIdReadOnlyValues = {};\n                    catchall = initialValue;\n                }\n            };\n        },\n\n        _createUploadDataTracker: function() {\n            var self = this;\n\n            return new qq.UploadData({\n                getName: function(id) {\n                    return self.getName(id);\n                },\n                getUuid: function(id) {\n                    return self.getUuid(id);\n                },\n                getSize: function(id) {\n                    return self.getSize(id);\n                },\n                onStatusChange: function(id, oldStatus, newStatus) {\n                    self._onUploadStatusChange(id, oldStatus, newStatus);\n                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);\n                    self._maybeAllComplete(id, newStatus);\n\n                    if (self._totalProgress) {\n                        setTimeout(function() {\n                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);\n                        }, 0);\n                    }\n                }\n            });\n        },\n\n        /**\n         * Generate a tracked upload button.\n         *\n         * @param spec Object containing a required `element` property\n         * along with optional `multiple`, `accept`, and `folders`.\n         * @returns {qq.UploadButton}\n         * @private\n         */\n        _createUploadButton: function(spec) {\n            var self = this,\n                acceptFiles = spec.accept || this._options.validation.acceptFiles,\n                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,\n                button;\n\n            function allowMultiple() {\n                if (qq.supportedFeatures.ajaxUploading) {\n                    // Workaround for bug in iOS7+ (see #1039)\n                    if (self._options.workarounds.iosEmptyVideos &&\n                        qq.ios() &&\n                        !qq.ios6() &&\n                        self._isAllowedExtension(allowedExtensions, \".mov\")) {\n\n                        return false;\n                    }\n\n                    if (spec.multiple === undefined) {\n                        return self._options.multiple;\n                    }\n\n                    return spec.multiple;\n                }\n\n                return false;\n            }\n\n            button = new qq.UploadButton({\n                acceptFiles: acceptFiles,\n                element: spec.element,\n                focusClass: this._options.classes.buttonFocus,\n                folders: spec.folders,\n                hoverClass: this._options.classes.buttonHover,\n                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,\n                multiple: allowMultiple(),\n                name: this._options.request.inputName,\n                onChange: function(input) {\n                    self._onInputChange(input);\n                },\n                title: spec.title == null ? this._options.text.fileInputTitle : spec.title\n            });\n\n            this._disposeSupport.addDisposer(function() {\n                button.dispose();\n            });\n\n            self._buttons.push(button);\n\n            return button;\n        },\n\n        _createUploadHandler: function(additionalOptions, namespace) {\n            var self = this,\n                lastOnProgress = {},\n                options = {\n                    debug: this._options.debug,\n                    maxConnections: this._options.maxConnections,\n                    cors: this._options.cors,\n                    paramsStore: this._paramsStore,\n                    endpointStore: this._endpointStore,\n                    chunking: this._options.chunking,\n                    resume: this._options.resume,\n                    blobs: this._options.blobs,\n                    log: qq.bind(self.log, self),\n                    preventRetryParam: this._options.retry.preventRetryResponseProperty,\n                    onProgress: function(id, name, loaded, total) {\n                        if (loaded < 0 || total < 0) {\n                            return;\n                        }\n\n                        if (lastOnProgress[id]) {\n                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {\n                                self._onProgress(id, name, loaded, total);\n                                self._options.callbacks.onProgress(id, name, loaded, total);\n                            }\n                        }\n                        else {\n                            self._onProgress(id, name, loaded, total);\n                            self._options.callbacks.onProgress(id, name, loaded, total);\n                        }\n\n                        lastOnProgress[id] = {loaded: loaded, total: total};\n\n                    },\n                    onComplete: function(id, name, result, xhr) {\n                        delete lastOnProgress[id];\n\n                        var status = self.getUploads({id: id}).status,\n                            retVal;\n\n                        // This is to deal with some observed cases where the XHR readyStateChange handler is\n                        // invoked by the browser multiple times for the same XHR instance with the same state\n                        // readyState value.  Higher level: don't invoke complete-related code if we've already\n                        // done this.\n                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {\n                            return;\n                        }\n\n                        retVal = self._onComplete(id, name, result, xhr);\n\n                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback\n                        // until the promise has been fulfilled.\n                        if (retVal instanceof  qq.Promise) {\n                            retVal.done(function() {\n                                self._options.callbacks.onComplete(id, name, result, xhr);\n                            });\n                        }\n                        else {\n                            self._options.callbacks.onComplete(id, name, result, xhr);\n                        }\n                    },\n                    onCancel: function(id, name, cancelFinalizationEffort) {\n                        var promise = new qq.Promise();\n\n                        self._handleCheckedCallback({\n                            name: \"onCancel\",\n                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),\n                            onFailure: promise.failure,\n                            onSuccess: function() {\n                                cancelFinalizationEffort.then(function() {\n                                    self._onCancel(id, name);\n                                });\n\n                                promise.success();\n                            },\n                            identifier: id\n                        });\n\n                        return promise;\n                    },\n                    onUploadPrep: qq.bind(this._onUploadPrep, this),\n                    onUpload: function(id, name) {\n                        self._onUpload(id, name);\n                        self._options.callbacks.onUpload(id, name);\n                    },\n                    onUploadChunk: function(id, name, chunkData) {\n                        self._onUploadChunk(id, chunkData);\n                        self._options.callbacks.onUploadChunk(id, name, chunkData);\n                    },\n                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {\n                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);\n                    },\n                    onResume: function(id, name, chunkData) {\n                        return self._options.callbacks.onResume(id, name, chunkData);\n                    },\n                    onAutoRetry: function(id, name, responseJSON, xhr) {\n                        return self._onAutoRetry.apply(self, arguments);\n                    },\n                    onUuidChanged: function(id, newUuid) {\n                        self.log(\"Server requested UUID change from '\" + self.getUuid(id) + \"' to '\" + newUuid + \"'\");\n                        self.setUuid(id, newUuid);\n                    },\n                    getName: qq.bind(self.getName, self),\n                    getUuid: qq.bind(self.getUuid, self),\n                    getSize: qq.bind(self.getSize, self),\n                    setSize: qq.bind(self._setSize, self),\n                    getDataByUuid: function(uuid) {\n                        return self.getUploads({uuid: uuid});\n                    },\n                    isQueued: function(id) {\n                        var status = self.getUploads({id: id}).status;\n                        return status === qq.status.QUEUED ||\n                            status === qq.status.SUBMITTED ||\n                            status === qq.status.UPLOAD_RETRYING ||\n                            status === qq.status.PAUSED;\n                    },\n                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,\n                    getIdsInBatch: self._uploadData.getIdsInBatch\n                };\n\n            qq.each(this._options.request, function(prop, val) {\n                options[prop] = val;\n            });\n\n            options.customHeaders = this._customHeadersStore;\n\n            if (additionalOptions) {\n                qq.each(additionalOptions, function(key, val) {\n                    options[key] = val;\n                });\n            }\n\n            return new qq.UploadHandlerController(options, namespace);\n        },\n\n        _fileOrBlobRejected: function(id) {\n            this._netUploadedOrQueued--;\n            this._uploadData.setStatus(id, qq.status.REJECTED);\n        },\n\n        _formatSize: function(bytes) {\n            var i = -1;\n            do {\n                bytes = bytes / 1000;\n                i++;\n            } while (bytes > 999);\n\n            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];\n        },\n\n        // Creates an internal object that tracks various properties of each extra button,\n        // and then actually creates the extra button.\n        _generateExtraButtonSpecs: function() {\n            var self = this;\n\n            this._extraButtonSpecs = {};\n\n            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {\n                var multiple = extraButtonOptionEntry.multiple,\n                    validation = qq.extend({}, self._options.validation, true),\n                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);\n\n                if (multiple === undefined) {\n                    multiple = self._options.multiple;\n                }\n\n                if (extraButtonSpec.validation) {\n                    qq.extend(validation, extraButtonOptionEntry.validation, true);\n                }\n\n                qq.extend(extraButtonSpec, {\n                    multiple: multiple,\n                    validation: validation\n                }, true);\n\n                self._initExtraButton(extraButtonSpec);\n            });\n        },\n\n        _getButton: function(buttonId) {\n            var extraButtonsSpec = this._extraButtonSpecs[buttonId];\n\n            if (extraButtonsSpec) {\n                return extraButtonsSpec.element;\n            }\n            else if (buttonId === this._defaultButtonId) {\n                return this._options.button;\n            }\n        },\n\n        /**\n         * Gets the internally used tracking ID for a button.\n         *\n         * @param buttonOrFileInputOrFile `File`, `<input type=\"file\">`, or a button container element\n         * @returns {*} The button's ID, or undefined if no ID is recoverable\n         * @private\n         */\n        _getButtonId: function(buttonOrFileInputOrFile) {\n            var inputs, fileInput,\n                fileBlobOrInput = buttonOrFileInputOrFile;\n\n            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)\n            if (fileBlobOrInput instanceof qq.BlobProxy) {\n                fileBlobOrInput = fileBlobOrInput.referenceBlob;\n            }\n\n            // If the item is a `Blob` it will never be associated with a button or drop zone.\n            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {\n                if (qq.isFile(fileBlobOrInput)) {\n                    return fileBlobOrInput.qqButtonId;\n                }\n                else if (fileBlobOrInput.tagName.toLowerCase() === \"input\" &&\n                    fileBlobOrInput.type.toLowerCase() === \"file\") {\n\n                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n\n                inputs = fileBlobOrInput.getElementsByTagName(\"input\");\n\n                qq.each(inputs, function(idx, input) {\n                    if (input.getAttribute(\"type\") === \"file\") {\n                        fileInput = input;\n                        return false;\n                    }\n                });\n\n                if (fileInput) {\n                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n            }\n        },\n\n        _getNotFinished: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED,\n                    qq.status.SUBMITTING,\n                    qq.status.SUBMITTED,\n                    qq.status.PAUSED\n                ]\n            }).length;\n        },\n\n        // Get the validation options for this button.  Could be the default validation option\n        // or a specific one assigned to this particular button.\n        _getValidationBase: function(buttonId) {\n            var extraButtonSpec = this._extraButtonSpecs[buttonId];\n\n            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;\n        },\n\n        _getValidationDescriptor: function(fileWrapper) {\n            if (fileWrapper.file instanceof qq.BlobProxy) {\n                return {\n                    name: qq.getFilename(fileWrapper.file.referenceBlob),\n                    size: fileWrapper.file.referenceBlob.size\n                };\n            }\n\n            return {\n                name: this.getUploads({id: fileWrapper.id}).name,\n                size: this.getUploads({id: fileWrapper.id}).size\n            };\n        },\n\n        _getValidationDescriptors: function(fileWrappers) {\n            var self = this,\n                fileDescriptors = [];\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));\n            });\n\n            return fileDescriptors;\n        },\n\n        // Allows camera access on either the default or an extra button for iOS devices.\n        _handleCameraAccess: function() {\n            if (this._options.camera.ios && qq.ios()) {\n                var acceptIosCamera = \"image/*;capture=camera\",\n                    button = this._options.camera.button,\n                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,\n                    optionRoot = this._options;\n\n                // If we are not targeting the default button, it is an \"extra\" button\n                if (buttonId && buttonId !== this._defaultButtonId) {\n                    optionRoot = this._extraButtonSpecs[buttonId];\n                }\n\n                // Camera access won't work in iOS if the `multiple` attribute is present on the file input\n                optionRoot.multiple = false;\n\n                // update the options\n                if (optionRoot.validation.acceptFiles === null) {\n                    optionRoot.validation.acceptFiles = acceptIosCamera;\n                }\n                else {\n                    optionRoot.validation.acceptFiles += \",\" + acceptIosCamera;\n                }\n\n                // update the already-created button\n                qq.each(this._buttons, function(idx, button) {\n                    if (button.getButtonId() === buttonId) {\n                        button.setMultiple(optionRoot.multiple);\n                        button.setAcceptFiles(optionRoot.acceptFiles);\n\n                        return false;\n                    }\n                });\n            }\n        },\n\n        _handleCheckedCallback: function(details) {\n            var self = this,\n                callbackRetVal = details.callback();\n\n            if (qq.isGenericPromise(callbackRetVal)) {\n                this.log(details.name + \" - waiting for \" + details.name + \" promise to be fulfilled for \" + details.identifier);\n                return callbackRetVal.then(\n                    function(successParam) {\n                        self.log(details.name + \" promise success for \" + details.identifier);\n                        details.onSuccess(successParam);\n                    },\n                    function() {\n                        if (details.onFailure) {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                            details.onFailure();\n                        }\n                        else {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                        }\n                    });\n            }\n\n            if (callbackRetVal !== false) {\n                details.onSuccess(callbackRetVal);\n            }\n            else {\n                if (details.onFailure) {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Invoking failure callback.\");\n                    details.onFailure();\n                }\n                else {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Will not proceed.\");\n                }\n            }\n\n            return callbackRetVal;\n        },\n\n        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.\n        _handleNewFile: function(file, batchId, newFileWrapperList) {\n            var self = this,\n                uuid = qq.getUniqueId(),\n                size = -1,\n                name = qq.getFilename(file),\n                actualFile = file.blob || file,\n                handler = this._customNewFileHandler ?\n                    this._customNewFileHandler :\n                    qq.bind(self._handleNewFileGeneric, self);\n\n            if (!qq.isInput(actualFile) && actualFile.size >= 0) {\n                size = actualFile.size;\n            }\n\n            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {\n                uploadData: self._uploadData,\n                paramsStore: self._paramsStore,\n                addFileToHandler: function(id, file) {\n                    self._handler.add(id, file);\n                    self._netUploadedOrQueued++;\n                    self._trackButton(id);\n                }\n            });\n        },\n\n        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {\n            var id = this._uploadData.addFile({uuid: uuid, name: name, size: size, batchId: batchId});\n\n            this._handler.add(id, file);\n            this._trackButton(id);\n\n            this._netUploadedOrQueued++;\n\n            fileList.push({id: id, file: file});\n        },\n\n        _handlePasteSuccess: function(blob, extSuppliedName) {\n            var extension = blob.type.split(\"/\")[1],\n                name = extSuppliedName;\n\n            /*jshint eqeqeq: true, eqnull: true*/\n            if (name == null) {\n                name = this._options.paste.defaultName;\n            }\n\n            name += \".\" + extension;\n\n            this.addFiles({\n                name: name,\n                blob: blob\n            });\n        },\n\n        // Creates an extra button element\n        _initExtraButton: function(spec) {\n            var button = this._createUploadButton({\n                accept: spec.validation.acceptFiles,\n                allowedExtensions: spec.validation.allowedExtensions,\n                element: spec.element,\n                folders: spec.folders,\n                multiple: spec.multiple,\n                title: spec.fileInputTitle\n            });\n\n            this._extraButtonSpecs[button.getButtonId()] = spec;\n        },\n\n        _initFormSupportAndParams: function() {\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n            );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore = this._createStore(\n                    this._options.request.params,  this._formSupport.getFormInputsAsObject\n                );\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this._options.request.endpoint = this._formSupport.newEndpoint;\n                }\n            }\n            else {\n                this._paramsStore = this._createStore(this._options.request.params);\n            }\n        },\n\n        _isDeletePossible: function() {\n            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {\n                return false;\n            }\n\n            if (this._options.cors.expected) {\n                if (qq.supportedFeatures.deleteFileCorsXhr) {\n                    return true;\n                }\n\n                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            return true;\n        },\n\n        _isAllowedExtension: function(allowed, fileName) {\n            var valid = false;\n\n            if (!allowed.length) {\n                return true;\n            }\n\n            qq.each(allowed, function(idx, allowedExt) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExt)) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    var extRegex = new RegExp(\"\\\\.\" + allowedExt + \"$\", \"i\");\n\n                    if (fileName.match(extRegex) != null) {\n                        valid = true;\n                        return false;\n                    }\n                }\n            });\n\n            return valid;\n        },\n\n        /**\n         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.\n         *\n         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error\n         * @param maybeNameOrNames names of the items that have failed, if applicable\n         * @param item `File`, `Blob`, or `<input type=\"file\">`\n         * @private\n         */\n        _itemError: function(code, maybeNameOrNames, item) {\n            var message = this._options.messages[code],\n                allowedExtensions = [],\n                names = [].concat(maybeNameOrNames),\n                name = names[0],\n                buttonId = this._getButtonId(item),\n                validationBase = this._getValidationBase(buttonId),\n                extensionsForMessage, placeholderMatch;\n\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExtension)) {\n                    allowedExtensions.push(allowedExtension);\n                }\n            });\n\n            extensionsForMessage = allowedExtensions.join(\", \").toLowerCase();\n\n            r(\"{file}\", this._options.formatFileName(name));\n            r(\"{extensions}\", extensionsForMessage);\n            r(\"{sizeLimit}\", this._formatSize(validationBase.sizeLimit));\n            r(\"{minSizeLimit}\", this._formatSize(validationBase.minSizeLimit));\n\n            placeholderMatch = message.match(/(\\{\\w+\\})/g);\n            if (placeholderMatch !== null) {\n                qq.each(placeholderMatch, function(idx, placeholder) {\n                    r(placeholder, names[idx]);\n                });\n            }\n\n            this._options.callbacks.onError(null, name, message, undefined);\n\n            return message;\n        },\n\n        /**\n         * Conditionally orders a manual retry of a failed upload.\n         *\n         * @param id File ID of the failed upload\n         * @param callback Optional callback to invoke if a retry is prudent.\n         * In lieu of asking the upload handler to retry.\n         * @returns {boolean} true if a manual retry will occur\n         * @private\n         */\n        _manualRetry: function(id, callback) {\n            if (this._onBeforeManualRetry(id)) {\n                this._netUploadedOrQueued++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n\n                if (callback) {\n                    callback(id);\n                }\n                else {\n                    this._handler.retry(id);\n                }\n\n                return true;\n            }\n        },\n\n        _maybeAllComplete: function(id, status) {\n            var self = this,\n                notFinished = this._getNotFinished();\n\n            if (status === qq.status.UPLOAD_SUCCESSFUL) {\n                this._succeededSinceLastAllComplete.push(id);\n            }\n            else if (status === qq.status.UPLOAD_FAILED) {\n                this._failedSinceLastAllComplete.push(id);\n            }\n\n            if (notFinished === 0 &&\n                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {\n                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete\n                setTimeout(function() {\n                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);\n                }, 0);\n            }\n        },\n\n        _maybeHandleIos8SafariWorkaround: function() {\n            var self = this;\n\n            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n                setTimeout(function() {\n                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);\n                }, 0);\n                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);\n            }\n        },\n\n        _maybeParseAndSendUploadError: function(id, name, response, xhr) {\n            // Assuming no one will actually set the response code to something other than 200\n            // and still set 'success' to true...\n            if (!response.success) {\n                if (xhr && xhr.status !== 200 && !response.error) {\n                    this._options.callbacks.onError(id, name, \"XHR returned response code \" + xhr.status, xhr);\n                }\n                else {\n                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;\n                    this._options.callbacks.onError(id, name, errorReason, xhr);\n                }\n            }\n        },\n\n        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {\n            var self = this;\n\n            if (items.length > index) {\n                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {\n                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks\n                    setTimeout(function() {\n                        var validationDescriptor = self._getValidationDescriptor(items[index]),\n                            buttonId = self._getButtonId(items[index].file),\n                            button = self._getButton(buttonId);\n\n                        self._handleCheckedCallback({\n                            name: \"onValidate\",\n                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),\n                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),\n                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),\n                            identifier: \"Item '\" + validationDescriptor.name + \"', size: \" + validationDescriptor.size\n                        });\n                    }, 0);\n                }\n                else if (!validItem) {\n                    for (; index < items.length; index++) {\n                        self._fileOrBlobRejected(items[index].id);\n                    }\n                }\n            }\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);\n\n            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n        },\n\n        /**\n         * Attempt to automatically retry a failed upload.\n         *\n         * @param id The file ID of the failed upload\n         * @param name The name of the file associated with the failed upload\n         * @param responseJSON Response from the server, parsed into a javascript object\n         * @param xhr Ajax transport used to send the failed request\n         * @param callback Optional callback to be invoked if a retry is prudent.\n         * Invoked in lieu of asking the upload handler to retry.\n         * @returns {boolean} true if an auto-retry will occur\n         * @private\n         */\n        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {\n            var self = this;\n\n            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];\n\n            if (self._shouldAutoRetry(id, name, responseJSON)) {\n                self._maybeParseAndSendUploadError.apply(self, arguments);\n                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);\n                self._onBeforeAutoRetry(id, name);\n\n                self._retryTimeouts[id] = setTimeout(function() {\n                    self.log(\"Retrying \" + name + \"...\");\n                    self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n\n                    if (callback) {\n                        callback(id);\n                    }\n                    else {\n                        self._handler.retry(id);\n                    }\n                }, self._options.retry.autoAttemptDelay * 1000);\n\n                return true;\n            }\n        },\n\n        _onBeforeAutoRetry: function(id, name) {\n            this.log(\"Waiting \" + this._options.retry.autoAttemptDelay + \" seconds before retrying \" + name + \"...\");\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            var itemLimit = this._currentItemLimit,\n                fileName;\n\n            if (this._preventRetries[id]) {\n                this.log(\"Retries are forbidden for id \" + id, \"warn\");\n                return false;\n            }\n            else if (this._handler.isValid(id)) {\n                fileName = this.getName(id);\n\n                if (this._options.callbacks.onManualRetry(id, fileName) === false) {\n                    return false;\n                }\n\n                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {\n                    this._itemError(\"retryFailTooManyItems\");\n                    return false;\n                }\n\n                this.log(\"Retrying upload for '\" + fileName + \"' (id: \" + id + \")...\");\n                return true;\n            }\n            else {\n                this.log(\"'\" + id + \"' is not a valid file ID\", \"error\");\n                return false;\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._netUploadedOrQueued--;\n\n            clearTimeout(this._retryTimeouts[id]);\n\n            var storedItemIndex = qq.indexOf(this._storedIds, id);\n            if (!this._options.autoUpload && storedItemIndex >= 0) {\n                this._storedIds.splice(storedItemIndex, 1);\n            }\n\n            this._uploadData.setStatus(id, qq.status.CANCELED);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            if (!result.success) {\n                this._netUploadedOrQueued--;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);\n\n                if (result[this._options.retry.preventRetryResponseProperty] === true) {\n                    this._preventRetries[id] = true;\n                }\n            }\n            else {\n                if (result.thumbnailUrl) {\n                    this._thumbnailUrls[id] = result.thumbnailUrl;\n                }\n\n                this._netUploaded++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);\n            }\n\n            this._maybeParseAndSendUploadError(id, name, result, xhr);\n\n            return result.success ? true : false;\n        },\n\n        _onDelete: function(id) {\n            this._uploadData.setStatus(id, qq.status.DELETING);\n        },\n\n        _onDeleteComplete: function(id, xhrOrXdr, isError) {\n            var name = this.getName(id);\n\n            if (isError) {\n                this._uploadData.setStatus(id, qq.status.DELETE_FAILED);\n                this.log(\"Delete request for '\" + name + \"' has failed.\", \"error\");\n\n                // For error reporting, we only have access to the response status if this is not\n                // an `XDomainRequest`.\n                if (xhrOrXdr.withCredentials === undefined) {\n                    this._options.callbacks.onError(id, name, \"Delete request failed\", xhrOrXdr);\n                }\n                else {\n                    this._options.callbacks.onError(id, name, \"Delete request failed with response code \" + xhrOrXdr.status, xhrOrXdr);\n                }\n            }\n            else {\n                this._netUploadedOrQueued--;\n                this._netUploaded--;\n                this._handler.expunge(id);\n                this._uploadData.setStatus(id, qq.status.DELETED);\n                this.log(\"Delete request for '\" + name + \"' has succeeded.\");\n            }\n        },\n\n        _onInputChange: function(input) {\n            var fileIndex;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {\n                    this._annotateWithButtonId(input.files[fileIndex], input);\n                }\n\n                this.addFiles(input.files);\n            }\n            // Android 2.3.x will fire `onchange` even if no file has been selected\n            else if (input.value.length > 0) {\n                this.addFiles(input);\n            }\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n        },\n\n        _onProgress: function(id, name, loaded, total) {\n            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);\n        },\n\n        _onSubmit: function(id, name) {\n            //nothing to do yet in core uploader\n        },\n\n        _onSubmitCallbackSuccess: function(id, name) {\n            this._onSubmit.apply(this, arguments);\n            this._uploadData.setStatus(id, qq.status.SUBMITTED);\n            this._onSubmitted.apply(this, arguments);\n\n            if (this._options.autoUpload) {\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n                this._uploadFile(id);\n            }\n            else {\n                this._storeForLater(id);\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n            }\n        },\n\n        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {\n            var uuid = this.getUuid(id),\n                adjustedOnSuccessCallback;\n\n            if (onSuccessCallback) {\n                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);\n            }\n\n            if (this._isDeletePossible()) {\n                this._handleCheckedCallback({\n                    name: \"onSubmitDelete\",\n                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),\n                    onSuccess: adjustedOnSuccessCallback ||\n                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),\n                    identifier: id\n                });\n                return true;\n            }\n            else {\n                this.log(\"Delete request ignored for ID \" + id + \", delete feature is disabled or request not possible \" +\n                    \"due to CORS on a user agent that does not support pre-flighting.\", \"warn\");\n                return false;\n            }\n        },\n\n        _onSubmitted: function(id) {\n            //nothing to do in the base uploader\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._options.callbacks.onTotalProgress(loaded, total);\n        },\n\n        _onUploadPrep: function(id) {\n            // nothing to do in the core uploader for now\n        },\n\n        _onUpload: function(id, name) {\n            this._uploadData.setStatus(id, qq.status.UPLOADING);\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            //nothing to do in the base uploader\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            // Make sure a \"queued\" retry attempt is canceled if the upload has been paused\n            if (newStatus === qq.status.PAUSED) {\n                clearTimeout(this._retryTimeouts[id]);\n            }\n        },\n\n        _onValidateBatchCallbackFailure: function(fileWrappers) {\n            var self = this;\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                self._fileOrBlobRejected(fileWrapper.id);\n            });\n        },\n\n        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {\n            var errorMessage,\n                itemLimit = this._currentItemLimit,\n                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;\n\n            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {\n                if (items.length > 0) {\n                    this._handleCheckedCallback({\n                        name: \"onValidate\",\n                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),\n                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),\n                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),\n                        identifier: \"Item '\" + items[0].file.name + \"', size: \" + items[0].file.size\n                    });\n                }\n                else {\n                    this._itemError(\"noFilesError\");\n                }\n            }\n            else {\n                this._onValidateBatchCallbackFailure(items);\n                errorMessage = this._options.messages.tooManyItemsError\n                    .replace(/\\{netItems\\}/g, proposedNetFilesUploadedOrQueued)\n                    .replace(/\\{itemLimit\\}/g, itemLimit);\n                this._batchError(errorMessage);\n            }\n        },\n\n        _onValidateCallbackFailure: function(items, index, params, endpoint) {\n            var nextIndex = index + 1;\n\n            this._fileOrBlobRejected(items[index].id, items[index].file.name);\n\n            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n        },\n\n        _onValidateCallbackSuccess: function(items, index, params, endpoint) {\n            var self = this,\n                nextIndex = index + 1,\n                validationDescriptor = this._getValidationDescriptor(items[index]);\n\n            this._validateFileOrBlobData(items[index], validationDescriptor)\n                .then(\n                function() {\n                    self._upload(items[index].id, params, endpoint);\n                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);\n                },\n                function() {\n                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n                }\n            );\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            if (items.length === 0) {\n                this._itemError(\"noFilesError\");\n                return;\n            }\n\n            var validationDescriptors = this._getValidationDescriptors(items),\n                buttonId = this._getButtonId(items[0].file),\n                button = this._getButton(buttonId);\n\n            this._handleCheckedCallback({\n                name: \"onValidateBatch\",\n                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),\n                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),\n                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),\n                identifier: \"batch validation\"\n            });\n        },\n\n        _preventLeaveInProgress: function() {\n            var self = this;\n\n            this._disposeSupport.attach(window, \"beforeunload\", function(e) {\n                if (self.getInProgress()) {\n                    e = e || window.event;\n                    // for ie, ff\n                    e.returnValue = self._options.messages.onLeave;\n                    // for webkit\n                    return self._options.messages.onLeave;\n                }\n            });\n        },\n\n        // Attempts to refresh session data only if the `qq.Session` module exists\n        // and a session endpoint has been specified.  The `onSessionRequestComplete`\n        // callback will be invoked once the refresh is complete.\n        _refreshSessionData: function() {\n            var self = this,\n                options = this._options.session;\n\n            /* jshint eqnull:true */\n            if (qq.Session && this._options.session.endpoint != null) {\n                if (!this._session) {\n                    qq.extend(options, {cors: this._options.cors});\n\n                    options.log = qq.bind(this.log, this);\n                    options.addFileRecord = qq.bind(this._addCannedFile, this);\n\n                    this._session = new qq.Session(options);\n                }\n\n                setTimeout(function() {\n                    self._session.refresh().then(function(response, xhrOrXdr) {\n                        self._sessionRequestComplete();\n                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);\n\n                    }, function(response, xhrOrXdr) {\n\n                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);\n                    });\n                }, 0);\n            }\n        },\n\n        _sessionRequestComplete: function() {},\n\n        _setSize: function(id, newSize) {\n            this._uploadData.updateSize(id, newSize);\n            this._totalProgress && this._totalProgress.onNewSize(id);\n        },\n\n        _shouldAutoRetry: function(id, name, responseJSON) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            /*jshint laxbreak: true */\n            if (!this._preventRetries[id]\n                && this._options.retry.enableAuto\n                && uploadData.status !== qq.status.PAUSED) {\n\n                if (this._autoRetries[id] === undefined) {\n                    this._autoRetries[id] = 0;\n                }\n\n                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {\n                    this._autoRetries[id] += 1;\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        _storeForLater: function(id) {\n            this._storedIds.push(id);\n        },\n\n        // Maps a file with the button that was used to select it.\n        _trackButton: function(id) {\n            var buttonId;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                buttonId = this._handler.getFile(id).qqButtonId;\n            }\n            else {\n                buttonId = this._getButtonId(this._handler.getInput(id));\n            }\n\n            if (buttonId) {\n                this._buttonIdsForFileIds[id] = buttonId;\n            }\n        },\n\n        _updateFormSupportAndParams: function(formElementOrId) {\n            this._options.form.element = formElementOrId;\n\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n                );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this.setEndpoint(this._formSupport.newEndpoint);\n                }\n            }\n        },\n\n        _upload: function(id, params, endpoint) {\n            var name = this.getName(id);\n\n            if (params) {\n                this.setParams(params, id);\n            }\n\n            if (endpoint) {\n                this.setEndpoint(endpoint, id);\n            }\n\n            this._handleCheckedCallback({\n                name: \"onSubmit\",\n                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),\n                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),\n                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),\n                identifier: id\n            });\n        },\n\n        _uploadFile: function(id) {\n            if (!this._handler.upload(id)) {\n                this._uploadData.setStatus(id, qq.status.QUEUED);\n            }\n        },\n\n        _uploadStoredFiles: function() {\n            var idToUpload, stillSubmitting,\n                self = this;\n\n            while (this._storedIds.length) {\n                idToUpload = this._storedIds.shift();\n                this._uploadFile(idToUpload);\n            }\n\n            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit\n            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;\n            if (stillSubmitting) {\n                qq.log(\"Still waiting for \" + stillSubmitting + \" files to clear submit queue. Will re-parse stored IDs array shortly.\");\n                setTimeout(function() {\n                    self._uploadStoredFiles();\n                }, 1000);\n            }\n        },\n\n        /**\n         * Performs some internal validation checks on an item, defined in the `validation` option.\n         *\n         * @param fileWrapper Wrapper containing a `file` along with an `id`\n         * @param validationDescriptor Normalized information about the item (`size`, `name`).\n         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file\n         * @private\n         */\n        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {\n            var self = this,\n                file = (function() {\n                    if (fileWrapper.file instanceof qq.BlobProxy) {\n                        return fileWrapper.file.referenceBlob;\n                    }\n                    return fileWrapper.file;\n                }()),\n                name = validationDescriptor.name,\n                size = validationDescriptor.size,\n                buttonId = this._getButtonId(fileWrapper.file),\n                validationBase = this._getValidationBase(buttonId),\n                validityChecker = new qq.Promise();\n\n            validityChecker.then(\n                function() {},\n                function() {\n                    self._fileOrBlobRejected(fileWrapper.id, name);\n                });\n\n            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {\n                this._itemError(\"typeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size === 0) {\n                this._itemError(\"emptyError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {\n                this._itemError(\"sizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && size < validationBase.minSizeLimit) {\n                this._itemError(\"minSizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {\n                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(\n                    validityChecker.success,\n                    function(errorCode) {\n                        self._itemError(errorCode + \"ImageError\", name, file);\n                        validityChecker.failure();\n                    }\n                );\n            }\n            else {\n                validityChecker.success();\n            }\n\n            return validityChecker;\n        },\n\n        _wrapCallbacks: function() {\n            var self, safeCallback, prop;\n\n            self = this;\n\n            safeCallback = function(name, callback, args) {\n                var errorMsg;\n\n                try {\n                    return callback.apply(self, args);\n                }\n                catch (exception) {\n                    errorMsg = exception.message || exception.toString();\n                    self.log(\"Caught exception in '\" + name + \"' callback - \" + errorMsg, \"error\");\n                }\n            };\n\n            /* jshint forin: false, loopfunc: true */\n            for (prop in this._options.callbacks) {\n                (function() {\n                    var callbackName, callbackFunc;\n                    callbackName = prop;\n                    callbackFunc = self._options.callbacks[callbackName];\n                    self._options.callbacks[callbackName] = function() {\n                        return safeCallback(callbackName, callbackFunc, arguments);\n                    };\n                }());\n            }\n        }\n    };\n}());\n","/*globals qq*/\n(function() {\n    \"use strict\";\n\n    qq.FineUploaderBasic = function(o) {\n        var self = this;\n\n        // These options define FineUploaderBasic mode.\n        this._options = {\n            debug: false,\n            button: null,\n            multiple: true,\n            maxConnections: 3,\n            disableCancelForFormUploads: false,\n            autoUpload: true,\n\n            request: {\n                customHeaders: {},\n                endpoint: \"/server/upload\",\n                filenameParam: \"qqfilename\",\n                forceMultipart: true,\n                inputName: \"qqfile\",\n                method: \"POST\",\n                params: {},\n                paramsInBody: true,\n                totalFileSizeName: \"qqtotalfilesize\",\n                uuidName: \"qquuid\"\n            },\n\n            validation: {\n                allowedExtensions: [],\n                sizeLimit: 0,\n                minSizeLimit: 0,\n                itemLimit: 0,\n                stopOnFirstInvalidFile: true,\n                acceptFiles: null,\n                image: {\n                    maxHeight: 0,\n                    maxWidth: 0,\n                    minHeight: 0,\n                    minWidth: 0\n                }\n            },\n\n            callbacks: {\n                onSubmit: function(id, name) {},\n                onSubmitted: function(id, name) {},\n                onComplete: function(id, name, responseJSON, maybeXhr) {},\n                onAllComplete: function(successful, failed) {},\n                onCancel: function(id, name) {},\n                onUpload: function(id, name) {},\n                onUploadChunk: function(id, name, chunkData) {},\n                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},\n                onResume: function(id, fileName, chunkData) {},\n                onProgress: function(id, name, loaded, total) {},\n                onTotalProgress: function(loaded, total) {},\n                onError: function(id, name, reason, maybeXhrOrXdr) {},\n                onAutoRetry: function(id, name, attemptNumber) {},\n                onManualRetry: function(id, name) {},\n                onValidateBatch: function(fileOrBlobData) {},\n                onValidate: function(fileOrBlobData) {},\n                onSubmitDelete: function(id) {},\n                onDelete: function(id) {},\n                onDeleteComplete: function(id, xhrOrXdr, isError) {},\n                onPasteReceived: function(blob) {},\n                onStatusChange: function(id, oldStatus, newStatus) {},\n                onSessionRequestComplete: function(response, success, xhrOrXdr) {}\n            },\n\n            messages: {\n                typeError: \"{file} has an invalid extension. Valid extension(s): {extensions}.\",\n                sizeError: \"{file} is too large, maximum file size is {sizeLimit}.\",\n                minSizeError: \"{file} is too small, minimum file size is {minSizeLimit}.\",\n                emptyError: \"{file} is empty, please select files again without it.\",\n                noFilesError: \"No files to upload.\",\n                tooManyItemsError: \"Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.\",\n                maxHeightImageError: \"Image is too tall.\",\n                maxWidthImageError: \"Image is too wide.\",\n                minHeightImageError: \"Image is not tall enough.\",\n                minWidthImageError: \"Image is not wide enough.\",\n                retryFailTooManyItems: \"Retry failed - you have reached your file limit.\",\n                onLeave: \"The files are being uploaded, if you leave now the upload will be canceled.\",\n                unsupportedBrowserIos8Safari: \"Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues.\"\n            },\n\n            retry: {\n                enableAuto: false,\n                maxAutoAttempts: 3,\n                autoAttemptDelay: 5,\n                preventRetryResponseProperty: \"preventRetry\"\n            },\n\n            classes: {\n                buttonHover: \"qq-upload-button-hover\",\n                buttonFocus: \"qq-upload-button-focus\"\n            },\n\n            chunking: {\n                enabled: false,\n                concurrent: {\n                    enabled: false\n                },\n                mandatory: false,\n                paramNames: {\n                    partIndex: \"qqpartindex\",\n                    partByteOffset: \"qqpartbyteoffset\",\n                    chunkSize: \"qqchunksize\",\n                    totalFileSize: \"qqtotalfilesize\",\n                    totalParts: \"qqtotalparts\"\n                },\n                partSize: 2000000,\n                // only relevant for traditional endpoints, only required when concurrent.enabled === true\n                success: {\n                    endpoint: null\n                }\n            },\n\n            resume: {\n                enabled: false,\n                recordsExpireIn: 7, //days\n                paramNames: {\n                    resuming: \"qqresume\"\n                }\n            },\n\n            formatFileName: function(fileOrBlobName) {\n                return fileOrBlobName;\n            },\n\n            text: {\n                defaultResponseError: \"Upload failure reason unknown\",\n                fileInputTitle: \"file input\",\n                sizeSymbols: [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"]\n            },\n\n            deleteFile: {\n                enabled: false,\n                method: \"DELETE\",\n                endpoint: \"/server/upload\",\n                customHeaders: {},\n                params: {}\n            },\n\n            cors: {\n                expected: false,\n                sendCredentials: false,\n                allowXdr: false\n            },\n\n            blobs: {\n                defaultName: \"misc_data\"\n            },\n\n            paste: {\n                targetElement: null,\n                defaultName: \"pasted_image\"\n            },\n\n            camera: {\n                ios: false,\n\n                // if ios is true: button is null means target the default button, otherwise target the button specified\n                button: null\n            },\n\n            // This refers to additional upload buttons to be handled by Fine Uploader.\n            // Each element is an object, containing `element` as the only required\n            // property.  The `element` must be a container that will ultimately\n            // contain an invisible `<input type=\"file\">` created by Fine Uploader.\n            // Optional properties of each object include `multiple`, `validation`,\n            // and `folders`.\n            extraButtons: [],\n\n            // Depends on the session module.  Used to query the server for an initial file list\n            // during initialization and optionally after a `reset`.\n            session: {\n                endpoint: null,\n                params: {},\n                customHeaders: {},\n                refreshOnReset: true\n            },\n\n            // Send parameters associated with an existing form along with the files\n            form: {\n                // Element ID, HTMLElement, or null\n                element: \"qq-form\",\n\n                // Overrides the base `autoUpload`, unless `element` is null.\n                autoUpload: false,\n\n                // true = upload files on form submission (and squelch submit event)\n                interceptSubmit: true\n            },\n\n            // scale images client side, upload a new file for each scaled version\n            scaling: {\n                customResizer: null,\n\n                // send the original file as well\n                sendOriginal: true,\n\n                // fox orientation for scaled images\n                orient: true,\n\n                // If null, scaled image type will match reference image type.  This value will be referred to\n                // for any size record that does not specific a type.\n                defaultType: null,\n\n                defaultQuality: 80,\n\n                failureText: \"Failed to scale\",\n\n                includeExif: false,\n\n                // metadata about each requested scaled version\n                sizes: []\n            },\n\n            workarounds: {\n                iosEmptyVideos: true,\n                ios8SafariUploads: true,\n                ios8BrowserCrash: false\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(this._options, o, true);\n\n        this._buttons = [];\n        this._extraButtonSpecs = {};\n        this._buttonIdsForFileIds = [];\n\n        this._wrapCallbacks();\n        this._disposeSupport =  new qq.DisposeSupport();\n\n        this._storedIds = [];\n        this._autoRetries = [];\n        this._retryTimeouts = [];\n        this._preventRetries = [];\n        this._thumbnailUrls = [];\n\n        this._netUploadedOrQueued = 0;\n        this._netUploaded = 0;\n        this._uploadData = this._createUploadDataTracker();\n\n        this._initFormSupportAndParams();\n\n        this._customHeadersStore = this._createStore(this._options.request.customHeaders);\n        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);\n\n        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);\n\n        this._endpointStore = this._createStore(this._options.request.endpoint);\n        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);\n\n        this._handler = this._createUploadHandler();\n\n        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();\n\n        if (this._options.button) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._options.button,\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._generateExtraButtonSpecs();\n\n        this._handleCameraAccess();\n\n        if (this._options.paste.targetElement) {\n            if (qq.PasteSupport) {\n                this._pasteHandler = this._createPasteHandler();\n            }\n            else {\n                this.log(\"Paste support module not found\", \"error\");\n            }\n        }\n\n        this._preventLeaveInProgress();\n\n        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));\n        this._refreshSessionData();\n\n        this._succeededSinceLastAllComplete = [];\n        this._failedSinceLastAllComplete = [];\n\n        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};\n        if (this._scaler.enabled) {\n            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);\n        }\n\n        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {\n            this._totalProgress = new qq.TotalProgress(\n                qq.bind(this._onTotalProgress, this),\n\n                function(id) {\n                    var entry = self._uploadData.retrieve({id: id});\n                    return (entry && entry.size) || 0;\n                }\n            );\n        }\n\n        this._currentItemLimit = this._options.validation.itemLimit;\n    };\n\n    // Define the private & public API methods.\n    qq.FineUploaderBasic.prototype = qq.basePublicApi;\n    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);\n}());\n","/*globals qq, XDomainRequest*/\n/** Generic class for sending non-upload ajax requests and handling the associated responses **/\nqq.AjaxRequester = function(o) {\n    \"use strict\";\n\n    var log, shouldParamsBeInQueryString,\n        queue = [],\n        requestData = {},\n        options = {\n            acceptHeader: null,\n            validMethods: [\"PATCH\", \"POST\", \"PUT\"],\n            method: \"POST\",\n            contentType: \"application/x-www-form-urlencoded\",\n            maxConnections: 3,\n            customHeaders: {},\n            endpointStore: {},\n            paramsStore: {},\n            mandatedParams: {},\n            allowXRequestedWithAndCacheControl: true,\n            successfulResponseCodes: {\n                DELETE: [200, 202, 204],\n                PATCH: [200, 201, 202, 203, 204],\n                POST: [200, 201, 202, 203, 204],\n                PUT: [200, 201, 202, 203, 204],\n                GET: [200]\n            },\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onSend: function(id) {},\n            onComplete: function(id, xhrOrXdr, isError) {},\n            onProgress: null\n        };\n\n    qq.extend(options, o);\n    log = options.log;\n\n    if (qq.indexOf(options.validMethods, options.method) < 0) {\n        throw new Error(\"'\" + options.method + \"' is not a supported method for this type of request!\");\n    }\n\n    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)\n    // are defined by the W3C in the CORS spec as a list of methods that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function isSimpleMethod() {\n        return qq.indexOf([\"GET\", \"POST\", \"HEAD\"], options.method) >= 0;\n    }\n\n    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)\n    // are defined by the W3C in the CORS spec as a list of headers that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function containsNonSimpleHeaders(headers) {\n        var containsNonSimple = false;\n\n        qq.each(containsNonSimple, function(idx, header) {\n            if (qq.indexOf([\"Accept\", \"Accept-Language\", \"Content-Language\", \"Content-Type\"], header) < 0) {\n                containsNonSimple = true;\n                return false;\n            }\n        });\n\n        return containsNonSimple;\n    }\n\n    function isXdr(xhr) {\n        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.\n        return options.cors.expected && xhr.withCredentials === undefined;\n    }\n\n    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.\n    function getCorsAjaxTransport() {\n        var xhrOrXdr;\n\n        if (window.XMLHttpRequest || window.ActiveXObject) {\n            xhrOrXdr = qq.createXhrInstance();\n\n            if (xhrOrXdr.withCredentials === undefined) {\n                xhrOrXdr = new XDomainRequest();\n                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n                xhrOrXdr.onload = function() {};\n                xhrOrXdr.onerror = function() {};\n                xhrOrXdr.ontimeout = function() {};\n                xhrOrXdr.onprogress = function() {};\n            }\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.\n    function getXhrOrXdr(id, suppliedXhr) {\n        var xhrOrXdr = requestData[id].xhr;\n\n        if (!xhrOrXdr) {\n            if (suppliedXhr) {\n                xhrOrXdr = suppliedXhr;\n            }\n            else {\n                if (options.cors.expected) {\n                    xhrOrXdr = getCorsAjaxTransport();\n                }\n                else {\n                    xhrOrXdr = qq.createXhrInstance();\n                }\n            }\n\n            requestData[id].xhr = xhrOrXdr;\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Removes element from queue, sends next request\n    function dequeue(id) {\n        var i = qq.indexOf(queue, id),\n            max = options.maxConnections,\n            nextId;\n\n        delete requestData[id];\n        queue.splice(i, 1);\n\n        if (queue.length >= max && i < max) {\n            nextId = queue[max - 1];\n            sendRequest(nextId);\n        }\n    }\n\n    function onComplete(id, xdrError) {\n        var xhr = getXhrOrXdr(id),\n            method = options.method,\n            isError = xdrError === true;\n\n        dequeue(id);\n\n        if (isError) {\n            log(method + \" request for \" + id + \" has failed\", \"error\");\n        }\n        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {\n            isError = true;\n            log(method + \" request for \" + id + \" has failed - response code \" + xhr.status, \"error\");\n        }\n\n        options.onComplete(id, xhr, isError);\n    }\n\n    function getParams(id) {\n        var onDemandParams = requestData[id].additionalParams,\n            mandatedParams = options.mandatedParams,\n            params;\n\n        if (options.paramsStore.get) {\n            params = options.paramsStore.get(id);\n        }\n\n        if (onDemandParams) {\n            qq.each(onDemandParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        if (mandatedParams) {\n            qq.each(mandatedParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        return params;\n    }\n\n    function sendRequest(id, optXhr) {\n        var xhr = getXhrOrXdr(id, optXhr),\n            method = options.method,\n            params = getParams(id),\n            payload = requestData[id].payload,\n            url;\n\n        options.onSend(id);\n\n        url = createUrl(id, params, requestData[id].additionalQueryParams);\n\n        // XDR and XHR status detection APIs differ a bit.\n        if (isXdr(xhr)) {\n            xhr.onload = getXdrLoadHandler(id);\n            xhr.onerror = getXdrErrorHandler(id);\n        }\n        else {\n            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);\n        }\n\n        registerForUploadProgress(id);\n\n        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.\n        xhr.open(method, url, true);\n\n        // Instruct the transport to send cookies along with the CORS request,\n        // unless we are using `XDomainRequest`, which is not capable of this.\n        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {\n            xhr.withCredentials = true;\n        }\n\n        setHeaders(id);\n\n        log(\"Sending \" + method + \" request for \" + id);\n\n        if (payload) {\n            xhr.send(payload);\n        }\n        else if (shouldParamsBeInQueryString || !params) {\n            xhr.send();\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/x-www-form-urlencoded\") >= 0) {\n            xhr.send(qq.obj2url(params, \"\"));\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/json\") >= 0) {\n            xhr.send(JSON.stringify(params));\n        }\n        else {\n            xhr.send(params);\n        }\n\n        return xhr;\n    }\n\n    function createUrl(id, params, additionalQueryParams) {\n        var endpoint = options.endpointStore.get(id),\n            addToPath = requestData[id].addToPath;\n\n        /*jshint -W116,-W041 */\n        if (addToPath != undefined) {\n            endpoint += \"/\" + addToPath;\n        }\n\n        if (shouldParamsBeInQueryString && params) {\n            endpoint = qq.obj2url(params, endpoint);\n        }\n\n        if (additionalQueryParams) {\n            endpoint = qq.obj2url(additionalQueryParams, endpoint);\n        }\n\n        return endpoint;\n    }\n\n    // Invoked by the UA to indicate a number of possible states that describe\n    // a live `XMLHttpRequest` transport.\n    function getXhrReadyStateChangeHandler(id) {\n        return function() {\n            if (getXhrOrXdr(id).readyState === 4) {\n                onComplete(id);\n            }\n        };\n    }\n\n    function registerForUploadProgress(id) {\n        var onProgress = options.onProgress;\n\n        if (onProgress) {\n            getXhrOrXdr(id).upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    onProgress(id, e.loaded, e.total);\n                }\n            };\n        }\n    }\n\n    // This will be called by IE to indicate **success** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrLoadHandler(id) {\n        return function() {\n            onComplete(id);\n        };\n    }\n\n    // This will be called by IE to indicate **failure** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrErrorHandler(id) {\n        return function() {\n            onComplete(id, true);\n        };\n    }\n\n    function setHeaders(id) {\n        var xhr = getXhrOrXdr(id),\n            customHeaders = options.customHeaders,\n            onDemandHeaders = requestData[id].additionalHeaders || {},\n            method = options.method,\n            allHeaders = {};\n\n        // If XDomainRequest is being used, we can't set headers, so just ignore this block.\n        if (!isXdr(xhr)) {\n            options.acceptHeader && xhr.setRequestHeader(\"Accept\", options.acceptHeader);\n\n            // Only attempt to add X-Requested-With & Cache-Control if permitted\n            if (options.allowXRequestedWithAndCacheControl) {\n                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request\n                // OR the cross-origin request contains a non-simple method or header.\n                // This is done to ensure a preflight is not triggered exclusively based on the\n                // addition of these 2 non-simple headers.\n                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n                }\n            }\n\n            if (options.contentType && (method === \"POST\" || method === \"PUT\")) {\n                xhr.setRequestHeader(\"Content-Type\", options.contentType);\n            }\n\n            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);\n            qq.extend(allHeaders, onDemandHeaders);\n\n            qq.each(allHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        }\n    }\n\n    function isResponseSuccessful(responseCode) {\n        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;\n    }\n\n    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {\n        requestData[id] = {\n            addToPath: addToPath,\n            additionalParams: additionalParams,\n            additionalQueryParams: additionalQueryParams,\n            additionalHeaders: additionalHeaders,\n            payload: payload\n        };\n\n        var len = queue.push(id);\n\n        // if too many active connections, wait...\n        if (len <= options.maxConnections) {\n            return sendRequest(id, optXhr);\n        }\n    }\n\n    shouldParamsBeInQueryString = options.method === \"GET\" || options.method === \"DELETE\";\n\n    qq.extend(this, {\n        // Start the process of sending the request.  The ID refers to the file associated with the request.\n        initTransport: function(id) {\n            var path, params, headers, payload, cacheBuster, additionalQueryParams;\n\n            return {\n                // Optionally specify the end of the endpoint path for the request.\n                withPath: function(appendToPath) {\n                    path = appendToPath;\n                    return this;\n                },\n\n                // Optionally specify additional parameters to send along with the request.\n                // These will be added to the query string for GET/DELETE requests or the payload\n                // for POST/PUT requests.  The Content-Type of the request will be used to determine\n                // how these parameters should be formatted as well.\n                withParams: function(additionalParams) {\n                    params = additionalParams;\n                    return this;\n                },\n\n                withQueryParams: function(_additionalQueryParams_) {\n                    additionalQueryParams = _additionalQueryParams_;\n                    return this;\n                },\n\n                // Optionally specify additional headers to send along with the request.\n                withHeaders: function(additionalHeaders) {\n                    headers = additionalHeaders;\n                    return this;\n                },\n\n                // Optionally specify a payload/body for the request.\n                withPayload: function(thePayload) {\n                    payload = thePayload;\n                    return this;\n                },\n\n                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)\n                withCacheBuster: function() {\n                    cacheBuster = true;\n                    return this;\n                },\n\n                // Send the constructed request.\n                send: function(optXhr) {\n                    if (cacheBuster && qq.indexOf([\"GET\", \"DELETE\"], options.method) >= 0) {\n                        params.qqtimestamp = new Date().getTime();\n                    }\n\n                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);\n                }\n            };\n        },\n\n        canceled: function(id) {\n            dequeue(id);\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common upload handler functions.\n *\n * @constructor\n */\nqq.UploadHandler = function(spec) {\n    \"use strict\";\n\n    var proxy = spec.proxy,\n        fileState = {},\n        onCancel = proxy.onCancel,\n        getName = proxy.getName;\n\n    qq.extend(this, {\n        add: function(id, fileItem) {\n            fileState[id] = fileItem;\n            fileState[id].temp = {};\n        },\n\n        cancel: function(id) {\n            var self = this,\n                cancelFinalizationEffort = new qq.Promise(),\n                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);\n\n            onCancelRetVal.then(function() {\n                if (self.isValid(id)) {\n                    fileState[id].canceled = true;\n                    self.expunge(id);\n                }\n                cancelFinalizationEffort.success();\n            });\n        },\n\n        expunge: function(id) {\n            delete fileState[id];\n        },\n\n        getThirdPartyFileId: function(id) {\n            return fileState[id].key;\n        },\n\n        isValid: function(id) {\n            return fileState[id] !== undefined;\n        },\n\n        reset: function() {\n            fileState = {};\n        },\n\n        _getFileState: function(id) {\n            return fileState[id];\n        },\n\n        _setThirdPartyFileId: function(id, thirdPartyFileId) {\n            fileState[id].key = thirdPartyFileId;\n        },\n\n        _wasCanceled: function(id) {\n            return !!fileState[id].canceled;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Base upload handler module.  Controls more specific handlers.\n *\n * @param o Options.  Passed along to the specific handler submodule as well.\n * @param namespace [optional] Namespace for the specific handler.\n */\nqq.UploadHandlerController = function(o, namespace) {\n    \"use strict\";\n\n    var controller = this,\n        chunkingPossible = false,\n        concurrentChunkingPossible = false,\n        chunking, preventRetryResponse, log, handler,\n\n    options = {\n        paramsStore: {},\n        maxConnections: 3, // maximum number of concurrent uploads\n        chunking: {\n            enabled: false,\n            multiple: {\n                enabled: false\n            }\n        },\n        log: function(str, level) {},\n        onProgress: function(id, fileName, loaded, total) {},\n        onComplete: function(id, fileName, response, xhr) {},\n        onCancel: function(id, fileName) {},\n        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload\n        onUpload: function(id, fileName) {},\n        onUploadChunk: function(id, fileName, chunkData) {},\n        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},\n        onAutoRetry: function(id, fileName, response, xhr) {},\n        onResume: function(id, fileName, chunkData) {},\n        onUuidChanged: function(id, newUuid) {},\n        getName: function(id) {},\n        setSize: function(id, newSize) {},\n        isQueued: function(id) {},\n        getIdsInProxyGroup: function(id) {},\n        getIdsInBatch: function(id) {}\n    },\n\n    chunked = {\n        // Called when each chunk has uploaded successfully\n        done: function(id, chunkIdx, response, xhr) {\n            var chunkData = handler._getChunkData(id, chunkIdx);\n\n            handler._getFileState(id).attemptingResume = false;\n\n            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];\n            handler._getFileState(id).loaded += chunkData.size;\n\n            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);\n        },\n\n        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any\n        // logic associated with closing out the file, such as combining the chunks.\n        finalize: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id);\n\n            log(\"All chunks have been uploaded for \" + id + \" - finalizing....\");\n            handler.finalizeChunks(id).then(\n                function(response, xhr) {\n                    log(\"Finalize successful for \" + id);\n\n                    var normaizedResponse = upload.normalizeResponse(response, true);\n\n                    options.onProgress(id, name, size, size);\n                    handler._maybeDeletePersistedChunkData(id);\n                    upload.cleanup(id, normaizedResponse, xhr);\n                },\n                function(response, xhr) {\n                    var normaizedResponse = upload.normalizeResponse(response, false);\n\n                    log(\"Problem finalizing chunks for file ID \" + id + \" - \" + normaizedResponse.error, \"error\");\n\n                    if (normaizedResponse.reset) {\n                        chunked.reset(id);\n                    }\n\n                    if (!options.onAutoRetry(id, name, normaizedResponse, xhr)) {\n                        upload.cleanup(id, normaizedResponse, xhr);\n                    }\n                }\n            );\n        },\n\n        hasMoreParts: function(id) {\n            return !!handler._getFileState(id).chunking.remaining.length;\n        },\n\n        nextPart: function(id) {\n            var nextIdx = handler._getFileState(id).chunking.remaining.shift();\n\n            if (nextIdx >= handler._getTotalChunks(id)) {\n                nextIdx = null;\n            }\n\n            return nextIdx;\n        },\n\n        reset: function(id) {\n            log(\"Server or callback has ordered chunking effort to be restarted on next attempt for item ID \" + id, \"error\");\n\n            handler._maybeDeletePersistedChunkData(id);\n            handler.reevaluateChunking(id);\n            handler._getFileState(id).loaded = 0;\n        },\n\n        sendNext: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id),\n                chunkIdx = chunked.nextPart(id),\n                chunkData = handler._getChunkData(id, chunkIdx),\n                resuming = handler._getFileState(id).attemptingResume,\n                inProgressChunks = handler._getFileState(id).chunking.inProgress || [];\n\n            if (handler._getFileState(id).loaded == null) {\n                handler._getFileState(id).loaded = 0;\n            }\n\n            // Don't follow-through with the resume attempt if the integrator returns false from onResume\n            if (resuming && options.onResume(id, name, chunkData) === false) {\n                chunked.reset(id);\n                chunkIdx = chunked.nextPart(id);\n                chunkData = handler._getChunkData(id, chunkIdx);\n                resuming = false;\n            }\n\n            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.\n            if (chunkIdx == null && inProgressChunks.length === 0) {\n                chunked.finalize(id);\n            }\n\n            // Send the next chunk\n            else {\n                log(qq.format(\"Sending chunked upload request for item {}.{}, bytes {}-{} of {}.\", id, chunkIdx, chunkData.start + 1, chunkData.end, size));\n                options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));\n                inProgressChunks.push(chunkIdx);\n                handler._getFileState(id).chunking.inProgress = inProgressChunks;\n\n                if (concurrentChunkingPossible) {\n                    connectionManager.open(id, chunkIdx);\n                }\n\n                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {\n                    chunked.sendNext(id);\n                }\n\n                handler.uploadChunk(id, chunkIdx, resuming).then(\n                    // upload chunk success\n                    function success(response, xhr) {\n                        log(\"Chunked upload request succeeded for \" + id + \", chunk \" + chunkIdx);\n\n                        handler.clearCachedChunk(id, chunkIdx);\n\n                        var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],\n                            responseToReport = upload.normalizeResponse(response, true),\n                            inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);\n\n                        log(qq.format(\"Chunk {} for file {} uploaded successfully.\", chunkIdx, id));\n\n                        chunked.done(id, chunkIdx, responseToReport, xhr);\n\n                        if (inProgressChunkIdx >= 0) {\n                            inProgressChunks.splice(inProgressChunkIdx, 1);\n                        }\n\n                        handler._maybePersistChunkedState(id);\n\n                        if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {\n                            chunked.finalize(id);\n                        }\n                        else if (chunked.hasMoreParts(id)) {\n                            chunked.sendNext(id);\n                        }\n                        else {\n                            log(qq.format(\"File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}\", id, JSON.stringify(inProgressChunks)));\n                        }\n                    },\n\n                    // upload chunk failure\n                    function failure(response, xhr) {\n                        log(\"Chunked upload request failed for \" + id + \", chunk \" + chunkIdx);\n\n                        handler.clearCachedChunk(id, chunkIdx);\n\n                        var responseToReport = upload.normalizeResponse(response, false),\n                            inProgressIdx;\n\n                        if (responseToReport.reset) {\n                            chunked.reset(id);\n                        }\n                        else {\n                            inProgressIdx = qq.indexOf(handler._getFileState(id).chunking.inProgress, chunkIdx);\n                            if (inProgressIdx >= 0) {\n                                handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);\n                                handler._getFileState(id).chunking.remaining.unshift(chunkIdx);\n                            }\n                        }\n\n                        // We may have aborted all other in-progress chunks for this file due to a failure.\n                        // If so, ignore the failures associated with those aborts.\n                        if (!handler._getFileState(id).temp.ignoreFailure) {\n                            // If this chunk has failed, we want to ignore all other failures of currently in-progress\n                            // chunks since they will be explicitly aborted\n                            if (concurrentChunkingPossible) {\n                                handler._getFileState(id).temp.ignoreFailure = true;\n\n                                log(qq.format(\"Going to attempt to abort these chunks: {}. These are currently in-progress: {}.\", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));\n                                qq.each(handler._getXhrs(id), function(ckid, ckXhr) {\n                                    log(qq.format(\"Attempting to abort file {}.{}. XHR readyState {}. \", id, ckid, ckXhr.readyState));\n                                    ckXhr.abort();\n                                    // Flag the transport, in case we are waiting for some other async operation\n                                    // to complete before attempting to upload the chunk\n                                    ckXhr._cancelled = true;\n                                });\n\n                                // We must indicate that all aborted chunks are no longer in progress\n                                handler.moveInProgressToRemaining(id);\n\n                                // Free up any connections used by these chunks, but don't allow any\n                                // other files to take up the connections (until we have exhausted all auto-retries)\n                                connectionManager.free(id, true);\n                            }\n\n                            if (!options.onAutoRetry(id, name, responseToReport, xhr)) {\n                                // If one chunk fails, abort all of the others to avoid odd race conditions that occur\n                                // if a chunk succeeds immediately after one fails before we have determined if the upload\n                                // is a failure or not.\n                                upload.cleanup(id, responseToReport, xhr);\n                            }\n                        }\n                    }\n                )\n                    .done(function() {\n                        handler.clearXhr(id, chunkIdx);\n                    });\n            }\n        }\n    },\n\n    connectionManager = {\n        _open: [],\n        _openChunks: {},\n        _waiting: [],\n\n        available: function() {\n            var max = options.maxConnections,\n                openChunkEntriesCount = 0,\n                openChunksCount = 0;\n\n            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {\n                openChunkEntriesCount++;\n                openChunksCount += openChunkIndexes.length;\n            });\n\n            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);\n        },\n\n        /**\n         * Removes element from queue, starts upload of next\n         */\n        free: function(id, dontAllowNext) {\n            var allowNext = !dontAllowNext,\n                waitingIndex = qq.indexOf(connectionManager._waiting, id),\n                connectionsIndex = qq.indexOf(connectionManager._open, id),\n                nextId;\n\n            delete connectionManager._openChunks[id];\n\n            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {\n                log(\"Generated blob upload has ended for \" + id + \", disposing generated blob.\");\n                delete handler._getFileState(id).file;\n            }\n\n            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array\n            if (waitingIndex >= 0) {\n                connectionManager._waiting.splice(waitingIndex, 1);\n            }\n            // If this file was consuming a connection, allow the next file to be uploaded\n            else if (allowNext && connectionsIndex >= 0) {\n                connectionManager._open.splice(connectionsIndex, 1);\n\n                nextId = connectionManager._waiting.shift();\n                if (nextId >= 0) {\n                    connectionManager._open.push(nextId);\n                    upload.start(nextId);\n                }\n            }\n        },\n\n        getWaitingOrConnected: function() {\n            var waitingOrConnected = [];\n\n            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)\n            // We need to grab the file ID of any file that has at least one chunk consuming a connection.\n            qq.each(connectionManager._openChunks, function(fileId, chunks) {\n                if (chunks && chunks.length) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // For non-chunked files, only one connection will be consumed per file.\n            // This is where we aggregate those file IDs.\n            qq.each(connectionManager._open, function(idx, fileId) {\n                if (!connectionManager._openChunks[fileId]) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // There may be files waiting for a connection.\n            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);\n\n            return waitingOrConnected;\n        },\n\n        isUsingConnection: function(id) {\n            return qq.indexOf(connectionManager._open, id) >= 0;\n        },\n\n        open: function(id, chunkIdx) {\n            if (chunkIdx == null) {\n                connectionManager._waiting.push(id);\n            }\n\n            if (connectionManager.available()) {\n                if (chunkIdx == null) {\n                    connectionManager._waiting.pop();\n                    connectionManager._open.push(id);\n                }\n                else {\n                    (function() {\n                        var openChunksEntry = connectionManager._openChunks[id] || [];\n                        openChunksEntry.push(chunkIdx);\n                        connectionManager._openChunks[id] = openChunksEntry;\n                    }());\n                }\n\n                return true;\n            }\n\n            return false;\n        },\n\n        reset: function() {\n            connectionManager._waiting = [];\n            connectionManager._open = [];\n        }\n    },\n\n    simple = {\n        send: function(id, name) {\n            handler._getFileState(id).loaded = 0;\n\n            log(\"Sending simple upload request for \" + id);\n            handler.uploadFile(id).then(\n                function(response, optXhr) {\n                    log(\"Simple upload request succeeded for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, true),\n                        size = options.getSize(id);\n\n                    options.onProgress(id, name, size, size);\n                    upload.maybeNewUuid(id, responseToReport);\n                    upload.cleanup(id, responseToReport, optXhr);\n                },\n\n                function(response, optXhr) {\n                    log(\"Simple upload request failed for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, false);\n\n                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {\n                        upload.cleanup(id, responseToReport, optXhr);\n                    }\n                }\n            );\n        }\n    },\n\n    upload = {\n        cancel: function(id) {\n            log(\"Cancelling \" + id);\n            options.paramsStore.remove(id);\n            connectionManager.free(id);\n        },\n\n        cleanup: function(id, response, optXhr) {\n            var name = options.getName(id);\n\n            options.onComplete(id, name, response, optXhr);\n\n            if (handler._getFileState(id)) {\n                handler._clearXhrs && handler._clearXhrs(id);\n            }\n\n            connectionManager.free(id);\n        },\n\n        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined\n        // if none of these are available for the ID\n        getProxyOrBlob: function(id) {\n            return (handler.getProxy && handler.getProxy(id)) ||\n                (handler.getFile && handler.getFile(id));\n        },\n\n        initHandler: function() {\n            var handlerType = namespace ? qq[namespace] : qq.traditional,\n                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? \"Xhr\" : \"Form\";\n\n            handler = new handlerType[handlerModuleSubtype + \"UploadHandler\"](\n                options,\n                {\n                    getDataByUuid: options.getDataByUuid,\n                    getName: options.getName,\n                    getSize: options.getSize,\n                    getUuid: options.getUuid,\n                    log: log,\n                    onCancel: options.onCancel,\n                    onProgress: options.onProgress,\n                    onUuidChanged: options.onUuidChanged\n                }\n            );\n\n            if (handler._removeExpiredChunkingRecords) {\n                handler._removeExpiredChunkingRecords();\n            }\n        },\n\n        isDeferredEligibleForUpload: function(id) {\n            return options.isQueued(id);\n        },\n\n        // For Blobs that are part of a group of generated images, along with a reference image,\n        // this will ensure the blobs in the group are uploaded in the order they were triggered,\n        // even if some async processing must be completed on one or more Blobs first.\n        maybeDefer: function(id, blob) {\n            // If we don't have a file/blob yet & no file/blob exists for this item, request it,\n            // and then submit the upload to the specific handler once the blob is available.\n            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.\n            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {\n\n                // Blob creation may take some time, so the caller may want to update the\n                // UI to indicate that an operation is in progress, even before the actual\n                // upload begins and an onUpload callback is invoked.\n                options.onUploadPrep(id);\n\n                log(\"Attempting to generate a blob on-demand for \" + id);\n                blob.create().then(function(generatedBlob) {\n                    log(\"Generated an on-demand blob for \" + id);\n\n                    // Update record associated with this file by providing the generated Blob\n                    handler.updateBlob(id, generatedBlob);\n\n                    // Propagate the size for this generated Blob\n                    options.setSize(id, generatedBlob.size);\n\n                    // Order handler to recalculate chunking possibility, if applicable\n                    handler.reevaluateChunking(id);\n\n                    upload.maybeSendDeferredFiles(id);\n                },\n\n                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.\n                function(errorMessage) {\n                    var errorResponse = {};\n\n                    if (errorMessage) {\n                        errorResponse.error = errorMessage;\n                    }\n\n                    log(qq.format(\"Failed to generate blob for ID {}.  Error message: {}.\", id, errorMessage), \"error\");\n\n                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);\n                    upload.maybeSendDeferredFiles(id);\n                    connectionManager.free(id);\n                });\n            }\n            else {\n                return upload.maybeSendDeferredFiles(id);\n            }\n\n            return false;\n        },\n\n        // Upload any grouped blobs, in the proper order, that are ready to be uploaded\n        maybeSendDeferredFiles: function(id) {\n            var idsInGroup = options.getIdsInProxyGroup(id),\n                uploadedThisId = false;\n\n            if (idsInGroup && idsInGroup.length) {\n                log(\"Maybe ready to upload proxy group file \" + id);\n\n                qq.each(idsInGroup, function(idx, idInGroup) {\n                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {\n                        uploadedThisId = idInGroup === id;\n                        upload.now(idInGroup);\n                    }\n                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {\n                        return false;\n                    }\n                });\n            }\n            else {\n                uploadedThisId = true;\n                upload.now(id);\n            }\n\n            return uploadedThisId;\n        },\n\n        maybeNewUuid: function(id, response) {\n            if (response.newUuid !== undefined) {\n                options.onUuidChanged(id, response.newUuid);\n            }\n        },\n\n        // The response coming from handler implementations may be in various formats.\n        // Instead of hoping a promise nested 5 levels deep will always return an object\n        // as its first param, let's just normalize the response here.\n        normalizeResponse: function(originalResponse, successful) {\n            var response = originalResponse;\n\n            // The passed \"response\" param may not be a response at all.\n            // It could be a string, detailing the error, for example.\n            if (!qq.isObject(originalResponse)) {\n                response = {};\n\n                if (qq.isString(originalResponse) && !successful) {\n                    response.error = originalResponse;\n                }\n            }\n\n            response.success = successful;\n\n            return response;\n        },\n\n        now: function(id) {\n            var name = options.getName(id);\n\n            if (!controller.isValid(id)) {\n                throw new qq.Error(id + \" is not a valid file ID to upload!\");\n            }\n\n            options.onUpload(id, name);\n\n            if (chunkingPossible && handler._shouldChunkThisFile(id)) {\n                chunked.sendNext(id);\n            }\n            else {\n                simple.send(id, name);\n            }\n        },\n\n        start: function(id) {\n            var blobToUpload = upload.getProxyOrBlob(id);\n\n            if (blobToUpload) {\n                return upload.maybeDefer(id, blobToUpload);\n            }\n            else {\n                upload.now(id);\n                return true;\n            }\n        }\n    };\n\n    qq.extend(this, {\n        /**\n         * Adds file or file input to the queue\n         **/\n        add: function(id, file) {\n            handler.add.apply(this, arguments);\n        },\n\n        /**\n         * Sends the file identified by id\n         */\n        upload: function(id) {\n            if (connectionManager.open(id)) {\n                return upload.start(id);\n            }\n            return false;\n        },\n\n        retry: function(id) {\n            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks\n            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore\n            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore\n            // any more failures at this point.\n            if (concurrentChunkingPossible) {\n                handler._getFileState(id).temp.ignoreFailure = false;\n            }\n\n            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.\n            // Just go ahead and ask the handler to upload again.\n            if (connectionManager.isUsingConnection(id)) {\n                return upload.start(id);\n            }\n\n            // If we are attempting to retry a file that is not currently consuming a connection,\n            // this is likely a manual retry attempt.  We will need to ensure a connection is available\n            // before the retry commences.\n            else {\n                return controller.upload(id);\n            }\n        },\n\n        /**\n         * Cancels file upload by id\n         */\n        cancel: function(id) {\n            var cancelRetVal = handler.cancel(id);\n\n            if (qq.isGenericPromise(cancelRetVal)) {\n                cancelRetVal.then(function() {\n                    upload.cancel(id);\n                });\n            }\n            else if (cancelRetVal !== false) {\n                upload.cancel(id);\n            }\n        },\n\n        /**\n         * Cancels all queued or in-progress uploads\n         */\n        cancelAll: function() {\n            var waitingOrConnected = connectionManager.getWaitingOrConnected(),\n                i;\n\n            // ensure files are cancelled in reverse order which they were added\n            // to avoid a flash of time where a queued file begins to upload before it is canceled\n            if (waitingOrConnected.length) {\n                for (i = waitingOrConnected.length - 1; i >= 0; i--) {\n                    controller.cancel(waitingOrConnected[i]);\n                }\n            }\n\n            connectionManager.reset();\n        },\n\n        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.\n        // Undefined if no file record is available.\n        getFile: function(id) {\n            if (handler.getProxy && handler.getProxy(id)) {\n                return handler.getProxy(id).referenceBlob;\n            }\n\n            return handler.getFile && handler.getFile(id);\n        },\n\n        // Returns true if the Blob associated with the ID is related to a proxy s\n        isProxied: function(id) {\n            return !!(handler.getProxy && handler.getProxy(id));\n        },\n\n        getInput: function(id) {\n            if (handler.getInput) {\n                return handler.getInput(id);\n            }\n        },\n\n        reset: function() {\n            log(\"Resetting upload handler\");\n            controller.cancelAll();\n            connectionManager.reset();\n            handler.reset();\n        },\n\n        expunge: function(id) {\n            if (controller.isValid(id)) {\n                return handler.expunge(id);\n            }\n        },\n\n        /**\n         * Determine if the file exists.\n         */\n        isValid: function(id) {\n            return handler.isValid(id);\n        },\n\n        getResumableFilesData: function() {\n            if (handler.getResumableFilesData) {\n                return handler.getResumableFilesData();\n            }\n            return [];\n        },\n\n        /**\n         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is\n         * available (such as the \"key\" for Amazon S3), this will return that value.  Otherwise, the return value\n         * will be undefined.\n         *\n         * @param id Internal file ID\n         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process\n         */\n        getThirdPartyFileId: function(id) {\n            if (controller.isValid(id)) {\n                return handler.getThirdPartyFileId(id);\n            }\n        },\n\n        /**\n         * Attempts to pause the associated upload if the specific handler supports this and the file is \"valid\".\n         * @param id ID of the upload/file to pause\n         * @returns {boolean} true if the upload was paused\n         */\n        pause: function(id) {\n            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {\n                connectionManager.free(id);\n                handler.moveInProgressToRemaining(id);\n                return true;\n            }\n            return false;\n        },\n\n        // True if the file is eligible for pause/resume.\n        isResumable: function(id) {\n            return !!handler.isResumable && handler.isResumable(id);\n        }\n    });\n\n    qq.extend(options, o);\n    log = options.log;\n    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;\n    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;\n\n    preventRetryResponse = (function() {\n        var response = {};\n\n        response[options.preventRetryParam] = true;\n\n        return response;\n    }());\n\n    upload.initHandler();\n};\n","/* globals qq */\n/**\n * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden\n * in some cases by specific form upload handlers.\n *\n * @constructor\n */\nqq.FormUploadHandler = function(spec) {\n    \"use strict\";\n\n    var options = spec.options,\n        handler = this,\n        proxy = spec.proxy,\n        formHandlerInstanceId = qq.getUniqueId(),\n        onloadCallbacks = {},\n        detachLoadEvents = {},\n        postMessageCallbackTimers = {},\n        isCors = options.isCors,\n        inputName = options.inputName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});\n\n    /**\n     * Remove any trace of the file from the handler.\n     *\n     * @param id ID of the associated file\n     */\n    function expungeFile(id) {\n        delete detachLoadEvents[id];\n\n        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.\n        // In that case, terminate the timer waiting for a message from the loaded iframe\n        // and stop listening for any more messages coming from this iframe.\n        if (isCors) {\n            clearTimeout(postMessageCallbackTimers[id]);\n            delete postMessageCallbackTimers[id];\n            corsMessageReceiver.stopReceivingMessages(id);\n        }\n\n        var iframe = document.getElementById(handler._getIframeName(id));\n        if (iframe) {\n            // To cancel request set src to something else.  We use src=\"javascript:false;\"\n            // because it doesn't trigger ie6 prompt on https\n            /* jshint scripturl:true */\n            iframe.setAttribute(\"src\", \"javascript:false;\");\n\n            qq(iframe).remove();\n        }\n    }\n\n    /**\n     * @param iframeName `document`-unique Name of the associated iframe\n     * @returns {*} ID of the associated file\n     */\n    function getFileIdForIframeName(iframeName) {\n        return iframeName.split(\"_\")[0];\n    }\n\n    /**\n     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe\n     * to the current `document`.  Note that the iframe is hidden from view.\n     *\n     * @param name Name of the iframe.\n     * @returns {HTMLIFrameElement} The created iframe\n     */\n    function initIframeForUpload(name) {\n        var iframe = qq.toElement(\"<iframe src='javascript:false;' name='\" + name + \"' />\");\n\n        iframe.setAttribute(\"id\", name);\n\n        iframe.style.display = \"none\";\n        document.body.appendChild(iframe);\n\n        return iframe;\n    }\n\n    /**\n     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated\n     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.\n     *\n     * @param iframe Listen for messages on this iframe.\n     * @param callback Invoke this callback with the message from the iframe.\n     */\n    function registerPostMessageCallback(iframe, callback) {\n        var iframeName = iframe.id,\n            fileId = getFileIdForIframeName(iframeName),\n            uuid = getUuid(fileId);\n\n        onloadCallbacks[uuid] = callback;\n\n        // When the iframe has loaded (after the server responds to an upload request)\n        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.\n        detachLoadEvents[fileId] = qq(iframe).attach(\"load\", function() {\n            if (handler.getInput(fileId)) {\n                log(\"Received iframe load event for CORS upload request (iframe name \" + iframeName + \")\");\n\n                postMessageCallbackTimers[iframeName] = setTimeout(function() {\n                    var errorMessage = \"No valid message received from loaded iframe for iframe name \" + iframeName;\n                    log(errorMessage, \"error\");\n                    callback({\n                        error: errorMessage\n                    });\n                }, 1000);\n            }\n        });\n\n        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer\n        // that declares the upload a failure if a message is not received within a reasonable amount of time.\n        corsMessageReceiver.receiveMessage(iframeName, function(message) {\n            log(\"Received the following window message: '\" + message + \"'\");\n            var fileId = getFileIdForIframeName(iframeName),\n                response = handler._parseJsonResponse(message),\n                uuid = response.uuid,\n                onloadCallback;\n\n            if (uuid && onloadCallbacks[uuid]) {\n                log(\"Handling response for iframe name \" + iframeName);\n                clearTimeout(postMessageCallbackTimers[iframeName]);\n                delete postMessageCallbackTimers[iframeName];\n\n                handler._detachLoadEvent(iframeName);\n\n                onloadCallback = onloadCallbacks[uuid];\n\n                delete onloadCallbacks[uuid];\n                corsMessageReceiver.stopReceivingMessages(iframeName);\n                onloadCallback(response);\n            }\n            else if (!uuid) {\n                log(\"'\" + message + \"' does not contain a UUID - ignoring.\");\n            }\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, fileInput) {\n                super_.add(id, {input: fileInput});\n\n                fileInput.setAttribute(\"name\", inputName);\n\n                // remove file input from DOM\n                if (fileInput.parentNode) {\n                    qq(fileInput).remove();\n                }\n            },\n\n            expunge: function(id) {\n                expungeFile(id);\n                super_.expunge(id);\n            },\n\n            isValid: function(id) {\n                return super_.isValid(id) &&\n                    handler._getFileState(id).input !== undefined;\n            }\n        };\n    });\n\n    qq.extend(this, {\n        getInput: function(id) {\n            return handler._getFileState(id).input;\n        },\n\n        /**\n         * This function either delegates to a more specific message handler if CORS is involved,\n         * or simply registers a callback when the iframe has been loaded that invokes the passed callback\n         * after determining if the content of the iframe is accessible.\n         *\n         * @param iframe Associated iframe\n         * @param callback Callback to invoke after we have determined if the iframe content is accessible.\n         */\n        _attachLoadEvent: function(iframe, callback) {\n            /*jslint eqeq: true*/\n            var responseDescriptor;\n\n            if (isCors) {\n                registerPostMessageCallback(iframe, callback);\n            }\n            else {\n                detachLoadEvents[iframe.id] = qq(iframe).attach(\"load\", function() {\n                    log(\"Received response for \" + iframe.id);\n\n                    // when we remove iframe from dom\n                    // the request stops, but in IE load\n                    // event fires\n                    if (!iframe.parentNode) {\n                        return;\n                    }\n\n                    try {\n                        // fixing Opera 10.53\n                        if (iframe.contentDocument &&\n                            iframe.contentDocument.body &&\n                            iframe.contentDocument.body.innerHTML == \"false\") {\n                            // In Opera event is fired second time\n                            // when body.innerHTML changed from false\n                            // to server response approx. after 1 sec\n                            // when we upload file with iframe\n                            return;\n                        }\n                    }\n                    catch (error) {\n                        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n                        log(\"Error when attempting to access iframe during handling of upload response (\" + error.message + \")\", \"error\");\n                        responseDescriptor = {success: false};\n                    }\n\n                    callback(responseDescriptor);\n                });\n            }\n        },\n\n        /**\n         * Creates an iframe with a specific document-unique name.\n         *\n         * @param id ID of the associated file\n         * @returns {HTMLIFrameElement}\n         */\n        _createIframe: function(id) {\n            var iframeName = handler._getIframeName(id);\n\n            return initIframeForUpload(iframeName);\n        },\n\n        /**\n         * Called when we are no longer interested in being notified when an iframe has loaded.\n         *\n         * @param id Associated file ID\n         */\n        _detachLoadEvent: function(id) {\n            if (detachLoadEvents[id] !== undefined) {\n                detachLoadEvents[id]();\n                delete detachLoadEvents[id];\n            }\n        },\n\n        /**\n         * @param fileId ID of the associated file\n         * @returns {string} The `document`-unique name of the iframe\n         */\n        _getIframeName: function(fileId) {\n            return fileId + \"_\" + formHandlerInstanceId;\n        },\n\n        /**\n         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.\n         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note\n         * that the form is hidden from view.\n         *\n         * @param spec An object containing various properties to be used when constructing the form.  Required properties are\n         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.\n         * @returns {HTMLFormElement} The created form\n         */\n        _initFormForUpload: function(spec) {\n            var method = spec.method,\n                endpoint = spec.endpoint,\n                params = spec.params,\n                paramsInBody = spec.paramsInBody,\n                targetName = spec.targetName,\n                form = qq.toElement(\"<form method='\" + method + \"' enctype='multipart/form-data'></form>\"),\n                url = endpoint;\n\n            if (paramsInBody) {\n                qq.obj2Inputs(params, form);\n            }\n            else {\n                url = qq.obj2url(params, endpoint);\n            }\n\n            form.setAttribute(\"action\", url);\n            form.setAttribute(\"target\", targetName);\n            form.style.display = \"none\";\n            document.body.appendChild(form);\n\n            return form;\n        },\n\n        /**\n         * @param innerHtmlOrMessage JSON message\n         * @returns {*} The parsed response, or an empty object if the response could not be parsed\n         */\n        _parseJsonResponse: function(innerHtmlOrMessage) {\n            var response = {};\n\n            try {\n                response = qq.parseJson(innerHtmlOrMessage);\n            }\n            catch (error) {\n                log(\"Error when attempting to parse iframe upload response (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific\n * XHR upload handlers.\n *\n * @constructor\n */\nqq.XhrUploadHandler = function(spec) {\n    \"use strict\";\n\n    var handler = this,\n        namespace = spec.options.namespace,\n        proxy = spec.proxy,\n        chunking = spec.options.chunking,\n        resume = spec.options.resume,\n        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,\n        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        getEndpoint = proxy.getEndpoint,\n        getDataByUuid = proxy.getDataByUuid,\n        onUuidChanged = proxy.onUuidChanged,\n        onProgress = proxy.onProgress,\n        log = proxy.log;\n\n    function abort(id) {\n        qq.each(handler._getXhrs(id), function(xhrId, xhr) {\n            var ajaxRequester = handler._getAjaxRequester(id, xhrId);\n\n            xhr.onreadystatechange = null;\n            xhr.upload.onprogress = null;\n            xhr.abort();\n            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, blobOrProxy) {\n                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {\n                    super_.add(id, {file: blobOrProxy});\n                }\n                else if (blobOrProxy instanceof qq.BlobProxy) {\n                    super_.add(id, {proxy: blobOrProxy});\n                }\n                else {\n                    throw new Error(\"Passed obj is not a File, Blob, or proxy\");\n                }\n\n                handler._initTempState(id);\n                resumeEnabled && handler._maybePrepareForResume(id);\n            },\n\n            expunge: function(id) {\n                abort(id);\n                handler._maybeDeletePersistedChunkData(id);\n                handler._clearXhrs(id);\n                super_.expunge(id);\n            }\n        };\n    });\n\n    qq.extend(this, {\n        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.\n        clearCachedChunk: function(id, chunkIdx) {\n            delete handler._getFileState(id).temp.cachedChunks[chunkIdx];\n        },\n\n        clearXhr: function(id, chunkIdx) {\n            var tempState = handler._getFileState(id).temp;\n\n            if (tempState.xhrs) {\n                delete tempState.xhrs[chunkIdx];\n            }\n            if (tempState.ajaxRequesters) {\n                delete tempState.ajaxRequesters[chunkIdx];\n            }\n        },\n\n        // Called when all chunks have been successfully uploaded.  Expected promissory return type.\n        // This defines the default behavior if nothing further is required when all chunks have been uploaded.\n        finalizeChunks: function(id, responseParser) {\n            var lastChunkIdx = handler._getTotalChunks(id) - 1,\n                xhr = handler._getXhr(id, lastChunkIdx);\n\n            if (responseParser) {\n                return new qq.Promise().success(responseParser(xhr), xhr);\n            }\n\n            return new qq.Promise().success({}, xhr);\n        },\n\n        getFile: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).file;\n        },\n\n        getProxy: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).proxy;\n        },\n\n        /**\n         * @returns {Array} Array of objects containing properties useful to integrators\n         * when it is important to determine which files are potentially resumable.\n         */\n        getResumableFilesData: function() {\n            var resumableFilesData = [];\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);\n\n                var data = {\n                    name: uploadData.name,\n                    remaining: uploadData.chunking.remaining,\n                    size: uploadData.size,\n                    uuid: uploadData.uuid\n                };\n\n                if (uploadData.key) {\n                    data.key = uploadData.key;\n                }\n\n                resumableFilesData.push(data);\n            });\n\n            return resumableFilesData;\n        },\n\n        isResumable: function(id) {\n            return !!chunking && handler.isValid(id) && !handler._getFileState(id).notResumable;\n        },\n\n        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {\n            var inProgress = optInProgress || handler._getFileState(id).chunking.inProgress,\n                remaining = optRemaining || handler._getFileState(id).chunking.remaining;\n\n            if (inProgress) {\n                log(qq.format(\"Moving these chunks from in-progress {}, to remaining.\", JSON.stringify(inProgress)));\n                inProgress.reverse();\n                qq.each(inProgress, function(idx, chunkIdx) {\n                    remaining.unshift(chunkIdx);\n                });\n                inProgress.length = 0;\n            }\n        },\n\n        pause: function(id) {\n            if (handler.isValid(id)) {\n                log(qq.format(\"Aborting XHR upload for {} '{}' due to pause instruction.\", id, getName(id)));\n                handler._getFileState(id).paused = true;\n                abort(id);\n                return true;\n            }\n        },\n\n        reevaluateChunking: function(id) {\n            if (chunking && handler.isValid(id)) {\n                var state = handler._getFileState(id),\n                    totalChunks,\n                    i;\n\n                delete state.chunking;\n\n                state.chunking = {};\n                totalChunks = handler._getTotalChunks(id);\n                if (totalChunks > 1 || chunking.mandatory) {\n                    state.chunking.enabled = true;\n                    state.chunking.parts = totalChunks;\n                    state.chunking.remaining = [];\n\n                    for (i = 0; i < totalChunks; i++) {\n                        state.chunking.remaining.push(i);\n                    }\n\n                    handler._initTempState(id);\n                }\n                else {\n                    state.chunking.enabled = false;\n                }\n            }\n        },\n\n        updateBlob: function(id, newBlob) {\n            if (handler.isValid(id)) {\n                handler._getFileState(id).file = newBlob;\n            }\n        },\n\n        _clearXhrs: function(id) {\n            var tempState = handler._getFileState(id).temp;\n\n            qq.each(tempState.ajaxRequesters, function(chunkId) {\n                delete tempState.ajaxRequesters[chunkId];\n            });\n\n            qq.each(tempState.xhrs, function(chunkId) {\n                delete tempState.xhrs[chunkId];\n            });\n        },\n\n        /**\n         * Creates an XHR instance for this file and stores it in the fileState.\n         *\n         * @param id File ID\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @returns {XMLHttpRequest}\n         */\n        _createXhr: function(id, optChunkIdx) {\n            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());\n        },\n\n        _getAjaxRequester: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];\n        },\n\n        _getChunkData: function(id, chunkIndex) {\n            var chunkSize = chunking.partSize,\n                fileSize = getSize(id),\n                fileOrBlob = handler.getFile(id),\n                startBytes = chunkSize * chunkIndex,\n                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,\n                totalChunks = handler._getTotalChunks(id),\n                cachedChunks = this._getFileState(id).temp.cachedChunks,\n\n            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.\n            // See https://github.com/Widen/fine-uploader/issues/937#issuecomment-41418760\n                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);\n\n            cachedChunks[chunkIndex] = blob;\n\n            return {\n                part: chunkIndex,\n                start: startBytes,\n                end: endBytes,\n                count: totalChunks,\n                blob: blob,\n                size: endBytes - startBytes\n            };\n        },\n\n        _getChunkDataForCallback: function(chunkData) {\n            return {\n                partIndex: chunkData.part,\n                startByte: chunkData.start + 1,\n                endByte: chunkData.end,\n                totalParts: chunkData.count\n            };\n        },\n\n        /**\n         * @param id File ID\n         * @returns {string} Identifier for this item that may appear in the browser's local storage\n         */\n        _getLocalStorageId: function(id) {\n            var formatVersion = \"5.0\",\n                name = getName(id),\n                size = getSize(id),\n                chunkSize = chunking.partSize,\n                endpoint = getEndpoint(id);\n\n            return qq.format(\"qq{}resume{}-{}-{}-{}-{}\", namespace, formatVersion, name, size, chunkSize, endpoint);\n        },\n\n        _getMimeType: function(id) {\n            return handler.getFile(id).type;\n        },\n\n        _getPersistableData: function(id) {\n            return handler._getFileState(id).chunking;\n        },\n\n        /**\n         * @param id ID of the associated file\n         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA\n         */\n        _getTotalChunks: function(id) {\n            if (chunking) {\n                var fileSize = getSize(id),\n                    chunkSize = chunking.partSize;\n\n                return Math.ceil(fileSize / chunkSize);\n            }\n        },\n\n        _getXhr: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.xhrs[chunkIdx];\n        },\n\n        _getXhrs: function(id) {\n            return handler._getFileState(id).temp.xhrs;\n        },\n\n        // Iterates through all XHR handler-created resume records (in local storage),\n        // invoking the passed callback and passing in the key and value of each local storage record.\n        _iterateResumeRecords: function(callback) {\n            if (resumeEnabled) {\n                qq.each(localStorage, function(key, item) {\n                    if (key.indexOf(qq.format(\"qq{}resume\", namespace)) === 0) {\n                        var uploadData = JSON.parse(item);\n                        callback(key, uploadData);\n                    }\n                });\n            }\n        },\n\n        _initTempState: function(id) {\n            handler._getFileState(id).temp = {\n                ajaxRequesters: {},\n                chunkProgress: {},\n                xhrs: {},\n                cachedChunks: {}\n            };\n        },\n\n        _markNotResumable: function(id) {\n            handler._getFileState(id).notResumable = true;\n        },\n\n        // Removes a chunked upload record from local storage, if possible.\n        // Returns true if the item was removed, false otherwise.\n        _maybeDeletePersistedChunkData: function(id) {\n            var localStorageId;\n\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                if (localStorageId && localStorage.getItem(localStorageId)) {\n                    localStorage.removeItem(localStorageId);\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload\n        // so we can pick up from where we left off.\n        _maybePrepareForResume: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,\n            // so prepare for a resume attempt.\n            if (resumeEnabled && state.key === undefined) {\n                localStorageId = handler._getLocalStorageId(id);\n                persistedData = localStorage.getItem(localStorageId);\n\n                // If we found this item in local storage, maybe we should resume it.\n                if (persistedData) {\n                    persistedData = JSON.parse(persistedData);\n\n                    // If we found a resume record but we have already handled this file in this session,\n                    // don't try to resume it & ensure we don't persist future check data\n                    if (getDataByUuid(persistedData.uuid)) {\n                        handler._markNotResumable(id);\n                    }\n                    else {\n                        log(qq.format(\"Identified file with ID {} and name of {} as resumable.\", id, getName(id)));\n\n                        onUuidChanged(id, persistedData.uuid);\n\n                        state.key = persistedData.key;\n                        state.chunking = persistedData.chunking;\n                        state.loaded = persistedData.loaded;\n                        state.attemptingResume = true;\n\n                        handler.moveInProgressToRemaining(id);\n                    }\n                }\n            }\n        },\n\n        // Persist any data needed to resume this upload in a new session.\n        _maybePersistChunkedState: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                persistedData = {\n                    name: getName(id),\n                    size: getSize(id),\n                    uuid: getUuid(id),\n                    key: state.key,\n                    chunking: state.chunking,\n                    loaded: state.loaded,\n                    lastUpdated: Date.now()\n                };\n\n                try {\n                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));\n                }\n                catch (error) {\n                    log(qq.format(\"Unable to save resume data for '{}' due to error: '{}'.\", id, error.toString()), \"warn\");\n                }\n            }\n        },\n\n        _registerProgressHandler: function(id, chunkIdx, chunkSize) {\n            var xhr = handler._getXhr(id, chunkIdx),\n                name = getName(id),\n                progressCalculator = {\n                    simple: function(loaded, total) {\n                        var fileSize = getSize(id);\n\n                        if (loaded === total) {\n                            onProgress(id, name, fileSize, fileSize);\n                        }\n                        else {\n                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);\n                        }\n                    },\n\n                    chunked: function(loaded, total) {\n                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,\n                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,\n                            loadedForRequest = loaded,\n                            totalForRequest = total,\n                            totalFileSize = getSize(id),\n                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),\n                            totalLoadedForFile = totalSuccessfullyLoadedForFile;\n\n                        chunkProgress[chunkIdx] = estActualChunkLoaded;\n\n                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {\n                            totalLoadedForFile += chunkLoaded;\n                        });\n\n                        onProgress(id, name, totalLoadedForFile, totalFileSize);\n                    }\n                };\n\n            xhr.upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    /* jshint eqnull: true */\n                    var type = chunkSize == null ? \"simple\" : \"chunked\";\n                    progressCalculator[type](e.loaded, e.total);\n                }\n            };\n        },\n\n        /**\n         * Registers an XHR transport instance created elsewhere.\n         *\n         * @param id ID of the associated file\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @param xhr XMLHttpRequest object instance\n         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.\n         * @returns {XMLHttpRequest}\n         */\n        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {\n            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,\n                tempState = handler._getFileState(id).temp;\n\n            tempState.xhrs = tempState.xhrs || {};\n            tempState.ajaxRequesters = tempState.ajaxRequesters || {};\n\n            tempState.xhrs[xhrsId] = xhr;\n\n            if (optAjaxRequester) {\n                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;\n            }\n\n            return xhr;\n        },\n\n        // Deletes any local storage records that are \"expired\".\n        _removeExpiredChunkingRecords: function() {\n            var expirationDays = resume.recordsExpireIn;\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                var expirationDate = new Date(uploadData.lastUpdated);\n\n                // transform updated date into expiration date\n                expirationDate.setDate(expirationDate.getDate() + expirationDays);\n\n                if (expirationDate.getTime() <= Date.now()) {\n                    log(\"Removing expired resume record with key \" + key);\n                    localStorage.removeItem(key);\n                }\n            });\n        },\n\n        /**\n         * Determine if the associated file should be chunked.\n         *\n         * @param id ID of the associated file\n         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part\n         */\n        _shouldChunkThisFile: function(id) {\n            var state = handler._getFileState(id);\n\n            if (!state.chunking) {\n                handler.reevaluateChunking(id);\n            }\n\n            return state.chunking.enabled;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\nqq.DeleteFileAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            uuidParamName: \"qquuid\",\n            endpointStore: {},\n            maxConnections: 3,\n            customHeaders: function(id) {return {};},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhrOrXdr, isError) {}\n        };\n\n    qq.extend(options, o);\n\n    function getMandatedParams() {\n        if (options.method.toUpperCase() === \"POST\") {\n            return {\n                _method: \"DELETE\"\n            };\n        }\n\n        return {};\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"POST\", \"DELETE\"],\n        method: options.method,\n        endpointStore: options.endpointStore,\n        paramsStore: options.paramsStore,\n        mandatedParams: getMandatedParams(),\n        maxConnections: options.maxConnections,\n        customHeaders: function(id) {\n            return options.customHeaders.get(id);\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        sendDelete: function(id, uuid, additionalMandatedParams) {\n            var additionalOptions = additionalMandatedParams || {};\n\n            options.log(\"Submitting delete file request for \" + id);\n\n            if (options.method === \"DELETE\") {\n                requester.initTransport(id)\n                    .withPath(uuid)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n            else {\n                additionalOptions[options.uuidParamName] = uuid;\n                requester.initTransport(id)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n        }\n    });\n};\n","/*global qq, define */\n/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */\n/**\n * Mega pixel image rendering library for iOS6+\n *\n * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),\n * which causes unexpected subsampling when drawing it in canvas.\n * By using this library, you can safely render the image with proper stretching.\n *\n * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\n * Released under the MIT license\n *\n * Heavily modified by Widen for Fine Uploader\n */\n(function() {\n\n    /**\n     * Detect subsampling in loaded image.\n     * In iOS, larger images than 2M pixels may be subsampled in rendering.\n     */\n    function detectSubsampling(img) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            canvas = document.createElement(\"canvas\"),\n            ctx;\n\n        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\n            canvas.width = canvas.height = 1;\n            ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, -iw + 1, 0);\n            // subsampled image becomes half smaller in rendering size.\n            // check alpha channel value to confirm image is covering edge pixel or not.\n            // if alpha value is 0 image is not covering, hence subsampled.\n            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Detecting vertical squash in loaded image.\n     * Fixes a bug which squash image vertically while drawing into canvas for some images.\n     */\n    function detectVerticalSquash(img, iw, ih) {\n        var canvas = document.createElement(\"canvas\"),\n            sy = 0,\n            ey = ih,\n            py = ih,\n            ctx, data, alpha, ratio;\n\n        canvas.width = 1;\n        canvas.height = ih;\n        ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        data = ctx.getImageData(0, 0, 1, ih).data;\n\n        // search image edge pixel position in case it is squashed vertically.\n        while (py > sy) {\n            alpha = data[(py - 1) * 4 + 3];\n            if (alpha === 0) {\n                ey = py;\n            } else {\n                sy = py;\n            }\n            py = (ey + sy) >> 1;\n        }\n\n        ratio = (py / ih);\n        return (ratio === 0) ? 1 : ratio;\n    }\n\n    /**\n     * Rendering image element (with resizing) and get its data URL\n     */\n    function renderImageToDataURL(img, blob, options, doSquash) {\n        var canvas = document.createElement(\"canvas\"),\n            mime = options.mime || \"image/jpeg\",\n            promise = new qq.Promise();\n\n        renderImageToCanvas(img, blob, canvas, options, doSquash)\n            .then(function() {\n                promise.success(\n                    canvas.toDataURL(mime, options.quality || 0.8)\n                );\n            });\n\n        return promise;\n    }\n\n    function maybeCalculateDownsampledDimensions(spec) {\n        var maxPixels = 5241000; //iOS specific value\n\n        if (!qq.ios()) {\n            throw new qq.Error(\"Downsampled dimensions can only be reliably calculated for iOS!\");\n        }\n\n        if (spec.origHeight * spec.origWidth > maxPixels) {\n            return {\n                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),\n                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))\n            };\n        }\n    }\n\n    /**\n     * Rendering image element (with resizing) into the canvas element\n     */\n    function renderImageToCanvas(img, blob, canvas, options, doSquash) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            width = options.width,\n            height = options.height,\n            ctx = canvas.getContext(\"2d\"),\n            promise = new qq.Promise(),\n            modifiedDimensions;\n\n        ctx.save();\n\n        if (options.resize) {\n            return renderImageToCanvasWithCustomResizer({\n                blob: blob,\n                canvas: canvas,\n                image: img,\n                imageHeight: ih,\n                imageWidth: iw,\n                orientation: options.orientation,\n                resize: options.resize,\n                targetHeight: height,\n                targetWidth: width\n            });\n        }\n\n        if (!qq.supportedFeatures.unlimitedScaledImageSize) {\n            modifiedDimensions = maybeCalculateDownsampledDimensions({\n                origWidth: width,\n                origHeight: height\n            });\n\n            if (modifiedDimensions) {\n                qq.log(qq.format(\"Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h\",\n                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),\n                    \"warn\");\n\n                width = modifiedDimensions.newWidth;\n                height = modifiedDimensions.newHeight;\n            }\n        }\n\n        transformCoordinate(canvas, width, height, options.orientation);\n\n        // Fine Uploader specific: Save some CPU cycles if not using iOS\n        // Assumption: This logic is only needed to overcome iOS image sampling issues\n        if (qq.ios()) {\n            (function() {\n                if (detectSubsampling(img)) {\n                    iw /= 2;\n                    ih /= 2;\n                }\n\n                var d = 1024, // size of tiling canvas\n                    tmpCanvas = document.createElement(\"canvas\"),\n                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,\n                    dw = Math.ceil(d * width / iw),\n                    dh = Math.ceil(d * height / ih / vertSquashRatio),\n                    sy = 0,\n                    dy = 0,\n                    tmpCtx, sx, dx;\n\n                tmpCanvas.width = tmpCanvas.height = d;\n                tmpCtx = tmpCanvas.getContext(\"2d\");\n\n                while (sy < ih) {\n                    sx = 0;\n                    dx = 0;\n                    while (sx < iw) {\n                        tmpCtx.clearRect(0, 0, d, d);\n                        tmpCtx.drawImage(img, -sx, -sy);\n                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\n                        sx += d;\n                        dx += dw;\n                    }\n                    sy += d;\n                    dy += dh;\n                }\n                ctx.restore();\n                tmpCanvas = tmpCtx = null;\n            }());\n        }\n        else {\n            ctx.drawImage(img, 0, 0, width, height);\n        }\n\n        canvas.qqImageRendered && canvas.qqImageRendered();\n        promise.success();\n\n        return promise;\n    }\n\n    function renderImageToCanvasWithCustomResizer(resizeInfo) {\n        var blob = resizeInfo.blob,\n            image = resizeInfo.image,\n            imageHeight = resizeInfo.imageHeight,\n            imageWidth = resizeInfo.imageWidth,\n            orientation = resizeInfo.orientation,\n            promise = new qq.Promise(),\n            resize = resizeInfo.resize,\n            sourceCanvas = document.createElement(\"canvas\"),\n            sourceCanvasContext = sourceCanvas.getContext(\"2d\"),\n            targetCanvas = resizeInfo.canvas,\n            targetHeight = resizeInfo.targetHeight,\n            targetWidth = resizeInfo.targetWidth;\n\n        transformCoordinate(sourceCanvas, imageWidth, imageHeight, orientation);\n\n        targetCanvas.height = targetHeight;\n        targetCanvas.width = targetWidth;\n\n        sourceCanvasContext.drawImage(image, 0, 0);\n\n        resize({\n            blob: blob,\n            height: targetHeight,\n            image: image,\n            sourceCanvas: sourceCanvas,\n            targetCanvas: targetCanvas,\n            width: targetWidth\n        })\n            .then(\n                function success() {\n                    targetCanvas.qqImageRendered && targetCanvas.qqImageRendered();\n                    promise.success();\n                },\n                promise.failure\n            );\n\n        return promise;\n    }\n\n    /**\n     * Transform canvas coordination according to specified frame size and orientation\n     * Orientation value is from EXIF tag\n     */\n    function transformCoordinate(canvas, width, height, orientation) {\n        switch (orientation) {\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                canvas.width = height;\n                canvas.height = width;\n                break;\n            default:\n                canvas.width = width;\n                canvas.height = height;\n        }\n        var ctx = canvas.getContext(\"2d\");\n        switch (orientation) {\n            case 2:\n                // horizontal flip\n                ctx.translate(width, 0);\n                ctx.scale(-1, 1);\n                break;\n            case 3:\n                // 180 rotate left\n                ctx.translate(width, height);\n                ctx.rotate(Math.PI);\n                break;\n            case 4:\n                // vertical flip\n                ctx.translate(0, height);\n                ctx.scale(1, -1);\n                break;\n            case 5:\n                // vertical flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.scale(1, -1);\n                break;\n            case 6:\n                // 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(0, -height);\n                break;\n            case 7:\n                // horizontal flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(width, -height);\n                ctx.scale(-1, 1);\n                break;\n            case 8:\n                // 90 rotate left\n                ctx.rotate(-0.5 * Math.PI);\n                ctx.translate(-width, 0);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * MegaPixImage class\n     */\n    function MegaPixImage(srcImage, errorCallback) {\n        var self = this;\n\n        if (window.Blob && srcImage instanceof Blob) {\n            (function() {\n                var img = new Image(),\n                    URL = window.URL && window.URL.createObjectURL ? window.URL :\n                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\n                if (!URL) { throw Error(\"No createObjectURL function found to create blob url\"); }\n                img.src = URL.createObjectURL(srcImage);\n                self.blob = srcImage;\n                srcImage = img;\n            }());\n        }\n        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\n            srcImage.onload = function() {\n                var listeners = self.imageLoadListeners;\n                if (listeners) {\n                    self.imageLoadListeners = null;\n                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,\n                    // so let's push this to the end of the UI thread queue.\n                    setTimeout(function() {\n                        for (var i = 0, len = listeners.length; i < len; i++) {\n                            listeners[i]();\n                        }\n                    }, 0);\n                }\n            };\n            srcImage.onerror = errorCallback;\n            this.imageLoadListeners = [];\n        }\n        this.srcImage = srcImage;\n    }\n\n    /**\n     * Rendering megapix image into specified target element\n     */\n    MegaPixImage.prototype.render = function(target, options) {\n        options = options || {};\n\n        var self = this,\n            imgWidth = this.srcImage.naturalWidth,\n            imgHeight = this.srcImage.naturalHeight,\n            width = options.width,\n            height = options.height,\n            maxWidth = options.maxWidth,\n            maxHeight = options.maxHeight,\n            doSquash = !this.blob || this.blob.type === \"image/jpeg\",\n            tagName = target.tagName.toLowerCase(),\n            opt;\n\n        if (this.imageLoadListeners) {\n            this.imageLoadListeners.push(function() { self.render(target, options); });\n            return;\n        }\n\n        if (width && !height) {\n            height = (imgHeight * width / imgWidth) << 0;\n        } else if (height && !width) {\n            width = (imgWidth * height / imgHeight) << 0;\n        } else {\n            width = imgWidth;\n            height = imgHeight;\n        }\n        if (maxWidth && width > maxWidth) {\n            width = maxWidth;\n            height = (imgHeight * width / imgWidth) << 0;\n        }\n        if (maxHeight && height > maxHeight) {\n            height = maxHeight;\n            width = (imgWidth * height / imgHeight) << 0;\n        }\n\n        opt = { width: width, height: height },\n        qq.each(options, function(optionsKey, optionsValue) {\n            opt[optionsKey] = optionsValue;\n        });\n\n        if (tagName === \"img\") {\n            (function() {\n                var oldTargetSrc = target.src;\n                renderImageToDataURL(self.srcImage, self.blob, opt, doSquash)\n                    .then(function(dataUri) {\n                        target.src = dataUri;\n                        oldTargetSrc === target.src && target.onload();\n                    });\n            }());\n        } else if (tagName === \"canvas\") {\n            renderImageToCanvas(this.srcImage, this.blob, target, opt, doSquash);\n        }\n        if (typeof this.onrender === \"function\") {\n            this.onrender(target);\n        }\n    };\n\n    qq.MegaPixImage = MegaPixImage;\n})();\n","/*globals qq */\n/**\n * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.\n *\n * @constructor\n */\nqq.ImageGenerator = function(log) {\n    \"use strict\";\n\n    function isImg(el) {\n        return el.tagName.toLowerCase() === \"img\";\n    }\n\n    function isCanvas(el) {\n        return el.tagName.toLowerCase() === \"canvas\";\n    }\n\n    function isImgCorsSupported() {\n        return new Image().crossOrigin !== undefined;\n    }\n\n    function isCanvasSupported() {\n        var canvas = document.createElement(\"canvas\");\n\n        return canvas.getContext && canvas.getContext(\"2d\");\n    }\n\n    // This is only meant to determine the MIME type of a renderable image file.\n    // It is used to ensure images drawn from a URL that have transparent backgrounds\n    // are rendered correctly, among other things.\n    function determineMimeOfFileName(nameWithPath) {\n        /*jshint -W015 */\n        var pathSegments = nameWithPath.split(\"/\"),\n            name = pathSegments[pathSegments.length - 1].split(\"?\")[0],\n            extension = qq.getExtension(name);\n\n        extension = extension && extension.toLowerCase();\n\n        switch (extension) {\n            case \"jpeg\":\n            case \"jpg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"bmp\":\n                return \"image/bmp\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"tiff\":\n            case \"tif\":\n                return \"image/tiff\";\n        }\n    }\n\n    // This will likely not work correctly in IE8 and older.\n    // It's only used as part of a formula to determine\n    // if a canvas can be used to scale a server-hosted thumbnail.\n    // If canvas isn't supported by the UA (IE8 and older)\n    // this method should not even be called.\n    function isCrossOrigin(url) {\n        var targetAnchor = document.createElement(\"a\"),\n            targetProtocol, targetHostname, targetPort;\n\n        targetAnchor.href = url;\n\n        targetProtocol = targetAnchor.protocol;\n        targetPort = targetAnchor.port;\n        targetHostname = targetAnchor.hostname;\n\n        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {\n            return true;\n        }\n\n        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {\n            return true;\n        }\n\n        // IE doesn't take ports into consideration when determining if two endpoints are same origin.\n        if (targetPort !== window.location.port && !qq.ie()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function registerImgLoadListeners(img, promise) {\n        img.onload = function() {\n            img.onload = null;\n            img.onerror = null;\n            promise.success(img);\n        };\n\n        img.onerror = function() {\n            img.onload = null;\n            img.onerror = null;\n            log(\"Problem drawing thumbnail!\", \"error\");\n            promise.failure(img, \"Problem drawing thumbnail!\");\n        };\n    }\n\n    function registerCanvasDrawImageListener(canvas, promise) {\n        // The image is drawn on the canvas by a third-party library,\n        // and we want to know when this is completed.  Since the library\n        // may invoke drawImage many times in a loop, we need to be called\n        // back when the image is fully rendered.  So, we are expecting the\n        // code that draws this image to follow a convention that involves a\n        // function attached to the canvas instance be invoked when it is done.\n        canvas.qqImageRendered = function() {\n            promise.success(canvas);\n        };\n    }\n\n    // Fulfills a `qq.Promise` when an image has been drawn onto the target,\n    // whether that is a <canvas> or an <img>.  The attempt is considered a\n    // failure if the target is not an <img> or a <canvas>, or if the drawing\n    // attempt was not successful.\n    function registerThumbnailRenderedListener(imgOrCanvas, promise) {\n        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);\n\n        if (isImg(imgOrCanvas)) {\n            registerImgLoadListeners(imgOrCanvas, promise);\n        }\n        else if (isCanvas(imgOrCanvas)) {\n            registerCanvasDrawImageListener(imgOrCanvas, promise);\n        }\n        else {\n            promise.failure(imgOrCanvas);\n            log(qq.format(\"Element container of type {} is not supported!\", imgOrCanvas.tagName), \"error\");\n        }\n\n        return registered;\n    }\n\n    // Draw a preview iff the current UA can natively display it.\n    // Also rotate the image if necessary.\n    function draw(fileOrBlob, container, options) {\n        var drawPreview = new qq.Promise(),\n            identifier = new qq.Identify(fileOrBlob, log),\n            maxSize = options.maxSize,\n            // jshint eqnull:true\n            orient = options.orient == null ? true : options.orient,\n            megapixErrorHandler = function() {\n                container.onerror = null;\n                container.onload = null;\n                log(\"Could not render preview, file may be too large!\", \"error\");\n                drawPreview.failure(container, \"Browser cannot render image!\");\n            };\n\n        identifier.isPreviewable().then(\n            function(mime) {\n                // If options explicitly specify that Orientation is not desired,\n                // replace the orient task with a dummy promise that \"succeeds\" immediately.\n                var dummyExif = {\n                        parse: function() {\n                            return new qq.Promise().success();\n                        }\n                    },\n                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,\n                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);\n\n                if (registerThumbnailRenderedListener(container, drawPreview)) {\n                    exif.parse().then(\n                        function(exif) {\n                            var orientation = exif && exif.Orientation;\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                orientation: orientation,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        },\n\n                        function(failureMsg) {\n                            log(qq.format(\"EXIF data could not be parsed ({}).  Assuming orientation = 1.\", failureMsg));\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        }\n                    );\n                }\n            },\n\n            function() {\n                log(\"Not previewable\");\n                drawPreview.failure(container, \"Not previewable\");\n            }\n        );\n\n        return drawPreview;\n    }\n\n    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize, customResizeFunction) {\n        var tempImg = new Image(),\n            tempImgRender = new qq.Promise();\n\n        registerThumbnailRenderedListener(tempImg, tempImgRender);\n\n        if (isCrossOrigin(url)) {\n            tempImg.crossOrigin = \"anonymous\";\n        }\n\n        tempImg.src = url;\n\n        tempImgRender.then(\n            function rendered() {\n                registerThumbnailRenderedListener(canvasOrImg, draw);\n\n                var mpImg = new qq.MegaPixImage(tempImg);\n                mpImg.render(canvasOrImg, {\n                    maxWidth: maxSize,\n                    maxHeight: maxSize,\n                    mime: determineMimeOfFileName(url),\n                    resize: customResizeFunction\n                });\n            },\n\n            draw.failure\n        );\n    }\n\n    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {\n        registerThumbnailRenderedListener(img, draw);\n        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images\n        // that must drop back to CSS is known and exploited by the templating module.\n        // In this module, we pre-render \"waiting\" thumbs for all files immediately after they\n        // are submitted, and we must be sure to pass any style associated with the \"waiting\" preview.\n        qq(img).css({\n            maxWidth: maxSize + \"px\",\n            maxHeight: maxSize + \"px\"\n        });\n\n        img.src = url;\n    }\n\n    // Draw a (server-hosted) thumbnail given a URL.\n    // This will optionally scale the thumbnail as well.\n    // It attempts to use <canvas> to scale, but will fall back\n    // to max-width and max-height style properties if the UA\n    // doesn't support canvas or if the images is cross-domain and\n    // the UA doesn't support the crossorigin attribute on img tags,\n    // which is required to scale a cross-origin image using <canvas> &\n    // then export it back to an <img>.\n    function drawFromUrl(url, container, options) {\n        var draw = new qq.Promise(),\n            scale = options.scale,\n            maxSize = scale ? options.maxSize : null;\n\n        // container is an img, scaling needed\n        if (scale && isImg(container)) {\n            // Iff canvas is available in this UA, try to use it for scaling.\n            // Otherwise, fall back to CSS scaling\n            if (isCanvasSupported()) {\n                // Attempt to use <canvas> for image scaling,\n                // but we must fall back to scaling via CSS/styles\n                // if this is a cross-origin image and the UA doesn't support <img> CORS.\n                if (isCrossOrigin(url) && !isImgCorsSupported()) {\n                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n                }\n                else {\n                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n                }\n            }\n            else {\n                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n            }\n        }\n        // container is a canvas, scaling optional\n        else if (isCanvas(container)) {\n            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n        }\n        // container is an img & no scaling: just set the src attr to the passed url\n        else if (registerThumbnailRenderedListener(container, draw)) {\n            container.src = url;\n        }\n\n        return draw;\n    }\n\n    qq.extend(this, {\n        /**\n         * Generate a thumbnail.  Depending on the arguments, this may either result in\n         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated\n         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).\n         *\n         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image\n         * @param container <img> or <canvas> to contain the preview\n         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), resize` (bool - default true), and `customResizeFunction`.\n         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed\n         */\n        generate: function(fileBlobOrUrl, container, options) {\n            if (qq.isString(fileBlobOrUrl)) {\n                log(\"Attempting to update thumbnail based on server response.\");\n                return drawFromUrl(fileBlobOrUrl, container, options || {});\n            }\n            else {\n                log(\"Attempting to draw client-side image preview.\");\n                return draw(fileBlobOrUrl, container, options || {});\n            }\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.isImg = isImg;\n    this._testing.isCanvas = isCanvas;\n    this._testing.isCrossOrigin = isCrossOrigin;\n    this._testing.determineMimeOfFileName = determineMimeOfFileName;\n    /*</testing>*/\n};\n","/*globals qq */\n/**\n * EXIF image data parser.  Currently only parses the Orientation tag value,\n * but this may be expanded to other tags in the future.\n *\n * @param fileOrBlob Attempt to parse EXIF data in this `Blob`\n * @constructor\n */\nqq.Exif = function(fileOrBlob, log) {\n    \"use strict\";\n\n    // Orientation is the only tag parsed here at this time.\n    var TAG_IDS = [274],\n        TAG_INFO = {\n            274: {\n                name: \"Orientation\",\n                bytes: 2\n            }\n        };\n\n    // Convert a little endian (hex string) to big endian (decimal).\n    function parseLittleEndian(hex) {\n        var result = 0,\n            pow = 0;\n\n        while (hex.length > 0) {\n            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);\n            hex = hex.substring(2, hex.length);\n            pow += 8;\n        }\n\n        return result;\n    }\n\n    // Find the byte offset, of Application Segment 1 (EXIF).\n    // External callers need not supply any arguments.\n    function seekToApp1(offset, promise) {\n        var theOffset = offset,\n            thePromise = promise;\n        if (theOffset === undefined) {\n            theOffset = 2;\n            thePromise = new qq.Promise();\n        }\n\n        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {\n            var match = /^ffe([0-9])/.exec(hex),\n                segmentLength;\n\n            if (match) {\n                if (match[1] !== \"1\") {\n                    segmentLength = parseInt(hex.slice(4, 8), 16);\n                    seekToApp1(theOffset + segmentLength + 2, thePromise);\n                }\n                else {\n                    thePromise.success(theOffset);\n                }\n            }\n            else {\n                thePromise.failure(\"No EXIF header to be found!\");\n            }\n        });\n\n        return thePromise;\n    }\n\n    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.\n    function getApp1Offset() {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {\n            if (hex.indexOf(\"ffd8\") !== 0) {\n                promise.failure(\"Not a valid JPEG!\");\n            }\n            else {\n                seekToApp1().then(function(offset) {\n                    promise.success(offset);\n                },\n                function(error) {\n                    promise.failure(error);\n                });\n            }\n        });\n\n        return promise;\n    }\n\n    // Determine the byte ordering of the EXIF header.\n    function isLittleEndian(app1Start) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {\n            promise.success(hex === \"4949\");\n        });\n\n        return promise;\n    }\n\n    // Determine the number of directory entries in the EXIF header.\n    function getDirEntryCount(app1Start, littleEndian) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {\n            if (littleEndian) {\n                return promise.success(parseLittleEndian(hex));\n            }\n            else {\n                promise.success(parseInt(hex, 16));\n            }\n        });\n\n        return promise;\n    }\n\n    // Get the IFD portion of the EXIF header as a hex string.\n    function getIfd(app1Start, dirEntries) {\n        var offset = app1Start + 20,\n            bytes = dirEntries * 12;\n\n        return qq.readBlobToHex(fileOrBlob, offset, bytes);\n    }\n\n    // Obtain an array of all directory entries (as hex strings) in the EXIF header.\n    function getDirEntries(ifdHex) {\n        var entries = [],\n            offset = 0;\n\n        while (offset + 24 <= ifdHex.length) {\n            entries.push(ifdHex.slice(offset, offset + 24));\n            offset += 24;\n        }\n\n        return entries;\n    }\n\n    // Obtain values for all relevant tags and return them.\n    function getTagValues(littleEndian, dirEntries) {\n        var TAG_VAL_OFFSET = 16,\n            tagsToFind = qq.extend([], TAG_IDS),\n            vals = {};\n\n        qq.each(dirEntries, function(idx, entry) {\n            var idHex = entry.slice(0, 4),\n                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),\n                tagsToFindIdx = tagsToFind.indexOf(id),\n                tagValHex, tagName, tagValLength;\n\n            if (tagsToFindIdx >= 0) {\n                tagName = TAG_INFO[id].name;\n                tagValLength = TAG_INFO[id].bytes;\n                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));\n                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);\n\n                tagsToFind.splice(tagsToFindIdx, 1);\n            }\n\n            if (tagsToFind.length === 0) {\n                return false;\n            }\n        });\n\n        return vals;\n    }\n\n    qq.extend(this, {\n        /**\n         * Attempt to parse the EXIF header for the `Blob` associated with this instance.\n         *\n         * @returns {qq.Promise} To be fulfilled when the parsing is complete.\n         * If successful, the parsed EXIF header as an object will be included.\n         */\n        parse: function() {\n            var parser = new qq.Promise(),\n                onParseFailure = function(message) {\n                    log(qq.format(\"EXIF header parse failed: '{}' \", message));\n                    parser.failure(message);\n                };\n\n            getApp1Offset().then(function(app1Offset) {\n                log(qq.format(\"Moving forward with EXIF header parsing for '{}'\", fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name));\n\n                isLittleEndian(app1Offset).then(function(littleEndian) {\n\n                    log(qq.format(\"EXIF Byte order is {} endian\", littleEndian ? \"little\" : \"big\"));\n\n                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {\n\n                        log(qq.format(\"Found {} APP1 directory entries\", dirEntryCount));\n\n                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {\n                            var dirEntries = getDirEntries(ifdHex),\n                                tagValues = getTagValues(littleEndian, dirEntries);\n\n                            log(\"Successfully parsed some EXIF tags\");\n\n                            parser.success(tagValues);\n                        }, onParseFailure);\n                    }, onParseFailure);\n                }, onParseFailure);\n            }, onParseFailure);\n\n            return parser;\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.parseLittleEndian = parseLittleEndian;\n    /*</testing>*/\n};\n","/*globals qq */\nqq.Identify = function(fileOrBlob, log) {\n    \"use strict\";\n\n    function isIdentifiable(magicBytes, questionableBytes) {\n        var identifiable = false,\n            magicBytesEntries = [].concat(magicBytes);\n\n        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {\n            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {\n                identifiable = true;\n                return false;\n            }\n        });\n\n        return identifiable;\n    }\n\n    qq.extend(this, {\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic\n         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the\n         * file, we will examine the blob's type attribute to save CPU cycles.\n         *\n         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.\n         * If successful, the MIME string is passed to the success handler.\n         */\n        isPreviewable: function() {\n            var self = this,\n                identifier = new qq.Promise(),\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            log(qq.format(\"Attempting to determine if {} can be rendered in this browser\", name));\n\n            log(\"First pass: check type attribute of blob object.\");\n\n            if (this.isPreviewableSync()) {\n                log(\"Second pass: check for magic bytes in file header.\");\n\n                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {\n                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {\n                        if (isIdentifiable(bytes, hex)) {\n                            // Safari is the only supported browser that can deal with TIFFs natively,\n                            // so, if this is a TIFF and the UA isn't Safari, declare this file \"non-previewable\".\n                            if (mime !== \"image/tiff\" || qq.supportedFeatures.tiffPreviews) {\n                                previewable = true;\n                                identifier.success(mime);\n                            }\n\n                            return false;\n                        }\n                    });\n\n                    log(qq.format(\"'{}' is {} able to be rendered in this browser\", name, previewable ? \"\" : \"NOT\"));\n\n                    if (!previewable) {\n                        identifier.failure();\n                    }\n                },\n                function() {\n                    log(\"Error reading file w/ name '\" + name + \"'.  Not able to be rendered in this browser.\");\n                    identifier.failure();\n                });\n            }\n            else {\n                identifier.failure();\n            }\n\n            return identifier;\n        },\n\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the\n         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation\n         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the\n         * file's magic bytes.\n         *\n         * @returns {Boolean} true if the blob can be rendered in the current browser\n         */\n        isPreviewableSync: function() {\n            var fileMime = fileOrBlob.type,\n                // Assumption: This will only ever be executed in browsers that support `Object.keys`.\n                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            if (isRecognizedImage) {\n                if (fileMime === \"image/tiff\") {\n                    previewable = qq.supportedFeatures.tiffPreviews;\n                }\n                else {\n                    previewable = true;\n                }\n            }\n\n            !previewable && log(name + \" is not previewable in this browser per the blob's type attr\");\n\n            return previewable;\n        }\n    });\n};\n\nqq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {\n    \"image/jpeg\": \"ffd8ff\",\n    \"image/gif\": \"474946\",\n    \"image/png\": \"89504e\",\n    \"image/bmp\": \"424d\",\n    \"image/tiff\": [\"49492a00\", \"4d4d002a\"]\n};\n","/*globals qq*/\n/**\n * Attempts to validate an image, wherever possible.\n *\n * @param blob File or Blob representing a user-selecting image.\n * @param log Uses this to post log messages to the console.\n * @constructor\n */\nqq.ImageValidation = function(blob, log) {\n    \"use strict\";\n\n    /**\n     * @param limits Object with possible image-related limits to enforce.\n     * @returns {boolean} true if at least one of the limits has a non-zero value\n     */\n    function hasNonZeroLimits(limits) {\n        var atLeastOne = false;\n\n        qq.each(limits, function(limit, value) {\n            if (value > 0) {\n                atLeastOne = true;\n                return false;\n            }\n        });\n\n        return atLeastOne;\n    }\n\n    /**\n     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.\n     * Otherwise, `success` is called on the returned promise with an object containing\n     * `width` and `height` properties.\n     */\n    function getWidthHeight() {\n        var sizeDetermination = new qq.Promise();\n\n        new qq.Identify(blob, log).isPreviewable().then(function() {\n            var image = new Image(),\n                url = window.URL && window.URL.createObjectURL ? window.URL :\n                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\n                      null;\n\n            if (url) {\n                image.onerror = function() {\n                    log(\"Cannot determine dimensions for image.  May be too large.\", \"error\");\n                    sizeDetermination.failure();\n                };\n\n                image.onload = function() {\n                    sizeDetermination.success({\n                        width: this.width,\n                        height: this.height\n                    });\n                };\n\n                image.src = url.createObjectURL(blob);\n            }\n            else {\n                log(\"No createObjectURL function available to generate image URL!\", \"error\");\n                sizeDetermination.failure();\n            }\n        }, sizeDetermination.failure);\n\n        return sizeDetermination;\n    }\n\n    /**\n     *\n     * @param limits Object with possible image-related limits to enforce.\n     * @param dimensions Object containing `width` & `height` properties for the image to test.\n     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.\n     */\n    function getFailingLimit(limits, dimensions) {\n        var failingLimit;\n\n        qq.each(limits, function(limitName, limitValue) {\n            if (limitValue > 0) {\n                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),\n                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),\n                    actualValue = dimensions[dimensionPropName];\n\n                /*jshint -W015*/\n                switch (limitMatcher[1]) {\n                    case \"min\":\n                        if (actualValue < limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                    case \"max\":\n                        if (actualValue > limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                }\n            }\n        });\n\n        return failingLimit;\n    }\n\n    /**\n     * Validate the associated blob.\n     *\n     * @param limits\n     * @returns {qq.Promise} `success` is called on the promise is the image is valid or\n     * if the blob is not an image, or if the image is not verifiable.\n     * Otherwise, `failure` with the name of the failing limit.\n     */\n    this.validate = function(limits) {\n        var validationEffort = new qq.Promise();\n\n        log(\"Attempting to validate image.\");\n\n        if (hasNonZeroLimits(limits)) {\n            getWidthHeight().then(function(dimensions) {\n                var failingLimit = getFailingLimit(limits, dimensions);\n\n                if (failingLimit) {\n                    validationEffort.failure(failingLimit);\n                }\n                else {\n                    validationEffort.success();\n                }\n            }, validationEffort.success);\n        }\n        else {\n            validationEffort.success();\n        }\n\n        return validationEffort;\n    };\n};\n","/* globals qq */\n/**\n * Module used to control populating the initial list of files.\n *\n * @constructor\n */\nqq.Session = function(spec) {\n    \"use strict\";\n\n    var options = {\n        endpoint: null,\n        params: {},\n        customHeaders: {},\n        cors: {},\n        addFileRecord: function(sessionData) {},\n        log: function(message, level) {}\n    };\n\n    qq.extend(options, spec, true);\n\n    function isJsonResponseValid(response) {\n        if (qq.isArray(response)) {\n            return true;\n        }\n\n        options.log(\"Session response is not an array.\", \"error\");\n    }\n\n    function handleFileItems(fileItems, success, xhrOrXdr, promise) {\n        var someItemsIgnored = false;\n\n        success = success && isJsonResponseValid(fileItems);\n\n        if (success) {\n            qq.each(fileItems, function(idx, fileItem) {\n                /* jshint eqnull:true */\n                if (fileItem.uuid == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid UUID - ignoring.\", idx), \"error\");\n                }\n                else if (fileItem.name == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid name - ignoring.\", idx), \"error\");\n                }\n                else {\n                    try {\n                        options.addFileRecord(fileItem);\n                        return true;\n                    }\n                    catch (err) {\n                        someItemsIgnored = true;\n                        options.log(err.message, \"error\");\n                    }\n                }\n\n                return false;\n            });\n        }\n\n        promise[success && !someItemsIgnored ? \"success\" : \"failure\"](fileItems, xhrOrXdr);\n    }\n\n    // Initiate a call to the server that will be used to populate the initial file list.\n    // Returns a `qq.Promise`.\n    this.refresh = function() {\n        /*jshint indent:false */\n        var refreshEffort = new qq.Promise(),\n            refreshCompleteCallback = function(response, success, xhrOrXdr) {\n                handleFileItems(response, success, xhrOrXdr, refreshEffort);\n            },\n            requesterOptions = qq.extend({}, options),\n            requester = new qq.SessionAjaxRequester(\n                qq.extend(requesterOptions, {onComplete: refreshCompleteCallback})\n            );\n\n        requester.queryServer();\n\n        return refreshEffort;\n    };\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Thin module used to send GET requests to the server, expecting information about session\n * data used to initialize an uploader instance.\n *\n * @param spec Various options used to influence the associated request.\n * @constructor\n */\nqq.SessionAjaxRequester = function(spec) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            endpoint: null,\n            customHeaders: {},\n            params: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            onComplete: function(response, success, xhrOrXdr) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, spec);\n\n    function onComplete(id, xhrOrXdr, isError) {\n        var response = null;\n\n        /* jshint eqnull:true */\n        if (xhrOrXdr.responseText != null) {\n            try {\n                response = qq.parseJson(xhrOrXdr.responseText);\n            }\n            catch (err) {\n                options.log(\"Problem parsing session response: \" + err.message, \"error\");\n                isError = true;\n            }\n        }\n\n        options.onComplete(response, !isError, xhrOrXdr);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: onComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        queryServer: function() {\n            var params = qq.extend({}, options.params);\n\n            options.log(\"Session query request.\");\n\n            requester.initTransport(\"sessionRefresh\")\n                .withParams(params)\n                .withCacheBuster()\n                .send();\n        }\n    });\n};\n","/* globals qq, ExifRestorer */\n/**\n * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.\n * Scaled images are generated and converted to blobs on-demand.\n * Multiple scaled images per reference image with varying sizes and other properties are supported.\n *\n * @param spec Information about the scaled images to generate.\n * @param log Logger instance\n * @constructor\n */\nqq.Scaler = function(spec, log) {\n    \"use strict\";\n\n    var self = this,\n        customResizeFunction = spec.customResizer,\n        includeOriginal = spec.sendOriginal,\n        orient = spec.orient,\n        defaultType = spec.defaultType,\n        defaultQuality = spec.defaultQuality / 100,\n        failedToScaleText = spec.failureText,\n        includeExif = spec.includeExif,\n        sizes = this._getSortedSizes(spec.sizes);\n\n    // Revealed API for instances of this module\n    qq.extend(this, {\n        // If no targeted sizes have been declared or if this browser doesn't support\n        // client-side image preview generation, there is no scaling to do.\n        enabled: qq.supportedFeatures.scaling && sizes.length > 0,\n\n        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {\n            var self = this,\n                records = [],\n                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,\n                identifier = new qq.Identify(originalBlob, log);\n\n            // If the reference file cannot be rendered natively, we can't create scaled versions.\n            if (identifier.isPreviewableSync()) {\n                // Create records for each scaled version & add them to the records array, smallest first.\n                qq.each(sizes, function(idx, sizeRecord) {\n                    var outputType = self._determineOutputType({\n                        defaultType: defaultType,\n                        requestedType: sizeRecord.type,\n                        refType: originalBlob.type\n                    });\n\n                    records.push({\n                        uuid: qq.getUniqueId(),\n                        name: self._getName(originalFileName, {\n                            name: sizeRecord.name,\n                            type: outputType,\n                            refType: originalBlob.type\n                        }),\n                        blob: new qq.BlobProxy(originalBlob,\n                        qq.bind(self._generateScaledImage, self, {\n                            customResizeFunction: customResizeFunction,\n                            maxSize: sizeRecord.maxSize,\n                            orient: orient,\n                            type: outputType,\n                            quality: defaultQuality,\n                            failedText: failedToScaleText,\n                            includeExif: includeExif,\n                            log: log\n                        }))\n                    });\n                });\n\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: includeOriginal ? originalBlob : null\n                });\n            }\n            else {\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: originalBlob\n                });\n            }\n\n            return records;\n        },\n\n        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {\n            var self = this,\n                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),\n                scaledIds = [],\n                originalId = null,\n                addFileToHandler = api.addFileToHandler,\n                uploadData = api.uploadData,\n                paramsStore = api.paramsStore,\n                proxyGroupId = qq.getUniqueId();\n\n            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {\n                var blobSize = record.size,\n                    id;\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    blobSize = -1;\n                }\n\n                id = uploadData.addFile({\n                    uuid: record.uuid,\n                    name: record.name,\n                    size: blobSize,\n                    batchId: batchId,\n                    proxyGroupId: proxyGroupId\n                });\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    scaledIds.push(id);\n                }\n                else {\n                    originalId = id;\n                }\n\n                if (record.blob) {\n                    addFileToHandler(id, record.blob);\n                    fileList.push({id: id, file: record.blob});\n                }\n                else {\n                    uploadData.setStatus(id, qq.status.REJECTED);\n                }\n            });\n\n            // If we are potentially uploading an original file and some scaled versions,\n            // ensure the scaled versions include reference's to the parent's UUID and size\n            // in their associated upload requests.\n            if (originalId !== null) {\n                qq.each(scaledIds, function(idx, scaledId) {\n                    var params = {\n                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,\n                        qqparentsize: uploadData.retrieve({id: originalId}).size\n                    };\n\n                    // Make sure the UUID for each scaled image is sent with the upload request,\n                    // to be consistent (since we may need to ensure it is sent for the original file as well).\n                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;\n\n                    uploadData.setParentId(scaledId, originalId);\n                    paramsStore.addReadOnly(scaledId, params);\n                });\n\n                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request\n                // parameter as well.\n                if (scaledIds.length) {\n                    (function() {\n                        var param = {};\n                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;\n                        paramsStore.addReadOnly(originalId, param);\n                    }());\n                }\n            }\n        }\n    });\n};\n\nqq.extend(qq.Scaler.prototype, {\n    scaleImage: function(id, specs, api) {\n        \"use strict\";\n\n        if (!qq.supportedFeatures.scaling) {\n            throw new qq.Error(\"Scaling is not supported in this browser!\");\n        }\n\n        var scalingEffort = new qq.Promise(),\n            log = api.log,\n            file = api.getFile(id),\n            uploadData = api.uploadData.retrieve({id: id}),\n            name = uploadData && uploadData.name,\n            uuid = uploadData && uploadData.uuid,\n            scalingOptions = {\n                customResizer: specs.customResizer,\n                sendOriginal: false,\n                orient: specs.orient,\n                defaultType: specs.type || null,\n                defaultQuality: specs.quality,\n                failedToScaleText: \"Unable to scale\",\n                sizes: [{name: \"\", maxSize: specs.maxSize}]\n            },\n            scaler = new qq.Scaler(scalingOptions, log);\n\n        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {\n            scalingEffort.failure();\n\n            log(\"Could not generate requested scaled image for \" + id + \".  \" +\n                \"Scaling is either not possible in this browser, or the file could not be located.\", \"error\");\n        }\n        else {\n            (qq.bind(function() {\n                // Assumption: There will never be more than one record\n                var record = scaler.getFileRecords(uuid, name, file)[0];\n\n                if (record && record.blob instanceof qq.BlobProxy) {\n                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);\n                }\n                else {\n                    log(id + \" is not a scalable image!\", \"error\");\n                    scalingEffort.failure();\n                }\n            }, this)());\n        }\n\n        return scalingEffort;\n    },\n\n    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.\n    // image/jpeg and image/png are the only safe choices at this time.\n    _determineOutputType: function(spec) {\n        \"use strict\";\n\n        var requestedType = spec.requestedType,\n            defaultType = spec.defaultType,\n            referenceType = spec.refType;\n\n        // If a default type and requested type have not been specified, this should be a\n        // JPEG if the original type is a JPEG, otherwise, a PNG.\n        if (!defaultType && !requestedType) {\n            if (referenceType !== \"image/jpeg\") {\n                return \"image/png\";\n            }\n            return referenceType;\n        }\n\n        // A specified default type is used when a requested type is not specified.\n        if (!requestedType) {\n            return defaultType;\n        }\n\n        // If requested type is specified, use it, as long as this recognized type is supported by the current UA\n        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {\n            if (requestedType === \"image/tiff\") {\n                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;\n            }\n\n            return requestedType;\n        }\n\n        return defaultType;\n    },\n\n    // Get a file name for a generated scaled file record, based on the provided scaled image description\n    _getName: function(originalName, scaledVersionProperties) {\n        \"use strict\";\n\n        var startOfExt = originalName.lastIndexOf(\".\"),\n            versionType = scaledVersionProperties.type || \"image/png\",\n            referenceType = scaledVersionProperties.refType,\n            scaledName = \"\",\n            scaledExt = qq.getExtension(originalName),\n            nameAppendage = \"\";\n\n        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {\n            nameAppendage = \" (\" + scaledVersionProperties.name + \")\";\n        }\n\n        if (startOfExt >= 0) {\n            scaledName = originalName.substr(0, startOfExt);\n\n            if (referenceType !== versionType) {\n                scaledExt = versionType.split(\"/\")[1];\n            }\n\n            scaledName += nameAppendage + \".\" + scaledExt;\n        }\n        else {\n            scaledName = originalName + nameAppendage;\n        }\n\n        return scaledName;\n    },\n\n    // We want the smallest scaled file to be uploaded first\n    _getSortedSizes: function(sizes) {\n        \"use strict\";\n\n        sizes = qq.extend([], sizes);\n\n        return sizes.sort(function(a, b) {\n            if (a.maxSize > b.maxSize) {\n                return 1;\n            }\n            if (a.maxSize < b.maxSize) {\n                return -1;\n            }\n            return 0;\n        });\n    },\n\n    _generateScaledImage: function(spec, sourceFile) {\n        \"use strict\";\n\n        var self = this,\n            customResizeFunction = spec.customResizeFunction,\n            log = spec.log,\n            maxSize = spec.maxSize,\n            orient = spec.orient,\n            type = spec.type,\n            quality = spec.quality,\n            failedText = spec.failedText,\n            includeExif = spec.includeExif && sourceFile.type === \"image/jpeg\" && type === \"image/jpeg\",\n            scalingEffort = new qq.Promise(),\n            imageGenerator = new qq.ImageGenerator(log),\n            canvas = document.createElement(\"canvas\");\n\n        log(\"Attempting to generate scaled version for \" + sourceFile.name);\n\n        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient, customResizeFunction: customResizeFunction}).then(function() {\n            var scaledImageDataUri = canvas.toDataURL(type, quality),\n                signalSuccess = function() {\n                    log(\"Success generating scaled version for \" + sourceFile.name);\n                    var blob = qq.dataUriToBlob(scaledImageDataUri);\n                    scalingEffort.success(blob);\n                };\n\n            if (includeExif) {\n                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {\n                    scaledImageDataUri = scaledImageDataUriWithExif;\n                    signalSuccess();\n                },\n                function() {\n                    log(\"Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.\", \"error\");\n                    signalSuccess();\n                });\n            }\n            else {\n                signalSuccess();\n            }\n        }, function() {\n            log(\"Failed attempt to generate scaled version for \" + sourceFile.name, \"error\");\n            scalingEffort.failure(failedText);\n        });\n\n        return scalingEffort;\n    },\n\n    // Attempt to insert the original image's EXIF header into a scaled version.\n    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {\n        \"use strict\";\n\n        var reader = new FileReader(),\n            insertionEffort = new qq.Promise(),\n            originalImageDataUri = \"\";\n\n        reader.onload = function() {\n            originalImageDataUri = reader.result;\n            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));\n        };\n\n        reader.onerror = function() {\n            log(\"Problem reading \" + originalImage.name + \" during attempt to transfer EXIF data to scaled version.\", \"error\");\n            insertionEffort.failure();\n        };\n\n        reader.readAsDataURL(originalImage);\n\n        return insertionEffort;\n    },\n\n    _dataUriToBlob: function(dataUri) {\n        \"use strict\";\n\n        var byteString, mimeString, arrayBuffer, intArray;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return this._createBlob(arrayBuffer, mimeString);\n    },\n\n    _createBlob: function(data, mime) {\n        \"use strict\";\n\n        var BlobBuilder = window.BlobBuilder ||\n                window.WebKitBlobBuilder ||\n                window.MozBlobBuilder ||\n                window.MSBlobBuilder,\n            blobBuilder = BlobBuilder && new BlobBuilder();\n\n        if (blobBuilder) {\n            blobBuilder.append(data);\n            return blobBuilder.getBlob(mime);\n        }\n        else {\n            return new Blob([data], {type: mime});\n        }\n    }\n});\n","//Based on MinifyJpeg\n//http://elicon.blog57.fc2.com/blog-entry-206.html\n\nqq.ExifRestorer = (function()\n{\n   \n\tvar ExifRestorer = {};\n\t \n    ExifRestorer.KEY_STR = \"ABCDEFGHIJKLMNOP\" +\n                         \"QRSTUVWXYZabcdef\" +\n                         \"ghijklmnopqrstuv\" +\n                         \"wxyz0123456789+/\" +\n                         \"=\";\n\n    ExifRestorer.encode64 = function(input)\n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0;\n\n        do {\n            chr1 = input[i++];\n            chr2 = input[i++];\n            chr3 = input[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n               enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n               enc4 = 64;\n            }\n\n            output = output +\n               this.KEY_STR.charAt(enc1) +\n               this.KEY_STR.charAt(enc2) +\n               this.KEY_STR.charAt(enc3) +\n               this.KEY_STR.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return output;\n    };\n    \n    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)\n    {\n        var expectedBase64Header = \"data:image/jpeg;base64,\";\n\n        if (!origFileBase64.match(expectedBase64Header))\n        {\n        \treturn resizedFileBase64;\n        }       \n        \n        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, \"\"));\n        var segments = this.slice2Segments(rawImage);\n                \n        var image = this.exifManipulation(resizedFileBase64, segments);\n        \n        return expectedBase64Header + this.encode64(image);\n        \n    };\n\n\n    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)\n    {\n            var exifArray = this.getExifArray(segments),\n                newImageArray = this.insertExif(resizedFileBase64, exifArray),\n                aBuffer = new Uint8Array(newImageArray);\n\n            return aBuffer;\n    };\n\n\n    ExifRestorer.getExifArray = function(segments)\n    {\n            var seg;\n            for (var x = 0; x < segments.length; x++)\n            {\n                seg = segments[x];\n                if (seg[0] == 255 & seg[1] == 225) //(ff e1)\n                {\n                    return seg;\n                }\n            }\n            return [];\n    };\n\n\n    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)\n    {\n            var imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\"),\n                buf = this.decode64(imageData),\n                separatePoint = buf.indexOf(255,3),\n                mae = buf.slice(0, separatePoint),\n                ato = buf.slice(separatePoint),\n                array = mae;\n\n            array = array.concat(exifArray);\n            array = array.concat(ato);\n           return array;\n    };\n\n\n    \n    ExifRestorer.slice2Segments = function(rawImageArray)\n    {\n        var head = 0,\n            segments = [];\n\n        while (1)\n        {\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)\n            {\n                head += 2;\n            }\n            else\n            {\n                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],\n                    endPoint = head + length + 2,\n                    seg = rawImageArray.slice(head, endPoint);\n                segments.push(seg);\n                head = endPoint;\n            }\n            if (head > rawImageArray.length){break;}\n        }\n\n        return segments;\n    };\n\n\n    \n    ExifRestorer.decode64 = function(input) \n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0,\n            buf = [];\n\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n        if (base64test.exec(input)) {\n            throw new Error(\"There were invalid base64 characters in the input text.  \" +\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\");\n        }\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        do {\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            buf.push(chr1);\n\n            if (enc3 != 64) {\n               buf.push(chr2);\n            }\n            if (enc4 != 64) {\n               buf.push(chr3);\n            }\n\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n\n        } while (i < input.length);\n\n        return buf;\n    };\n\n    \n    return ExifRestorer;\n})();\n","/* globals qq */\n/**\n * Keeps a running tally of total upload progress for a batch of files.\n *\n * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.\n * @param getSize Function that returns the size of a file given its ID\n * @constructor\n */\nqq.TotalProgress = function(callback, getSize) {\n    \"use strict\";\n\n    var perFileProgress = {},\n        totalLoaded = 0,\n        totalSize = 0,\n\n        lastLoadedSent = -1,\n        lastTotalSent = -1,\n        callbackProxy = function(loaded, total) {\n            if (loaded !== lastLoadedSent || total !== lastTotalSent) {\n                callback(loaded, total);\n            }\n\n            lastLoadedSent = loaded;\n            lastTotalSent = total;\n        },\n\n        /**\n         * @param failed Array of file IDs that have failed\n         * @param retryable Array of file IDs that are retryable\n         * @returns true if none of the failed files are eligible for retry\n         */\n        noRetryableFiles = function(failed, retryable) {\n            var none = true;\n\n            qq.each(failed, function(idx, failedId) {\n                if (qq.indexOf(retryable, failedId) >= 0) {\n                    none = false;\n                    return false;\n                }\n            });\n\n            return none;\n        },\n\n        onCancel = function(id) {\n            updateTotalProgress(id, -1, -1);\n            delete perFileProgress[id];\n        },\n\n        onAllComplete = function(successful, failed, retryable) {\n            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {\n                callbackProxy(totalSize, totalSize);\n                this.reset();\n            }\n        },\n\n        onNew = function(id) {\n            var size = getSize(id);\n\n            // We might not know the size yet, such as for blob proxies\n            if (size > 0) {\n                updateTotalProgress(id, 0, size);\n                perFileProgress[id] = {loaded: 0, total: size};\n            }\n        },\n\n        /**\n         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may\n         * be appropriate to re-calculate and disseminate this data.\n         *\n         * @param id ID of a file that has changed in some important way\n         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations\n         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations\n         */\n        updateTotalProgress = function(id, newLoaded, newTotal) {\n            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,\n                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;\n\n            if (newLoaded === -1 && newTotal === -1) {\n                totalLoaded -= oldLoaded;\n                totalSize -= oldTotal;\n            }\n            else {\n                if (newLoaded) {\n                    totalLoaded += newLoaded - oldLoaded;\n                }\n                if (newTotal) {\n                    totalSize += newTotal - oldTotal;\n                }\n            }\n\n            callbackProxy(totalLoaded, totalSize);\n        };\n\n    qq.extend(this, {\n        // Called when a batch of files has completed uploading.\n        onAllComplete: onAllComplete,\n\n        // Called when the status of a file has changed.\n        onStatusChange: function(id, oldStatus, newStatus) {\n            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {\n                onCancel(id);\n            }\n            else if (newStatus === qq.status.SUBMITTING) {\n                onNew(id);\n            }\n        },\n\n        // Called whenever the upload progress of an individual file has changed.\n        onIndividualProgress: function(id, loaded, total) {\n            updateTotalProgress(id, loaded, total);\n            perFileProgress[id] = {loaded: loaded, total: total};\n        },\n\n        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.\n        onNewSize: function(id) {\n            onNew(id);\n        },\n\n        reset: function() {\n            perFileProgress = {};\n            totalLoaded = 0;\n            totalSize = 0;\n        }\n    });\n};\n","/*globals qq*/\nqq.PasteSupport = function(o) {\n    \"use strict\";\n\n    var options, detachPasteHandler;\n\n    options = {\n        targetElement: null,\n        callbacks: {\n            log: function(message, level) {},\n            pasteReceived: function(blob) {}\n        }\n    };\n\n    function isImage(item) {\n        return item.type &&\n            item.type.indexOf(\"image/\") === 0;\n    }\n\n    function registerPasteHandler() {\n        detachPasteHandler = qq(options.targetElement).attach(\"paste\", function(event) {\n            var clipboardData = event.clipboardData;\n\n            if (clipboardData) {\n                qq.each(clipboardData.items, function(idx, item) {\n                    if (isImage(item)) {\n                        var blob = item.getAsFile();\n                        options.callbacks.pasteReceived(blob);\n                    }\n                });\n            }\n        });\n    }\n\n    function unregisterPasteHandler() {\n        if (detachPasteHandler) {\n            detachPasteHandler();\n        }\n    }\n\n    qq.extend(options, o);\n    registerPasteHandler();\n\n    qq.extend(this, {\n        reset: function() {\n            unregisterPasteHandler();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Module that handles support for existing forms.\n *\n * @param options Options passed from the integrator-supplied options related to form support.\n * @param startUpload Callback to invoke when files \"stored\" should be uploaded.\n * @param log Proxy for the logger\n * @constructor\n */\nqq.FormSupport = function(options, startUpload, log) {\n    \"use strict\";\n    var self  = this,\n        interceptSubmit = options.interceptSubmit,\n        formEl = options.element,\n        autoUpload = options.autoUpload;\n\n    // Available on the public API associated with this module.\n    qq.extend(this, {\n        // To be used by the caller to determine if the endpoint will be determined by some processing\n        // that occurs in this module, such as if the form has an action attribute.\n        // Ignore if `attachToForm === false`.\n        newEndpoint: null,\n\n        // To be used by the caller to determine if auto uploading should be allowed.\n        // Ignore if `attachToForm === false`.\n        newAutoUpload: autoUpload,\n\n        // true if a form was detected and is being tracked by this module\n        attachedToForm: false,\n\n        // Returns an object with names and values for all valid form elements associated with the attached form.\n        getFormInputsAsObject: function() {\n            /* jshint eqnull:true */\n            if (formEl == null) {\n                return null;\n            }\n\n            return self._form2Obj(formEl);\n        }\n    });\n\n    // If the form contains an action attribute, this should be the new upload endpoint.\n    function determineNewEndpoint(formEl) {\n        if (formEl.getAttribute(\"action\")) {\n            self.newEndpoint = formEl.getAttribute(\"action\");\n        }\n    }\n\n    // Return true only if the form is valid, or if we cannot make this determination.\n    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.\n    function validateForm(formEl, nativeSubmit) {\n        if (formEl.checkValidity && !formEl.checkValidity()) {\n            log(\"Form did not pass validation checks - will not upload.\", \"error\");\n            nativeSubmit();\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Intercept form submit attempts, unless the integrator has told us not to do this.\n    function maybeUploadOnSubmit(formEl) {\n        var nativeSubmit = formEl.submit;\n\n        // Intercept and squelch submit events.\n        qq(formEl).attach(\"submit\", function(event) {\n            event = event || window.event;\n\n            if (event.preventDefault) {\n                event.preventDefault();\n            }\n            else {\n                event.returnValue = false;\n            }\n\n            validateForm(formEl, nativeSubmit) && startUpload();\n        });\n\n        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).\n        // Intercept that too.\n        formEl.submit = function() {\n            validateForm(formEl, nativeSubmit) && startUpload();\n        };\n    }\n\n    // If the element value passed from the uploader is a string, assume it is an element ID - select it.\n    // The rest of the code in this module depends on this being an HTMLElement.\n    function determineFormEl(formEl) {\n        if (formEl) {\n            if (qq.isString(formEl)) {\n                formEl = document.getElementById(formEl);\n            }\n\n            if (formEl) {\n                log(\"Attaching to form element.\");\n                determineNewEndpoint(formEl);\n                interceptSubmit && maybeUploadOnSubmit(formEl);\n            }\n        }\n\n        return formEl;\n    }\n\n    formEl = determineFormEl(formEl);\n    this.attachedToForm = !!formEl;\n};\n\nqq.extend(qq.FormSupport.prototype, {\n    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will\n    // construct from a given form when the form is submitted.\n    _form2Obj: function(form) {\n        \"use strict\";\n        var obj = {},\n            notIrrelevantType = function(type) {\n                var irrelevantTypes = [\n                    \"button\",\n                    \"image\",\n                    \"reset\",\n                    \"submit\"\n                ];\n\n                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;\n            },\n            radioOrCheckbox = function(type) {\n                return qq.indexOf([\"checkbox\", \"radio\"], type.toLowerCase()) >= 0;\n            },\n            ignoreValue = function(el) {\n                if (radioOrCheckbox(el.type) && !el.checked) {\n                    return true;\n                }\n\n                return el.disabled && el.type.toLowerCase() !== \"hidden\";\n            },\n            selectValue = function(select) {\n                var value = null;\n\n                qq.each(qq(select).children(), function(idx, child) {\n                    if (child.tagName.toLowerCase() === \"option\" && child.selected) {\n                        value = child.value;\n                        return false;\n                    }\n                });\n\n                return value;\n            };\n\n        qq.each(form.elements, function(idx, el) {\n            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === \"textarea\") &&\n                notIrrelevantType(el.type) &&\n                !ignoreValue(el)) {\n\n                obj[el.name] = el.value;\n            }\n            else if (el.tagName.toLowerCase() === \"select\" && !ignoreValue(el)) {\n                var value = selectValue(el);\n\n                if (value !== null) {\n                    obj[el.name] = value;\n                }\n            }\n        });\n\n        return obj;\n    }\n});\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/**\n * CryptoJS core components.\n */\nqq.CryptoJS = (function (Math, undefined) {\n    /**\n     * CryptoJS namespace.\n     */\n    var C = {};\n\n    /**\n     * Library namespace.\n     */\n    var C_lib = C.lib = {};\n\n    /**\n     * Base object for prototypal inheritance.\n     */\n    var Base = C_lib.Base = (function () {\n        function F() {}\n\n        return {\n            /**\n             * Creates a new object that inherits from this object.\n             *\n             * @param {Object} overrides Properties to copy into the new object.\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         field: 'value',\n             *\n             *         method: function () {\n             *         }\n             *     });\n             */\n            extend: function (overrides) {\n                // Spawn\n                F.prototype = this;\n                var subtype = new F();\n\n                // Augment\n                if (overrides) {\n                    subtype.mixIn(overrides);\n                }\n\n                // Create default initializer\n                if (!subtype.hasOwnProperty('init')) {\n                    subtype.init = function () {\n                        subtype.$super.init.apply(this, arguments);\n                    };\n                }\n\n                // Initializer's prototype is the subtype object\n                subtype.init.prototype = subtype;\n\n                // Reference supertype\n                subtype.$super = this;\n\n                return subtype;\n            },\n\n            /**\n             * Extends this object and runs the init method.\n             * Arguments to create() will be passed to init().\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var instance = MyType.create();\n             */\n            create: function () {\n                var instance = this.extend();\n                instance.init.apply(instance, arguments);\n\n                return instance;\n            },\n\n            /**\n             * Initializes a newly created object.\n             * Override this method to add some logic when your objects are created.\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         init: function () {\n             *             // ...\n             *         }\n             *     });\n             */\n            init: function () {\n            },\n\n            /**\n             * Copies properties into this object.\n             *\n             * @param {Object} properties The properties to mix in.\n             *\n             * @example\n             *\n             *     MyType.mixIn({\n             *         field: 'value'\n             *     });\n             */\n            mixIn: function (properties) {\n                for (var propertyName in properties) {\n                    if (properties.hasOwnProperty(propertyName)) {\n                        this[propertyName] = properties[propertyName];\n                    }\n                }\n\n                // IE won't copy toString using the loop above\n                if (properties.hasOwnProperty('toString')) {\n                    this.toString = properties.toString;\n                }\n            },\n\n            /**\n             * Creates a copy of this object.\n             *\n             * @return {Object} The clone.\n             *\n             * @example\n             *\n             *     var clone = instance.clone();\n             */\n            clone: function () {\n                return this.init.prototype.extend(this);\n            }\n        };\n    }());\n\n    /**\n     * An array of 32-bit words.\n     *\n     * @property {Array} words The array of 32-bit words.\n     * @property {number} sigBytes The number of significant bytes in this word array.\n     */\n    var WordArray = C_lib.WordArray = Base.extend({\n        /**\n         * Initializes a newly created word array.\n         *\n         * @param {Array} words (Optional) An array of 32-bit words.\n         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.create();\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n         */\n        init: function (words, sigBytes) {\n            words = this.words = words || [];\n\n            if (sigBytes != undefined) {\n                this.sigBytes = sigBytes;\n            } else {\n                this.sigBytes = words.length * 4;\n            }\n        },\n\n        /**\n         * Converts this word array to a string.\n         *\n         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n         *\n         * @return {string} The stringified word array.\n         *\n         * @example\n         *\n         *     var string = wordArray + '';\n         *     var string = wordArray.toString();\n         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n         */\n        toString: function (encoder) {\n            return (encoder || Hex).stringify(this);\n        },\n\n        /**\n         * Concatenates a word array to this word array.\n         *\n         * @param {WordArray} wordArray The word array to append.\n         *\n         * @return {WordArray} This word array.\n         *\n         * @example\n         *\n         *     wordArray1.concat(wordArray2);\n         */\n        concat: function (wordArray) {\n            // Shortcuts\n            var thisWords = this.words;\n            var thatWords = wordArray.words;\n            var thisSigBytes = this.sigBytes;\n            var thatSigBytes = wordArray.sigBytes;\n\n            // Clamp excess bits\n            this.clamp();\n\n            // Concat\n            if (thisSigBytes % 4) {\n                // Copy one byte at a time\n                for (var i = 0; i < thatSigBytes; i++) {\n                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n                }\n            } else if (thatWords.length > 0xffff) {\n                // Copy one word at a time\n                for (var i = 0; i < thatSigBytes; i += 4) {\n                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n                }\n            } else {\n                // Copy all words at once\n                thisWords.push.apply(thisWords, thatWords);\n            }\n            this.sigBytes += thatSigBytes;\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Removes insignificant bits.\n         *\n         * @example\n         *\n         *     wordArray.clamp();\n         */\n        clamp: function () {\n            // Shortcuts\n            var words = this.words;\n            var sigBytes = this.sigBytes;\n\n            // Clamp\n            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n            words.length = Math.ceil(sigBytes / 4);\n        },\n\n        /**\n         * Creates a copy of this word array.\n         *\n         * @return {WordArray} The clone.\n         *\n         * @example\n         *\n         *     var clone = wordArray.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone.words = this.words.slice(0);\n\n            return clone;\n        },\n\n        /**\n         * Creates a word array filled with random bytes.\n         *\n         * @param {number} nBytes The number of random bytes to generate.\n         *\n         * @return {WordArray} The random word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n         */\n        random: function (nBytes) {\n            var words = [];\n            for (var i = 0; i < nBytes; i += 4) {\n                words.push((Math.random() * 0x100000000) | 0);\n            }\n\n            return new WordArray.init(words, nBytes);\n        }\n    });\n\n    /**\n     * Encoder namespace.\n     */\n    var C_enc = C.enc = {};\n\n    /**\n     * Hex encoding strategy.\n     */\n    var Hex = C_enc.Hex = {\n        /**\n         * Converts a word array to a hex string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The hex string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var hexChars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                hexChars.push((bite >>> 4).toString(16));\n                hexChars.push((bite & 0x0f).toString(16));\n            }\n\n            return hexChars.join('');\n        },\n\n        /**\n         * Converts a hex string to a word array.\n         *\n         * @param {string} hexStr The hex string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n         */\n        parse: function (hexStr) {\n            // Shortcut\n            var hexStrLength = hexStr.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < hexStrLength; i += 2) {\n                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n            }\n\n            return new WordArray.init(words, hexStrLength / 2);\n        }\n    };\n\n    /**\n     * Latin1 encoding strategy.\n     */\n    var Latin1 = C_enc.Latin1 = {\n        /**\n         * Converts a word array to a Latin1 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Latin1 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var latin1Chars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                latin1Chars.push(String.fromCharCode(bite));\n            }\n\n            return latin1Chars.join('');\n        },\n\n        /**\n         * Converts a Latin1 string to a word array.\n         *\n         * @param {string} latin1Str The Latin1 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n         */\n        parse: function (latin1Str) {\n            // Shortcut\n            var latin1StrLength = latin1Str.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < latin1StrLength; i++) {\n                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n            }\n\n            return new WordArray.init(words, latin1StrLength);\n        }\n    };\n\n    /**\n     * UTF-8 encoding strategy.\n     */\n    var Utf8 = C_enc.Utf8 = {\n        /**\n         * Converts a word array to a UTF-8 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The UTF-8 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            try {\n                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n            } catch (e) {\n                throw new Error('Malformed UTF-8 data');\n            }\n        },\n\n        /**\n         * Converts a UTF-8 string to a word array.\n         *\n         * @param {string} utf8Str The UTF-8 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n         */\n        parse: function (utf8Str) {\n            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n        }\n    };\n\n    /**\n     * Abstract buffered block algorithm template.\n     *\n     * The property blockSize must be implemented in a concrete subtype.\n     *\n     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n     */\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n        /**\n         * Resets this block algorithm's data buffer to its initial state.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm.reset();\n         */\n        reset: function () {\n            // Initial values\n            this._data = new WordArray.init();\n            this._nDataBytes = 0;\n        },\n\n        /**\n         * Adds new data to this block algorithm's buffer.\n         *\n         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm._append('data');\n         *     bufferedBlockAlgorithm._append(wordArray);\n         */\n        _append: function (data) {\n            // Convert string to WordArray, else assume WordArray already\n            if (typeof data == 'string') {\n                data = Utf8.parse(data);\n            }\n\n            // Append\n            this._data.concat(data);\n            this._nDataBytes += data.sigBytes;\n        },\n\n        /**\n         * Processes available data blocks.\n         *\n         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n         *\n         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n         *\n         * @return {WordArray} The processed data.\n         *\n         * @example\n         *\n         *     var processedData = bufferedBlockAlgorithm._process();\n         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n         */\n        _process: function (doFlush) {\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n            var dataSigBytes = data.sigBytes;\n            var blockSize = this.blockSize;\n            var blockSizeBytes = blockSize * 4;\n\n            // Count blocks ready\n            var nBlocksReady = dataSigBytes / blockSizeBytes;\n            if (doFlush) {\n                // Round up to include partial blocks\n                nBlocksReady = Math.ceil(nBlocksReady);\n            } else {\n                // Round down to include only full blocks,\n                // less the number of blocks that must remain in the buffer\n                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n            }\n\n            // Count words ready\n            var nWordsReady = nBlocksReady * blockSize;\n\n            // Count bytes ready\n            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n            // Process blocks\n            if (nWordsReady) {\n                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n                    // Perform concrete-algorithm logic\n                    this._doProcessBlock(dataWords, offset);\n                }\n\n                // Remove processed words\n                var processedWords = dataWords.splice(0, nWordsReady);\n                data.sigBytes -= nBytesReady;\n            }\n\n            // Return processed words\n            return new WordArray.init(processedWords, nBytesReady);\n        },\n\n        /**\n         * Creates a copy of this object.\n         *\n         * @return {Object} The clone.\n         *\n         * @example\n         *\n         *     var clone = bufferedBlockAlgorithm.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone._data = this._data.clone();\n\n            return clone;\n        },\n\n        _minBufferSize: 0\n    });\n\n    /**\n     * Abstract hasher template.\n     *\n     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n     */\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n        /**\n         * Configuration options.\n         */\n        cfg: Base.extend(),\n\n        /**\n         * Initializes a newly created hasher.\n         *\n         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n         *\n         * @example\n         *\n         *     var hasher = CryptoJS.algo.SHA256.create();\n         */\n        init: function (cfg) {\n            // Apply config defaults\n            this.cfg = this.cfg.extend(cfg);\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\n         * Resets this hasher to its initial state.\n         *\n         * @example\n         *\n         *     hasher.reset();\n         */\n        reset: function () {\n            // Reset data buffer\n            BufferedBlockAlgorithm.reset.call(this);\n\n            // Perform concrete-hasher logic\n            this._doReset();\n        },\n\n        /**\n         * Updates this hasher with a message.\n         *\n         * @param {WordArray|string} messageUpdate The message to append.\n         *\n         * @return {Hasher} This hasher.\n         *\n         * @example\n         *\n         *     hasher.update('message');\n         *     hasher.update(wordArray);\n         */\n        update: function (messageUpdate) {\n            // Append\n            this._append(messageUpdate);\n\n            // Update the hash\n            this._process();\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Finalizes the hash computation.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n         *\n         * @return {WordArray} The hash.\n         *\n         * @example\n         *\n         *     var hash = hasher.finalize();\n         *     var hash = hasher.finalize('message');\n         *     var hash = hasher.finalize(wordArray);\n         */\n        finalize: function (messageUpdate) {\n            // Final message update\n            if (messageUpdate) {\n                this._append(messageUpdate);\n            }\n\n            // Perform concrete-hasher logic\n            var hash = this._doFinalize();\n\n            return hash;\n        },\n\n        blockSize: 512/32,\n\n        /**\n         * Creates a shortcut function to a hasher's object interface.\n         *\n         * @param {Hasher} hasher The hasher to create a helper for.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n         */\n        _createHelper: function (hasher) {\n            return function (message, cfg) {\n                return new hasher.init(cfg).finalize(message);\n            };\n        },\n\n        /**\n         * Creates a shortcut function to the HMAC's object interface.\n         *\n         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n         */\n        _createHmacHelper: function (hasher) {\n            return function (message, key) {\n                return new C_algo.HMAC.init(hasher, key).finalize(message);\n            };\n        }\n    });\n\n    /**\n     * Algorithm namespace.\n     */\n    var C_algo = C.algo = {};\n\n    return C;\n}(Math));\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = qq.CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n     * Base64 encoding strategy.\n     */\n    var Base64 = C_enc.Base64 = {\n        /**\n         * Converts a word array to a Base64 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Base64 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n            var map = this._map;\n\n            // Clamp excess bits\n            wordArray.clamp();\n\n            // Convert\n            var base64Chars = [];\n            for (var i = 0; i < sigBytes; i += 3) {\n                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n                }\n            }\n\n            // Add padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                while (base64Chars.length % 4) {\n                    base64Chars.push(paddingChar);\n                }\n            }\n\n            return base64Chars.join('');\n        },\n\n        /**\n         * Converts a Base64 string to a word array.\n         *\n         * @param {string} base64Str The Base64 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n         */\n        parse: function (base64Str) {\n            // Shortcuts\n            var base64StrLength = base64Str.length;\n            var map = this._map;\n\n            // Ignore padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                var paddingIndex = base64Str.indexOf(paddingChar);\n                if (paddingIndex != -1) {\n                    base64StrLength = paddingIndex;\n                }\n            }\n\n            // Convert\n            var words = [];\n            var nBytes = 0;\n            for (var i = 0; i < base64StrLength; i++) {\n                if (i % 4) {\n                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);\n                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);\n                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\n                    nBytes++;\n                }\n            }\n\n            return WordArray.create(words, nBytes);\n        },\n\n        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n    };\n}());\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = qq.CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var C_algo = C.algo;\n\n    /**\n     * HMAC algorithm.\n     */\n    var HMAC = C_algo.HMAC = Base.extend({\n        /**\n         * Initializes a newly created HMAC.\n         *\n         * @param {Hasher} hasher The hash algorithm to use.\n         * @param {WordArray|string} key The secret key.\n         *\n         * @example\n         *\n         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n         */\n        init: function (hasher, key) {\n            // Init hasher\n            hasher = this._hasher = new hasher.init();\n\n            // Convert string to WordArray, else assume WordArray already\n            if (typeof key == 'string') {\n                key = Utf8.parse(key);\n            }\n\n            // Shortcuts\n            var hasherBlockSize = hasher.blockSize;\n            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n            // Allow arbitrary length keys\n            if (key.sigBytes > hasherBlockSizeBytes) {\n                key = hasher.finalize(key);\n            }\n\n            // Clamp excess bits\n            key.clamp();\n\n            // Clone key for inner and outer pads\n            var oKey = this._oKey = key.clone();\n            var iKey = this._iKey = key.clone();\n\n            // Shortcuts\n            var oKeyWords = oKey.words;\n            var iKeyWords = iKey.words;\n\n            // XOR keys with pad constants\n            for (var i = 0; i < hasherBlockSize; i++) {\n                oKeyWords[i] ^= 0x5c5c5c5c;\n                iKeyWords[i] ^= 0x36363636;\n            }\n            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\n         * Resets this HMAC to its initial state.\n         *\n         * @example\n         *\n         *     hmacHasher.reset();\n         */\n        reset: function () {\n            // Shortcut\n            var hasher = this._hasher;\n\n            // Reset\n            hasher.reset();\n            hasher.update(this._iKey);\n        },\n\n        /**\n         * Updates this HMAC with a message.\n         *\n         * @param {WordArray|string} messageUpdate The message to append.\n         *\n         * @return {HMAC} This HMAC instance.\n         *\n         * @example\n         *\n         *     hmacHasher.update('message');\n         *     hmacHasher.update(wordArray);\n         */\n        update: function (messageUpdate) {\n            this._hasher.update(messageUpdate);\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Finalizes the HMAC computation.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n         *\n         * @return {WordArray} The HMAC.\n         *\n         * @example\n         *\n         *     var hmac = hmacHasher.finalize();\n         *     var hmac = hmacHasher.finalize('message');\n         *     var hmac = hmacHasher.finalize(wordArray);\n         */\n        finalize: function (messageUpdate) {\n            // Shortcut\n            var hasher = this._hasher;\n\n            // Compute HMAC\n            var innerHash = hasher.finalize(messageUpdate);\n            hasher.reset();\n            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n            return hmac;\n        }\n    });\n}());\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = qq.CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Reusable object\n    var W = [];\n\n    /**\n     * SHA-1 hash algorithm.\n     */\n    var SHA1 = C_algo.SHA1 = Hasher.extend({\n        _doReset: function () {\n            this._hash = new WordArray.init([\n                0x67452301, 0xefcdab89,\n                0x98badcfe, 0x10325476,\n                0xc3d2e1f0\n            ]);\n        },\n\n        _doProcessBlock: function (M, offset) {\n            // Shortcut\n            var H = this._hash.words;\n\n            // Working variables\n            var a = H[0];\n            var b = H[1];\n            var c = H[2];\n            var d = H[3];\n            var e = H[4];\n\n            // Computation\n            for (var i = 0; i < 80; i++) {\n                if (i < 16) {\n                    W[i] = M[offset + i] | 0;\n                } else {\n                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n                    W[i] = (n << 1) | (n >>> 31);\n                }\n\n                var t = ((a << 5) | (a >>> 27)) + e + W[i];\n                if (i < 20) {\n                    t += ((b & c) | (~b & d)) + 0x5a827999;\n                } else if (i < 40) {\n                    t += (b ^ c ^ d) + 0x6ed9eba1;\n                } else if (i < 60) {\n                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n                } else /* if (i < 80) */ {\n                    t += (b ^ c ^ d) - 0x359d3e2a;\n                }\n\n                e = d;\n                d = c;\n                c = (b << 30) | (b >>> 2);\n                b = a;\n                a = t;\n            }\n\n            // Intermediate hash value\n            H[0] = (H[0] + a) | 0;\n            H[1] = (H[1] + b) | 0;\n            H[2] = (H[2] + c) | 0;\n            H[3] = (H[3] + d) | 0;\n            H[4] = (H[4] + e) | 0;\n        },\n\n        _doFinalize: function () {\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n\n            var nBitsTotal = this._nDataBytes * 8;\n            var nBitsLeft = data.sigBytes * 8;\n\n            // Add padding\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n            data.sigBytes = dataWords.length * 4;\n\n            // Hash final blocks\n            this._process();\n\n            // Return final computed hash\n            return this._hash;\n        },\n\n        clone: function () {\n            var clone = Hasher.clone.call(this);\n            clone._hash = this._hash.clone();\n\n            return clone;\n        }\n    });\n\n    /**\n     * Shortcut function to the hasher's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     *\n     * @return {WordArray} The hash.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hash = CryptoJS.SHA1('message');\n     *     var hash = CryptoJS.SHA1(wordArray);\n     */\n    C.SHA1 = Hasher._createHelper(SHA1);\n\n    /**\n     * Shortcut function to the HMAC's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     * @param {WordArray|string} key The secret key.\n     *\n     * @return {WordArray} The HMAC.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hmac = CryptoJS.HmacSHA1(message, key);\n     */\n    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n}());\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function (Math) {\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n    var Hasher = C_lib.Hasher;\r\n    var C_algo = C.algo;\r\n\r\n    // Initialization and round constants tables\r\n    var H = [];\r\n    var K = [];\r\n\r\n    // Compute constants\r\n    (function () {\r\n        function isPrime(n) {\r\n            var sqrtN = Math.sqrt(n);\r\n            for (var factor = 2; factor <= sqrtN; factor++) {\r\n                if (!(n % factor)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function getFractionalBits(n) {\r\n            return ((n - (n | 0)) * 0x100000000) | 0;\r\n        }\r\n\r\n        var n = 2;\r\n        var nPrime = 0;\r\n        while (nPrime < 64) {\r\n            if (isPrime(n)) {\r\n                if (nPrime < 8) {\r\n                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\r\n                }\r\n                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\r\n\r\n                nPrime++;\r\n            }\r\n\r\n            n++;\r\n        }\r\n    }());\r\n\r\n    // Reusable object\r\n    var W = [];\r\n\r\n    /**\r\n     * SHA-256 hash algorithm.\r\n     */\r\n    var SHA256 = C_algo.SHA256 = Hasher.extend({\r\n        _doReset: function () {\r\n            this._hash = new WordArray.init(H.slice(0));\r\n        },\r\n\r\n        _doProcessBlock: function (M, offset) {\r\n            // Shortcut\r\n            var H = this._hash.words;\r\n\r\n            // Working variables\r\n            var a = H[0];\r\n            var b = H[1];\r\n            var c = H[2];\r\n            var d = H[3];\r\n            var e = H[4];\r\n            var f = H[5];\r\n            var g = H[6];\r\n            var h = H[7];\r\n\r\n            // Computation\r\n            for (var i = 0; i < 64; i++) {\r\n                if (i < 16) {\r\n                    W[i] = M[offset + i] | 0;\r\n                } else {\r\n                    var gamma0x = W[i - 15];\r\n                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\r\n                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\r\n                                   (gamma0x >>> 3);\r\n\r\n                    var gamma1x = W[i - 2];\r\n                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\r\n                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\r\n                                   (gamma1x >>> 10);\r\n\r\n                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\r\n                }\r\n\r\n                var ch  = (e & f) ^ (~e & g);\r\n                var maj = (a & b) ^ (a & c) ^ (b & c);\r\n\r\n                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\r\n                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\r\n\r\n                var t1 = h + sigma1 + ch + K[i] + W[i];\r\n                var t2 = sigma0 + maj;\r\n\r\n                h = g;\r\n                g = f;\r\n                f = e;\r\n                e = (d + t1) | 0;\r\n                d = c;\r\n                c = b;\r\n                b = a;\r\n                a = (t1 + t2) | 0;\r\n            }\r\n\r\n            // Intermediate hash value\r\n            H[0] = (H[0] + a) | 0;\r\n            H[1] = (H[1] + b) | 0;\r\n            H[2] = (H[2] + c) | 0;\r\n            H[3] = (H[3] + d) | 0;\r\n            H[4] = (H[4] + e) | 0;\r\n            H[5] = (H[5] + f) | 0;\r\n            H[6] = (H[6] + g) | 0;\r\n            H[7] = (H[7] + h) | 0;\r\n        },\r\n\r\n        _doFinalize: function () {\r\n            // Shortcuts\r\n            var data = this._data;\r\n            var dataWords = data.words;\r\n\r\n            var nBitsTotal = this._nDataBytes * 8;\r\n            var nBitsLeft = data.sigBytes * 8;\r\n\r\n            // Add padding\r\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\r\n            data.sigBytes = dataWords.length * 4;\r\n\r\n            // Hash final blocks\r\n            this._process();\r\n\r\n            // Return final computed hash\r\n            return this._hash;\r\n        },\r\n\r\n        clone: function () {\r\n            var clone = Hasher.clone.call(this);\r\n            clone._hash = this._hash.clone();\r\n\r\n            return clone;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Shortcut function to the hasher's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     *\r\n     * @return {WordArray} The hash.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hash = CryptoJS.SHA256('message');\r\n     *     var hash = CryptoJS.SHA256(wordArray);\r\n     */\r\n    C.SHA256 = Hasher._createHelper(SHA256);\r\n\r\n    /**\r\n     * Shortcut function to the HMAC's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     * @param {WordArray|string} key The secret key.\r\n     *\r\n     * @return {WordArray} The HMAC.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hmac = CryptoJS.HmacSHA256(message, key);\r\n     */\r\n    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\r\n}(Math));\r\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function () {\r\n    // Check if typed arrays are supported\r\n    if (typeof ArrayBuffer != 'function') {\r\n        return;\r\n    }\r\n\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n\r\n    // Reference original init\r\n    var superInit = WordArray.init;\r\n\r\n    // Augment WordArray.init to handle typed arrays\r\n    var subInit = WordArray.init = function (typedArray) {\r\n        // Convert buffers to uint8\r\n        if (typedArray instanceof ArrayBuffer) {\r\n            typedArray = new Uint8Array(typedArray);\r\n        }\r\n\r\n        // Convert other array views to uint8\r\n        if (\r\n            typedArray instanceof Int8Array ||\r\n            typedArray instanceof Uint8ClampedArray ||\r\n            typedArray instanceof Int16Array ||\r\n            typedArray instanceof Uint16Array ||\r\n            typedArray instanceof Int32Array ||\r\n            typedArray instanceof Uint32Array ||\r\n            typedArray instanceof Float32Array ||\r\n            typedArray instanceof Float64Array\r\n        ) {\r\n            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\r\n        }\r\n\r\n        // Handle Uint8Array\r\n        if (typedArray instanceof Uint8Array) {\r\n            // Shortcut\r\n            var typedArrayByteLength = typedArray.byteLength;\r\n\r\n            // Extract bytes\r\n            var words = [];\r\n            for (var i = 0; i < typedArrayByteLength; i++) {\r\n                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\r\n            }\r\n\r\n            // Initialize this word array\r\n            superInit.call(this, words, typedArrayByteLength);\r\n        } else {\r\n            // Else call normal init\r\n            superInit.apply(this, arguments);\r\n        }\r\n    };\r\n\r\n    subInit.prototype = WordArray;\r\n}());\r\n","/*globals qq */\nqq.s3 = qq.s3 || {};\n\nqq.s3.util = qq.s3.util || (function() {\n    \"use strict\";\n\n    return {\n        ALGORITHM_PARAM_NAME: \"x-amz-algorithm\",\n\n        AWS_PARAM_PREFIX: \"x-amz-meta-\",\n\n        CREDENTIAL_PARAM_NAME: \"x-amz-credential\",\n\n        DATE_PARAM_NAME: \"x-amz-date\",\n\n        REDUCED_REDUNDANCY_PARAM_NAME: \"x-amz-storage-class\",\n        REDUCED_REDUNDANCY_PARAM_VALUE: \"REDUCED_REDUNDANCY\",\n\n        SERVER_SIDE_ENCRYPTION_PARAM_NAME: \"x-amz-server-side-encryption\",\n        SERVER_SIDE_ENCRYPTION_PARAM_VALUE: \"AES256\",\n\n        SESSION_TOKEN_PARAM_NAME: \"x-amz-security-token\",\n\n        V4_ALGORITHM_PARAM_VALUE: \"AWS4-HMAC-SHA256\",\n\n        V4_SIGNATURE_PARAM_NAME: \"x-amz-signature\",\n\n        CASE_SENSITIVE_PARAM_NAMES: [\n            \"Cache-Control\",\n            \"Content-Disposition\",\n            \"Content-Encoding\",\n            \"Content-MD5\"\n        ],\n\n        UNSIGNABLE_REST_HEADER_NAMES: [\n            \"Cache-Control\",\n            \"Content-Disposition\",\n            \"Content-Encoding\",\n            \"Content-MD5\"\n        ],\n\n        UNPREFIXED_PARAM_NAMES: [\n            \"Cache-Control\",\n            \"Content-Disposition\",\n            \"Content-Encoding\",\n            \"Content-MD5\",\n            \"x-amz-server-side-encryption-customer-algorithm\",\n            \"x-amz-server-side-encryption-customer-key\",\n            \"x-amz-server-side-encryption-customer-key-MD5\"\n        ],\n\n        /**\n         * This allows for the region to be specified in the bucket's endpoint URL, or not.\n         *\n         * Examples of some valid endpoints are:\n         *     http://foo.s3.amazonaws.com\n         *     https://foo.s3.amazonaws.com\n         *     http://foo.s3-ap-northeast-1.amazonaws.com\n         *     foo.s3.amazonaws.com\n         *     http://foo.bar.com\n         *     http://s3.amazonaws.com/foo.bar.com\n         * ...etc\n         *\n         * @param endpoint The bucket's URL.\n         * @returns {String || undefined} The bucket name, or undefined if the URL cannot be parsed.\n         */\n        getBucket: function(endpoint) {\n            var patterns = [\n                    //bucket in domain\n                    /^(?:https?:\\/\\/)?([a-z0-9.\\-_]+)\\.s3(?:-[a-z0-9\\-]+)?\\.amazonaws\\.com/i,\n                    //bucket in path\n                    /^(?:https?:\\/\\/)?s3(?:-[a-z0-9\\-]+)?\\.amazonaws\\.com\\/([a-z0-9.\\-_]+)/i,\n                    //custom domain\n                    /^(?:https?:\\/\\/)?([a-z0-9.\\-_]+)/i\n                ],\n                bucket;\n\n            qq.each(patterns, function(idx, pattern) {\n                var match = pattern.exec(endpoint);\n\n                if (match) {\n                    bucket = match[1];\n                    return false;\n                }\n            });\n\n            return bucket;\n        },\n\n        /** Create Prefixed request headers which are appropriate for S3.\n         *\n         * If the request header is appropriate for S3 (e.g. Cache-Control) then pass\n         * it along without a metadata prefix. For all other request header parameter names,\n         * apply qq.s3.util.AWS_PARAM_PREFIX before the name.\n         * See: http://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html\n         */\n        _getPrefixedParamName: function(name) {\n            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {\n                return name;\n            }\n            return qq.s3.util.AWS_PARAM_PREFIX + name;\n        },\n\n        /**\n         * Create a policy document to be signed and sent along with the S3 upload request.\n         *\n         * @param spec Object with properties use to construct the policy document.\n         * @returns {Object} Policy doc.\n         */\n        getPolicy: function(spec) {\n            var policy = {},\n                conditions = [],\n                bucket = spec.bucket,\n                date = spec.date,\n                drift = spec.clockDrift,\n                key = spec.key,\n                accessKey = spec.accessKey,\n                acl = spec.acl,\n                type = spec.type,\n                expectedStatus = spec.expectedStatus,\n                sessionToken = spec.sessionToken,\n                params = spec.params,\n                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),\n                minFileSize = spec.minFileSize,\n                maxFileSize = spec.maxFileSize,\n                reducedRedundancy = spec.reducedRedundancy,\n                region = spec.region,\n                serverSideEncryption = spec.serverSideEncryption,\n                signatureVersion = spec.signatureVersion;\n\n            policy.expiration = qq.s3.util.getPolicyExpirationDate(date, drift);\n\n            conditions.push({acl: acl});\n            conditions.push({bucket: bucket});\n\n            if (type) {\n                conditions.push({\"Content-Type\": type});\n            }\n\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            if (expectedStatus) {\n                conditions.push({success_action_status: expectedStatus.toString()});\n            }\n\n            if (successRedirectUrl) {\n                conditions.push({success_action_redirect: successRedirectUrl});\n            }\n            // jscs:enable\n            if (reducedRedundancy) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\n            }\n\n            if (sessionToken) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\n            }\n\n            if (serverSideEncryption) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\n            }\n\n            if (signatureVersion === 2) {\n                conditions.push({key: key});\n            }\n            else if (signatureVersion === 4) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;\n\n                conditions.push({});\n                conditions[conditions.length - 1].key = key;\n\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.CREDENTIAL_PARAM_NAME] =\n                    qq.s3.util.getV4CredentialsString({date: date, key: accessKey, region: region});\n\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.DATE_PARAM_NAME] =\n                    qq.s3.util.getV4PolicyDate(date, drift);\n            }\n\n            // user metadata\n            qq.each(params, function(name, val) {\n                var awsParamName = qq.s3.util._getPrefixedParamName(name),\n                    param = {};\n\n                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {\n                    param[awsParamName] = val;\n                }\n                else {\n                    param[awsParamName] = encodeURIComponent(val);\n                }\n\n                conditions.push(param);\n            });\n\n            policy.conditions = conditions;\n\n            qq.s3.util.enforceSizeLimits(policy, minFileSize, maxFileSize);\n\n            return policy;\n        },\n\n        /**\n         * Update a previously constructed policy document with updated credentials.  Currently, this only requires we\n         * update the session token.  This is only relevant if requests are being signed client-side.\n         *\n         * @param policy Live policy document\n         * @param newSessionToken Updated session token.\n         */\n        refreshPolicyCredentials: function(policy, newSessionToken) {\n            var sessionTokenFound = false;\n\n            qq.each(policy.conditions, function(oldCondIdx, oldCondObj) {\n                qq.each(oldCondObj, function(oldCondName, oldCondVal) {\n                    if (oldCondName === qq.s3.util.SESSION_TOKEN_PARAM_NAME) {\n                        oldCondObj[oldCondName] = newSessionToken;\n                        sessionTokenFound = true;\n                    }\n                });\n            });\n\n            if (!sessionTokenFound) {\n                policy.conditions.push({});\n                policy.conditions[policy.conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = newSessionToken;\n            }\n        },\n\n        /**\n         * Generates all parameters to be passed along with the S3 upload request.  This includes invoking a callback\n         * that is expected to asynchronously retrieve a signature for the policy document.  Note that the server\n         * signing the request should reject a \"tainted\" policy document that includes unexpected values, since it is\n         * still possible for a malicious user to tamper with these values during policy document generation,\n         * before it is sent to the server for signing.\n         *\n         * @param spec Object with properties: `params`, `type`, `key`, `accessKey`, `acl`, `expectedStatus`, `successRedirectUrl`,\n         * `reducedRedundancy`, `region`, `serverSideEncryption`, `version`, and `log()`, along with any options associated with `qq.s3.util.getPolicy()`.\n         * @returns {qq.Promise} Promise that will be fulfilled once all parameters have been determined.\n         */\n        generateAwsParams: function(spec, signPolicyCallback) {\n            var awsParams = {},\n                customParams = spec.params,\n                promise = new qq.Promise(),\n                sessionToken = spec.sessionToken,\n                drift = spec.clockDrift,\n                type = spec.type,\n                key = spec.key,\n                accessKey = spec.accessKey,\n                acl = spec.acl,\n                expectedStatus = spec.expectedStatus,\n                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),\n                reducedRedundancy = spec.reducedRedundancy,\n                region = spec.region,\n                serverSideEncryption = spec.serverSideEncryption,\n                signatureVersion = spec.signatureVersion,\n                now = new Date(),\n                log = spec.log,\n                policyJson;\n\n            spec.date = now;\n            policyJson = qq.s3.util.getPolicy(spec);\n\n            awsParams.key = key;\n\n            if (type) {\n                awsParams[\"Content-Type\"] = type;\n            }\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            if (expectedStatus) {\n                awsParams.success_action_status = expectedStatus;\n            }\n\n            if (successRedirectUrl) {\n                awsParams.success_action_redirect = successRedirectUrl;\n            }\n            // jscs:enable\n            if (reducedRedundancy) {\n                awsParams[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\n            }\n\n            if (serverSideEncryption) {\n                awsParams[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\n            }\n\n            if (sessionToken) {\n                awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\n            }\n\n            awsParams.acl = acl;\n\n            // Custom (user-supplied) params must be prefixed with the value of `qq.s3.util.AWS_PARAM_PREFIX`.\n            // Params such as Cache-Control or Content-Disposition will not be prefixed.\n            // Prefixed param values will be URI encoded as well.\n            qq.each(customParams, function(name, val) {\n                var awsParamName = qq.s3.util._getPrefixedParamName(name);\n\n                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {\n                    awsParams[awsParamName] = val;\n                }\n                else {\n                    awsParams[awsParamName] = encodeURIComponent(val);\n                }\n            });\n\n            if (signatureVersion === 2) {\n                awsParams.AWSAccessKeyId = accessKey;\n            }\n            else if (signatureVersion === 4) {\n                awsParams[qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;\n                awsParams[qq.s3.util.CREDENTIAL_PARAM_NAME] = qq.s3.util.getV4CredentialsString({date: now, key: accessKey, region: region});\n                awsParams[qq.s3.util.DATE_PARAM_NAME] = qq.s3.util.getV4PolicyDate(now, drift);\n            }\n\n            // Invoke a promissory callback that should provide us with a base64-encoded policy doc and an\n            // HMAC signature for the policy doc.\n            signPolicyCallback(policyJson).then(\n                function(policyAndSignature, updatedAccessKey, updatedSessionToken) {\n                    awsParams.policy = policyAndSignature.policy;\n\n                    if (spec.signatureVersion === 2) {\n                        awsParams.signature = policyAndSignature.signature;\n\n                        if (updatedAccessKey) {\n                            awsParams.AWSAccessKeyId = updatedAccessKey;\n                        }\n                    }\n                    else if (spec.signatureVersion === 4) {\n                        awsParams[qq.s3.util.V4_SIGNATURE_PARAM_NAME] = policyAndSignature.signature;\n                    }\n\n                    if (updatedSessionToken) {\n                        awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;\n                    }\n\n                    promise.success(awsParams);\n                },\n                function(errorMessage) {\n                    errorMessage = errorMessage || \"Can't continue further with request to S3 as we did not receive \" +\n                                                   \"a valid signature and policy from the server.\";\n\n                    log(\"Policy signing failed.  \" + errorMessage, \"error\");\n                    promise.failure(errorMessage);\n                }\n            );\n\n            return promise;\n        },\n\n        /**\n         * Add a condition to an existing S3 upload request policy document used to ensure AWS enforces any size\n         * restrictions placed on files server-side.  This is important to do, in case users mess with the client-side\n         * checks already in place.\n         *\n         * @param policy Policy document as an `Object`, with a `conditions` property already attached\n         * @param minSize Minimum acceptable size, in bytes\n         * @param maxSize Maximum acceptable size, in bytes (0 = unlimited)\n         */\n        enforceSizeLimits: function(policy, minSize, maxSize) {\n            var adjustedMinSize = minSize < 0 ? 0 : minSize,\n                // Adjust a maxSize of 0 to the largest possible integer, since we must specify a high and a low in the request\n                adjustedMaxSize = maxSize <= 0 ? 9007199254740992 : maxSize;\n\n            if (minSize > 0 || maxSize > 0) {\n                policy.conditions.push([\"content-length-range\", adjustedMinSize.toString(), adjustedMaxSize.toString()]);\n            }\n        },\n\n        getPolicyExpirationDate: function(date, drift) {\n            var adjustedDate = new Date(date.getTime() + drift);\n            return qq.s3.util.getPolicyDate(adjustedDate, 5);\n        },\n\n        getCredentialsDate: function(date) {\n            return date.getUTCFullYear() + \"\" +\n                (\"0\" + (date.getUTCMonth() + 1)).slice(-2) +\n                (\"0\" + date.getUTCDate()).slice(-2);\n        },\n\n        getPolicyDate: function(date, _minutesToAdd_) {\n            var minutesToAdd = _minutesToAdd_ || 0,\n                pad, r;\n\n            /*jshint -W014 */\n            // Is this going to be a problem if we encounter this moments before 2 AM just before daylight savings time ends?\n            date.setMinutes(date.getMinutes() + (minutesToAdd || 0));\n\n            if (Date.prototype.toISOString) {\n                return date.toISOString();\n            }\n            else {\n                pad = function(number) {\n                    r = String(number);\n\n                    if (r.length === 1) {\n                        r = \"0\" + r;\n                    }\n\n                    return r;\n                };\n\n                return date.getUTCFullYear()\n                    + \"-\" + pad(date.getUTCMonth() + 1)\n                    + \"-\" + pad(date.getUTCDate())\n                    + \"T\" + pad(date.getUTCHours())\n                    + \":\" + pad(date.getUTCMinutes())\n                    + \":\" + pad(date.getUTCSeconds())\n                    + \".\" + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)\n                    + \"Z\";\n            }\n        },\n\n        /**\n         * Looks at a response from S3 contained in an iframe and parses the query string in an attempt to identify\n         * the associated resource.\n         *\n         * @param iframe Iframe containing response\n         * @returns {{bucket: *, key: *, etag: *}}\n         */\n        parseIframeResponse: function(iframe) {\n            var doc = iframe.contentDocument || iframe.contentWindow.document,\n                queryString = doc.location.search,\n                match = /bucket=(.+)&key=(.+)&etag=(.+)/.exec(queryString);\n\n            if (match) {\n                return {\n                    bucket: match[1],\n                    key: match[2],\n                    etag: match[3].replace(/%22/g, \"\")\n                };\n            }\n        },\n\n        /**\n         * @param successRedirectUrl Relative or absolute location of success redirect page\n         * @returns {*|string} undefined if the parameter is undefined, otherwise the absolute location of the success redirect page\n         */\n        getSuccessRedirectAbsoluteUrl: function(successRedirectUrl) {\n            if (successRedirectUrl) {\n                var targetAnchorContainer = document.createElement(\"div\"),\n                    targetAnchor;\n\n                if (qq.ie7()) {\n                    // Note that we must make use of `innerHTML` for IE7 only instead of simply creating an anchor via\n                    // `document.createElement('a')` and setting the `href` attribute.  The latter approach does not allow us to\n                    // obtain an absolute URL in IE7 if the `endpoint` is a relative URL.\n                    targetAnchorContainer.innerHTML = \"<a href='\" + successRedirectUrl + \"'></a>\";\n                    targetAnchor = targetAnchorContainer.firstChild;\n                    return targetAnchor.href;\n                }\n                else {\n                    // IE8 and IE9 do not seem to derive an absolute URL from a relative URL using the `innerHTML`\n                    // approach above, so we'll just create an anchor this way and set it's `href` attribute.\n                    // Due to yet another quirk in IE8 and IE9, we have to set the `href` equal to itself\n                    // in order to ensure relative URLs will be properly parsed.\n                    targetAnchor = document.createElement(\"a\");\n                    targetAnchor.href = successRedirectUrl;\n                    targetAnchor.href = targetAnchor.href;\n                    return targetAnchor.href;\n                }\n            }\n        },\n\n        getV4CredentialsString: function(spec) {\n            return spec.key + \"/\" +\n                qq.s3.util.getCredentialsDate(spec.date) + \"/\" +\n                spec.region + \"/s3/aws4_request\";\n        },\n\n        getV4PolicyDate: function(date, drift) {\n            var adjustedDate = new Date(date.getTime() + drift);\n\n            return qq.s3.util.getCredentialsDate(adjustedDate) + \"T\" +\n                    (\"0\" + adjustedDate.getUTCHours()).slice(-2) +\n                    (\"0\" + adjustedDate.getUTCMinutes()).slice(-2) +\n                    (\"0\" + adjustedDate.getUTCSeconds()).slice(-2) +\n                    \"Z\";\n        },\n\n        // AWS employs a strict interpretation of [RFC 3986](http://tools.ietf.org/html/rfc3986#page-12).\n        // So, we must ensure all reserved characters listed in the spec are percent-encoded,\n        // and spaces are replaced with \"+\".\n        encodeQueryStringParam: function(param) {\n            var percentEncoded = encodeURIComponent(param);\n\n            // %-encode characters not handled by `encodeURIComponent` (to follow RFC 3986)\n            percentEncoded = percentEncoded.replace(/[!'()]/g, escape);\n\n            // %-encode characters not handled by `escape` (to follow RFC 3986)\n            percentEncoded = percentEncoded.replace(/\\*/g, \"%2A\");\n\n            // replace percent-encoded spaces with a \"+\"\n            return percentEncoded.replace(/%20/g, \"+\");\n        }\n    };\n}());\n","/*globals qq*/\n/**\n * Defines the public API for non-traditional FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.nonTraditionalBasePublicApi = {\n        setUploadSuccessParams: function(params, id) {\n            this._uploadSuccessParamsStore.set(params, id);\n        },\n        setUploadSuccessEndpoint: function(endpoint, id) {\n            this._uploadSuccessEndpointStore.set(endpoint, id);\n        }\n    };\n\n    qq.nonTraditionalBasePrivateApi = {\n        /**\n         * When the upload has completed, if it is successful, send a request to the `successEndpoint` (if defined).\n         * This will hold up the call to the `onComplete` callback until we have determined success of the upload\n         * according to the local server, if a `successEndpoint` has been defined by the integrator.\n         *\n         * @param id ID of the completed upload\n         * @param name Name of the associated item\n         * @param result Object created from the server's parsed JSON response.\n         * @param xhr Associated XmlHttpRequest, if this was used to send the request.\n         * @returns {boolean || qq.Promise} true/false if success can be determined immediately, otherwise a `qq.Promise`\n         * if we need to ask the server.\n         * @private\n         */\n        _onComplete: function(id, name, result, xhr) {\n            var success = result.success ? true : false,\n                self = this,\n                onCompleteArgs = arguments,\n                successEndpoint = this._uploadSuccessEndpointStore.get(id),\n                successCustomHeaders = this._options.uploadSuccess.customHeaders,\n                successMethod = this._options.uploadSuccess.method,\n                cors = this._options.cors,\n                promise = new qq.Promise(),\n                uploadSuccessParams = this._uploadSuccessParamsStore.get(id),\n                fileParams = this._paramsStore.get(id),\n\n                // If we are waiting for confirmation from the local server, and have received it,\n                // include properties from the local server response in the `response` parameter\n                // sent to the `onComplete` callback, delegate to the parent `_onComplete`, and\n                // fulfill the associated promise.\n                onSuccessFromServer = function(successRequestResult) {\n                    delete self._failedSuccessRequestCallbacks[id];\n                    qq.extend(result, successRequestResult);\n                    qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                    promise.success(successRequestResult);\n                },\n\n                // If the upload success request fails, attempt to re-send the success request (via the core retry code).\n                // The entire upload may be restarted if the server returns a \"reset\" property with a value of true as well.\n                onFailureFromServer = function(successRequestResult) {\n                    var callback = submitSuccessRequest;\n\n                    qq.extend(result, successRequestResult);\n\n                    if (result && result.reset) {\n                        callback = null;\n                    }\n\n                    if (!callback) {\n                        delete self._failedSuccessRequestCallbacks[id];\n                    }\n                    else {\n                        self._failedSuccessRequestCallbacks[id] = callback;\n                    }\n\n                    if (!self._onAutoRetry(id, name, result, xhr, callback)) {\n                        qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                        promise.failure(successRequestResult);\n                    }\n                },\n                submitSuccessRequest,\n                successAjaxRequester;\n\n            // Ask the local server if the file sent is ok.\n            if (success && successEndpoint) {\n                successAjaxRequester = new qq.UploadSuccessAjaxRequester({\n                    endpoint: successEndpoint,\n                    method: successMethod,\n                    customHeaders: successCustomHeaders,\n                    cors: cors,\n                    log: qq.bind(this.log, this)\n                });\n\n                // combine custom params and default params\n                qq.extend(uploadSuccessParams, self._getEndpointSpecificParams(id, result, xhr), true);\n\n                // include any params associated with the file\n                fileParams && qq.extend(uploadSuccessParams, fileParams, true);\n\n                submitSuccessRequest = qq.bind(function() {\n                    successAjaxRequester.sendSuccessRequest(id, uploadSuccessParams)\n                        .then(onSuccessFromServer, onFailureFromServer);\n                }, self);\n\n                submitSuccessRequest();\n\n                return promise;\n            }\n\n            // If we are not asking the local server about the file, just delegate to the parent `_onComplete`.\n            return qq.FineUploaderBasic.prototype._onComplete.apply(this, arguments);\n        },\n\n        // If the failure occurred on an upload success request (and a reset was not ordered), try to resend that instead.\n        _manualRetry: function(id) {\n            var successRequestCallback = this._failedSuccessRequestCallbacks[id];\n\n            return qq.FineUploaderBasic.prototype._manualRetry.call(this, id, successRequestCallback);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploaderBasic mode w/ support for uploading to S3, which provides all the basic\n * functionality of Fine Uploader Basic as well as code to handle uploads directly to S3.\n * Some inherited options and API methods have a special meaning in the context of the S3 uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.s3.FineUploaderBasic = function(o) {\n        var options = {\n            request: {\n                // public key (required for server-side signing, ignored if `credentials` have been provided)\n                accessKey: null,\n\n                // padding, in milliseconds, to add to the x-amz-date header & the policy expiration date\n                clockDrift: 0\n            },\n\n            objectProperties: {\n                acl: \"private\",\n\n                // string or a function which may be promissory\n                bucket: qq.bind(function(id) {\n                    return qq.s3.util.getBucket(this.getEndpoint(id));\n                }, this),\n\n                // string or a function which may be promissory - only used for V4 multipart uploads\n                host: qq.bind(function(id) {\n                    return (/(?:http|https):\\/\\/(.+)(?:\\/.+)?/).exec(this._endpointStore.get(id))[1];\n                }, this),\n\n                // 'uuid', 'filename', or a function which may be promissory\n                key: \"uuid\",\n\n                reducedRedundancy: false,\n\n                // Defined at http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\n                region: \"us-east-1\",\n\n                serverSideEncryption: false\n            },\n\n            credentials: {\n                // Public key (required).\n                accessKey: null,\n                // Private key (required).\n                secretKey: null,\n                // Expiration date for the credentials (required).  May be an ISO string or a `Date`.\n                expiration: null,\n                // Temporary credentials session token.\n                // Only required for temporary credentials obtained via AssumeRoleWithWebIdentity.\n                sessionToken: null\n            },\n\n            // All but `version` are ignored if `credentials` is provided.\n            signature: {\n                customHeaders: {},\n                endpoint: null,\n                version: 2\n            },\n\n            uploadSuccess: {\n                endpoint: null,\n\n                method: \"POST\",\n\n                // In addition to the default params sent by Fine Uploader\n                params: {},\n\n                customHeaders: {}\n            },\n\n            // required if non-File-API browsers, such as IE9 and older, are used\n            iframeSupport: {\n                localBlankPagePath: null\n            },\n\n            chunking: {\n                // minimum part size is 5 MiB when uploading to S3\n                partSize: 5242880\n            },\n\n            cors: {\n                allowXdr: true\n            },\n\n            callbacks: {\n                onCredentialsExpired: function() {}\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        if (!this.setCredentials(options.credentials, true)) {\n            this._currentCredentials.accessKey = options.request.accessKey;\n        }\n\n        this._aclStore = this._createStore(options.objectProperties.acl);\n\n        // Call base module\n        qq.FineUploaderBasic.call(this, options);\n\n        this._uploadSuccessParamsStore = this._createStore(this._options.uploadSuccess.params);\n        this._uploadSuccessEndpointStore = this._createStore(this._options.uploadSuccess.endpoint);\n\n        // This will hold callbacks for failed uploadSuccess requests that will be invoked on retry.\n        // Indexed by file ID.\n        this._failedSuccessRequestCallbacks = {};\n\n        // Holds S3 keys for file representations constructed from a session request.\n        this._cannedKeys = {};\n        // Holds S3 buckets for file representations constructed from a session request.\n        this._cannedBuckets = {};\n\n        this._buckets = {};\n        this._hosts = {};\n    };\n\n    // Inherit basic public & private API methods.\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePublicApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePrivateApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePublicApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.s3.FineUploaderBasic.prototype, {\n        getBucket: function(id) {\n            if (this._cannedBuckets[id] == null) {\n                return this._buckets[id];\n            }\n            return this._cannedBuckets[id];\n        },\n\n        /**\n         * @param id File ID\n         * @returns {*} Key name associated w/ the file, if one exists\n         */\n        getKey: function(id) {\n            /* jshint eqnull:true */\n            if (this._cannedKeys[id] == null) {\n                return this._handler.getThirdPartyFileId(id);\n            }\n\n            return this._cannedKeys[id];\n        },\n\n        /**\n         * Override the parent's reset function to cleanup various S3-related items.\n         */\n        reset: function() {\n            qq.FineUploaderBasic.prototype.reset.call(this);\n            this._failedSuccessRequestCallbacks = [];\n            this._buckets = {};\n            this._hosts = {};\n        },\n\n        setCredentials: function(credentials, ignoreEmpty) {\n            if (credentials && credentials.secretKey) {\n                if (!credentials.accessKey) {\n                    throw new qq.Error(\"Invalid credentials: no accessKey\");\n                }\n                else if (!credentials.expiration) {\n                    throw new qq.Error(\"Invalid credentials: no expiration\");\n                }\n                else {\n                    this._currentCredentials = qq.extend({}, credentials);\n\n                    // Ensure expiration is a `Date`.  If initially a string, assuming it is in ISO format.\n                    if (qq.isString(credentials.expiration)) {\n                        this._currentCredentials.expiration = new Date(credentials.expiration);\n                    }\n                }\n\n                return true;\n            }\n            else if (!ignoreEmpty) {\n                throw new qq.Error(\"Invalid credentials parameter!\");\n            }\n            else {\n                this._currentCredentials = {};\n            }\n        },\n\n        setAcl: function(acl, id) {\n            this._aclStore.set(acl, id);\n        },\n\n        /**\n         * Ensures the parent's upload handler creator passes any additional S3-specific options to the handler as well\n         * as information required to instantiate the specific handler based on the current browser's capabilities.\n         *\n         * @returns {qq.UploadHandlerController}\n         * @private\n         */\n        _createUploadHandler: function() {\n            var self = this,\n                additionalOptions = {\n                    aclStore: this._aclStore,\n                    getBucket: qq.bind(this._determineBucket, this),\n                    getHost: qq.bind(this._determineHost, this),\n                    getKeyName: qq.bind(this._determineKeyName, this),\n                    iframeSupport: this._options.iframeSupport,\n                    objectProperties: this._options.objectProperties,\n                    signature: this._options.signature,\n                    clockDrift: this._options.request.clockDrift,\n                    // pass size limit validation values to include in the request so AWS enforces this server-side\n                    validation: {\n                        minSizeLimit: this._options.validation.minSizeLimit,\n                        maxSizeLimit: this._options.validation.sizeLimit\n                    }\n                };\n\n            // We assume HTTP if it is missing from the start of the endpoint string.\n            qq.override(this._endpointStore, function(super_) {\n                return {\n                    get: function(id) {\n                        var endpoint = super_.get(id);\n\n                        if (endpoint.indexOf(\"http\") < 0) {\n                            return \"http://\" + endpoint;\n                        }\n\n                        return endpoint;\n                    }\n                };\n            });\n\n            // Some param names should be lower case to avoid signature mismatches\n            qq.override(this._paramsStore, function(super_) {\n                return {\n                    get: function(id) {\n                        var oldParams = super_.get(id),\n                            modifiedParams = {};\n\n                        qq.each(oldParams, function(name, val) {\n                            var paramName = name;\n\n                            if (qq.indexOf(qq.s3.util.CASE_SENSITIVE_PARAM_NAMES, paramName) < 0) {\n                                paramName = paramName.toLowerCase();\n                            }\n\n                            modifiedParams[paramName] = qq.isFunction(val) ? val() : val;\n                        });\n\n                        return modifiedParams;\n                    }\n                };\n            });\n\n            additionalOptions.signature.credentialsProvider = {\n                get: function() {\n                    return self._currentCredentials;\n                },\n\n                onExpired: function() {\n                    var updateCredentials = new qq.Promise(),\n                        callbackRetVal = self._options.callbacks.onCredentialsExpired();\n\n                    if (qq.isGenericPromise(callbackRetVal)) {\n                        callbackRetVal.then(function(credentials) {\n                            try {\n                                self.setCredentials(credentials);\n                                updateCredentials.success();\n                            }\n                            catch (error) {\n                                self.log(\"Invalid credentials returned from onCredentialsExpired callback! (\" + error.message + \")\", \"error\");\n                                updateCredentials.failure(\"onCredentialsExpired did not return valid credentials.\");\n                            }\n                        }, function(errorMsg) {\n                            self.log(\"onCredentialsExpired callback indicated failure! (\" + errorMsg + \")\", \"error\");\n                            updateCredentials.failure(\"onCredentialsExpired callback failed.\");\n                        });\n                    }\n                    else {\n                        self.log(\"onCredentialsExpired callback did not return a promise!\", \"error\");\n                        updateCredentials.failure(\"Unexpected return value for onCredentialsExpired.\");\n                    }\n\n                    return updateCredentials;\n                }\n            };\n\n            return qq.FineUploaderBasic.prototype._createUploadHandler.call(this, additionalOptions, \"s3\");\n        },\n\n        _determineObjectPropertyValue: function(id, property) {\n            var maybe = this._options.objectProperties[property],\n                promise = new qq.Promise(),\n                self = this;\n\n            if (qq.isFunction(maybe)) {\n                maybe = maybe(id);\n                if (qq.isGenericPromise(maybe)) {\n                    promise = maybe;\n                }\n                else {\n                    promise.success(maybe);\n                }\n            }\n            else if (qq.isString(maybe)) {\n                promise.success(maybe);\n            }\n\n            promise.then(\n                function success(value) {\n                    self[\"_\" + property + \"s\"][id] = value;\n                },\n\n                function failure(errorMsg) {\n                    qq.log(\"Problem determining \" + property + \" for ID \" + id + \" (\" + errorMsg + \")\", \"error\");\n                }\n            );\n\n            return promise;\n        },\n\n        _determineBucket: function(id) {\n            return this._determineObjectPropertyValue(id, \"bucket\");\n        },\n\n        _determineHost: function(id) {\n            return this._determineObjectPropertyValue(id, \"host\");\n        },\n\n        /**\n         * Determine the file's key name and passes it to the caller via a promissory callback.  This also may\n         * delegate to an integrator-defined function that determines the file's key name on demand,\n         * which also may be promissory.\n         *\n         * @param id ID of the file\n         * @param filename Name of the file\n         * @returns {qq.Promise} A promise that will be fulfilled when the key name has been determined (and will be passed to the caller via the success callback).\n         * @private\n         */\n        _determineKeyName: function(id, filename) {\n            /*jshint -W015*/\n            var promise = new qq.Promise(),\n                keynameLogic = this._options.objectProperties.key,\n                extension = qq.getExtension(filename),\n                onGetKeynameFailure = promise.failure,\n                onGetKeynameSuccess = function(keyname, extension) {\n                    var keynameToUse = keyname;\n\n                    if (extension !== undefined) {\n                        keynameToUse += \".\" + extension;\n                    }\n\n                    promise.success(keynameToUse);\n                };\n\n            switch (keynameLogic) {\n                case \"uuid\":\n                    onGetKeynameSuccess(this.getUuid(id), extension);\n                    break;\n                case \"filename\":\n                    onGetKeynameSuccess(filename);\n                    break;\n                default:\n                    if (qq.isFunction(keynameLogic)) {\n                        this._handleKeynameFunction(keynameLogic, id, onGetKeynameSuccess, onGetKeynameFailure);\n                    }\n                    else {\n                        this.log(keynameLogic + \" is not a valid value for the s3.keyname option!\", \"error\");\n                        onGetKeynameFailure();\n                    }\n            }\n\n            return promise;\n        },\n\n        /**\n         * Called by the internal onUpload handler if the integrator has supplied a function to determine\n         * the file's key name.  The integrator's function may be promissory.  We also need to fulfill\n         * the promise contract associated with the caller as well.\n         *\n         * @param keynameFunc Integrator-supplied function that must be executed to determine the key name.  May be promissory.\n         * @param id ID of the associated file\n         * @param successCallback Invoke this if key name retrieval is successful, passing in the key name.\n         * @param failureCallback Invoke this if key name retrieval was unsuccessful.\n         * @private\n         */\n        _handleKeynameFunction: function(keynameFunc, id, successCallback, failureCallback) {\n            var self = this,\n                onSuccess = function(keyname) {\n                    successCallback(keyname);\n                },\n                onFailure = function(reason) {\n                    self.log(qq.format(\"Failed to retrieve key name for {}.  Reason: {}\", id, reason || \"null\"), \"error\");\n                    failureCallback(reason);\n                },\n                keyname = keynameFunc.call(this, id);\n\n            if (qq.isGenericPromise(keyname)) {\n                keyname.then(onSuccess, onFailure);\n            }\n            /*jshint -W116*/\n            else if (keyname == null) {\n                onFailure();\n            }\n            else {\n                onSuccess(keyname);\n            }\n        },\n\n        _getEndpointSpecificParams: function(id, response, maybeXhr) {\n            var params = {\n                key: this.getKey(id),\n                uuid: this.getUuid(id),\n                name: this.getName(id),\n                bucket: this.getBucket(id)\n            };\n\n            if (maybeXhr && maybeXhr.getResponseHeader(\"ETag\")) {\n                params.etag = maybeXhr.getResponseHeader(\"ETag\");\n            }\n            else if (response.etag) {\n                params.etag = response.etag;\n            }\n\n            return params;\n        },\n\n        // Hooks into the base internal `_onSubmitDelete` to add key and bucket params to the delete file request.\n        _onSubmitDelete: function(id, onSuccessCallback) {\n            var additionalMandatedParams = {\n                key: this.getKey(id),\n                bucket: this.getBucket(id)\n            };\n\n            return qq.FineUploaderBasic.prototype._onSubmitDelete.call(this, id, onSuccessCallback, additionalMandatedParams);\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id;\n\n            /* jshint eqnull:true */\n            if (sessionData.s3Key == null) {\n                throw new qq.Error(\"Did not find s3Key property in server session response.  This is required!\");\n            }\n            else {\n                id = qq.FineUploaderBasic.prototype._addCannedFile.apply(this, arguments);\n                this._cannedKeys[id] = sessionData.s3Key;\n                this._cannedBuckets[id] = sessionData.s3Bucket;\n            }\n\n            return id;\n        }\n    });\n}());\n","/* globals qq, CryptoJS */\n\n// IE 10 does not support Uint8ClampedArray. We don't need it, but CryptoJS attempts to reference it\n// inside a conditional via an instanceof check, which breaks S3 v4 signatures for chunked uploads.\nif (!window.Uint8ClampedArray) {\n    window.Uint8ClampedArray = function() {};\n}\n/**\n * Handles signature determination for HTML Form Upload requests and Multipart Uploader requests (via the S3 REST API).\n *\n * If the S3 requests are to be signed server side, this module will send a POST request to the server in an attempt\n * to solicit signatures for various S3-related requests.  This module also parses the response and attempts\n * to determine if the effort was successful.\n *\n * If the S3 requests are to be signed client-side, without the help of a server, this module will utilize CryptoJS to\n * sign the requests directly in the browser and send them off to S3.\n *\n * @param o Options associated with all such requests\n * @returns {{getSignature: Function}} API method used to initiate the signature request.\n * @constructor\n */\nqq.s3.RequestSigner = function(o) {\n    \"use strict\";\n\n    var requester,\n        thisSignatureRequester = this,\n        pendingSignatures = {},\n        options = {\n            expectingPolicy: false,\n            method: \"POST\",\n            signatureSpec: {\n                drift: 0,\n                credentialsProvider: {},\n                endpoint: null,\n                customHeaders: {},\n                version: 2\n            },\n            maxConnections: 3,\n            endpointStore: {},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {}\n        },\n        credentialsProvider,\n\n        generateHeaders = function(signatureConstructor, signature, promise) {\n            var headers = signatureConstructor.getHeaders();\n\n            if (options.signatureSpec.version === 4) {\n                headers.Authorization = qq.s3.util.V4_ALGORITHM_PARAM_VALUE +\n                    \" Credential=\" + options.signatureSpec.credentialsProvider.get().accessKey + \"/\" +\n                    qq.s3.util.getCredentialsDate(signatureConstructor.getRequestDate()) + \"/\" +\n                    options.signatureSpec.region + \"/\" +\n                    \"s3/aws4_request,\" +\n                    \"SignedHeaders=\" + signatureConstructor.getSignedHeaders() + \",\" +\n                    \"Signature=\" + signature;\n            }\n            else {\n                headers.Authorization = \"AWS \" + options.signatureSpec.credentialsProvider.get().accessKey + \":\" + signature;\n            }\n\n            promise.success(headers, signatureConstructor.getEndOfUrl());\n        },\n\n        v2 = {\n            getStringToSign: function(signatureSpec) {\n                return qq.format(\"{}\\n{}\\n{}\\n\\n{}/{}/{}\",\n                    signatureSpec.method,\n                    signatureSpec.contentMd5 || \"\",\n                    signatureSpec.contentType || \"\",\n                    signatureSpec.headersStr || \"\\n\",\n                    signatureSpec.bucket,\n                    signatureSpec.endOfUrl);\n            },\n\n            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {\n                var headersWordArray = qq.CryptoJS.enc.Utf8.parse(headersStr),\n                    headersHmacSha1 = qq.CryptoJS.HmacSHA1(headersWordArray, credentialsProvider.get().secretKey),\n                    headersHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(headersHmacSha1);\n\n                generateHeaders(signatureConstructor, headersHmacSha1Base64, signatureEffort);\n            },\n\n            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\n                var policyStr = JSON.stringify(policy),\n                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),\n                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),\n                    policyHmacSha1 = qq.CryptoJS.HmacSHA1(base64Policy, credentialsProvider.get().secretKey),\n                    policyHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(policyHmacSha1);\n\n                signatureEffort.success({\n                    policy: base64Policy,\n                    signature: policyHmacSha1Base64\n                }, updatedAccessKey, updatedSessionToken);\n            }\n        },\n\n        v4 = {\n            getCanonicalQueryString: function(endOfUri) {\n                var queryParamIdx = endOfUri.indexOf(\"?\"),\n                    canonicalQueryString = \"\",\n                    encodedQueryParams, encodedQueryParamNames, queryStrings;\n\n                if (queryParamIdx >= 0) {\n                    encodedQueryParams = {};\n                    queryStrings = endOfUri.substr(queryParamIdx + 1).split(\"&\");\n\n                    qq.each(queryStrings, function(idx, queryString) {\n                        var nameAndVal = queryString.split(\"=\"),\n                            paramVal = nameAndVal[1];\n\n                        if (paramVal == null) {\n                            paramVal = \"\";\n                        }\n\n                        encodedQueryParams[encodeURIComponent(nameAndVal[0])] = encodeURIComponent(paramVal);\n                    });\n\n                    encodedQueryParamNames = Object.keys(encodedQueryParams).sort();\n                    encodedQueryParamNames.forEach(function(encodedQueryParamName, idx) {\n                        canonicalQueryString += encodedQueryParamName + \"=\" + encodedQueryParams[encodedQueryParamName];\n                        if (idx < encodedQueryParamNames.length - 1) {\n                            canonicalQueryString += \"&\";\n                        }\n                    });\n                }\n\n                return canonicalQueryString;\n            },\n\n            getCanonicalRequest: function(signatureSpec) {\n                return qq.format(\"{}\\n{}\\n{}\\n{}\\n{}\\n{}\",\n                    signatureSpec.method,\n                    v4.getCanonicalUri(signatureSpec.endOfUrl),\n                    v4.getCanonicalQueryString(signatureSpec.endOfUrl),\n                    signatureSpec.headersStr || \"\\n\",\n                    v4.getSignedHeaders(signatureSpec.headerNames),\n                    signatureSpec.hashedContent);\n            },\n\n            getCanonicalUri: function(endOfUri) {\n                var path = endOfUri,\n                    queryParamIdx = endOfUri.indexOf(\"?\");\n\n                if (queryParamIdx > 0) {\n                    path = endOfUri.substr(0, queryParamIdx);\n                }\n                return escape(\"/\" + decodeURIComponent(path));\n            },\n\n            getEncodedHashedPayload: function(body) {\n                var promise = new qq.Promise(),\n                    reader;\n\n                if (qq.isBlob(body)) {\n                    // TODO hash blob in webworker if this becomes a notable perf issue\n                    reader = new FileReader();\n                    reader.onloadend = function(e) {\n                        if (e.target.readyState === FileReader.DONE) {\n                            if (e.target.error) {\n                                promise.failure(e.target.error);\n                            }\n                            else {\n                                var wordArray = qq.CryptoJS.lib.WordArray.create(e.target.result);\n                                promise.success(qq.CryptoJS.SHA256(wordArray).toString());\n                            }\n                        }\n                    };\n                    reader.readAsArrayBuffer(body);\n                }\n                else {\n                    body = body || \"\";\n                    promise.success(qq.CryptoJS.SHA256(body).toString());\n                }\n\n                return promise;\n            },\n\n            getScope: function(date, region) {\n                return qq.s3.util.getCredentialsDate(date) + \"/\" +\n                    region + \"/s3/aws4_request\";\n            },\n\n            getStringToSign: function(signatureSpec) {\n                var canonicalRequest = v4.getCanonicalRequest(signatureSpec),\n                    date = qq.s3.util.getV4PolicyDate(signatureSpec.date, signatureSpec.drift),\n                    hashedRequest = qq.CryptoJS.SHA256(canonicalRequest).toString(),\n                    scope = v4.getScope(signatureSpec.date, options.signatureSpec.region),\n                    stringToSignTemplate = \"AWS4-HMAC-SHA256\\n{}\\n{}\\n{}\";\n\n                return {\n                    hashed: qq.format(stringToSignTemplate, date, scope, hashedRequest),\n                    raw: qq.format(stringToSignTemplate, date, scope, canonicalRequest)\n                };\n            },\n\n            getSignedHeaders: function(headerNames) {\n                var signedHeaders = \"\";\n\n                headerNames.forEach(function(headerName, idx) {\n                    signedHeaders += headerName.toLowerCase();\n\n                    if (idx < headerNames.length - 1) {\n                        signedHeaders += \";\";\n                    }\n                });\n\n                return signedHeaders;\n            },\n\n            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {\n                var secretKey = credentialsProvider.get().secretKey,\n                    headersPattern = /.+\\n.+\\n(\\d+)\\/(.+)\\/s3\\/.+\\n(.+)/,\n                    matches = headersPattern.exec(headersStr),\n                    dateKey, dateRegionKey, dateRegionServiceKey, signingKey;\n\n                dateKey = qq.CryptoJS.HmacSHA256(matches[1], \"AWS4\" + secretKey);\n                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);\n                dateRegionServiceKey = qq.CryptoJS.HmacSHA256(\"s3\", dateRegionKey);\n                signingKey = qq.CryptoJS.HmacSHA256(\"aws4_request\", dateRegionServiceKey);\n\n                generateHeaders(signatureConstructor, qq.CryptoJS.HmacSHA256(headersStr, signingKey), signatureEffort);\n            },\n\n            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\n                var policyStr = JSON.stringify(policy),\n                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),\n                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),\n                    secretKey = credentialsProvider.get().secretKey,\n                    credentialPattern = /.+\\/(.+)\\/(.+)\\/s3\\/aws4_request/,\n                    credentialCondition = (function() {\n                        var credential = null;\n                        qq.each(policy.conditions, function(key, condition) {\n                            var val = condition[\"x-amz-credential\"];\n                            if (val) {\n                                credential = val;\n                                return false;\n                            }\n                        });\n                        return credential;\n                    }()),\n                    matches, dateKey, dateRegionKey, dateRegionServiceKey, signingKey;\n\n                matches = credentialPattern.exec(credentialCondition);\n                dateKey = qq.CryptoJS.HmacSHA256(matches[1], \"AWS4\" + secretKey);\n                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);\n                dateRegionServiceKey = qq.CryptoJS.HmacSHA256(\"s3\", dateRegionKey);\n                signingKey = qq.CryptoJS.HmacSHA256(\"aws4_request\", dateRegionServiceKey);\n\n                signatureEffort.success({\n                    policy: base64Policy,\n                    signature: qq.CryptoJS.HmacSHA256(base64Policy, signingKey).toString()\n                }, updatedAccessKey, updatedSessionToken);\n            }\n        };\n\n    qq.extend(options, o, true);\n    credentialsProvider = options.signatureSpec.credentialsProvider;\n\n    function handleSignatureReceived(id, xhrOrXdr, isError) {\n        var responseJson = xhrOrXdr.responseText,\n            pendingSignatureData = pendingSignatures[id],\n            promise = pendingSignatureData.promise,\n            signatureConstructor = pendingSignatureData.signatureConstructor,\n            errorMessage, response;\n\n        delete pendingSignatures[id];\n\n        // Attempt to parse what we would expect to be a JSON response\n        if (responseJson) {\n            try {\n                response = qq.parseJson(responseJson);\n            }\n            catch (error) {\n                options.log(\"Error attempting to parse signature response: \" + error, \"error\");\n            }\n        }\n\n        // If we have received a parsable response, and it has an `invalid` property,\n        // the policy document or request headers may have been tampered with client-side.\n        if (response && response.invalid) {\n            isError = true;\n            errorMessage = \"Invalid policy document or request headers!\";\n        }\n        // Make sure the response contains policy & signature properties\n        else if (response) {\n            if (options.expectingPolicy && !response.policy) {\n                isError = true;\n                errorMessage = \"Response does not include the base64 encoded policy!\";\n            }\n            else if (!response.signature) {\n                isError = true;\n                errorMessage = \"Response does not include the signature!\";\n            }\n        }\n        // Something unknown went wrong\n        else {\n            isError = true;\n            errorMessage = \"Received an empty or invalid response from the server!\";\n        }\n\n        if (isError) {\n            if (errorMessage) {\n                options.log(errorMessage, \"error\");\n            }\n\n            promise.failure(errorMessage);\n        }\n        else if (signatureConstructor) {\n            generateHeaders(signatureConstructor, response.signature, promise);\n        }\n        else {\n            promise.success(response);\n        }\n    }\n\n    function getStringToSignArtifacts(id, version, requestInfo) {\n        var promise = new qq.Promise(),\n            method = \"POST\",\n            headerNames = [],\n            headersStr = \"\",\n            now = new Date(),\n            endOfUrl, signatureSpec, toSign,\n\n            generateStringToSign = function(requestInfo) {\n                var contentMd5,\n                    headerIndexesToRemove = [];\n\n                qq.each(requestInfo.headers, function(name) {\n                    headerNames.push(name);\n                });\n                headerNames.sort();\n\n                qq.each(headerNames, function(idx, headerName) {\n                    if (qq.indexOf(qq.s3.util.UNSIGNABLE_REST_HEADER_NAMES, headerName) < 0) {\n                        headersStr += headerName.toLowerCase() + \":\" + requestInfo.headers[headerName].trim() + \"\\n\";\n                    }\n                    else if (headerName === \"Content-MD5\") {\n                        contentMd5 = requestInfo.headers[headerName];\n                    }\n                    else {\n                        headerIndexesToRemove.unshift(idx);\n                    }\n                });\n\n                qq.each(headerIndexesToRemove, function(idx, headerIdx) {\n                    headerNames.splice(headerIdx, 1);\n                });\n\n                signatureSpec = {\n                    bucket: requestInfo.bucket,\n                    contentMd5: contentMd5,\n                    contentType: requestInfo.contentType,\n                    date: now,\n                    drift: options.signatureSpec.drift,\n                    endOfUrl: endOfUrl,\n                    hashedContent: requestInfo.hashedContent,\n                    headerNames: headerNames,\n                    headersStr: headersStr,\n                    method: method\n                };\n\n                toSign = version === 2 ? v2.getStringToSign(signatureSpec) : v4.getStringToSign(signatureSpec);\n\n                return {\n                    date: now,\n                    endOfUrl: endOfUrl,\n                    signedHeaders: version === 4 ? v4.getSignedHeaders(signatureSpec.headerNames) : null,\n                    toSign: version === 4 ? toSign.hashed : toSign,\n                    toSignRaw: version === 4 ? toSign.raw : toSign\n                };\n            };\n\n        /*jshint indent:false */\n        switch (requestInfo.type) {\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_ABORT:\n                method = \"DELETE\";\n                endOfUrl = qq.format(\"uploadId={}\", requestInfo.uploadId);\n                break;\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_INITIATE:\n                endOfUrl = \"uploads\";\n                break;\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_COMPLETE:\n                endOfUrl = qq.format(\"uploadId={}\", requestInfo.uploadId);\n                break;\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_UPLOAD:\n                method = \"PUT\";\n                endOfUrl = qq.format(\"partNumber={}&uploadId={}\", requestInfo.partNum, requestInfo.uploadId);\n                break;\n        }\n\n        endOfUrl = requestInfo.key + \"?\" + endOfUrl;\n\n        if (version === 4) {\n            v4.getEncodedHashedPayload(requestInfo.content).then(function(hashedContent) {\n                requestInfo.headers[\"x-amz-content-sha256\"] = hashedContent;\n                requestInfo.headers.Host = requestInfo.host;\n                requestInfo.headers[\"x-amz-date\"] = qq.s3.util.getV4PolicyDate(now, options.signatureSpec.drift);\n                requestInfo.hashedContent = hashedContent;\n\n                promise.success(generateStringToSign(requestInfo));\n            });\n        }\n        else {\n            promise.success(generateStringToSign(requestInfo));\n        }\n\n        return promise;\n    }\n\n    function determineSignatureClientSide(id, toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken) {\n        var updatedHeaders;\n\n        // REST API request\n        if (toBeSigned.signatureConstructor) {\n            if (updatedSessionToken) {\n                updatedHeaders = toBeSigned.signatureConstructor.getHeaders();\n                updatedHeaders[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;\n                toBeSigned.signatureConstructor.withHeaders(updatedHeaders);\n            }\n\n            toBeSigned.signatureConstructor.getToSign(id).then(function(signatureArtifacts) {\n                signApiRequest(toBeSigned.signatureConstructor, signatureArtifacts.stringToSign, signatureEffort);\n            });\n        }\n        // Form upload (w/ policy document)\n        else {\n            updatedSessionToken && qq.s3.util.refreshPolicyCredentials(toBeSigned, updatedSessionToken);\n            signPolicy(toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken);\n        }\n    }\n\n    function signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\n        if (options.signatureSpec.version === 4) {\n            v4.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);\n        }\n        else {\n            v2.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);\n        }\n    }\n\n    function signApiRequest(signatureConstructor, headersStr, signatureEffort) {\n        if (options.signatureSpec.version === 4) {\n            v4.signApiRequest(signatureConstructor, headersStr, signatureEffort);\n        }\n        else {\n            v2.signApiRequest(signatureConstructor, headersStr, signatureEffort);\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        method: options.method,\n        contentType: \"application/json; charset=utf-8\",\n        endpointStore: {\n            get: function() {\n                return options.signatureSpec.endpoint;\n            }\n        },\n        paramsStore: options.paramsStore,\n        maxConnections: options.maxConnections,\n        customHeaders: options.signatureSpec.customHeaders,\n        log: options.log,\n        onComplete: handleSignatureReceived,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        /**\n         * On success, an object containing the parsed JSON response will be passed into the success handler if the\n         * request succeeds.  Otherwise an error message will be passed into the failure method.\n         *\n         * @param id File ID.\n         * @param toBeSigned an Object that holds the item(s) to be signed\n         * @returns {qq.Promise} A promise that is fulfilled when the response has been received.\n         */\n        getSignature: function(id, toBeSigned) {\n            var params = toBeSigned,\n                signatureConstructor = toBeSigned.signatureConstructor,\n                signatureEffort = new qq.Promise(),\n                queryParams;\n\n            if (options.signatureSpec.version === 4) {\n                queryParams = {v4: true};\n            }\n\n            if (credentialsProvider.get().secretKey && qq.CryptoJS) {\n                if (credentialsProvider.get().expiration.getTime() > Date.now()) {\n                    determineSignatureClientSide(id, toBeSigned, signatureEffort);\n                }\n                // If credentials are expired, ask for new ones before attempting to sign request\n                else {\n                    credentialsProvider.onExpired().then(function() {\n                        determineSignatureClientSide(id, toBeSigned,\n                            signatureEffort,\n                            credentialsProvider.get().accessKey,\n                            credentialsProvider.get().sessionToken);\n                    }, function(errorMsg) {\n                        options.log(\"Attempt to update expired credentials apparently failed! Unable to sign request.  \", \"error\");\n                        signatureEffort.failure(\"Unable to sign request - expired credentials.\");\n                    });\n                }\n            }\n            else {\n                options.log(\"Submitting S3 signature request for \" + id);\n\n                if (signatureConstructor) {\n                    signatureConstructor.getToSign(id).then(function(signatureArtifacts) {\n                        params = {headers: signatureArtifacts.stringToSignRaw};\n                        requester.initTransport(id)\n                            .withParams(params)\n                            .withQueryParams(queryParams)\n                            .send();\n                    });\n                }\n                else {\n                    requester.initTransport(id)\n                        .withParams(params)\n                        .withQueryParams(queryParams)\n                        .send();\n                }\n\n                pendingSignatures[id] = {\n                    promise: signatureEffort,\n                    signatureConstructor: signatureConstructor\n                };\n            }\n\n            return signatureEffort;\n        },\n\n        constructStringToSign: function(type, bucket, host, key) {\n            var headers = {},\n                uploadId, content, contentType, partNum, artifacts;\n\n            return {\n                withHeaders: function(theHeaders) {\n                    headers = theHeaders;\n                    return this;\n                },\n\n                withUploadId: function(theUploadId) {\n                    uploadId = theUploadId;\n                    return this;\n                },\n\n                withContent: function(theContent) {\n                    content = theContent;\n                    return this;\n                },\n\n                withContentType: function(theContentType) {\n                    contentType = theContentType;\n                    return this;\n                },\n\n                withPartNum: function(thePartNum) {\n                    partNum = thePartNum;\n                    return this;\n                },\n\n                getToSign: function(id) {\n                    var sessionToken = credentialsProvider.get().sessionToken,\n                        promise = new qq.Promise(),\n                        adjustedDate = new Date(Date.now() + options.signatureSpec.drift);\n\n                    headers[\"x-amz-date\"] = adjustedDate.toUTCString();\n\n                    if (sessionToken) {\n                        headers[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\n                    }\n\n                    getStringToSignArtifacts(id, options.signatureSpec.version, {\n                        bucket: bucket,\n                        content: content,\n                        contentType: contentType,\n                        headers: headers,\n                        host: host,\n                        key: key,\n                        partNum: partNum,\n                        type: type,\n                        uploadId: uploadId\n                    }).then(function(_artifacts_) {\n                        artifacts = _artifacts_;\n                        promise.success({\n                            headers: (function() {\n                                if (contentType) {\n                                    headers[\"Content-Type\"] = contentType;\n                                }\n\n                                delete headers.Host; // we don't want this to be set on the XHR-initiated request\n                                return headers;\n                            }()),\n                            date: artifacts.date,\n                            endOfUrl: artifacts.endOfUrl,\n                            signedHeaders: artifacts.signedHeaders,\n                            stringToSign: artifacts.toSign,\n                            stringToSignRaw: artifacts.toSignRaw\n                        });\n                    });\n\n                    return promise;\n                },\n\n                getHeaders: function() {\n                    return qq.extend({}, headers);\n                },\n\n                getEndOfUrl: function() {\n                    return artifacts && artifacts.endOfUrl;\n                },\n\n                getRequestDate: function() {\n                    return artifacts && artifacts.date;\n                },\n\n                getSignedHeaders: function() {\n                    return artifacts && artifacts.signedHeaders;\n                }\n            };\n        }\n    });\n};\n\nqq.s3.RequestSigner.prototype.REQUEST_TYPE = {\n    MULTIPART_INITIATE: \"multipart_initiate\",\n    MULTIPART_COMPLETE: \"multipart_complete\",\n    MULTIPART_ABORT: \"multipart_abort\",\n    MULTIPART_UPLOAD: \"multipart_upload\"\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Sends a POST request to the server to notify it of a successful upload to an endpoint.  The server is expected to indicate success\n * or failure via the response status.  Specific information about the failure can be passed from the server via an `error`\n * property (by default) in an \"application/json\" response.\n *\n * @param o Options associated with all requests.\n * @constructor\n */\nqq.UploadSuccessAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingRequests = [],\n        options = {\n            method: \"POST\",\n            endpoint: null,\n            maxConnections: 3,\n            customHeaders: {},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    function handleSuccessResponse(id, xhrOrXdr, isError) {\n        var promise = pendingRequests[id],\n            responseJson = xhrOrXdr.responseText,\n            successIndicator = {success: true},\n            failureIndicator = {success: false},\n            parsedResponse;\n\n        delete pendingRequests[id];\n\n        options.log(qq.format(\"Received the following response body to an upload success request for id {}: {}\", id, responseJson));\n\n        try {\n            parsedResponse = qq.parseJson(responseJson);\n\n            // If this is a cross-origin request, the server may return a 200 response w/ error or success properties\n            // in order to ensure any specific error message is picked up by Fine Uploader for all browsers,\n            // since XDomainRequest (used in IE9 and IE8) doesn't give you access to the\n            // response body for an \"error\" response.\n            if (isError || (parsedResponse && (parsedResponse.error || parsedResponse.success === false))) {\n                options.log(\"Upload success request was rejected by the server.\", \"error\");\n                promise.failure(qq.extend(parsedResponse, failureIndicator));\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(qq.extend(parsedResponse, successIndicator));\n            }\n        }\n        catch (error) {\n            // This will be executed if a JSON response is not present.  This is not mandatory, so account for this properly.\n            if (isError) {\n                options.log(qq.format(\"Your server indicated failure in its upload success request response for id {}!\", id), \"error\");\n                promise.failure(failureIndicator);\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(successIndicator);\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        method: options.method,\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        paramsStore: options.paramsStore,\n        maxConnections: options.maxConnections,\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: handleSuccessResponse,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends a request to the server, notifying it that a recently submitted file was successfully sent.\n         *\n         * @param id ID of the associated file\n         * @param spec `Object` with the properties that correspond to important values that we want to\n         * send to the server with this request.\n         * @returns {qq.Promise} A promise to be fulfilled when the response has been received and parsed.  The parsed\n         * payload of the response will be passed into the `failure` or `success` promise method.\n         */\n        sendSuccessRequest: function(id, spec) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting upload success request/notification for \" + id);\n\n            requester.initTransport(id)\n                .withParams(spec)\n                .send();\n\n            pendingRequests[id] = promise;\n\n            return promise;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send an [\"Initiate Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadInitiate.html)\n * request to S3 via the REST API.\n *\n * @param o Options from the caller - will override the defaults.\n * @constructor\n */\nqq.s3.InitiateMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingInitiateRequests = {},\n        options = {\n            filenameParam: \"qqfilename\",\n            method: \"POST\",\n            endpointStore: null,\n            paramsStore: null,\n            signatureSpec: null,\n            aclStore: null,\n            reducedRedundancy: false,\n            serverSideEncryption: false,\n            maxConnections: 3,\n            getContentType: function(id) {},\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            getName: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Determine all headers for the \"Initiate MPU\" request, including the \"Authorization\" header, which must be determined\n     * by the local server.  This is a promissory function.  If the server responds with a signature, the headers\n     * (including the Authorization header) will be passed into the success method of the promise.  Otherwise, the failure\n     * method on the promise will be called.\n     *\n     * @param id Associated file ID\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id) {\n        var bucket = options.getBucket(id),\n            host = options.getHost(id),\n            headers = {},\n            promise = new qq.Promise(),\n            key = options.getKey(id),\n            signatureConstructor;\n\n        headers[\"x-amz-acl\"] = options.aclStore.get(id);\n\n        if (options.reducedRedundancy) {\n            headers[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\n        }\n\n        if (options.serverSideEncryption) {\n            headers[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\n        }\n\n        headers[qq.s3.util.AWS_PARAM_PREFIX + options.filenameParam] = encodeURIComponent(options.getName(id));\n\n        qq.each(options.paramsStore.get(id), function(name, val) {\n            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {\n                headers[name] = val;\n            }\n            else {\n                headers[qq.s3.util.AWS_PARAM_PREFIX + name] = encodeURIComponent(val);\n            }\n        });\n\n        signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n            (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_INITIATE, bucket, host, key)\n            .withContentType(options.getContentType(id))\n            .withHeaders(headers);\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Initiate MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleInitiateRequestComplete(id, xhr, isError) {\n        var promise = pendingInitiateRequests[id],\n            domParser = new DOMParser(),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            uploadIdElements, messageElements, uploadId, errorMessage, status;\n\n        delete pendingInitiateRequests[id];\n\n        // The base ajax requester may declare the request to be a failure based on status code.\n        if (isError) {\n            status = xhr.status;\n\n            messageElements = responseDoc.getElementsByTagName(\"Message\");\n            if (messageElements.length > 0) {\n                errorMessage = messageElements[0].textContent;\n            }\n        }\n        // If the base ajax requester has not declared this a failure, make sure we can retrieve the uploadId from the response.\n        else {\n            uploadIdElements = responseDoc.getElementsByTagName(\"UploadId\");\n            if (uploadIdElements.length > 0) {\n                uploadId = uploadIdElements[0].textContent;\n            }\n            else {\n                errorMessage = \"Upload ID missing from request\";\n            }\n        }\n\n        // Either fail the promise (passing a descriptive error message) or declare it a success (passing the upload ID)\n        if (uploadId === undefined) {\n            if (errorMessage) {\n                options.log(qq.format(\"Specific problem detected initiating multipart upload request for {}: '{}'.\", id, errorMessage), \"error\");\n            }\n            else {\n                options.log(qq.format(\"Unexplained error with initiate multipart upload request for {}.  Status code {}.\", id, status), \"error\");\n            }\n\n            promise.failure(\"Problem initiating upload request.\", xhr);\n        }\n        else {\n            options.log(qq.format(\"Initiate multipart upload request successful for {}.  Upload ID is {}\", id, uploadId));\n            promise.success(uploadId, xhr);\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        method: options.method,\n        contentType: null,\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleInitiateRequestComplete,\n        successfulResponseCodes: {\n            POST: [200]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Initiate MPU\" request to AWS via the REST API.  First, though, we must get a signature from the\n         * local server for the request.  If all is successful, the uploadId from AWS will be passed into the promise's\n         * success handler. Otherwise, an error message will ultimately be passed into the failure method.\n         *\n         * @param id The ID associated with the file\n         * @returns {qq.Promise}\n         */\n        send: function(id) {\n            var promise = new qq.Promise();\n\n            getHeaders(id).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 initiate multipart upload request for \" + id);\n\n                pendingInitiateRequests[id] = promise;\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .send();\n            }, promise.failure);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send an [\"Complete Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadComplete.html)\n * request to S3 via the REST API.\n *\n * @param o Options passed by the creator, to overwrite any default option values.\n * @constructor\n */\nqq.s3.CompleteMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingCompleteRequests = {},\n        options = {\n            method: \"POST\",\n            contentType: \"text/xml\",\n            endpointStore: null,\n            signatureSpec: null,\n            maxConnections: 3,\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    // Transport for requesting signatures (for the \"Complete\" requests) from the local server\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Attach all required headers (including Authorization) to the \"Complete\" request.  This is a promissory function\n     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that\n     * prevents headers from being attached.\n     *\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id, uploadId, body) {\n        var headers = {},\n            promise = new qq.Promise(),\n            bucket = options.getBucket(id),\n            host = options.getHost(id),\n            signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_COMPLETE, bucket, host, options.getKey(id))\n                .withUploadId(uploadId)\n                .withContent(body)\n                .withContentType(\"application/xml; charset=UTF-8\");\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Complete MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleCompleteRequestComplete(id, xhr, isError) {\n        var promise = pendingCompleteRequests[id],\n            domParser = new DOMParser(),\n            bucket = options.getBucket(id),\n            key = options.getKey(id),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            bucketEls = responseDoc.getElementsByTagName(\"Bucket\"),\n            keyEls = responseDoc.getElementsByTagName(\"Key\");\n\n        delete pendingCompleteRequests[id];\n\n        options.log(qq.format(\"Complete response status {}, body = {}\", xhr.status, xhr.responseText));\n\n        // If the base requester has determine this a failure, give up.\n        if (isError) {\n            options.log(qq.format(\"Complete Multipart Upload request for {} failed with status {}.\", id, xhr.status), \"error\");\n        }\n        else {\n            // Make sure the correct bucket and key has been specified in the XML response from AWS.\n            if (bucketEls.length && keyEls.length) {\n                if (bucketEls[0].textContent !== bucket) {\n                    isError = true;\n                    options.log(qq.format(\"Wrong bucket in response to Complete Multipart Upload request for {}.\", id), \"error\");\n                }\n\n                // TODO Compare key name from response w/ expected key name if AWS ever fixes the encoding of key names in this response.\n            }\n            else {\n                isError = true;\n                options.log(qq.format(\"Missing bucket and/or key in response to Complete Multipart Upload request for {}.\", id), \"error\");\n            }\n        }\n\n        if (isError) {\n            promise.failure(\"Problem combining the file parts!\", xhr);\n        }\n        else {\n            promise.success({}, xhr);\n        }\n    }\n\n    /**\n     * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.\n     * @returns {string} XML string containing the body to send with the \"Complete\" request\n     */\n    function getCompleteRequestBody(etagEntries) {\n        var doc = document.implementation.createDocument(null, \"CompleteMultipartUpload\", null);\n\n        // The entries MUST be sorted by part number, per the AWS API spec.\n        etagEntries.sort(function(a, b) {\n            return a.part - b.part;\n        });\n\n        // Construct an XML document for each pair of etag/part values that correspond to part uploads.\n        qq.each(etagEntries, function(idx, etagEntry) {\n            var part = etagEntry.part,\n                etag = etagEntry.etag,\n                partEl = doc.createElement(\"Part\"),\n                partNumEl = doc.createElement(\"PartNumber\"),\n                partNumTextEl = doc.createTextNode(part),\n                etagTextEl = doc.createTextNode(etag),\n                etagEl = doc.createElement(\"ETag\");\n\n            etagEl.appendChild(etagTextEl);\n            partNumEl.appendChild(partNumTextEl);\n            partEl.appendChild(partNumEl);\n            partEl.appendChild(etagEl);\n            qq(doc).children()[0].appendChild(partEl);\n        });\n\n        // Turn the resulting XML document into a string fit for transport.\n        return new XMLSerializer().serializeToString(doc);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        method: options.method,\n        contentType: \"application/xml; charset=UTF-8\",\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleCompleteRequestComplete,\n        successfulResponseCodes: {\n            POST: [200]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Complete\" request and fulfills the returned promise when the success of this request is known.\n         *\n         * @param id ID associated with the file.\n         * @param uploadId AWS uploadId for this file\n         * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.\n         * @returns {qq.Promise}\n         */\n        send: function(id, uploadId, etagEntries) {\n            var promise = new qq.Promise(),\n                body = getCompleteRequestBody(etagEntries);\n\n            getHeaders(id, uploadId, body).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 complete multipart upload request for \" + id);\n\n                pendingCompleteRequests[id] = promise;\n                delete headers[\"Content-Type\"];\n\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .withPayload(body)\n                    .send();\n            }, promise.failure);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n/**\n * Ajax requester used to send an [\"Abort Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadAbort.html)\n * request to S3 via the REST API.\n\n * @param o\n * @constructor\n */\nqq.s3.AbortMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            endpointStore: null,\n            signatureSpec: null,\n            maxConnections: 3,\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    // Transport for requesting signatures (for the \"Complete\" requests) from the local server\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Attach all required headers (including Authorization) to the \"Abort\" request.  This is a promissory function\n     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that\n     * prevents headers from being attached.\n     *\n     * @param id Associated file ID\n     * @param uploadId ID of the associated upload, according to AWS\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id, uploadId) {\n        var headers = {},\n            promise = new qq.Promise(),\n            bucket = options.getBucket(id),\n            host = options.getHost(id),\n            signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_ABORT, bucket, host, options.getKey(id))\n                .withUploadId(uploadId);\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Abort MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleAbortRequestComplete(id, xhr, isError) {\n        var domParser = new DOMParser(),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            errorEls = responseDoc.getElementsByTagName(\"Error\"),\n            awsErrorMsg;\n\n        options.log(qq.format(\"Abort response status {}, body = {}\", xhr.status, xhr.responseText));\n\n        // If the base requester has determine this a failure, give up.\n        if (isError) {\n            options.log(qq.format(\"Abort Multipart Upload request for {} failed with status {}.\", id, xhr.status), \"error\");\n        }\n        else {\n            // Make sure the correct bucket and key has been specified in the XML response from AWS.\n            if (errorEls.length) {\n                isError = true;\n                awsErrorMsg = responseDoc.getElementsByTagName(\"Message\")[0].textContent;\n                options.log(qq.format(\"Failed to Abort Multipart Upload request for {}.  Error: {}\", id, awsErrorMsg), \"error\");\n            }\n            else {\n                options.log(qq.format(\"Abort MPU request succeeded for file ID {}.\", id));\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [\"DELETE\"],\n        method: options.method,\n        contentType: null,\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleAbortRequestComplete,\n        successfulResponseCodes: {\n            DELETE: [204]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Abort\" request.\n         *\n         * @param id ID associated with the file.\n         * @param uploadId AWS uploadId for this file\n         */\n        send: function(id, uploadId) {\n            getHeaders(id, uploadId).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 Abort multipart upload request for \" + id);\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .send();\n            });\n        }\n    });\n};\n","/*globals qq */\n/**\n * Upload handler used by the upload to S3 module that depends on File API support, and, therefore, makes use of\n * `XMLHttpRequest` level 2 to upload `File`s and `Blob`s directly to S3 buckets via the associated AWS API.\n *\n * If chunking is supported and enabled, the S3 Multipart Upload REST API is utilized.\n *\n * @param spec Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.s3.XhrUploadHandler = function(spec, proxy) {\n    \"use strict\";\n\n    var getName = proxy.getName,\n        log = proxy.log,\n        clockDrift = spec.clockDrift,\n        expectedStatus = 200,\n        onGetBucket = spec.getBucket,\n        onGetHost = spec.getHost,\n        onGetKeyName = spec.getKeyName,\n        filenameParam = spec.filenameParam,\n        paramsStore = spec.paramsStore,\n        endpointStore = spec.endpointStore,\n        aclStore = spec.aclStore,\n        reducedRedundancy = spec.objectProperties.reducedRedundancy,\n        region = spec.objectProperties.region,\n        serverSideEncryption = spec.objectProperties.serverSideEncryption,\n        validation = spec.validation,\n        signature = qq.extend({region: region, drift: clockDrift}, spec.signature),\n        handler = this,\n        credentialsProvider = spec.signature.credentialsProvider,\n\n        chunked = {\n            // Sends a \"Complete Multipart Upload\" request and then signals completion of the upload\n            // when the response to this request has been parsed.\n            combine: function(id) {\n                var uploadId = handler._getPersistableData(id).uploadId,\n                    etagMap = handler._getPersistableData(id).etags,\n                    result = new qq.Promise();\n\n                requesters.completeMultipart.send(id, uploadId, etagMap).then(\n                    result.success,\n\n                    function failure(reason, xhr) {\n                        result.failure(upload.done(id, xhr).response, xhr);\n                    }\n                );\n\n                return result;\n            },\n\n            // The last step in handling a chunked upload.  This is called after each chunk has been sent.\n            // The request may be successful, or not.  If it was successful, we must extract the \"ETag\" element\n            // in the XML response and store that along with the associated part number.\n            // We need these items to \"Complete\" the multipart upload after all chunks have been successfully sent.\n            done: function(id, xhr, chunkIdx) {\n                var response = upload.response.parse(id, xhr),\n                    etag;\n\n                if (response.success) {\n                    etag = xhr.getResponseHeader(\"ETag\");\n\n                    if (!handler._getPersistableData(id).etags) {\n                        handler._getPersistableData(id).etags = [];\n                    }\n                    handler._getPersistableData(id).etags.push({part: chunkIdx + 1, etag: etag});\n                }\n            },\n\n            /**\n             * Determines headers that must be attached to the chunked (Multipart Upload) request.  One of these headers is an\n             * Authorization value, which must be determined by asking the local server to sign the request first.  So, this\n             * function returns a promise.  Once all headers are determined, the `success` method of the promise is called with\n             * the headers object.  If there was some problem determining the headers, we delegate to the caller's `failure`\n             * callback.\n             *\n             * @param id File ID\n             * @param chunkIdx Index of the chunk to PUT\n             * @returns {qq.Promise}\n             */\n            initHeaders: function(id, chunkIdx, blob) {\n                var headers = {},\n                    bucket = upload.bucket.getName(id),\n                    host = upload.host.getName(id),\n                    key = upload.key.urlSafe(id),\n                    promise = new qq.Promise(),\n                    signatureConstructor = requesters.restSignature.constructStringToSign\n                        (requesters.restSignature.REQUEST_TYPE.MULTIPART_UPLOAD, bucket, host, key)\n                        .withPartNum(chunkIdx + 1)\n                        .withContent(blob)\n                        .withUploadId(handler._getPersistableData(id).uploadId);\n\n                // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n                requesters.restSignature.getSignature(id + \".\" + chunkIdx, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n                return promise;\n            },\n\n            put: function(id, chunkIdx) {\n                var xhr = handler._createXhr(id, chunkIdx),\n                    chunkData = handler._getChunkData(id, chunkIdx),\n                    domain = spec.endpointStore.get(id),\n                    promise = new qq.Promise();\n\n                // Add appropriate headers to the multipart upload request.\n                // Once these have been determined (asynchronously) attach the headers and send the chunk.\n                chunked.initHeaders(id, chunkIdx, chunkData.blob).then(function(headers, endOfUrl) {\n                    if (xhr._cancelled) {\n                        log(qq.format(\"Upload of item {}.{} cancelled. Upload will not start after successful signature request.\", id, chunkIdx));\n                        promise.failure({error: \"Chunk upload cancelled\"});\n                    }\n                    else {\n                        var url = domain + \"/\" + endOfUrl;\n                        handler._registerProgressHandler(id, chunkIdx, chunkData.size);\n                        upload.track(id, xhr, chunkIdx).then(promise.success, promise.failure);\n                        xhr.open(\"PUT\", url, true);\n\n                        qq.each(headers, function(name, val) {\n                            xhr.setRequestHeader(name, val);\n                        });\n\n                        xhr.send(chunkData.blob);\n                    }\n                }, function() {\n                    promise.failure({error: \"Problem signing the chunk!\"}, xhr);\n                });\n\n                return promise;\n            },\n\n            send: function(id, chunkIdx) {\n                var promise = new qq.Promise();\n\n                chunked.setup(id).then(\n                    // The \"Initiate\" request succeeded.  We are ready to send the first chunk.\n                    function() {\n                        chunked.put(id, chunkIdx).then(promise.success, promise.failure);\n                    },\n\n                    // We were unable to initiate the chunked upload process.\n                    function(errorMessage, xhr) {\n                        promise.failure({error: errorMessage}, xhr);\n                    }\n                );\n\n                return promise;\n            },\n\n            /**\n             * Sends an \"Initiate Multipart Upload\" request to S3 via the REST API, but only if the MPU has not already been\n             * initiated.\n             *\n             * @param id Associated file ID\n             * @returns {qq.Promise} A promise that is fulfilled when the initiate request has been sent and the response has been parsed.\n             */\n            setup: function(id) {\n                var promise = new qq.Promise(),\n                    uploadId = handler._getPersistableData(id).uploadId,\n                    uploadIdPromise = new qq.Promise();\n\n                if (!uploadId) {\n                    handler._getPersistableData(id).uploadId = uploadIdPromise;\n                    requesters.initiateMultipart.send(id).then(\n                        function(uploadId) {\n                            handler._getPersistableData(id).uploadId = uploadId;\n                            uploadIdPromise.success(uploadId);\n                            promise.success(uploadId);\n                        },\n                        function(errorMsg, xhr) {\n                            handler._getPersistableData(id).uploadId = null;\n                            promise.failure(errorMsg, xhr);\n                            uploadIdPromise.failure(errorMsg, xhr);\n                        }\n                    );\n                }\n                else if (uploadId instanceof qq.Promise) {\n                    uploadId.then(function(uploadId) {\n                        promise.success(uploadId);\n                    });\n                }\n                else {\n                    promise.success(uploadId);\n                }\n\n                return promise;\n            }\n        },\n\n        requesters = {\n            abortMultipart: new qq.s3.AbortMultipartAjaxRequester({\n                endpointStore: endpointStore,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log,\n                getBucket: function(id) {\n                    return upload.bucket.getName(id);\n                },\n                getHost: function(id) {\n                    return upload.host.getName(id);\n                },\n                getKey: function(id) {\n                    return upload.key.urlSafe(id);\n                }\n            }),\n\n            completeMultipart: new qq.s3.CompleteMultipartAjaxRequester({\n                endpointStore: endpointStore,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log,\n                getBucket: function(id) {\n                    return upload.bucket.getName(id);\n                },\n                getHost: function(id) {\n                    return upload.host.getName(id);\n                },\n                getKey: function(id) {\n                    return upload.key.urlSafe(id);\n                }\n            }),\n\n            initiateMultipart: new qq.s3.InitiateMultipartAjaxRequester({\n                filenameParam: filenameParam,\n                endpointStore: endpointStore,\n                paramsStore: paramsStore,\n                signatureSpec: signature,\n                aclStore: aclStore,\n                reducedRedundancy: reducedRedundancy,\n                serverSideEncryption: serverSideEncryption,\n                cors: spec.cors,\n                log: log,\n                getContentType: function(id) {\n                    return handler._getMimeType(id);\n                },\n                getBucket: function(id) {\n                    return upload.bucket.getName(id);\n                },\n                getHost: function(id) {\n                    return upload.host.getName(id);\n                },\n                getKey: function(id) {\n                    return upload.key.urlSafe(id);\n                },\n                getName: function(id) {\n                    return getName(id);\n                }\n            }),\n\n            policySignature: new qq.s3.RequestSigner({\n                expectingPolicy: true,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log\n            }),\n\n            restSignature: new qq.s3.RequestSigner({\n                endpointStore: endpointStore,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log\n            })\n        },\n\n        simple = {\n            /**\n             * Used for simple (non-chunked) uploads to determine the parameters to send along with the request.  Part of this\n             * process involves asking the local server to sign the request, so this function returns a promise.  The promise\n             * is fulfilled when all parameters are determined, or when we determine that all parameters cannot be calculated\n             * due to some error.\n             *\n             * @param id File ID\n             * @returns {qq.Promise}\n             */\n            initParams: function(id) {\n                /*jshint -W040 */\n                var customParams = paramsStore.get(id);\n                customParams[filenameParam] = getName(id);\n\n                return qq.s3.util.generateAwsParams({\n                    endpoint: endpointStore.get(id),\n                    clockDrift: clockDrift,\n                    params: customParams,\n                    type: handler._getMimeType(id),\n                    bucket: upload.bucket.getName(id),\n                    key: handler.getThirdPartyFileId(id),\n                    accessKey: credentialsProvider.get().accessKey,\n                    sessionToken: credentialsProvider.get().sessionToken,\n                    acl: aclStore.get(id),\n                    expectedStatus: expectedStatus,\n                    minFileSize: validation.minSizeLimit,\n                    maxFileSize: validation.maxSizeLimit,\n                    reducedRedundancy: reducedRedundancy,\n                    region: region,\n                    serverSideEncryption: serverSideEncryption,\n                    signatureVersion: signature.version,\n                    log: log\n                },\n                qq.bind(requesters.policySignature.getSignature, this, id));\n            },\n\n            send: function(id) {\n                var promise = new qq.Promise(),\n                    xhr = handler._createXhr(id),\n                    fileOrBlob = handler.getFile(id);\n\n                handler._registerProgressHandler(id);\n                upload.track(id, xhr).then(promise.success, promise.failure);\n\n                // Delegate to a function the sets up the XHR request and notifies us when it is ready to be sent, along w/ the payload.\n                simple.setup(id, xhr, fileOrBlob).then(function(toSend) {\n                    log(\"Sending upload request for \" + id);\n                    xhr.send(toSend);\n                }, promise.failure);\n\n                return promise;\n            },\n\n            /**\n             * Starts the upload process by delegating to an async function that determine parameters to be attached to the\n             * request.  If all params can be determined, we are called back with the params and the caller of this function is\n             * informed by invoking the `success` method on the promise returned by this function, passing the payload of the\n             * request.  If some error occurs here, we delegate to a function that signals a failure for this upload attempt.\n             *\n             * Note that this is only used by the simple (non-chunked) upload process.\n             *\n             * @param id File ID\n             * @param xhr XMLHttpRequest to use for the upload\n             * @param fileOrBlob `File` or `Blob` to send\n             * @returns {qq.Promise}\n             */\n            setup: function(id, xhr, fileOrBlob) {\n                var formData = new FormData(),\n                    endpoint = endpointStore.get(id),\n                    url = endpoint,\n                    promise = new qq.Promise();\n\n                simple.initParams(id).then(\n                    // Success - all params determined\n                    function(awsParams) {\n                        xhr.open(\"POST\", url, true);\n\n                        qq.obj2FormData(awsParams, formData);\n\n                        // AWS requires the file field be named \"file\".\n                        formData.append(\"file\", fileOrBlob);\n\n                        promise.success(formData);\n                    },\n\n                    // Failure - we couldn't determine some params (likely the signature)\n                    function(errorMessage) {\n                        promise.failure({error: errorMessage});\n                    }\n                );\n\n                return promise;\n            }\n        },\n\n        upload = {\n            /**\n             * Note that this is called when an upload has reached a termination point,\n             * regardless of success/failure.  For example, it is called when we have\n             * encountered an error during the upload or when the file may have uploaded successfully.\n             *\n             * @param id file ID\n             */\n            bucket: {\n                promise: function(id) {\n                    var promise = new qq.Promise(),\n                        cachedBucket = handler._getFileState(id).bucket;\n\n                    if (cachedBucket) {\n                        promise.success(cachedBucket);\n                    }\n                    else {\n                        onGetBucket(id).then(function(bucket) {\n                            handler._getFileState(id).bucket = bucket;\n                            promise.success(bucket);\n                        }, promise.failure);\n                    }\n\n                    return promise;\n                },\n\n                getName: function(id) {\n                    return handler._getFileState(id).bucket;\n                }\n            },\n\n            host: {\n                promise: function(id) {\n                    var promise = new qq.Promise(),\n                        cachedHost = handler._getFileState(id).host;\n\n                    if (cachedHost) {\n                        promise.success(cachedHost);\n                    }\n                    else {\n                        onGetHost(id).then(function(host) {\n                            handler._getFileState(id).host = host;\n                            promise.success(host);\n                        }, promise.failure);\n                    }\n\n                    return promise;\n                },\n\n                getName: function(id) {\n                    return handler._getFileState(id).host;\n                }\n            },\n\n            done: function(id, xhr) {\n                var response = upload.response.parse(id, xhr),\n                    isError = response.success !== true;\n\n                if (isError && upload.response.shouldReset(response.code)) {\n                    log(\"This is an unrecoverable error, we must restart the upload entirely on the next retry attempt.\", \"error\");\n                    response.reset = true;\n                }\n\n                return {\n                    success: !isError,\n                    response: response\n                };\n            },\n\n            key: {\n                promise: function(id) {\n                    var promise = new qq.Promise(),\n                        key = handler.getThirdPartyFileId(id);\n\n                    /* jshint eqnull:true */\n                    if (key == null) {\n                        handler._setThirdPartyFileId(id, promise);\n                        onGetKeyName(id, getName(id)).then(\n                            function(keyName) {\n                                handler._setThirdPartyFileId(id, keyName);\n                                promise.success(keyName);\n                            },\n                            function(errorReason) {\n                                handler._setThirdPartyFileId(id, null);\n                                promise.failure(errorReason);\n                            }\n                        );\n                    }\n                    else if (qq.isGenericPromise(key)) {\n                        key.then(promise.success, promise.failure);\n                    }\n                    else {\n                        promise.success(key);\n                    }\n\n                    return promise;\n                },\n\n                urlSafe: function(id) {\n                    var encodedKey = encodeURIComponent(handler.getThirdPartyFileId(id));\n                    return encodedKey.replace(/%2F/g, \"/\");\n                }\n            },\n\n            response: {\n                parse: function(id, xhr) {\n                    var response = {},\n                        parsedErrorProps;\n\n                    try {\n                        log(qq.format(\"Received response status {} with body: {}\", xhr.status, xhr.responseText));\n\n                        if (xhr.status === expectedStatus) {\n                            response.success = true;\n                        }\n                        else {\n                            parsedErrorProps = upload.response.parseError(xhr.responseText);\n\n                            if (parsedErrorProps) {\n                                response.error = parsedErrorProps.message;\n                                response.code = parsedErrorProps.code;\n                            }\n                        }\n                    }\n                    catch (error) {\n                        log(\"Error when attempting to parse xhr response text (\" + error.message + \")\", \"error\");\n                    }\n\n                    return response;\n                },\n\n                /**\n                 * This parses an XML response by extracting the \"Message\" and \"Code\" elements that accompany AWS error responses.\n                 *\n                 * @param awsResponseXml XML response from AWS\n                 * @returns {object} Object w/ `code` and `message` properties, or undefined if we couldn't find error info in the XML document.\n                 */\n                parseError: function(awsResponseXml) {\n                    var parser = new DOMParser(),\n                        parsedDoc = parser.parseFromString(awsResponseXml, \"application/xml\"),\n                        errorEls = parsedDoc.getElementsByTagName(\"Error\"),\n                        errorDetails = {},\n                        codeEls, messageEls;\n\n                    if (errorEls.length) {\n                        codeEls = parsedDoc.getElementsByTagName(\"Code\");\n                        messageEls = parsedDoc.getElementsByTagName(\"Message\");\n\n                        if (messageEls.length) {\n                            errorDetails.message = messageEls[0].textContent;\n                        }\n\n                        if (codeEls.length) {\n                            errorDetails.code = codeEls[0].textContent;\n                        }\n\n                        return errorDetails;\n                    }\n                },\n\n                // Determine if the upload should be restarted on the next retry attempt\n                // based on the error code returned in the response from AWS.\n                shouldReset: function(errorCode) {\n                    /*jshint -W014 */\n                    return errorCode === \"EntityTooSmall\"\n                        || errorCode === \"InvalidPart\"\n                        || errorCode === \"InvalidPartOrder\"\n                        || errorCode === \"NoSuchUpload\";\n                }\n            },\n\n            start: function(id, optChunkIdx) {\n                var promise = new qq.Promise();\n\n                upload.key.promise(id).then(function() {\n                    upload.bucket.promise(id).then(function() {\n                        upload.host.promise(id).then(function() {\n                            /* jshint eqnull:true */\n                            if (optChunkIdx == null) {\n                                simple.send(id).then(promise.success, promise.failure);\n                            }\n                            else {\n                                chunked.send(id, optChunkIdx).then(promise.success, promise.failure);\n                            }\n                        });\n                    });\n                },\n                function(errorReason) {\n                    promise.failure({error: errorReason});\n                });\n\n                return promise;\n            },\n\n            track: function(id, xhr, optChunkIdx) {\n                var promise = new qq.Promise();\n\n                xhr.onreadystatechange = function() {\n                    if (xhr.readyState === 4) {\n                        var result;\n\n                        /* jshint eqnull:true */\n                        if (optChunkIdx == null) {\n                            result = upload.done(id, xhr);\n                            promise[result.success ? \"success\" : \"failure\"](result.response, xhr);\n                        }\n                        else {\n                            chunked.done(id, xhr, optChunkIdx);\n                            result = upload.done(id, xhr);\n                            promise[result.success ? \"success\" : \"failure\"](result.response, xhr);\n                        }\n                    }\n                };\n\n                return promise;\n            }\n        };\n\n    qq.extend(this, {\n        uploadChunk: upload.start,\n        uploadFile: upload.start\n    });\n\n    qq.extend(this, new qq.XhrUploadHandler({\n        options: qq.extend({namespace: \"s3\"}, spec),\n        proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\n    }));\n\n    qq.override(this, function(super_) {\n        return {\n            expunge: function(id) {\n                var uploadId = handler._getPersistableData(id) && handler._getPersistableData(id).uploadId,\n                    existedInLocalStorage = handler._maybeDeletePersistedChunkData(id);\n\n                if (uploadId !== undefined && existedInLocalStorage) {\n                    requesters.abortMultipart.send(id, uploadId);\n                }\n\n                super_.expunge(id);\n            },\n\n            finalizeChunks: function(id) {\n                return chunked.combine(id);\n            },\n\n            _getLocalStorageId: function(id) {\n                var baseStorageId = super_._getLocalStorageId(id),\n                    bucketName = upload.bucket.getName(id);\n\n                return baseStorageId + \"-\" + bucketName;\n            }\n        };\n    });\n};\n","/*globals qq */\n/**\n * Upload handler used by the upload to S3 module that assumes the current user agent does not have any support for the\n * File API, and, therefore, makes use of iframes and forms to submit the files directly to S3 buckets via the associated\n * AWS API.\n *\n * @param options Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.s3.FormUploadHandler = function(options, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        clockDrift = options.clockDrift,\n        onUuidChanged = proxy.onUuidChanged,\n        getName = proxy.getName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        onGetBucket = options.getBucket,\n        onGetKeyName = options.getKeyName,\n        filenameParam = options.filenameParam,\n        paramsStore = options.paramsStore,\n        endpointStore = options.endpointStore,\n        aclStore = options.aclStore,\n        reducedRedundancy = options.objectProperties.reducedRedundancy,\n        region = options.objectProperties.region,\n        serverSideEncryption = options.objectProperties.serverSideEncryption,\n        validation = options.validation,\n        signature = options.signature,\n        successRedirectUrl = options.iframeSupport.localBlankPagePath,\n        credentialsProvider = options.signature.credentialsProvider,\n        getSignatureAjaxRequester = new qq.s3.RequestSigner({\n            signatureSpec: signature,\n            cors: options.cors,\n            log: log\n        });\n\n    if (successRedirectUrl === undefined) {\n        throw new Error(\"successRedirectEndpoint MUST be defined if you intend to use browsers that do not support the File API!\");\n    }\n\n    /**\n     * Attempt to parse the contents of an iframe after receiving a response from the server.  If the contents cannot be\n     * read (perhaps due to a security error) it is safe to assume that the upload was not successful since Amazon should\n     * have redirected to a known endpoint that should provide a parseable response.\n     *\n     * @param id ID of the associated file\n     * @param iframe target of the form submit\n     * @returns {boolean} true if the contents can be read, false otherwise\n     */\n    function isValidResponse(id, iframe) {\n        var response,\n            endpoint = options.endpointStore.get(id),\n            bucket = handler._getFileState(id).bucket,\n            doc,\n            innerHtml,\n            responseData;\n\n        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n        try {\n            // iframe.contentWindow.document - for IE<7\n            doc = iframe.contentDocument || iframe.contentWindow.document;\n            innerHtml = doc.body.innerHTML;\n\n            responseData = qq.s3.util.parseIframeResponse(iframe);\n            if (responseData.bucket === bucket &&\n                responseData.key === qq.s3.util.encodeQueryStringParam(handler.getThirdPartyFileId(id))) {\n\n                return true;\n            }\n\n            log(\"Response from AWS included an unexpected bucket or key name.\", \"error\");\n\n        }\n        catch (error) {\n            log(\"Error when attempting to parse form upload response (\" + error.message + \")\", \"error\");\n        }\n\n        return false;\n    }\n\n    function generateAwsParams(id) {\n        /*jshint -W040 */\n        var customParams = paramsStore.get(id);\n\n        customParams[filenameParam] = getName(id);\n\n        return qq.s3.util.generateAwsParams({\n            endpoint: endpointStore.get(id),\n            clockDrift: clockDrift,\n            params: customParams,\n            bucket: handler._getFileState(id).bucket,\n            key: handler.getThirdPartyFileId(id),\n            accessKey: credentialsProvider.get().accessKey,\n            sessionToken: credentialsProvider.get().sessionToken,\n            acl: aclStore.get(id),\n            minFileSize: validation.minSizeLimit,\n            maxFileSize: validation.maxSizeLimit,\n            successRedirectUrl: successRedirectUrl,\n            reducedRedundancy: reducedRedundancy,\n            region: region,\n            serverSideEncryption: serverSideEncryption,\n            signatureVersion: signature.version,\n            log: log\n        },\n        qq.bind(getSignatureAjaxRequester.getSignature, this, id));\n    }\n\n    /**\n     * Creates form, that will be submitted to iframe\n     */\n    function createForm(id, iframe) {\n        var promise = new qq.Promise(),\n            method = \"POST\",\n            endpoint = options.endpointStore.get(id),\n            fileName = getName(id);\n\n        generateAwsParams(id).then(function(params) {\n            var form = handler._initFormForUpload({\n                method: method,\n                endpoint: endpoint,\n                params: params,\n                paramsInBody: true,\n                targetName: iframe.name\n            });\n\n            promise.success(form);\n        }, function(errorMessage) {\n            promise.failure(errorMessage);\n            handleFinishedUpload(id, iframe, fileName, {error: errorMessage});\n        });\n\n        return promise;\n    }\n\n    function handleUpload(id) {\n        var iframe = handler._createIframe(id),\n            input = handler.getInput(id),\n            promise = new qq.Promise();\n\n        createForm(id, iframe).then(function(form) {\n            form.appendChild(input);\n\n            // Register a callback when the response comes in from S3\n            handler._attachLoadEvent(iframe, function(response) {\n                log(\"iframe loaded\");\n\n                // If the common response handler has determined success or failure immediately\n                if (response) {\n                    // If there is something fundamentally wrong with the response (such as iframe content is not accessible)\n                    if (response.success === false) {\n                        log(\"Amazon likely rejected the upload request\", \"error\");\n                        promise.failure(response);\n                    }\n                }\n                // The generic response (iframe onload) handler was not able to make a determination regarding the success of the request\n                else {\n                    response = {};\n                    response.success = isValidResponse(id, iframe);\n\n                    // If the more specific response handle detected a problem with the response from S3\n                    if (response.success === false) {\n                        log(\"A success response was received by Amazon, but it was invalid in some way.\", \"error\");\n                        promise.failure(response);\n                    }\n                    else {\n                        qq.extend(response, qq.s3.util.parseIframeResponse(iframe));\n                        promise.success(response);\n                    }\n                }\n\n                handleFinishedUpload(id, iframe);\n            });\n\n            log(\"Sending upload request for \" + id);\n            form.submit();\n            qq(form).remove();\n        }, promise.failure);\n\n        return promise;\n    }\n\n    function handleFinishedUpload(id, iframe) {\n        handler._detachLoadEvent(id);\n        iframe && qq(iframe).remove();\n    }\n\n    qq.extend(this, new qq.FormUploadHandler({\n        options: {\n            isCors: false,\n            inputName: \"file\"\n        },\n\n        proxy: {\n            onCancel: options.onCancel,\n            onUuidChanged: onUuidChanged,\n            getName: getName,\n            getUuid: getUuid,\n            log: log\n        }\n    }));\n\n    qq.extend(this, {\n        uploadFile: function(id) {\n            var name = getName(id),\n                promise = new qq.Promise();\n\n            if (handler.getThirdPartyFileId(id)) {\n                if (handler._getFileState(id).bucket) {\n                    handleUpload(id).then(promise.success, promise.failure);\n                }\n                else {\n                    onGetBucket(id).then(function(bucket) {\n                        handler._getFileState(id).bucket = bucket;\n                        handleUpload(id).then(promise.success, promise.failure);\n                    });\n                }\n            }\n            else {\n                // The S3 uploader module will either calculate the key or ask the server for it\n                // and will call us back once it is known.\n                onGetKeyName(id, name).then(function(key) {\n                    onGetBucket(id).then(function(bucket) {\n                        handler._getFileState(id).bucket = bucket;\n                        handler._setThirdPartyFileId(id, key);\n                        handleUpload(id).then(promise.success, promise.failure);\n                    }, function(errorReason) {\n                        promise.failure({error: errorReason});\n                    });\n                }, function(errorReason) {\n                    promise.failure({error: errorReason});\n                });\n            }\n\n            return promise;\n        }\n    });\n};\n","/*globals qq, document, CustomEvent*/\nqq.DragAndDrop = function(o) {\n    \"use strict\";\n\n    var options,\n        HIDE_ZONES_EVENT_NAME = \"qq-hidezones\",\n        HIDE_BEFORE_ENTER_ATTR = \"qq-hide-dropzone\",\n        uploadDropZones = [],\n        droppedFiles = [],\n        disposeSupport = new qq.DisposeSupport();\n\n    options = {\n        dropZoneElements: [],\n        allowMultipleItems: true,\n        classes: {\n            dropActive: null\n        },\n        callbacks: new qq.DragAndDrop.callbacks()\n    };\n\n    qq.extend(options, o, true);\n\n    function uploadDroppedFiles(files, uploadDropZone) {\n        // We need to convert the `FileList` to an actual `Array` to avoid iteration issues\n        var filesAsArray = Array.prototype.slice.call(files);\n\n        options.callbacks.dropLog(\"Grabbed \" + files.length + \" dropped files.\");\n        uploadDropZone.dropDisabled(false);\n        options.callbacks.processingDroppedFilesComplete(filesAsArray, uploadDropZone.getElement());\n    }\n\n    function traverseFileTree(entry) {\n        var parseEntryPromise = new qq.Promise();\n\n        if (entry.isFile) {\n            entry.file(function(file) {\n                var name = entry.name,\n                    fullPath = entry.fullPath,\n                    indexOfNameInFullPath = fullPath.indexOf(name);\n\n                // remove file name from full path string\n                fullPath = fullPath.substr(0, indexOfNameInFullPath);\n\n                // remove leading slash in full path string\n                if (fullPath.charAt(0) === \"/\") {\n                    fullPath = fullPath.substr(1);\n                }\n\n                file.qqPath = fullPath;\n                droppedFiles.push(file);\n                parseEntryPromise.success();\n            },\n            function(fileError) {\n                options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                parseEntryPromise.failure();\n            });\n        }\n        else if (entry.isDirectory) {\n            getFilesInDirectory(entry).then(\n                function allEntriesRead(entries) {\n                    var entriesLeft = entries.length;\n\n                    qq.each(entries, function(idx, entry) {\n                        traverseFileTree(entry).done(function() {\n                            entriesLeft -= 1;\n\n                            if (entriesLeft === 0) {\n                                parseEntryPromise.success();\n                            }\n                        });\n                    });\n\n                    if (!entries.length) {\n                        parseEntryPromise.success();\n                    }\n                },\n\n                function readFailure(fileError) {\n                    options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                    parseEntryPromise.failure();\n                }\n            );\n        }\n\n        return parseEntryPromise;\n    }\n\n    // Promissory.  Guaranteed to read all files in the root of the passed directory.\n    function getFilesInDirectory(entry, reader, accumEntries, existingPromise) {\n        var promise = existingPromise || new qq.Promise(),\n            dirReader = reader || entry.createReader();\n\n        dirReader.readEntries(\n            function readSuccess(entries) {\n                var newEntries = accumEntries ? accumEntries.concat(entries) : entries;\n\n                if (entries.length) {\n                    setTimeout(function() { // prevent stack overflow, however unlikely\n                        getFilesInDirectory(entry, dirReader, newEntries, promise);\n                    }, 0);\n                }\n                else {\n                    promise.success(newEntries);\n                }\n            },\n\n            promise.failure\n        );\n\n        return promise;\n    }\n\n    function handleDataTransfer(dataTransfer, uploadDropZone) {\n        var pendingFolderPromises = [],\n            handleDataTransferPromise = new qq.Promise();\n\n        options.callbacks.processingDroppedFiles();\n        uploadDropZone.dropDisabled(true);\n\n        if (dataTransfer.files.length > 1 && !options.allowMultipleItems) {\n            options.callbacks.processingDroppedFilesComplete([]);\n            options.callbacks.dropError(\"tooManyFilesError\", \"\");\n            uploadDropZone.dropDisabled(false);\n            handleDataTransferPromise.failure();\n        }\n        else {\n            droppedFiles = [];\n\n            if (qq.isFolderDropSupported(dataTransfer)) {\n                qq.each(dataTransfer.items, function(idx, item) {\n                    var entry = item.webkitGetAsEntry();\n\n                    if (entry) {\n                        //due to a bug in Chrome's File System API impl - #149735\n                        if (entry.isFile) {\n                            droppedFiles.push(item.getAsFile());\n                        }\n\n                        else {\n                            pendingFolderPromises.push(traverseFileTree(entry).done(function() {\n                                pendingFolderPromises.pop();\n                                if (pendingFolderPromises.length === 0) {\n                                    handleDataTransferPromise.success();\n                                }\n                            }));\n                        }\n                    }\n                });\n            }\n            else {\n                droppedFiles = dataTransfer.files;\n            }\n\n            if (pendingFolderPromises.length === 0) {\n                handleDataTransferPromise.success();\n            }\n        }\n\n        return handleDataTransferPromise;\n    }\n\n    function setupDropzone(dropArea) {\n        var dropZone = new qq.UploadDropZone({\n            HIDE_ZONES_EVENT_NAME: HIDE_ZONES_EVENT_NAME,\n            element: dropArea,\n            onEnter: function(e) {\n                qq(dropArea).addClass(options.classes.dropActive);\n                e.stopPropagation();\n            },\n            onLeaveNotDescendants: function(e) {\n                qq(dropArea).removeClass(options.classes.dropActive);\n            },\n            onDrop: function(e) {\n                handleDataTransfer(e.dataTransfer, dropZone).then(\n                    function() {\n                        uploadDroppedFiles(droppedFiles, dropZone);\n                    },\n                    function() {\n                        options.callbacks.dropLog(\"Drop event DataTransfer parsing failed.  No files will be uploaded.\", \"error\");\n                    }\n                );\n            }\n        });\n\n        disposeSupport.addDisposer(function() {\n            dropZone.dispose();\n        });\n\n        qq(dropArea).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropArea).hide();\n\n        uploadDropZones.push(dropZone);\n\n        return dropZone;\n    }\n\n    function isFileDrag(dragEvent) {\n        var fileDrag;\n\n        qq.each(dragEvent.dataTransfer.types, function(key, val) {\n            if (val === \"Files\") {\n                fileDrag = true;\n                return false;\n            }\n        });\n\n        return fileDrag;\n    }\n\n    // Attempt to determine when the file has left the document.  It is not always possible to detect this\n    // in all cases, but it is generally possible in all browsers, with a few exceptions.\n    //\n    // Exceptions:\n    // * IE10+ & Safari: We can't detect a file leaving the document if the Explorer window housing the file\n    //                   overlays the browser window.\n    // * IE10+: If the file is dragged out of the window too quickly, IE does not set the expected values of the\n    //          event's X & Y properties.\n    function leavingDocumentOut(e) {\n        if (qq.firefox()) {\n            return !e.relatedTarget;\n        }\n\n        if (qq.safari()) {\n            return e.x < 0 || e.y < 0;\n        }\n\n        return e.x === 0 && e.y === 0;\n    }\n\n    function setupDragDrop() {\n        var dropZones = options.dropZoneElements,\n\n            maybeHideDropZones = function() {\n                setTimeout(function() {\n                    qq.each(dropZones, function(idx, dropZone) {\n                        qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropZone).hide();\n                        qq(dropZone).removeClass(options.classes.dropActive);\n                    });\n                }, 10);\n            };\n\n        qq.each(dropZones, function(idx, dropZone) {\n            var uploadDropZone = setupDropzone(dropZone);\n\n            // IE <= 9 does not support the File API used for drag+drop uploads\n            if (dropZones.length && qq.supportedFeatures.fileDrop) {\n                disposeSupport.attach(document, \"dragenter\", function(e) {\n                    if (!uploadDropZone.dropDisabled() && isFileDrag(e)) {\n                        qq.each(dropZones, function(idx, dropZone) {\n                            // We can't apply styles to non-HTMLElements, since they lack the `style` property.\n                            // Also, if the drop zone isn't initially hidden, let's not mess with `style.display`.\n                            if (dropZone instanceof HTMLElement &&\n                                qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR)) {\n\n                                qq(dropZone).css({display: \"block\"});\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        disposeSupport.attach(document, \"dragleave\", function(e) {\n            if (leavingDocumentOut(e)) {\n                maybeHideDropZones();\n            }\n        });\n\n        // Just in case we were not able to detect when a dragged file has left the document,\n        // hide all relevant drop zones the next time the mouse enters the document.\n        // Note that mouse events such as this one are not fired during drag operations.\n        disposeSupport.attach(qq(document).children()[0], \"mouseenter\", function(e) {\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, \"drop\", function(e) {\n            e.preventDefault();\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, HIDE_ZONES_EVENT_NAME, maybeHideDropZones);\n    }\n\n    setupDragDrop();\n\n    qq.extend(this, {\n        setupExtraDropzone: function(element) {\n            options.dropZoneElements.push(element);\n            setupDropzone(element);\n        },\n\n        removeDropzone: function(element) {\n            var i,\n                dzs = options.dropZoneElements;\n\n            for (i in dzs) {\n                if (dzs[i] === element) {\n                    return dzs.splice(i, 1);\n                }\n            }\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n            qq.each(uploadDropZones, function(idx, dropZone) {\n                dropZone.dispose();\n            });\n        }\n    });\n};\n\nqq.DragAndDrop.callbacks = function() {\n    \"use strict\";\n\n    return {\n        processingDroppedFiles: function() {},\n        processingDroppedFilesComplete: function(files, targetEl) {},\n        dropError: function(code, errorSpecifics) {\n            qq.log(\"Drag & drop error code '\" + code + \" with these specifics: '\" + errorSpecifics + \"'\", \"error\");\n        },\n        dropLog: function(message, level) {\n            qq.log(message, level);\n        }\n    };\n};\n\nqq.UploadDropZone = function(o) {\n    \"use strict\";\n\n    var disposeSupport = new qq.DisposeSupport(),\n        options, element, preventDrop, dropOutsideDisabled;\n\n    options = {\n        element: null,\n        onEnter: function(e) {},\n        onLeave: function(e) {},\n        // is not fired when leaving element by hovering descendants\n        onLeaveNotDescendants: function(e) {},\n        onDrop: function(e) {}\n    };\n\n    qq.extend(options, o);\n    element = options.element;\n\n    function dragoverShouldBeCanceled() {\n        return qq.safari() || (qq.firefox() && qq.windows());\n    }\n\n    function disableDropOutside(e) {\n        // run only once for all instances\n        if (!dropOutsideDisabled) {\n\n            // for these cases we need to catch onDrop to reset dropArea\n            if (dragoverShouldBeCanceled) {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    e.preventDefault();\n                });\n            } else {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    if (e.dataTransfer) {\n                        e.dataTransfer.dropEffect = \"none\";\n                        e.preventDefault();\n                    }\n                });\n            }\n\n            dropOutsideDisabled = true;\n        }\n    }\n\n    function isValidFileDrag(e) {\n        // e.dataTransfer currently causing IE errors\n        // IE9 does NOT support file API, so drag-and-drop is not possible\n        if (!qq.supportedFeatures.fileDrop) {\n            return false;\n        }\n\n        var effectTest, dt = e.dataTransfer,\n        // do not check dt.types.contains in webkit, because it crashes safari 4\n        isSafari = qq.safari();\n\n        // dt.effectAllowed is none in Safari 5\n        // dt.types.contains check is for firefox\n\n        // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n        // the filesystem\n        effectTest = qq.ie() && qq.supportedFeatures.fileDrop ? true : dt.effectAllowed !== \"none\";\n        return dt && effectTest && (dt.files || (!isSafari && dt.types.contains && dt.types.contains(\"Files\")));\n    }\n\n    function isOrSetDropDisabled(isDisabled) {\n        if (isDisabled !== undefined) {\n            preventDrop = isDisabled;\n        }\n        return preventDrop;\n    }\n\n    function triggerHidezonesEvent() {\n        var hideZonesEvent;\n\n        function triggerUsingOldApi() {\n            hideZonesEvent = document.createEvent(\"Event\");\n            hideZonesEvent.initEvent(options.HIDE_ZONES_EVENT_NAME, true, true);\n        }\n\n        if (window.CustomEvent) {\n            try {\n                hideZonesEvent = new CustomEvent(options.HIDE_ZONES_EVENT_NAME);\n            }\n            catch (err) {\n                triggerUsingOldApi();\n            }\n        }\n        else {\n            triggerUsingOldApi();\n        }\n\n        document.dispatchEvent(hideZonesEvent);\n    }\n\n    function attachEvents() {\n        disposeSupport.attach(element, \"dragover\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n            // the filesystem\n            var effect = qq.ie() && qq.supportedFeatures.fileDrop ? null : e.dataTransfer.effectAllowed;\n            if (effect === \"move\" || effect === \"linkMove\") {\n                e.dataTransfer.dropEffect = \"move\"; // for FF (only move allowed)\n            } else {\n                e.dataTransfer.dropEffect = \"copy\"; // for Chrome\n            }\n\n            e.stopPropagation();\n            e.preventDefault();\n        });\n\n        disposeSupport.attach(element, \"dragenter\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n                options.onEnter(e);\n            }\n        });\n\n        disposeSupport.attach(element, \"dragleave\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            options.onLeave(e);\n\n            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);\n            // do not fire when moving a mouse over a descendant\n            if (qq(this).contains(relatedTarget)) {\n                return;\n            }\n\n            options.onLeaveNotDescendants(e);\n        });\n\n        disposeSupport.attach(element, \"drop\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n\n                e.preventDefault();\n                e.stopPropagation();\n                options.onDrop(e);\n\n                triggerHidezonesEvent();\n            }\n        });\n    }\n\n    disableDropOutside();\n    attachEvents();\n\n    qq.extend(this, {\n        dropDisabled: function(isDisabled) {\n            return isOrSetDropDisabled(isDisabled);\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n        },\n\n        getElement: function() {\n            return element;\n        }\n    });\n};\n","/*globals qq */\n/**\n * Defines the public API for FineUploader mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.uiPublicApi = {\n        addInitialFiles: function(cannedFileList) {\n            this._parent.prototype.addInitialFiles.apply(this, arguments);\n            this._templating.addCacheToDom();\n        },\n\n        clearStoredFiles: function() {\n            this._parent.prototype.clearStoredFiles.apply(this, arguments);\n            this._templating.clearFiles();\n        },\n\n        addExtraDropzone: function(element) {\n            this._dnd && this._dnd.setupExtraDropzone(element);\n        },\n\n        removeExtraDropzone: function(element) {\n            if (this._dnd) {\n                return this._dnd.removeDropzone(element);\n            }\n        },\n\n        getItemByFileId: function(id) {\n            if (!this._templating.isHiddenForever(id)) {\n                return this._templating.getFileContainer(id);\n            }\n        },\n\n        reset: function() {\n            this._parent.prototype.reset.apply(this, arguments);\n            this._templating.reset();\n\n            if (!this._options.button && this._templating.getButton()) {\n                this._defaultButtonId = this._createUploadButton({\n                    element: this._templating.getButton(),\n                    title: this._options.text.fileInputTitle\n                }).getButtonId();\n            }\n\n            if (this._dnd) {\n                this._dnd.dispose();\n                this._dnd = this._setupDragAndDrop();\n            }\n\n            this._totalFilesInBatch = 0;\n            this._filesInBatchAddedToUi = 0;\n\n            this._setupClickAndEditEventHandlers();\n        },\n\n        setName: function(id, newName) {\n            var formattedFilename = this._options.formatFileName(newName);\n\n            this._parent.prototype.setName.apply(this, arguments);\n            this._templating.updateFilename(id, formattedFilename);\n        },\n\n        pauseUpload: function(id) {\n            var paused = this._parent.prototype.pauseUpload.apply(this, arguments);\n\n            paused && this._templating.uploadPaused(id);\n            return paused;\n        },\n\n        continueUpload: function(id) {\n            var continued = this._parent.prototype.continueUpload.apply(this, arguments);\n\n            continued && this._templating.uploadContinued(id);\n            return continued;\n        },\n\n        getId: function(fileContainerOrChildEl) {\n            return this._templating.getFileId(fileContainerOrChildEl);\n        },\n\n        getDropTarget: function(fileId) {\n            var file = this.getFile(fileId);\n\n            return file.qqDropTarget;\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploader mode.\n     */\n    qq.uiPrivateApi = {\n        _getButton: function(buttonId) {\n            var button = this._parent.prototype._getButton.apply(this, arguments);\n\n            if (!button) {\n                if (buttonId === this._defaultButtonId) {\n                    button = this._templating.getButton();\n                }\n            }\n\n            return button;\n        },\n\n        _removeFileItem: function(fileId) {\n            this._templating.removeFile(fileId);\n        },\n\n        _setupClickAndEditEventHandlers: function() {\n            this._fileButtonsClickHandler = qq.FileButtonsClickHandler && this._bindFileButtonsClickEvent();\n\n            // A better approach would be to check specifically for focusin event support by querying the DOM API,\n            // but the DOMFocusIn event is not exposed as a property, so we have to resort to UA string sniffing.\n            this._focusinEventSupported = !qq.firefox();\n\n            if (this._isEditFilenameEnabled())\n            {\n                this._filenameClickHandler = this._bindFilenameClickEvent();\n                this._filenameInputFocusInHandler = this._bindFilenameInputFocusInEvent();\n                this._filenameInputFocusHandler = this._bindFilenameInputFocusEvent();\n            }\n        },\n\n        _setupDragAndDrop: function() {\n            var self = this,\n                dropZoneElements = this._options.dragAndDrop.extraDropzones,\n                templating = this._templating,\n                defaultDropZone = templating.getDropZone();\n\n            defaultDropZone && dropZoneElements.push(defaultDropZone);\n\n            return new qq.DragAndDrop({\n                dropZoneElements: dropZoneElements,\n                allowMultipleItems: this._options.multiple,\n                classes: {\n                    dropActive: this._options.classes.dropActive\n                },\n                callbacks: {\n                    processingDroppedFiles: function() {\n                        templating.showDropProcessing();\n                    },\n                    processingDroppedFilesComplete: function(files, targetEl) {\n                        templating.hideDropProcessing();\n\n                        qq.each(files, function(idx, file) {\n                            file.qqDropTarget = targetEl;\n                        });\n\n                        if (files.length) {\n                            self.addFiles(files, null, null);\n                        }\n                    },\n                    dropError: function(code, errorData) {\n                        self._itemError(code, errorData);\n                    },\n                    dropLog: function(message, level) {\n                        self.log(message, level);\n                    }\n                }\n            });\n        },\n\n        _bindFileButtonsClickEvent: function() {\n            var self = this;\n\n            return new qq.FileButtonsClickHandler({\n                templating: this._templating,\n\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n\n                onDeleteFile: function(fileId) {\n                    self.deleteFile(fileId);\n                },\n\n                onCancel: function(fileId) {\n                    self.cancel(fileId);\n                },\n\n                onRetry: function(fileId) {\n                    self.retry(fileId);\n                },\n\n                onPause: function(fileId) {\n                    self.pauseUpload(fileId);\n                },\n\n                onContinue: function(fileId) {\n                    self.continueUpload(fileId);\n                },\n\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                }\n            });\n        },\n\n        _isEditFilenameEnabled: function() {\n            /*jshint -W014 */\n            return this._templating.isEditFilenamePossible()\n                && !this._options.autoUpload\n                && qq.FilenameClickHandler\n                && qq.FilenameInputFocusHandler\n                && qq.FilenameInputFocusHandler;\n        },\n\n        _filenameEditHandler: function() {\n            var self = this,\n                templating = this._templating;\n\n            return {\n                templating: templating,\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n                onGetUploadStatus: function(fileId) {\n                    return self.getUploads({id: fileId}).status;\n                },\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                },\n                onSetName: function(id, newName) {\n                    self.setName(id, newName);\n                },\n                onEditingStatusChange: function(id, isEditing) {\n                    var qqInput = qq(templating.getEditInput(id)),\n                        qqFileContainer = qq(templating.getFileContainer(id));\n\n                    if (isEditing) {\n                        qqInput.addClass(\"qq-editing\");\n                        templating.hideFilename(id);\n                        templating.hideEditIcon(id);\n                    }\n                    else {\n                        qqInput.removeClass(\"qq-editing\");\n                        templating.showFilename(id);\n                        templating.showEditIcon(id);\n                    }\n\n                    // Force IE8 and older to repaint\n                    qqFileContainer.addClass(\"qq-temp\").removeClass(\"qq-temp\");\n                }\n            };\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            this._parent.prototype._onUploadStatusChange.apply(this, arguments);\n\n            if (this._isEditFilenameEnabled()) {\n                // Status for a file exists before it has been added to the DOM, so we must be careful here.\n                if (this._templating.getFileContainer(id) && newStatus !== qq.status.SUBMITTED) {\n                    this._templating.markFilenameEditable(id);\n                    this._templating.hideEditIcon(id);\n                }\n            }\n\n            if (newStatus === qq.status.UPLOAD_RETRYING) {\n                this._templating.hideRetry(id);\n                this._templating.setStatusText(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.retrying);\n            }\n            else if (newStatus === qq.status.UPLOAD_FAILED) {\n                this._templating.hidePause(id);\n            }\n        },\n\n        _bindFilenameInputFocusInEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusInHandler(spec);\n        },\n\n        _bindFilenameInputFocusEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusHandler(spec);\n        },\n\n        _bindFilenameClickEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameClickHandler(spec);\n        },\n\n        _storeForLater: function(id) {\n            this._parent.prototype._storeForLater.apply(this, arguments);\n            this._templating.hideSpinner(id);\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._parent.prototype._onAllComplete.apply(this, arguments);\n            this._templating.resetTotalProgress();\n        },\n\n        _onSubmit: function(id, name) {\n            var file = this.getFile(id);\n\n            if (file && file.qqPath && this._options.dragAndDrop.reportDirectoryPaths) {\n                this._paramsStore.addReadOnly(id, {\n                    qqpath: file.qqPath\n                });\n            }\n\n            this._parent.prototype._onSubmit.apply(this, arguments);\n            this._addToList(id, name);\n        },\n\n        // The file item has been added to the DOM.\n        _onSubmitted: function(id) {\n            // If the edit filename feature is enabled, mark the filename element as \"editable\" and the associated edit icon\n            if (this._isEditFilenameEnabled()) {\n                this._templating.markFilenameEditable(id);\n                this._templating.showEditIcon(id);\n\n                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input\n                if (!this._focusinEventSupported) {\n                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));\n                }\n            }\n        },\n\n        // Update the progress bar & percentage as the file is uploaded\n        _onProgress: function(id, name, loaded, total) {\n            this._parent.prototype._onProgress.apply(this, arguments);\n\n            this._templating.updateProgress(id, loaded, total);\n\n            if (Math.round(loaded / total * 100) === 100) {\n                this._templating.hideCancel(id);\n                this._templating.hidePause(id);\n                this._templating.hideProgress(id);\n                this._templating.setStatusText(id, this._options.text.waitingForResponse);\n\n                // If ~last byte was sent, display total file size\n                this._displayFileSize(id);\n            }\n            else {\n                // If still uploading, display percentage - total size is actually the total request(s) size\n                this._displayFileSize(id, loaded, total);\n            }\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._parent.prototype._onTotalProgress.apply(this, arguments);\n            this._templating.updateTotalProgress(loaded, total);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            var parentRetVal = this._parent.prototype._onComplete.apply(this, arguments),\n                templating = this._templating,\n                fileContainer = templating.getFileContainer(id),\n                self = this;\n\n            function completeUpload(result) {\n                // If this file is not represented in the templating module, perhaps it was hidden intentionally.\n                // If so, don't perform any UI-related tasks related to this file.\n                if (!fileContainer) {\n                    return;\n                }\n\n                templating.setStatusText(id);\n\n                qq(fileContainer).removeClass(self._classes.retrying);\n                templating.hideProgress(id);\n\n                if (self.getUploads({id: id}).status !== qq.status.UPLOAD_FAILED) {\n                    templating.hideCancel(id);\n                }\n                templating.hideSpinner(id);\n\n                if (result.success) {\n                    self._markFileAsSuccessful(id);\n                }\n                else {\n                    qq(fileContainer).addClass(self._classes.fail);\n                    templating.showCancel(id);\n\n                    if (templating.isRetryPossible() && !self._preventRetries[id]) {\n                        qq(fileContainer).addClass(self._classes.retryable);\n                        templating.showRetry(id);\n                    }\n                    self._controlFailureTextDisplay(id, result);\n                }\n            }\n\n            // The parent may need to perform some async operation before we can accurately determine the status of the upload.\n            if (parentRetVal instanceof qq.Promise) {\n                parentRetVal.done(function(newResult) {\n                    completeUpload(newResult);\n                });\n\n            }\n            else {\n                completeUpload(result);\n            }\n\n            return parentRetVal;\n        },\n\n        _markFileAsSuccessful: function(id) {\n            var templating = this._templating;\n\n            if (this._isDeletePossible()) {\n                templating.showDeleteButton(id);\n            }\n\n            qq(templating.getFileContainer(id)).addClass(this._classes.success);\n\n            this._maybeUpdateThumbnail(id);\n        },\n\n        _onUploadPrep: function(id) {\n            this._parent.prototype._onUploadPrep.apply(this, arguments);\n            this._templating.showSpinner(id);\n        },\n\n        _onUpload: function(id, name) {\n            var parentRetVal = this._parent.prototype._onUpload.apply(this, arguments);\n\n            this._templating.showSpinner(id);\n\n            return parentRetVal;\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            this._parent.prototype._onUploadChunk.apply(this, arguments);\n\n            // Only display the pause button if we have finished uploading at least one chunk\n            // & this file can be resumed\n            if (chunkData.partIndex > 0 && this._handler.isResumable(id)) {\n                this._templating.allowPause(id);\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._parent.prototype._onCancel.apply(this, arguments);\n            this._removeFileItem(id);\n\n            if (this._getNotFinished() === 0) {\n                this._templating.resetTotalProgress();\n            }\n        },\n\n        _onBeforeAutoRetry: function(id) {\n            var retryNumForDisplay, maxAuto, retryNote;\n\n            this._parent.prototype._onBeforeAutoRetry.apply(this, arguments);\n\n            this._showCancelLink(id);\n\n            if (this._options.retry.showAutoRetryNote) {\n                retryNumForDisplay = this._autoRetries[id];\n                maxAuto = this._options.retry.maxAutoAttempts;\n\n                retryNote = this._options.retry.autoRetryNote.replace(/\\{retryNum\\}/g, retryNumForDisplay);\n                retryNote = retryNote.replace(/\\{maxAuto\\}/g, maxAuto);\n\n                this._templating.setStatusText(id, retryNote);\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retrying);\n            }\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            if (this._parent.prototype._onBeforeManualRetry.apply(this, arguments)) {\n                this._templating.resetProgress(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.fail);\n                this._templating.setStatusText(id);\n                this._templating.showSpinner(id);\n                this._showCancelLink(id);\n                return true;\n            }\n            else {\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retryable);\n                this._templating.showRetry(id);\n                return false;\n            }\n        },\n\n        _onSubmitDelete: function(id) {\n            var onSuccessCallback = qq.bind(this._onSubmitDeleteSuccess, this);\n\n            this._parent.prototype._onSubmitDelete.call(this, id, onSuccessCallback);\n        },\n\n        _onSubmitDeleteSuccess: function(id, uuid, additionalMandatedParams) {\n            if (this._options.deleteFile.forceConfirm) {\n                this._showDeleteConfirm.apply(this, arguments);\n            }\n            else {\n                this._sendDeleteRequest.apply(this, arguments);\n            }\n        },\n\n        _onDeleteComplete: function(id, xhr, isError) {\n            this._parent.prototype._onDeleteComplete.apply(this, arguments);\n\n            this._templating.hideSpinner(id);\n\n            if (isError) {\n                this._templating.setStatusText(id, this._options.deleteFile.deletingFailedText);\n                this._templating.showDeleteButton(id);\n            }\n            else {\n                this._removeFileItem(id);\n            }\n        },\n\n        _sendDeleteRequest: function(id, uuid, additionalMandatedParams) {\n            this._templating.hideDeleteButton(id);\n            this._templating.showSpinner(id);\n            this._templating.setStatusText(id, this._options.deleteFile.deletingStatusText);\n            this._deleteHandler.sendDelete.apply(this, arguments);\n        },\n\n        _showDeleteConfirm: function(id, uuid, mandatedParams) {\n            /*jshint -W004 */\n            var fileName = this.getName(id),\n                confirmMessage = this._options.deleteFile.confirmMessage.replace(/\\{filename\\}/g, fileName),\n                uuid = this.getUuid(id),\n                deleteRequestArgs = arguments,\n                self = this,\n                retVal;\n\n            retVal = this._options.showConfirm(confirmMessage);\n\n            if (qq.isGenericPromise(retVal)) {\n                retVal.then(function() {\n                    self._sendDeleteRequest.apply(self, deleteRequestArgs);\n                });\n            }\n            else if (retVal !== false) {\n                self._sendDeleteRequest.apply(self, deleteRequestArgs);\n            }\n        },\n\n        _addToList: function(id, name, canned) {\n            var prependData,\n                prependIndex = 0,\n                dontDisplay = this._handler.isProxied(id) && this._options.scaling.hideScaled,\n                record;\n\n            if (this._options.display.prependFiles) {\n                if (this._totalFilesInBatch > 1 && this._filesInBatchAddedToUi > 0) {\n                    prependIndex = this._filesInBatchAddedToUi - 1;\n                }\n\n                prependData = {\n                    index: prependIndex\n                };\n            }\n\n            if (!canned) {\n                if (this._options.disableCancelForFormUploads && !qq.supportedFeatures.ajaxUploading) {\n                    this._templating.disableCancel();\n                }\n\n                // Cancel all existing (previous) files and clear the list if this file is not part of\n                // a scaled file group that has already been accepted, or if this file is not part of\n                // a scaled file group at all.\n                if (!this._options.multiple) {\n                    record = this.getUploads({id: id});\n\n                    this._handledProxyGroup = this._handledProxyGroup || record.proxyGroupId;\n\n                    if (record.proxyGroupId !== this._handledProxyGroup || !record.proxyGroupId) {\n                        this._handler.cancelAll();\n                        this._clearList();\n                        this._handledProxyGroup = null;\n                    }\n                }\n            }\n\n            if (canned) {\n                this._templating.addFileToCache(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.updateThumbnail(id, this._thumbnailUrls[id], true, this._options.thumbnails.customResizer);\n            }\n            else {\n                this._templating.addFile(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.generatePreview(id, this.getFile(id), this._options.thumbnails.customResizer);\n            }\n\n            this._filesInBatchAddedToUi += 1;\n\n            if (canned ||\n                (this._options.display.fileSizeOnSubmit && qq.supportedFeatures.ajaxUploading)) {\n\n                this._displayFileSize(id);\n            }\n        },\n\n        _clearList: function() {\n            this._templating.clearFiles();\n            this.clearStoredFiles();\n        },\n\n        _displayFileSize: function(id, loadedSize, totalSize) {\n            var size = this.getSize(id),\n                sizeForDisplay = this._formatSize(size);\n\n            if (size >= 0) {\n                if (loadedSize !== undefined && totalSize !== undefined) {\n                    sizeForDisplay = this._formatProgress(loadedSize, totalSize);\n                }\n\n                this._templating.updateSize(id, sizeForDisplay);\n            }\n        },\n\n        _formatProgress: function(uploadedSize, totalSize) {\n            var message = this._options.text.formatProgress;\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            r(\"{percent}\", Math.round(uploadedSize / totalSize * 100));\n            r(\"{total_size}\", this._formatSize(totalSize));\n            return message;\n        },\n\n        _controlFailureTextDisplay: function(id, response) {\n            var mode, responseProperty, failureReason;\n\n            mode = this._options.failedUploadTextDisplay.mode;\n            responseProperty = this._options.failedUploadTextDisplay.responseProperty;\n\n            if (mode === \"custom\") {\n                failureReason = response[responseProperty];\n                if (!failureReason) {\n                    failureReason = this._options.text.failUpload;\n                }\n\n                this._templating.setStatusText(id, failureReason);\n\n                if (this._options.failedUploadTextDisplay.enableTooltip) {\n                    this._showTooltip(id, failureReason);\n                }\n            }\n            else if (mode === \"default\") {\n                this._templating.setStatusText(id, this._options.text.failUpload);\n            }\n            else if (mode !== \"none\") {\n                this.log(\"failedUploadTextDisplay.mode value of '\" + mode + \"' is not valid\", \"warn\");\n            }\n        },\n\n        _showTooltip: function(id, text) {\n            this._templating.getFileContainer(id).title = text;\n        },\n\n        _showCancelLink: function(id) {\n            if (!this._options.disableCancelForFormUploads || qq.supportedFeatures.ajaxUploading) {\n                this._templating.showCancel(id);\n            }\n        },\n\n        _itemError: function(code, name, item) {\n            var message = this._parent.prototype._itemError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _batchError: function(message) {\n            this._parent.prototype._batchError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _setupPastePrompt: function() {\n            var self = this;\n\n            this._options.callbacks.onPasteReceived = function() {\n                var message = self._options.paste.namePromptMessage,\n                    defaultVal = self._options.paste.defaultName;\n\n                return self._options.showPrompt(message, defaultVal);\n            };\n        },\n\n        _fileOrBlobRejected: function(id, name) {\n            this._totalFilesInBatch -= 1;\n            this._parent.prototype._fileOrBlobRejected.apply(this, arguments);\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            this._totalFilesInBatch = items.length;\n            this._filesInBatchAddedToUi = 0;\n            this._parent.prototype._prepareItemsForUpload.apply(this, arguments);\n        },\n\n        _maybeUpdateThumbnail: function(fileId) {\n            var thumbnailUrl = this._thumbnailUrls[fileId],\n                fileStatus = this.getUploads({id: fileId}).status;\n\n            if (fileStatus !== qq.status.DELETED &&\n                (thumbnailUrl ||\n                this._options.thumbnails.placeholders.waitUntilResponse ||\n                !qq.supportedFeatures.imagePreviews)) {\n\n                // This will replace the \"waiting\" placeholder with a \"preview not available\" placeholder\n                // if called with a null thumbnailUrl.\n                this._templating.updateThumbnail(fileId, thumbnailUrl, this._options.thumbnails.customResizer);\n            }\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id = this._parent.prototype._addCannedFile.apply(this, arguments);\n\n            this._addToList(id, this.getName(id), true);\n            this._templating.hideSpinner(id);\n            this._templating.hideCancel(id);\n            this._markFileAsSuccessful(id);\n\n            return id;\n        },\n\n        _setSize: function(id, newSize) {\n            this._parent.prototype._setSize.apply(this, arguments);\n\n            this._templating.updateSize(id, this._formatSize(newSize));\n        },\n\n        _sessionRequestComplete: function() {\n            this._templating.addCacheToDom();\n            this._parent.prototype._sessionRequestComplete.apply(this, arguments);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploader mode, which is a default UI w/ drag & drop uploading.\n */\nqq.FineUploader = function(o, namespace) {\n    \"use strict\";\n\n    var self = this;\n\n    // By default this should inherit instance data from FineUploaderBasic, but this can be overridden\n    // if the (internal) caller defines a different parent.  The parent is also used by\n    // the private and public API functions that need to delegate to a parent function.\n    this._parent = namespace ? qq[namespace].FineUploaderBasic : qq.FineUploaderBasic;\n    this._parent.apply(this, arguments);\n\n    // Options provided by FineUploader mode\n    qq.extend(this._options, {\n        element: null,\n\n        button: null,\n\n        listElement: null,\n\n        dragAndDrop: {\n            extraDropzones: [],\n            reportDirectoryPaths: false\n        },\n\n        text: {\n            formatProgress: \"{percent}% of {total_size}\",\n            failUpload: \"Upload failed\",\n            waitingForResponse: \"Processing...\",\n            paused: \"Paused\"\n        },\n\n        template: \"qq-template\",\n\n        classes: {\n            retrying: \"qq-upload-retrying\",\n            retryable: \"qq-upload-retryable\",\n            success: \"qq-upload-success\",\n            fail: \"qq-upload-fail\",\n            editable: \"qq-editable\",\n            hide: \"qq-hide\",\n            dropActive: \"qq-upload-drop-area-active\"\n        },\n\n        failedUploadTextDisplay: {\n            mode: \"default\", //default, custom, or none\n            responseProperty: \"error\",\n            enableTooltip: true\n        },\n\n        messages: {\n            tooManyFilesError: \"You may only drop one file\",\n            unsupportedBrowser: \"Unrecoverable error - this browser does not permit file uploading of any kind.\"\n        },\n\n        retry: {\n            showAutoRetryNote: true,\n            autoRetryNote: \"Retrying {retryNum}/{maxAuto}...\"\n        },\n\n        deleteFile: {\n            forceConfirm: false,\n            confirmMessage: \"Are you sure you want to delete {filename}?\",\n            deletingStatusText: \"Deleting...\",\n            deletingFailedText: \"Delete failed\"\n\n        },\n\n        display: {\n            fileSizeOnSubmit: false,\n            prependFiles: false\n        },\n\n        paste: {\n            promptForName: false,\n            namePromptMessage: \"Please name this image\"\n        },\n\n        thumbnails: {\n            customResizer: null,\n            maxCount: 0,\n            placeholders: {\n                waitUntilResponse: false,\n                notAvailablePath: null,\n                waitingPath: null\n            },\n            timeBetweenThumbs: 750\n        },\n\n        scaling: {\n            hideScaled: false\n        },\n\n        showMessage: function(message) {\n            if (self._templating.hasDialog(\"alert\")) {\n                return self._templating.showDialog(\"alert\", message);\n            }\n            else {\n                setTimeout(function() {\n                    window.alert(message);\n                }, 0);\n            }\n        },\n\n        showConfirm: function(message) {\n            if (self._templating.hasDialog(\"confirm\")) {\n                return self._templating.showDialog(\"confirm\", message);\n            }\n            else {\n                return window.confirm(message);\n            }\n        },\n\n        showPrompt: function(message, defaultValue) {\n            if (self._templating.hasDialog(\"prompt\")) {\n                return self._templating.showDialog(\"prompt\", message, defaultValue);\n            }\n            else {\n                return window.prompt(message, defaultValue);\n            }\n        }\n    }, true);\n\n    // Replace any default options with user defined ones\n    qq.extend(this._options, o, true);\n\n    this._templating = new qq.Templating({\n        log: qq.bind(this.log, this),\n        templateIdOrEl: this._options.template,\n        containerEl: this._options.element,\n        fileContainerEl: this._options.listElement,\n        button: this._options.button,\n        imageGenerator: this._imageGenerator,\n        classes: {\n            hide: this._options.classes.hide,\n            editable: this._options.classes.editable\n        },\n        limits: {\n            maxThumbs: this._options.thumbnails.maxCount,\n            timeBetweenThumbs: this._options.thumbnails.timeBetweenThumbs\n        },\n        placeholders: {\n            waitUntilUpdate: this._options.thumbnails.placeholders.waitUntilResponse,\n            thumbnailNotAvailable: this._options.thumbnails.placeholders.notAvailablePath,\n            waitingForThumbnail: this._options.thumbnails.placeholders.waitingPath\n        },\n        text: this._options.text\n    });\n\n    if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowserIos8Safari);\n    }\n    else if (!qq.supportedFeatures.uploading || (this._options.cors.expected && !qq.supportedFeatures.uploadCors)) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowser);\n    }\n    else {\n        this._wrapCallbacks();\n\n        this._templating.render();\n\n        this._classes = this._options.classes;\n\n        if (!this._options.button && this._templating.getButton()) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._templating.getButton(),\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._setupClickAndEditEventHandlers();\n\n        if (qq.DragAndDrop && qq.supportedFeatures.fileDrop) {\n            this._dnd = this._setupDragAndDrop();\n        }\n\n        if (this._options.paste.targetElement && this._options.paste.promptForName) {\n            if (qq.PasteSupport) {\n                this._setupPastePrompt();\n            }\n            else {\n                this.log(\"Paste support module not found.\", \"error\");\n            }\n        }\n\n        this._totalFilesInBatch = 0;\n        this._filesInBatchAddedToUi = 0;\n    }\n};\n\n// Inherit the base public & private API methods\nqq.extend(qq.FineUploader.prototype, qq.basePublicApi);\nqq.extend(qq.FineUploader.prototype, qq.basePrivateApi);\n\n// Add the FineUploader/default UI public & private UI methods, which may override some base methods.\nqq.extend(qq.FineUploader.prototype, qq.uiPublicApi);\nqq.extend(qq.FineUploader.prototype, qq.uiPrivateApi);\n","/* globals qq */\n/* jshint -W065 */\n/**\n * Module responsible for rendering all Fine Uploader UI templates.  This module also asserts at least\n * a limited amount of control over the template elements after they are added to the DOM.\n * Wherever possible, this module asserts total control over template elements present in the DOM.\n *\n * @param spec Specification object used to control various templating behaviors\n * @constructor\n */\nqq.Templating = function(spec) {\n    \"use strict\";\n\n    var FILE_ID_ATTR = \"qq-file-id\",\n        FILE_CLASS_PREFIX = \"qq-file-id-\",\n        THUMBNAIL_MAX_SIZE_ATTR = \"qq-max-size\",\n        THUMBNAIL_SERVER_SCALE_ATTR = \"qq-server-scale\",\n        // This variable is duplicated in the DnD module since it can function as a standalone as well\n        HIDE_DROPZONE_ATTR = \"qq-hide-dropzone\",\n        DROPZPONE_TEXT_ATTR = \"qq-drop-area-text\",\n        IN_PROGRESS_CLASS = \"qq-in-progress\",\n        HIDDEN_FOREVER_CLASS = \"qq-hidden-forever\",\n        fileBatch = {\n            content: document.createDocumentFragment(),\n            map: {}\n        },\n        isCancelDisabled = false,\n        generatedThumbnails = 0,\n        thumbnailQueueMonitorRunning = false,\n        thumbGenerationQueue = [],\n        thumbnailMaxSize = -1,\n        options = {\n            log: null,\n            limits: {\n                maxThumbs: 0,\n                timeBetweenThumbs: 750\n            },\n            templateIdOrEl: \"qq-template\",\n            containerEl: null,\n            fileContainerEl: null,\n            button: null,\n            imageGenerator: null,\n            classes: {\n                hide: \"qq-hide\",\n                editable: \"qq-editable\"\n            },\n            placeholders: {\n                waitUntilUpdate: false,\n                thumbnailNotAvailable: null,\n                waitingForThumbnail: null\n            },\n            text: {\n                paused: \"Paused\"\n            }\n        },\n        selectorClasses = {\n            button: \"qq-upload-button-selector\",\n            alertDialog: \"qq-alert-dialog-selector\",\n            dialogCancelButton: \"qq-cancel-button-selector\",\n            confirmDialog: \"qq-confirm-dialog-selector\",\n            dialogMessage: \"qq-dialog-message-selector\",\n            dialogOkButton: \"qq-ok-button-selector\",\n            promptDialog: \"qq-prompt-dialog-selector\",\n            uploader: \"qq-uploader-selector\",\n            drop: \"qq-upload-drop-area-selector\",\n            list: \"qq-upload-list-selector\",\n            progressBarContainer: \"qq-progress-bar-container-selector\",\n            progressBar: \"qq-progress-bar-selector\",\n            totalProgressBarContainer: \"qq-total-progress-bar-container-selector\",\n            totalProgressBar: \"qq-total-progress-bar-selector\",\n            file: \"qq-upload-file-selector\",\n            spinner: \"qq-upload-spinner-selector\",\n            size: \"qq-upload-size-selector\",\n            cancel: \"qq-upload-cancel-selector\",\n            pause: \"qq-upload-pause-selector\",\n            continueButton: \"qq-upload-continue-selector\",\n            deleteButton: \"qq-upload-delete-selector\",\n            retry: \"qq-upload-retry-selector\",\n            statusText: \"qq-upload-status-text-selector\",\n            editFilenameInput: \"qq-edit-filename-selector\",\n            editNameIcon: \"qq-edit-filename-icon-selector\",\n            dropText: \"qq-upload-drop-area-text-selector\",\n            dropProcessing: \"qq-drop-processing-selector\",\n            dropProcessingSpinner: \"qq-drop-processing-spinner-selector\",\n            thumbnail: \"qq-thumbnail-selector\"\n        },\n        previewGeneration = {},\n        cachedThumbnailNotAvailableImg = new qq.Promise(),\n        cachedWaitingForThumbnailImg = new qq.Promise(),\n        log,\n        isEditElementsExist,\n        isRetryElementExist,\n        templateHtml,\n        container,\n        fileList,\n        showThumbnails,\n        serverScale,\n\n        // During initialization of the templating module we should cache any\n        // placeholder images so we can quickly swap them into the file list on demand.\n        // Any placeholder images that cannot be loaded/found are simply ignored.\n        cacheThumbnailPlaceholders = function() {\n            var notAvailableUrl =  options.placeholders.thumbnailNotAvailable,\n                waitingUrl = options.placeholders.waitingForThumbnail,\n                spec = {\n                    maxSize: thumbnailMaxSize,\n                    scale: serverScale\n                };\n\n            if (showThumbnails) {\n                if (notAvailableUrl) {\n                    options.imageGenerator.generate(notAvailableUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedThumbnailNotAvailableImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedThumbnailNotAvailableImg.failure();\n                            log(\"Problem loading 'not available' placeholder image at \" + notAvailableUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedThumbnailNotAvailableImg.failure();\n                }\n\n                if (waitingUrl) {\n                    options.imageGenerator.generate(waitingUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedWaitingForThumbnailImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedWaitingForThumbnailImg.failure();\n                            log(\"Problem loading 'waiting for thumbnail' placeholder image at \" + waitingUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedWaitingForThumbnailImg.failure();\n                }\n            }\n        },\n\n        // Displays a \"waiting for thumbnail\" type placeholder image\n        // iff we were able to load it during initialization of the templating module.\n        displayWaitingImg = function(thumbnail) {\n            var waitingImgPlacement = new qq.Promise();\n\n            cachedWaitingForThumbnailImg.then(function(img) {\n                maybeScalePlaceholderViaCss(img, thumbnail);\n                /* jshint eqnull:true */\n                if (!thumbnail.src) {\n                    thumbnail.src = img.src;\n                    thumbnail.onload = function() {\n                        thumbnail.onload = null;\n                        show(thumbnail);\n                        waitingImgPlacement.success();\n                    };\n                }\n                else {\n                    waitingImgPlacement.success();\n                }\n            }, function() {\n                // In some browsers (such as IE9 and older) an img w/out a src attribute\n                // are displayed as \"broken\" images, so we should just hide the img tag\n                // if we aren't going to display the \"waiting\" placeholder.\n                hide(thumbnail);\n                waitingImgPlacement.success();\n            });\n\n            return waitingImgPlacement;\n        },\n\n        generateNewPreview = function(id, blob, spec) {\n            var thumbnail = getThumbnail(id);\n\n            log(\"Generating new thumbnail for \" + id);\n            blob.qqThumbnailId = id;\n\n            return options.imageGenerator.generate(blob, thumbnail, spec).then(\n                function() {\n                    generatedThumbnails++;\n                    show(thumbnail);\n                    previewGeneration[id].success();\n                },\n                function() {\n                    previewGeneration[id].failure();\n\n                    // Display the \"not available\" placeholder img only if we are\n                    // not expecting a thumbnail at a later point, such as in a server response.\n                    if (!options.placeholders.waitUntilUpdate) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    }\n                });\n        },\n\n        generateNextQueuedPreview = function() {\n            if (thumbGenerationQueue.length) {\n                thumbnailQueueMonitorRunning = true;\n\n                var queuedThumbRequest = thumbGenerationQueue.shift();\n\n                if (queuedThumbRequest.update) {\n                    processUpdateQueuedPreviewRequest(queuedThumbRequest);\n                }\n                else {\n                    processNewQueuedPreviewRequest(queuedThumbRequest);\n                }\n            }\n            else {\n                thumbnailQueueMonitorRunning = false;\n            }\n        },\n\n        getCancel = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.cancel);\n        },\n\n        getContinue = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.continueButton);\n        },\n\n        getDialog = function(type) {\n            return getTemplateEl(container, selectorClasses[type + \"Dialog\"]);\n        },\n\n        getDelete = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.deleteButton);\n        },\n\n        getDropProcessing = function() {\n            return getTemplateEl(container, selectorClasses.dropProcessing);\n        },\n\n        getEditIcon = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editNameIcon);\n        },\n\n        getFile = function(id) {\n            return fileBatch.map[id] || qq(fileList).getFirstByClass(FILE_CLASS_PREFIX + id);\n        },\n\n        getFilename = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.file);\n        },\n\n        getPause = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.pause);\n        },\n\n        getProgress = function(id) {\n            /* jshint eqnull:true */\n            // Total progress bar\n            if (id == null) {\n                return getTemplateEl(container, selectorClasses.totalProgressBarContainer) ||\n                    getTemplateEl(container, selectorClasses.totalProgressBar);\n            }\n\n            // Per-file progress bar\n            return getTemplateEl(getFile(id), selectorClasses.progressBarContainer) ||\n                getTemplateEl(getFile(id), selectorClasses.progressBar);\n        },\n\n        getRetry = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.retry);\n        },\n\n        getSize = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.size);\n        },\n\n        getSpinner = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.spinner);\n        },\n\n        getTemplateEl = function(context, cssClass) {\n            return context && qq(context).getFirstByClass(cssClass);\n        },\n\n        getThumbnail = function(id) {\n            return showThumbnails && getTemplateEl(getFile(id), selectorClasses.thumbnail);\n        },\n\n        hide = function(el) {\n            el && qq(el).addClass(options.classes.hide);\n        },\n\n        // Ensures a placeholder image does not exceed any max size specified\n        // via `style` attribute properties iff <canvas> was not used to scale\n        // the placeholder AND the target <img> doesn't already have these `style` attribute properties set.\n        maybeScalePlaceholderViaCss = function(placeholder, thumbnail) {\n            var maxWidth = placeholder.style.maxWidth,\n                maxHeight = placeholder.style.maxHeight;\n\n            if (maxHeight && maxWidth && !thumbnail.style.maxWidth && !thumbnail.style.maxHeight) {\n                qq(thumbnail).css({\n                    maxWidth: maxWidth,\n                    maxHeight: maxHeight\n                });\n            }\n        },\n\n        // Displays a \"thumbnail not available\" type placeholder image\n        // iff we were able to load this placeholder during initialization\n        // of the templating module or after preview generation has failed.\n        maybeSetDisplayNotAvailableImg = function(id, thumbnail) {\n            var previewing = previewGeneration[id] || new qq.Promise().failure(),\n                notAvailableImgPlacement = new qq.Promise();\n\n            cachedThumbnailNotAvailableImg.then(function(img) {\n                previewing.then(\n                    function() {\n                        notAvailableImgPlacement.success();\n                    },\n                    function() {\n                        maybeScalePlaceholderViaCss(img, thumbnail);\n\n                        thumbnail.onload = function() {\n                            thumbnail.onload = null;\n                            notAvailableImgPlacement.success();\n                        };\n\n                        thumbnail.src = img.src;\n                        show(thumbnail);\n                    }\n                );\n            });\n\n            return notAvailableImgPlacement;\n        },\n\n        /**\n         * Grabs the HTML from the script tag holding the template markup.  This function will also adjust\n         * some internally-tracked state variables based on the contents of the template.\n         * The template is filtered so that irrelevant elements (such as the drop zone if DnD is not supported)\n         * are omitted from the DOM.  Useful errors will be thrown if the template cannot be parsed.\n         *\n         * @returns {{template: *, fileTemplate: *}} HTML for the top-level file items templates\n         */\n        parseAndGetTemplate = function() {\n            var scriptEl,\n                scriptHtml,\n                fileListNode,\n                tempTemplateEl,\n                fileListHtml,\n                defaultButton,\n                dropArea,\n                thumbnail,\n                dropProcessing,\n                dropTextEl,\n                uploaderEl;\n\n            log(\"Parsing template\");\n\n            /*jshint -W116*/\n            if (options.templateIdOrEl == null) {\n                throw new Error(\"You MUST specify either a template element or ID!\");\n            }\n\n            // Grab the contents of the script tag holding the template.\n            if (qq.isString(options.templateIdOrEl)) {\n                scriptEl = document.getElementById(options.templateIdOrEl);\n\n                if (scriptEl === null) {\n                    throw new Error(qq.format(\"Cannot find template script at ID '{}'!\", options.templateIdOrEl));\n                }\n\n                scriptHtml = scriptEl.innerHTML;\n            }\n            else {\n                if (options.templateIdOrEl.innerHTML === undefined) {\n                    throw new Error(\"You have specified an invalid value for the template option!  \" +\n                        \"It must be an ID or an Element.\");\n                }\n\n                scriptHtml = options.templateIdOrEl.innerHTML;\n            }\n\n            scriptHtml = qq.trimStr(scriptHtml);\n            tempTemplateEl = document.createElement(\"div\");\n            tempTemplateEl.appendChild(qq.toElement(scriptHtml));\n            uploaderEl = qq(tempTemplateEl).getFirstByClass(selectorClasses.uploader);\n\n            // Don't include the default template button in the DOM\n            // if an alternate button container has been specified.\n            if (options.button) {\n                defaultButton = qq(tempTemplateEl).getFirstByClass(selectorClasses.button);\n                if (defaultButton) {\n                    qq(defaultButton).remove();\n                }\n            }\n\n            // Omit the drop processing element from the DOM if DnD is not supported by the UA,\n            // or the drag and drop module is not found.\n            // NOTE: We are consciously not removing the drop zone if the UA doesn't support DnD\n            // to support layouts where the drop zone is also a container for visible elements,\n            // such as the file list.\n            if (!qq.DragAndDrop || !qq.supportedFeatures.fileDrop) {\n                dropProcessing = qq(tempTemplateEl).getFirstByClass(selectorClasses.dropProcessing);\n                if (dropProcessing) {\n                    qq(dropProcessing).remove();\n                }\n            }\n\n            dropArea = qq(tempTemplateEl).getFirstByClass(selectorClasses.drop);\n\n            // If DnD is not available then remove\n            // it from the DOM as well.\n            if (dropArea && !qq.DragAndDrop) {\n                log(\"DnD module unavailable.\", \"info\");\n                qq(dropArea).remove();\n            }\n\n            if (!qq.supportedFeatures.fileDrop) {\n                // don't display any \"drop files to upload\" background text\n                uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n                if (dropArea && qq(dropArea).hasAttribute(HIDE_DROPZONE_ATTR)) {\n                    // If there is a drop area defined in the template, and the current UA doesn't support DnD,\n                    // and the drop area is marked as \"hide before enter\", ensure it is hidden as the DnD module\n                    // will not do this (since we will not be loading the DnD module)\n                    qq(dropArea).css({\n                        display: \"none\"\n                    });\n                }\n            }\n            else if (qq(uploaderEl).hasAttribute(DROPZPONE_TEXT_ATTR) && dropArea) {\n                dropTextEl = qq(dropArea).getFirstByClass(selectorClasses.dropText);\n                dropTextEl && qq(dropTextEl).remove();\n            }\n\n            // Ensure the `showThumbnails` flag is only set if the thumbnail element\n            // is present in the template AND the current UA is capable of generating client-side previews.\n            thumbnail = qq(tempTemplateEl).getFirstByClass(selectorClasses.thumbnail);\n            if (!showThumbnails) {\n                thumbnail && qq(thumbnail).remove();\n            }\n            else if (thumbnail) {\n                thumbnailMaxSize = parseInt(thumbnail.getAttribute(THUMBNAIL_MAX_SIZE_ATTR));\n                // Only enforce max size if the attr value is non-zero\n                thumbnailMaxSize = thumbnailMaxSize > 0 ? thumbnailMaxSize : null;\n\n                serverScale = qq(thumbnail).hasAttribute(THUMBNAIL_SERVER_SCALE_ATTR);\n            }\n            showThumbnails = showThumbnails && thumbnail;\n\n            isEditElementsExist = qq(tempTemplateEl).getByClass(selectorClasses.editFilenameInput).length > 0;\n            isRetryElementExist = qq(tempTemplateEl).getByClass(selectorClasses.retry).length > 0;\n\n            fileListNode = qq(tempTemplateEl).getFirstByClass(selectorClasses.list);\n            /*jshint -W116*/\n            if (fileListNode == null) {\n                throw new Error(\"Could not find the file list container in the template!\");\n            }\n\n            fileListHtml = fileListNode.innerHTML;\n            fileListNode.innerHTML = \"\";\n\n            // We must call `createElement` in IE8 in order to target and hide any <dialog> via CSS\n            if (tempTemplateEl.getElementsByTagName(\"DIALOG\").length) {\n                document.createElement(\"dialog\");\n            }\n\n            log(\"Template parsing complete\");\n\n            return {\n                template: qq.trimStr(tempTemplateEl.innerHTML),\n                fileTemplate: qq.trimStr(fileListHtml)\n            };\n        },\n\n        prependFile = function(el, index, fileList) {\n            var parentEl = fileList,\n                beforeEl = parentEl.firstChild;\n\n            if (index > 0) {\n                beforeEl = qq(parentEl).children()[index].nextSibling;\n\n            }\n\n            parentEl.insertBefore(el, beforeEl);\n        },\n\n        processNewQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                optFileOrBlob = queuedThumbRequest.optFileOrBlob,\n                relatedThumbnailId = optFileOrBlob && optFileOrBlob.qqThumbnailId,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    maxSize: thumbnailMaxSize,\n                    orient: true,\n                    scale: true\n                };\n\n            if (qq.supportedFeatures.imagePreviews) {\n                if (thumbnail) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        displayWaitingImg(thumbnail).done(function() {\n                            previewGeneration[id] = new qq.Promise();\n\n                            previewGeneration[id].done(function() {\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            });\n\n                            /* jshint eqnull: true */\n                            // If we've already generated an <img> for this file, use the one that exists,\n                            // don't waste resources generating a new one.\n                            if (relatedThumbnailId != null) {\n                                useCachedPreview(id, relatedThumbnailId);\n                            }\n                            else {\n                                generateNewPreview(id, optFileOrBlob, spec);\n                            }\n                        });\n                    }\n                }\n                // File element in template may have been removed, so move on to next item in queue\n                else {\n                    generateNextQueuedPreview();\n                }\n            }\n            else if (thumbnail) {\n                displayWaitingImg(thumbnail);\n                generateNextQueuedPreview();\n            }\n        },\n\n        processUpdateQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                thumbnailUrl = queuedThumbRequest.thumbnailUrl,\n                showWaitingImg = queuedThumbRequest.showWaitingImg,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    scale: serverScale,\n                    maxSize: thumbnailMaxSize\n                };\n\n            if (thumbnail) {\n                if (thumbnailUrl) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        if (showWaitingImg) {\n                            displayWaitingImg(thumbnail);\n                        }\n\n                        return options.imageGenerator.generate(thumbnailUrl, thumbnail, spec).then(\n                            function() {\n                                show(thumbnail);\n                                generatedThumbnails++;\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            },\n\n                            function() {\n                                maybeSetDisplayNotAvailableImg(id, thumbnail);\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            }\n                        );\n                    }\n                }\n                else {\n                    maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    generateNextQueuedPreview();\n                }\n            }\n        },\n\n        setProgressBarWidth = function(id, percent) {\n            var bar = getProgress(id),\n                /* jshint eqnull:true */\n                progressBarSelector = id == null ? selectorClasses.totalProgressBar : selectorClasses.progressBar;\n\n            if (bar && !qq(bar).hasClass(progressBarSelector)) {\n                bar = qq(bar).getFirstByClass(progressBarSelector);\n            }\n\n            if (bar) {\n                qq(bar).css({width: percent + \"%\"});\n                bar.setAttribute(\"aria-valuenow\", percent);\n            }\n        },\n\n        show = function(el) {\n            el && qq(el).removeClass(options.classes.hide);\n        },\n\n        useCachedPreview = function(targetThumbnailId, cachedThumbnailId) {\n            var targetThumbnail = getThumbnail(targetThumbnailId),\n                cachedThumbnail = getThumbnail(cachedThumbnailId);\n\n            log(qq.format(\"ID {} is the same file as ID {}.  Will use generated thumbnail from ID {} instead.\", targetThumbnailId, cachedThumbnailId, cachedThumbnailId));\n\n            // Generation of the related thumbnail may still be in progress, so, wait until it is done.\n            previewGeneration[cachedThumbnailId].then(function() {\n                generatedThumbnails++;\n                previewGeneration[targetThumbnailId].success();\n                log(qq.format(\"Now using previously generated thumbnail created for ID {} on ID {}.\", cachedThumbnailId, targetThumbnailId));\n                targetThumbnail.src = cachedThumbnail.src;\n                show(targetThumbnail);\n            },\n            function() {\n                previewGeneration[targetThumbnailId].failure();\n                if (!options.placeholders.waitUntilUpdate) {\n                    maybeSetDisplayNotAvailableImg(targetThumbnailId, targetThumbnail);\n                }\n            });\n        };\n\n    qq.extend(options, spec);\n    log = options.log;\n\n    // No need to worry about conserving CPU or memory on older browsers,\n    // since there is no ability to preview, and thumbnail display is primitive and quick.\n    if (!qq.supportedFeatures.imagePreviews) {\n        options.limits.timeBetweenThumbs = 0;\n        options.limits.maxThumbs = 0;\n    }\n\n    container = options.containerEl;\n    showThumbnails = options.imageGenerator !== undefined;\n    templateHtml = parseAndGetTemplate();\n\n    cacheThumbnailPlaceholders();\n\n    qq.extend(this, {\n        render: function() {\n            log(\"Rendering template in DOM.\");\n\n            generatedThumbnails = 0;\n\n            container.innerHTML = templateHtml.template;\n            hide(getDropProcessing());\n            this.hideTotalProgress();\n            fileList = options.fileContainerEl || getTemplateEl(container, selectorClasses.list);\n\n            log(\"Template rendering complete\");\n        },\n\n        renderFailure: function(message) {\n            var cantRenderEl = qq.toElement(message);\n            container.innerHTML = \"\";\n            container.appendChild(cantRenderEl);\n        },\n\n        reset: function() {\n            this.render();\n        },\n\n        clearFiles: function() {\n            fileList.innerHTML = \"\";\n        },\n\n        disableCancel: function() {\n            isCancelDisabled = true;\n        },\n\n        addFile: function(id, name, prependInfo, hideForever, batch) {\n            var fileEl = qq.toElement(templateHtml.fileTemplate),\n                fileNameEl = getTemplateEl(fileEl, selectorClasses.file),\n                uploaderEl = getTemplateEl(container, selectorClasses.uploader),\n                fileContainer = batch ? fileBatch.content : fileList,\n                thumb;\n\n            if (batch) {\n                fileBatch.map[id] = fileEl;\n            }\n\n            qq(fileEl).addClass(FILE_CLASS_PREFIX + id);\n            uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n            if (fileNameEl) {\n                qq(fileNameEl).setText(name);\n                fileNameEl.setAttribute(\"title\", name);\n            }\n\n            fileEl.setAttribute(FILE_ID_ATTR, id);\n\n            if (prependInfo) {\n                prependFile(fileEl, prependInfo.index, fileContainer);\n            }\n            else {\n                fileContainer.appendChild(fileEl);\n            }\n\n            if (hideForever) {\n                fileEl.style.display = \"none\";\n                qq(fileEl).addClass(HIDDEN_FOREVER_CLASS);\n            }\n            else {\n                hide(getProgress(id));\n                hide(getSize(id));\n                hide(getDelete(id));\n                hide(getRetry(id));\n                hide(getPause(id));\n                hide(getContinue(id));\n\n                if (isCancelDisabled) {\n                    this.hideCancel(id);\n                }\n\n                thumb = getThumbnail(id);\n                if (thumb && !thumb.src) {\n                    cachedWaitingForThumbnailImg.then(function(waitingImg) {\n                        thumb.src = waitingImg.src;\n                        if (waitingImg.style.maxHeight && waitingImg.style.maxWidth) {\n                            qq(thumb).css({\n                                maxHeight: waitingImg.style.maxHeight,\n                                maxWidth: waitingImg.style.maxWidth\n                            });\n                        }\n\n                        show(thumb);\n                    });\n                }\n            }\n        },\n\n        addFileToCache: function(id, name, prependInfo, hideForever) {\n            this.addFile(id, name, prependInfo, hideForever, true);\n        },\n\n        addCacheToDom: function() {\n            fileList.appendChild(fileBatch.content);\n            fileBatch.content = document.createDocumentFragment();\n            fileBatch.map = {};\n        },\n\n        removeFile: function(id) {\n            qq(getFile(id)).remove();\n        },\n\n        getFileId: function(el) {\n            var currentNode = el;\n\n            if (currentNode) {\n                /*jshint -W116*/\n                while (currentNode.getAttribute(FILE_ID_ATTR) == null) {\n                    currentNode = currentNode.parentNode;\n                }\n\n                return parseInt(currentNode.getAttribute(FILE_ID_ATTR));\n            }\n        },\n\n        getFileList: function() {\n            return fileList;\n        },\n\n        markFilenameEditable: function(id) {\n            var filename = getFilename(id);\n\n            filename && qq(filename).addClass(options.classes.editable);\n        },\n\n        updateFilename: function(id, name) {\n            var filenameEl = getFilename(id);\n\n            if (filenameEl) {\n                qq(filenameEl).setText(name);\n                filenameEl.setAttribute(\"title\", name);\n            }\n        },\n\n        hideFilename: function(id) {\n            hide(getFilename(id));\n        },\n\n        showFilename: function(id) {\n            show(getFilename(id));\n        },\n\n        isFileName: function(el) {\n            return qq(el).hasClass(selectorClasses.file);\n        },\n\n        getButton: function() {\n            return options.button || getTemplateEl(container, selectorClasses.button);\n        },\n\n        hideDropProcessing: function() {\n            hide(getDropProcessing());\n        },\n\n        showDropProcessing: function() {\n            show(getDropProcessing());\n        },\n\n        getDropZone: function() {\n            return getTemplateEl(container, selectorClasses.drop);\n        },\n\n        isEditFilenamePossible: function() {\n            return isEditElementsExist;\n        },\n\n        hideRetry: function(id) {\n            hide(getRetry(id));\n        },\n\n        isRetryPossible: function() {\n            return isRetryElementExist;\n        },\n\n        showRetry: function(id) {\n            show(getRetry(id));\n        },\n\n        getFileContainer: function(id) {\n            return getFile(id);\n        },\n\n        showEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).addClass(options.classes.editable);\n        },\n\n        isHiddenForever: function(id) {\n            return qq(getFile(id)).hasClass(HIDDEN_FOREVER_CLASS);\n        },\n\n        hideEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).removeClass(options.classes.editable);\n        },\n\n        isEditIcon: function(el) {\n            return qq(el).hasClass(selectorClasses.editNameIcon, true);\n        },\n\n        getEditInput: function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editFilenameInput);\n        },\n\n        isEditInput: function(el) {\n            return qq(el).hasClass(selectorClasses.editFilenameInput, true);\n        },\n\n        updateProgress: function(id, loaded, total) {\n            var bar = getProgress(id),\n                percent;\n\n            if (bar && total > 0) {\n                percent = Math.round(loaded / total * 100);\n\n                if (percent === 100) {\n                    hide(bar);\n                }\n                else {\n                    show(bar);\n                }\n\n                setProgressBarWidth(id, percent);\n            }\n        },\n\n        updateTotalProgress: function(loaded, total) {\n            this.updateProgress(null, loaded, total);\n        },\n\n        hideProgress: function(id) {\n            var bar = getProgress(id);\n\n            bar && hide(bar);\n        },\n\n        hideTotalProgress: function() {\n            this.hideProgress();\n        },\n\n        resetProgress: function(id) {\n            setProgressBarWidth(id, 0);\n            this.hideTotalProgress(id);\n        },\n\n        resetTotalProgress: function() {\n            this.resetProgress();\n        },\n\n        showCancel: function(id) {\n            if (!isCancelDisabled) {\n                var cancel = getCancel(id);\n\n                cancel && qq(cancel).removeClass(options.classes.hide);\n            }\n        },\n\n        hideCancel: function(id) {\n            hide(getCancel(id));\n        },\n\n        isCancel: function(el)  {\n            return qq(el).hasClass(selectorClasses.cancel, true);\n        },\n\n        allowPause: function(id) {\n            show(getPause(id));\n            hide(getContinue(id));\n        },\n\n        uploadPaused: function(id) {\n            this.setStatusText(id, options.text.paused);\n            this.allowContinueButton(id);\n            hide(getSpinner(id));\n        },\n\n        hidePause: function(id) {\n            hide(getPause(id));\n        },\n\n        isPause: function(el) {\n            return qq(el).hasClass(selectorClasses.pause, true);\n        },\n\n        isContinueButton: function(el) {\n            return qq(el).hasClass(selectorClasses.continueButton, true);\n        },\n\n        allowContinueButton: function(id) {\n            show(getContinue(id));\n            hide(getPause(id));\n        },\n\n        uploadContinued: function(id) {\n            this.setStatusText(id, \"\");\n            this.allowPause(id);\n            show(getSpinner(id));\n        },\n\n        showDeleteButton: function(id) {\n            show(getDelete(id));\n        },\n\n        hideDeleteButton: function(id) {\n            hide(getDelete(id));\n        },\n\n        isDeleteButton: function(el) {\n            return qq(el).hasClass(selectorClasses.deleteButton, true);\n        },\n\n        isRetry: function(el) {\n            return qq(el).hasClass(selectorClasses.retry, true);\n        },\n\n        updateSize: function(id, text) {\n            var size = getSize(id);\n\n            if (size) {\n                show(size);\n                qq(size).setText(text);\n            }\n        },\n\n        setStatusText: function(id, text) {\n            var textEl = getTemplateEl(getFile(id), selectorClasses.statusText);\n\n            if (textEl) {\n                /*jshint -W116*/\n                if (text == null) {\n                    qq(textEl).clearText();\n                }\n                else {\n                    qq(textEl).setText(text);\n                }\n            }\n        },\n\n        hideSpinner: function(id) {\n            qq(getFile(id)).removeClass(IN_PROGRESS_CLASS);\n            hide(getSpinner(id));\n        },\n\n        showSpinner: function(id) {\n            qq(getFile(id)).addClass(IN_PROGRESS_CLASS);\n            show(getSpinner(id));\n        },\n\n        generatePreview: function(id, optFileOrBlob, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({id: id, customResizeFunction: customResizeFunction, optFileOrBlob: optFileOrBlob});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        updateThumbnail: function(id, thumbnailUrl, showWaitingImg, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({customResizeFunction: customResizeFunction, update: true, id: id, thumbnailUrl: thumbnailUrl, showWaitingImg: showWaitingImg});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        hasDialog: function(type) {\n            return qq.supportedFeatures.dialogElement && !!getDialog(type);\n        },\n\n        showDialog: function(type, message, defaultValue) {\n            var dialog = getDialog(type),\n                messageEl = getTemplateEl(dialog, selectorClasses.dialogMessage),\n                inputEl = dialog.getElementsByTagName(\"INPUT\")[0],\n                cancelBtn = getTemplateEl(dialog, selectorClasses.dialogCancelButton),\n                okBtn = getTemplateEl(dialog, selectorClasses.dialogOkButton),\n                promise = new qq.Promise(),\n\n                closeHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    okBtn && okBtn.removeEventListener(\"click\", okClickHandler);\n                    promise.failure();\n                },\n\n                cancelClickHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    dialog.close();\n                },\n\n                okClickHandler = function() {\n                    dialog.removeEventListener(\"close\", closeHandler);\n                    okBtn.removeEventListener(\"click\", okClickHandler);\n                    dialog.close();\n\n                    promise.success(inputEl && inputEl.value);\n                };\n\n            dialog.addEventListener(\"close\", closeHandler);\n            cancelBtn.addEventListener(\"click\", cancelClickHandler);\n            okBtn && okBtn.addEventListener(\"click\", okClickHandler);\n\n            if (inputEl) {\n                inputEl.value = defaultValue;\n            }\n            messageEl.textContent = message;\n\n            dialog.showModal();\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n// Base handler for UI (FineUploader mode) events.\n// Some more specific handlers inherit from this one.\nqq.UiEventHandler = function(s, protectedApi) {\n    \"use strict\";\n\n    var disposer = new qq.DisposeSupport(),\n        spec = {\n            eventType: \"click\",\n            attachTo: null,\n            onHandled: function(target, event) {}\n        };\n\n    // This makes up the \"public\" API methods that will be accessible\n    // to instances constructing a base or child handler\n    qq.extend(this, {\n        addHandler: function(element) {\n            addHandler(element);\n        },\n\n        dispose: function() {\n            disposer.dispose();\n        }\n    });\n\n    function addHandler(element) {\n        disposer.attach(element, spec.eventType, function(event) {\n            // Only in IE: the `event` is a property of the `window`.\n            event = event || window.event;\n\n            // On older browsers, we must check the `srcElement` instead of the `target`.\n            var target = event.target || event.srcElement;\n\n            spec.onHandled(target, event);\n        });\n    }\n\n    // These make up the \"protected\" API methods that children of this base handler will utilize.\n    qq.extend(protectedApi, {\n        getFileIdFromItem: function(item) {\n            return item.qqFileId;\n        },\n\n        getDisposeSupport: function() {\n            return disposer;\n        }\n    });\n\n    qq.extend(spec, s);\n\n    if (spec.attachTo) {\n        addHandler(spec.attachTo);\n    }\n};\n","/* global qq */\nqq.FileButtonsClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onDeleteFile: function(fileId) {},\n            onCancel: function(fileId) {},\n            onRetry: function(fileId) {},\n            onPause: function(fileId) {},\n            onContinue: function(fileId) {},\n            onGetName: function(fileId) {}\n        },\n        buttonHandlers = {\n            cancel: function(id) { spec.onCancel(id); },\n            retry:  function(id) { spec.onRetry(id); },\n            deleteButton: function(id) { spec.onDeleteFile(id); },\n            pause: function(id) { spec.onPause(id); },\n            continueButton: function(id) { spec.onContinue(id); }\n        };\n\n    function examineEvent(target, event) {\n        qq.each(buttonHandlers, function(buttonType, handler) {\n            var firstLetterCapButtonType = buttonType.charAt(0).toUpperCase() + buttonType.slice(1),\n                fileId;\n\n            if (spec.templating[\"is\" + firstLetterCapButtonType](target)) {\n                fileId = spec.templating.getFileId(target);\n                qq.preventDefault(event);\n                spec.log(qq.format(\"Detected valid file button click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                handler(fileId);\n                return false;\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect click events on filename display elements.\nqq.FilenameClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            classes: {\n                file: \"qq-upload-file\",\n                editNameIcon: \"qq-edit-filename-icon\"\n            },\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {}\n        };\n\n    qq.extend(spec, s);\n\n    // This will be called by the parent handler when a `click` event is received on the list element.\n    function examineEvent(target, event) {\n        if (spec.templating.isFileName(target) || spec.templating.isEditIcon(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            // We only allow users to change filenames of files that have been submitted but not yet uploaded.\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                qq.preventDefault(event);\n\n                inheritedInternalApi.handleFilenameEdit(fileId, target, true);\n            }\n        }\n    }\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect focusin events on file edit input elements.\nqq.FilenameInputFocusInHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            onGetUploadStatus: function(fileId) {},\n            log: function(message, lvl) {}\n        };\n\n    if (!inheritedInternalApi) {\n        inheritedInternalApi = {};\n    }\n\n    // This will be called by the parent handler when a `focusin` event is received on the list element.\n    function handleInputFocus(target, event) {\n        if (spec.templating.isEditInput(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename input focus event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                inheritedInternalApi.handleFilenameEdit(fileId, target);\n            }\n        }\n    }\n\n    spec.eventType = \"focusin\";\n    spec.onHandled = handleInputFocus;\n\n    qq.extend(spec, s);\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n/**\n * Child of FilenameInputFocusInHandler.  Used to detect focus events on file edit input elements.  This child module is only\n * needed for UAs that do not support the focusin event.  Currently, only Firefox lacks this event.\n *\n * @param spec Overrides for default specifications\n */\nqq.FilenameInputFocusHandler = function(spec) {\n    \"use strict\";\n\n    spec.eventType = \"focus\";\n    spec.attachTo = null;\n\n    qq.extend(this, new qq.FilenameInputFocusInHandler(spec, {}));\n};\n","/*globals qq */\n// Handles edit-related events on a file item (FineUploader mode).  This is meant to be a parent handler.\n// Children will delegate to this handler when specific edit-related actions are detected.\nqq.FilenameEditHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {},\n            onSetName: function(fileId, newName) {},\n            onEditingStatusChange: function(fileId, isEditing) {}\n        };\n\n    function getFilenameSansExtension(fileId) {\n        var filenameSansExt = spec.onGetName(fileId),\n            extIdx = filenameSansExt.lastIndexOf(\".\");\n\n        if (extIdx > 0) {\n            filenameSansExt = filenameSansExt.substr(0, extIdx);\n        }\n\n        return filenameSansExt;\n    }\n\n    function getOriginalExtension(fileId) {\n        var origName = spec.onGetName(fileId);\n        return qq.getExtension(origName);\n    }\n\n    // Callback iff the name has been changed\n    function handleNameUpdate(newFilenameInputEl, fileId) {\n        var newName = newFilenameInputEl.value,\n            origExtension;\n\n        if (newName !== undefined && qq.trimStr(newName).length > 0) {\n            origExtension = getOriginalExtension(fileId);\n\n            if (origExtension !== undefined) {\n                newName = newName + \".\" + origExtension;\n            }\n\n            spec.onSetName(fileId, newName);\n        }\n\n        spec.onEditingStatusChange(fileId, false);\n    }\n\n    // The name has been updated if the filename edit input loses focus.\n    function registerInputBlurHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"blur\", function() {\n            handleNameUpdate(inputEl, fileId);\n        });\n    }\n\n    // The name has been updated if the user presses enter.\n    function registerInputEnterKeyHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"keyup\", function(event) {\n\n            var code = event.keyCode || event.which;\n\n            if (code === 13) {\n                handleNameUpdate(inputEl, fileId);\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n\n    qq.extend(inheritedInternalApi, {\n        handleFilenameEdit: function(id, target, focusInput) {\n            var newFilenameInputEl = spec.templating.getEditInput(id);\n\n            spec.onEditingStatusChange(id, true);\n\n            newFilenameInputEl.value = getFilenameSansExtension(id);\n\n            if (focusInput) {\n                newFilenameInputEl.focus();\n            }\n\n            registerInputBlurHandler(newFilenameInputEl, id);\n            registerInputEnterKeyHandler(newFilenameInputEl, id);\n        }\n    });\n};\n","/*globals qq */\n/**\n * This defines FineUploader mode w/ support for uploading to S3, which provides all the basic\n * functionality of Fine Uploader as well as code to handle uploads directly to S3.\n * This module inherits all logic from FineUploader mode and FineUploaderBasicS3 mode and adds some UI-related logic\n * specific to the upload-to-S3 workflow.  Some inherited options and API methods have a special meaning\n * in the context of the S3 uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.s3.FineUploader = function(o) {\n        var options = {\n            failedUploadTextDisplay: {\n                mode: \"custom\"\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Inherit instance data from FineUploader, which should in turn inherit from s3.FineUploaderBasic.\n        qq.FineUploader.call(this, options, \"s3\");\n\n        if (!qq.supportedFeatures.ajaxUploading && options.iframeSupport.localBlankPagePath === undefined) {\n            this._options.element.innerHTML = \"<div>You MUST set the <code>localBlankPagePath</code> property \" +\n                \"of the <code>iframeSupport</code> option since this browser does not support the File API!</div>\";\n        }\n    };\n\n    // Inherit the API methods from FineUploaderBasicS3\n    qq.extend(qq.s3.FineUploader.prototype, qq.s3.FineUploaderBasic.prototype);\n\n    // Inherit public and private API methods related to UI\n    qq.extend(qq.s3.FineUploader.prototype, qq.uiPublicApi);\n    qq.extend(qq.s3.FineUploader.prototype, qq.uiPrivateApi);\n}());\n"]}