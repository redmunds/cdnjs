{"version":3,"sources":["webpack:///rollbar.snippet.js","webpack:///webpack/bootstrap 3f308f366181725e62f8","webpack:///./src/bundles/rollbar.snippet.js","webpack:///./src/shim.js","webpack:///./src/snippet_callback.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","RollbarShim","Rollbar","snippetCallback","defaultRollbarJsUrl","_rollbarConfig","rollbarJsUrl","shim","init","window","callback","loadFull","document","parentShim","this","shimId","_shimCounter","notifier","logger","console","undefined","log","_rollbarWindowOnError","client","old","args","_rollbarWrappedError","_rollbarContext","uncaughtError","apply","stub","method","R","_wrapInternalErr","arguments","isScope","Array","prototype","slice","data","ts","Date","_rollbarShimQueue","push","_extendListenerPrototype","hasOwnProperty","oldAddEventListener","addEventListener","event","bubble","wrap","oldRemoveEventListener","removeEventListener","_wrapped","f","e","config","alias","globalAlias","configure","captureUncaught","onerror","i","global","globals","split","length","immediate","loader","s","createElement","getElementsByTagName","src","async","onload","handleLoadErr","parentNode","insertBefore","err","_rollbarPayloadQueue","obj","cb","Error","shift","attachEvent","context","ctxFn","_isWrap","_wrappedSource","toString","prop","_methods","_config","_rollbarInitialized","Notifier","RollbarNotifier","fullRollbar","_processShimQueue","processPayloads"],"mappings":"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","file":"rollbar.snippet.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar RollbarShim = __webpack_require__(1).Rollbar;\n\tvar snippetCallback = __webpack_require__(2);\n\t\n\tvar defaultRollbarJsUrl = (\"//d37gvrvc0wt4s1.cloudfront.net.js/v1.2/rollbar.umd.min.js\");\n\t_rollbarConfig.rollbarJsUrl = _rollbarConfig.rollbarJsUrl || defaultRollbarJsUrl;\n\t\n\tvar shim = RollbarShim.init(window, _rollbarConfig);\n\tvar callback = snippetCallback(shim, _rollbarConfig);\n\t\n\tshim.loadFull(window, document, false, _rollbarConfig, callback);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar _shimCounter = 0;\n\t\n\tfunction Rollbar(parentShim) {\n\t  this.shimId = ++_shimCounter;\n\t  this.notifier = null;\n\t  this.parentShim = parentShim;\n\t  this.logger = function() {};\n\t\n\t  if (window.console) {\n\t    if (window.console.shimId === undefined) {\n\t      this.logger = window.console.log;\n\t    }\n\t  }\n\t}\n\t\n\tfunction _rollbarWindowOnError(client, old, args) {\n\t  if (window._rollbarWrappedError) {\n\t    if (!args[4]) {\n\t      args[4] = window._rollbarWrappedError;\n\t    }\n\t    if (!args[5]) {\n\t      args[5] = window._rollbarWrappedError._rollbarContext;\n\t    }\n\t    window._rollbarWrappedError = null;\n\t  }\n\t\n\t  client.uncaughtError.apply(client, args);\n\t  if (old) {\n\t    old.apply(window, args);\n\t  }\n\t}\n\t\n\tRollbar.init = function(window, config) {\n\t  var alias = config.globalAlias || 'Rollbar';\n\t  if (typeof window[alias] === 'object') {\n\t    return window[alias];\n\t  }\n\t\n\t  // Expose the global shim queue\n\t  window._rollbarShimQueue = [];\n\t  window._rollbarWrappedError = null;\n\t\n\t  config = config || {};\n\t\n\t  var client = new Rollbar();\n\t\n\t  return (_wrapInternalErr(function() {\n\t    client.configure(config);\n\t\n\t    if (config.captureUncaught) {\n\t      // Create the client and set the onerror handler\n\t      var old = window.onerror;\n\t\n\t      window.onerror = function() {\n\t        var args = Array.prototype.slice.call(arguments, 0);\n\t        _rollbarWindowOnError(client, old, args);\n\t      };\n\t\n\t      // Adapted from https://github.com/bugsnag/bugsnag-js\n\t      var globals = \"EventTarget,Window,Node,ApplicationCache,AudioTrackList,ChannelMergerNode,CryptoOperation,EventSource,FileReader,HTMLUnknownElement,IDBDatabase,IDBRequest,IDBTransaction,KeyOperation,MediaController,MessagePort,ModalWindow,Notification,SVGElementInstance,Screen,TextTrack,TextTrackCue,TextTrackList,WebSocket,WebSocketWorker,Worker,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload\".split(\",\");\n\t\n\t      var i;\n\t      var global;\n\t      for (i = 0; i < globals.length; ++i) {\n\t        global = globals[i];\n\t\n\t        if (window[global] && window[global].prototype) {\n\t          _extendListenerPrototype(client, window[global].prototype);\n\t        }\n\t      }\n\t    }\n\t\n\t    // Expose Rollbar globally\n\t    window[alias] = client;\n\t    return client;\n\t  }, client.logger))();\n\t};\n\t\n\tRollbar.prototype.loadFull = function(window, document, immediate, config, callback) {\n\t  var self = this;\n\t  // Create the main rollbar script loader\n\t  var loader = _wrapInternalErr(function() {\n\t    var s = document.createElement(\"script\");\n\t    var f = document.getElementsByTagName(\"script\")[0];\n\t    s.src = config.rollbarJsUrl;\n\t    s.async = !immediate;\n\t\n\t    // NOTE(cory): this may not work for some versions of IE\n\t    s.onload = handleLoadErr;\n\t\n\t    f.parentNode.insertBefore(s, f);\n\t  }, this.logger);\n\t\n\t  var handleLoadErr = _wrapInternalErr(function() {\n\t    var err;\n\t    if (window._rollbarPayloadQueue === undefined) {\n\t      // rollbar.js did not load correctly, call any queued callbacks\n\t      // with an error.\n\t      var obj;\n\t      var cb;\n\t      var args;\n\t      var i;\n\t\n\t      err = new Error('rollbar.js did not load');\n\t\n\t      // Go through each of the shim objects. If one of their args\n\t      // was a function, treat it as the callback and call it with\n\t      // err as the first arg.\n\t      while ((obj = window._rollbarShimQueue.shift())) {\n\t        args = obj.args;\n\t        for (i = 0; i < args.length; ++i) {\n\t          cb = args[i];\n\t          if (typeof cb === 'function') {\n\t            cb(err);\n\t            break;\n\t          }\n\t        }\n\t      }\n\t    }\n\t    if (typeof callback === 'function') {\n\t      callback(err);\n\t    }\n\t  }, this.logger);\n\t\n\t  (_wrapInternalErr(function() {\n\t    if (immediate) {\n\t      loader();\n\t    } else {\n\t      // Have the window load up the script ASAP\n\t      if (window.addEventListener) {\n\t        window.addEventListener(\"load\", loader, false);\n\t      } else { \n\t        window.attachEvent(\"onload\", loader);\n\t      }\n\t    }\n\t  }, this.logger))();\n\t};\n\t\n\tRollbar.prototype.wrap = function(f, context) {\n\t  try {\n\t    var _this = this;\n\t    var ctxFn;\n\t    if (typeof context === 'function') {\n\t      ctxFn = context;\n\t    } else {\n\t      ctxFn = function() { return context || {}; };\n\t    }\n\t\n\t    if (typeof f !== 'function') {\n\t      return f;\n\t    }\n\t\n\t    if (f._isWrap) {\n\t      return f;\n\t    }\n\t\n\t    if (!f._wrapped) {\n\t      f._wrapped = function () {\n\t        try {\n\t          return f.apply(this, arguments);\n\t        } catch(e) {\n\t          e._rollbarContext = ctxFn() || {};\n\t          e._rollbarContext._wrappedSource = f.toString();\n\t\n\t          window._rollbarWrappedError = e;\n\t          throw e;\n\t        }\n\t      };\n\t\n\t      f._wrapped._isWrap = true;\n\t\n\t      for (var prop in f) {\n\t        if (f.hasOwnProperty(prop)) {\n\t          f._wrapped[prop] = f[prop];\n\t        }\n\t      }\n\t    }\n\t\n\t    return f._wrapped;\n\t  } catch (e) {\n\t    // Try-catch here is to work around issue where wrap() fails when used inside Selenium.\n\t    // Return the original function if the wrap fails.\n\t    return f;\n\t  }\n\t};\n\t\n\t// Stub out rollbar.js methods\n\tfunction stub(method) {\n\t  var R = Rollbar;\n\t  return _wrapInternalErr(function() {\n\t    if (this.notifier) {\n\t      return this.notifier[method].apply(this.notifier, arguments);\n\t    } else {\n\t      var shim = this;\n\t      var isScope = method === 'scope';\n\t      if (isScope) {\n\t        shim = new R(this);\n\t      }\n\t      var args = Array.prototype.slice.call(arguments, 0);\n\t      var data = {shim: shim, method: method, args: args, ts: new Date()};\n\t      window._rollbarShimQueue.push(data);\n\t\n\t      if (isScope) {\n\t        return shim;\n\t      }\n\t    }\n\t  });\n\t}\n\t\n\tfunction _extendListenerPrototype(client, prototype) {\n\t  if (prototype.hasOwnProperty && prototype.hasOwnProperty('addEventListener')) {\n\t    var oldAddEventListener = prototype.addEventListener;\n\t    prototype.addEventListener = function(event, callback, bubble) {\n\t      oldAddEventListener.call(this, event, client.wrap(callback), bubble);\n\t    };\n\t\n\t    var oldRemoveEventListener = prototype.removeEventListener;\n\t    prototype.removeEventListener = function(event, callback, bubble) {\n\t      oldRemoveEventListener.call(this, event, (callback && callback._wrapped) ? callback._wrapped : callback, bubble);\n\t    };\n\t  }\n\t}\n\t\n\tfunction _wrapInternalErr(f, logger) {\n\t  logger = logger || this.logger;\n\t  return function() {\n\t    try {\n\t      return f.apply(this, arguments);\n\t    } catch (e) {\n\t      logger('Rollbar internal error:', e);\n\t    }\n\t  };\n\t}\n\t\n\tvar _methods = 'log,debug,info,warn,warning,error,critical,global,configure,scope,uncaughtError'.split(',');\n\tfor (var i = 0; i < _methods.length; ++i) {\n\t  Rollbar.prototype[_methods[i]] = stub(_methods[i]);\n\t}\n\t\n\tmodule.exports = {\n\t  Rollbar: Rollbar,\n\t  _rollbarWindowOnError: _rollbarWindowOnError\n\t};\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = function(shim, _config) {\n\t  return function(err) {\n\t    if (err) {\n\t      // do something?\n\t\n\t      return;\n\t    }\n\t\n\t    if (!window._rollbarInitialized) {\n\t      var Notifier = window.RollbarNotifier; // This is exposed by UMD bundle.\n\t      var config = _config || {};\n\t      var alias = config.globalAlias || 'Rollbar';\n\t\n\t      // At this time window.Rollbar is globalnotifier.wrapper\n\t      var fullRollbar = window.Rollbar.init(config, shim);\n\t\n\t      fullRollbar._processShimQueue(window._rollbarShimQueue || []);\n\t\n\t      window[alias] = fullRollbar;\n\t\n\t      window._rollbarInitialized = true;\n\t\n\t      Notifier.processPayloads();\n\t    }\n\t  }\n\t}\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** rollbar.snippet.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 3f308f366181725e62f8\n **/","var RollbarShim = require('../shim').Rollbar;\nvar snippetCallback = require('../snippet_callback');\n\nvar defaultRollbarJsUrl = __DEFAULT_ROLLBARJS_URL__;\n_rollbarConfig.rollbarJsUrl = _rollbarConfig.rollbarJsUrl || defaultRollbarJsUrl;\n\nvar shim = RollbarShim.init(window, _rollbarConfig);\nvar callback = snippetCallback(shim, _rollbarConfig);\n\nshim.loadFull(window, document, false, _rollbarConfig, callback);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/bundles/rollbar.snippet.js\n ** module id = 0\n ** module chunks = 0\n **/","var _shimCounter = 0;\n\nfunction Rollbar(parentShim) {\n  this.shimId = ++_shimCounter;\n  this.notifier = null;\n  this.parentShim = parentShim;\n  this.logger = function() {};\n\n  if (window.console) {\n    if (window.console.shimId === undefined) {\n      this.logger = window.console.log;\n    }\n  }\n}\n\nfunction _rollbarWindowOnError(client, old, args) {\n  if (window._rollbarWrappedError) {\n    if (!args[4]) {\n      args[4] = window._rollbarWrappedError;\n    }\n    if (!args[5]) {\n      args[5] = window._rollbarWrappedError._rollbarContext;\n    }\n    window._rollbarWrappedError = null;\n  }\n\n  client.uncaughtError.apply(client, args);\n  if (old) {\n    old.apply(window, args);\n  }\n}\n\nRollbar.init = function(window, config) {\n  var alias = config.globalAlias || 'Rollbar';\n  if (typeof window[alias] === 'object') {\n    return window[alias];\n  }\n\n  // Expose the global shim queue\n  window._rollbarShimQueue = [];\n  window._rollbarWrappedError = null;\n\n  config = config || {};\n\n  var client = new Rollbar();\n\n  return (_wrapInternalErr(function() {\n    client.configure(config);\n\n    if (config.captureUncaught) {\n      // Create the client and set the onerror handler\n      var old = window.onerror;\n\n      window.onerror = function() {\n        var args = Array.prototype.slice.call(arguments, 0);\n        _rollbarWindowOnError(client, old, args);\n      };\n\n      // Adapted from https://github.com/bugsnag/bugsnag-js\n      var globals = \"EventTarget,Window,Node,ApplicationCache,AudioTrackList,ChannelMergerNode,CryptoOperation,EventSource,FileReader,HTMLUnknownElement,IDBDatabase,IDBRequest,IDBTransaction,KeyOperation,MediaController,MessagePort,ModalWindow,Notification,SVGElementInstance,Screen,TextTrack,TextTrackCue,TextTrackList,WebSocket,WebSocketWorker,Worker,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload\".split(\",\");\n\n      var i;\n      var global;\n      for (i = 0; i < globals.length; ++i) {\n        global = globals[i];\n\n        if (window[global] && window[global].prototype) {\n          _extendListenerPrototype(client, window[global].prototype);\n        }\n      }\n    }\n\n    // Expose Rollbar globally\n    window[alias] = client;\n    return client;\n  }, client.logger))();\n};\n\nRollbar.prototype.loadFull = function(window, document, immediate, config, callback) {\n  var self = this;\n  // Create the main rollbar script loader\n  var loader = _wrapInternalErr(function() {\n    var s = document.createElement(\"script\");\n    var f = document.getElementsByTagName(\"script\")[0];\n    s.src = config.rollbarJsUrl;\n    s.async = !immediate;\n\n    // NOTE(cory): this may not work for some versions of IE\n    s.onload = handleLoadErr;\n\n    f.parentNode.insertBefore(s, f);\n  }, this.logger);\n\n  var handleLoadErr = _wrapInternalErr(function() {\n    var err;\n    if (window._rollbarPayloadQueue === undefined) {\n      // rollbar.js did not load correctly, call any queued callbacks\n      // with an error.\n      var obj;\n      var cb;\n      var args;\n      var i;\n\n      err = new Error('rollbar.js did not load');\n\n      // Go through each of the shim objects. If one of their args\n      // was a function, treat it as the callback and call it with\n      // err as the first arg.\n      while ((obj = window._rollbarShimQueue.shift())) {\n        args = obj.args;\n        for (i = 0; i < args.length; ++i) {\n          cb = args[i];\n          if (typeof cb === 'function') {\n            cb(err);\n            break;\n          }\n        }\n      }\n    }\n    if (typeof callback === 'function') {\n      callback(err);\n    }\n  }, this.logger);\n\n  (_wrapInternalErr(function() {\n    if (immediate) {\n      loader();\n    } else {\n      // Have the window load up the script ASAP\n      if (window.addEventListener) {\n        window.addEventListener(\"load\", loader, false);\n      } else { \n        window.attachEvent(\"onload\", loader);\n      }\n    }\n  }, this.logger))();\n};\n\nRollbar.prototype.wrap = function(f, context) {\n  try {\n    var _this = this;\n    var ctxFn;\n    if (typeof context === 'function') {\n      ctxFn = context;\n    } else {\n      ctxFn = function() { return context || {}; };\n    }\n\n    if (typeof f !== 'function') {\n      return f;\n    }\n\n    if (f._isWrap) {\n      return f;\n    }\n\n    if (!f._wrapped) {\n      f._wrapped = function () {\n        try {\n          return f.apply(this, arguments);\n        } catch(e) {\n          e._rollbarContext = ctxFn() || {};\n          e._rollbarContext._wrappedSource = f.toString();\n\n          window._rollbarWrappedError = e;\n          throw e;\n        }\n      };\n\n      f._wrapped._isWrap = true;\n\n      for (var prop in f) {\n        if (f.hasOwnProperty(prop)) {\n          f._wrapped[prop] = f[prop];\n        }\n      }\n    }\n\n    return f._wrapped;\n  } catch (e) {\n    // Try-catch here is to work around issue where wrap() fails when used inside Selenium.\n    // Return the original function if the wrap fails.\n    return f;\n  }\n};\n\n// Stub out rollbar.js methods\nfunction stub(method) {\n  var R = Rollbar;\n  return _wrapInternalErr(function() {\n    if (this.notifier) {\n      return this.notifier[method].apply(this.notifier, arguments);\n    } else {\n      var shim = this;\n      var isScope = method === 'scope';\n      if (isScope) {\n        shim = new R(this);\n      }\n      var args = Array.prototype.slice.call(arguments, 0);\n      var data = {shim: shim, method: method, args: args, ts: new Date()};\n      window._rollbarShimQueue.push(data);\n\n      if (isScope) {\n        return shim;\n      }\n    }\n  });\n}\n\nfunction _extendListenerPrototype(client, prototype) {\n  if (prototype.hasOwnProperty && prototype.hasOwnProperty('addEventListener')) {\n    var oldAddEventListener = prototype.addEventListener;\n    prototype.addEventListener = function(event, callback, bubble) {\n      oldAddEventListener.call(this, event, client.wrap(callback), bubble);\n    };\n\n    var oldRemoveEventListener = prototype.removeEventListener;\n    prototype.removeEventListener = function(event, callback, bubble) {\n      oldRemoveEventListener.call(this, event, (callback && callback._wrapped) ? callback._wrapped : callback, bubble);\n    };\n  }\n}\n\nfunction _wrapInternalErr(f, logger) {\n  logger = logger || this.logger;\n  return function() {\n    try {\n      return f.apply(this, arguments);\n    } catch (e) {\n      logger('Rollbar internal error:', e);\n    }\n  };\n}\n\nvar _methods = 'log,debug,info,warn,warning,error,critical,global,configure,scope,uncaughtError'.split(',');\nfor (var i = 0; i < _methods.length; ++i) {\n  Rollbar.prototype[_methods[i]] = stub(_methods[i]);\n}\n\nmodule.exports = {\n  Rollbar: Rollbar,\n  _rollbarWindowOnError: _rollbarWindowOnError\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/shim.js\n ** module id = 1\n ** module chunks = 0\n **/","module.exports = function(shim, _config) {\n  return function(err) {\n    if (err) {\n      // do something?\n\n      return;\n    }\n\n    if (!window._rollbarInitialized) {\n      var Notifier = window.RollbarNotifier; // This is exposed by UMD bundle.\n      var config = _config || {};\n      var alias = config.globalAlias || 'Rollbar';\n\n      // At this time window.Rollbar is globalnotifier.wrapper\n      var fullRollbar = window.Rollbar.init(config, shim);\n\n      fullRollbar._processShimQueue(window._rollbarShimQueue || []);\n\n      window[alias] = fullRollbar;\n\n      window._rollbarInitialized = true;\n\n      Notifier.processPayloads();\n    }\n  }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/snippet_callback.js\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}