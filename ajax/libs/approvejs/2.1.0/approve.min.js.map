{"version":3,"sources":["approve.js"],"names":["global","factory","exports","module","define","amd","approve","this","Card","scheme","valid","Score","strength","points","isMinimum","hasLower","hasUpper","hasNumber","hasSpecial","isBonus","percent","errors","cc","message","schemes","regex","_getScheme","value","replace","i","length","test","validate","ca","card","sum","mul","charAt","minimum","minimumBonus","strengths","0","1","2","3","4","5","6","expects","_getScore","text","result","match","Math","ceil","_getStrength","push","pars","min","bonus","hasOwnProperty","config","messages","tests","required","email","url","alphaNumeric","numeric","alpha","decimal","currency","ip","ipv4","ipv4Cidr","ipv6","ipv6Cidr","max","range","equal","format","Object","prototype","toString","call","time","date","formats","ymd","dmy","truthy","falsy","Result","approved","each","callback","isFunc","constructor","apply","_format","col","Array","slice","arguments","m","n","trim","_isRule","rule","props","indexOf","_start","rules","title","stop","constraint","params","_test","args","_getArgs","ret","concat","_formatMessages","prop","_formatMessage","_eachExpected","fn","isArray","expectsLength","_getFormat","addTest","obj","name","e"],"mappings":"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","file":"approve.min.js","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.approve = factory());\n}(this, (function () { 'use strict';\n\n/**\n * The result object containing the outcome of the credit card test.\n */\nfunction Card() {\n    this.scheme = '';\n    this.valid = false;\n}\n\n/** \n * Checks if a value is a valid credit card.\n */\nvar cc = {\n    /**\n     * The default error message.\n     */\n    message: '{title} is not a valid credit card number',\n    schemes: [\n        {\n            regex: /^(5610|560221|560222|560223|560224|560225)/,\n            scheme: 'Australian Bank Card'\n        },\n        {\n            regex: /^(2014|2149)/,\n            scheme: 'Diner\\'s Club'\n        },\n        {\n            regex: /^36/,\n            scheme: 'Diner\\'s Club International'\n        },\n        {\n            regex: /^(30[0-5]|36|38|54|55|2014|2149)/,\n            scheme: 'Diner\\'s Club / Carte Blanche'\n        },\n        {\n            regex: /^35(2[89]|[3-8][0-9])/,\n            scheme: 'Japanese Credit Bureau'\n        },\n        {\n            regex: /^(5018|5020|5038|6304|6759|676[1-3])/,\n            scheme: 'Maestro'\n        },\n        {\n            regex: /^5[1-5]/,\n            scheme: 'Mastercard'\n        },\n        {\n            regex: /^(6304|670[69]|6771)/,\n            scheme: 'Laser'\n        },\n        {\n            regex: /^(6334|6767)/,\n            scheme: 'Solo (Paymentech)'\n        },\n        {\n            regex: /^(6011|622|64|65)/,\n            scheme: 'Discover'\n        },\n        {\n            regex: /^3[47]/,\n            scheme: 'American Express'\n        },\n        {\n            regex: /^(4026|417500|4508|4844|491(3|7))/,\n            scheme: 'Visa Electron'\n        },\n        {\n            regex: /^(4)/,\n            scheme: 'Visa'\n        }\n    ],\n    /**\n     * Returns the name of the credit card scheme.\n     * @param {Object} value - The credit card number to test.\n     * @return {Object} The result of the test.\n     */\n    _getScheme: function(value) {\n        value = (''+ value).replace(/\\D/g, '');\n\n        var i = this.schemes.length;\n        while (i--) {\n            if (this.schemes[i].regex.test(value)) {\n                return this.schemes[i].scheme;\n            }\n        }\n\n        return undefined;\n    },\n    /**\n     * The method that is called by ApproveJs to perform the test.\n     * @param {Object} value - The value to test.\n     * @return {Object} The result object of the test.\n     */\n    validate: function(value) {\n        value = (''+ value).replace(/\\D/g, '');\n\n        var card = new Card(), \n            i = value.length,\n            sum = 0,\n            mul = 1,\n            ca;\n\n        // Not enough numbers. Shortest currently is 12. \n        if (i < 12) {\n            return false;\n        }\n\n        while (i--) {\n            ca = value.charAt(i) * mul;\n            sum += ca - (ca > 9) * 9;\n            mul ^= 3;\n        }\n\n        card.valid = (sum % 10 === 0) && (sum > 0);\n        card.scheme = this._getScheme(value);\n\n        return card;\n    }\n};\n\n/**\n * The result object containing the outcome of the strength test.\n */\nfunction Score(strength) {\n    this.strength = strength;\n    this.points = 0;\n    this.isMinimum = false;\n    this.hasLower = false;\n    this.hasUpper = false;\n    this.hasNumber = false;\n    this.hasSpecial = false;\n    this.isBonus = false;\n    this.percent = 0;\n    this.valid = false;\n    this.errors = [];\n}\n/** \n * Checks if a value is a strong password string.\n */\nvar strength = {\n    /**\n     * The minimum length a password must be.\n     */\n    minimum: 8,\n    /**\n     * The minimum length a password must be for a bonus point.\n     */\n    minimumBonus: 10,\n    /**\n     * The text representing the strength of a password.\n     */\n    strengths: {\n        0: 'Very Weak',\n        1: 'Weak',\n        2: 'Better',\n        3: 'Almost',\n        4: 'Acceptable',\n        5: 'Strong',\n        6: 'Very Strong'\n    },\n    /**\n     * The default error message.\n     */\n    message: '{title} did not pass the strength test.',\n    /**\n     * Expects the 'min' and 'bonus' parameters.\n     */\n    expects: ['min', 'bonus'],\n    /**\n     * Default error messages\n     */\n    errors: {\n        isMinimum: '{title} must be at least {min} characters',\n        hasLower: '{title} must have at least 1 lower case character',\n        hasUpper: '{title} must have at least 1 upper case character',\n        hasNumber: '{title} must have at least 1 number',\n        hasSpecial: '{title} must have at least 1 special character'\n    },\n    /**\n     * Returns an object containing the score of a value.\n     */\n    _getScore: function(text) {\n        // Create the object that represents the score of the text\n        var result = new Score(this.strengths[0]);\n        // If text is longer than minimum give 1 point.\n        // If text is longer than minimumBonus give another 1 point.\n        if (text.length > this.minimumBonus) {\n            result.points += 2;\n            result.isBonus = true;\n            result.isMinimum = true;\n        } else if (text.length > this.minimum){\n            result.points++;\n            result.isMinimum = true;\n        } else {\n            result.points = 1;\n            result.isMinimum = false;\n        }\n        // If text has lowercase characters give 1 point.\n        result.hasLower = text.match(/[a-z]/);\n        if(result.isMinimum) {\n            result.points++;\n        }\n        // If text has uppercase characters give 1 point.\n        result.hasUpper = text.match(/[A-Z]/);\n        if(result.isMinimum) {\n            result.points++;\n        }\n        // If text has at least one number give 1 point.\n        result.hasNumber = text.match(/\\d+/);\n        if(result.isMinimum) {\n            result.points++;\n        }\n        // If text has at least one special caracther give 1 point.\n        result.hasSpecial = text.match(/.[!,@,#,$,%,^,&,*,?,_,~,-,(,)]/);\n        if(result.isMinimum) {\n            result.points++;\n        }\n        // Set the percentage value.\n        result.percent = Math.ceil((result.points / 6) * 100);\n        // Return the score object.\n        return result;\n    },\n    /**\n     * Returns an object containing the score and validation of a value.\n     */\n    _getStrength: function (text) {\n        var result = this._getScore(text);\n        result.strength = this.strengths[result.points];\n        if (!result.isMinimum) {\n            result.errors.push(this.errors.isMinimum);\n        }\n        if (!result.hasLower) {\n            result.errors.push(this.errors.hasLower);\n        }\n        if (!result.hasUpper) {\n            result.errors.push(this.errors.hasUpper);\n        }\n        if (!result.hasSpecial) {\n            result.errors.push(this.errors.hasSpecial);\n        }\n        if (!result.hasNumber) {\n            result.errors.push(this.errors.hasNumber);\n        }\n        if (result.points > 4) {\n          result.valid = true;\n        } \n        return result;\n    },\n    /**\n     * The method that is called by ApproveJs to perform the test.\n     */\n    validate: function(value, pars) {\n        this.minimum = pars.min || this.minimum;\n        this.minimumBonus = pars.bonus || this.minimumBonus;\n        if (pars.hasOwnProperty('config') && pars.config.hasOwnProperty('messages')) {\n            for (var message in pars.config.messages) {\n                if (pars.config.messages.hasOwnProperty(message)) {\n                    this.errors[message] = pars.config.messages[message];\n                }\n            }\n        }\n        return this._getStrength(value);\n    }\n};\n\nvar tests = {\r\n    /**\r\n     * Checks if a value is present.\r\n     */\r\n    required: {\r\n        validate: function(value) {\r\n            return !!value;\r\n        },\r\n        message: '{title} is required',\r\n        expects: false\r\n    },\r\n    /**\r\n     * Checks if a value is a valid email address.\r\n     */\r\n    email: {\r\n        regex: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i, // eslint-disable-line no-control-regex\r\n        validate: function(value) {\r\n            return this.regex.test(value);\r\n        },\r\n        message: '{title} must be a valid email address',\r\n        expects: false\r\n    },\r\n    /**\r\n     * Checks if a value is a valid web address.\r\n     */\r\n    url: {\r\n        regex: /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/i,\r\n        validate: function(value) {\r\n            return this.regex.test(value);\r\n        },\r\n        message: '{title} must be a valid web address',\r\n        expects: false\r\n    },\r\n    /**\r\n     * Checks if a value contains both letters and numbers.\r\n     */\r\n    alphaNumeric: {\r\n        regex: /^[A-Za-z0-9]+$/i,\r\n        validate: function(value) {\r\n            return this.regex.test(value);\r\n        },\r\n        message: '{title} may only contain [A-Za-z] and [0-9]',\r\n        expects: false\r\n    },\r\n    /**\r\n     * Checks if a value contains only numbers.\r\n     */\r\n    numeric: {\r\n        regex: /^[0-9]+$/,\r\n        validate: function(value) {\r\n            return this.regex.test(value);\r\n        },\r\n        message: '{title} may only contain [0-9]',\r\n        expects: false\r\n    },\r\n    /**\r\n     * Checks if a value contains only letters.\r\n     */\r\n    alpha: {\r\n        regex: /^[A-Za-z]+$/,\r\n        validate: function(value) {\r\n            return this.regex.test(value);\r\n        },\r\n        message: '{title} may only contain [A-Za-z]',\r\n        expects: false\r\n    },\r\n    /**\r\n     * Checks if a value is a valid decimal.\r\n     */\r\n    decimal: {\r\n        regex: /^\\s*(\\+|-)?((\\d+(\\.\\d+)?)|(\\.\\d+))\\s*$/,\r\n        validate: function(value) {\r\n            return this.regex.test(value);\r\n        },\r\n        message: '{title} must be a valid decimal',\r\n        expects: false\r\n    },\r\n    /**\r\n     * Similar to 'decimal', but for currency values.\r\n     */\r\n    currency: {\r\n        regex: /^\\s*(\\+|-)?((\\d+(\\.\\d\\d)?)|(\\.\\d\\d))\\s*$/,\r\n        validate: function(value) {\r\n            return this.regex.test(value);\r\n        },\r\n        message: '{title} must be a valid currency value',\r\n        expects: false\r\n    },\r\n    /**\r\n     * Checks if a value is a valid ipv4 or ipv6 address.\r\n     */\r\n    ip: {\r\n        regex: {\r\n            ipv4: /^(?:(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])\\.){3}(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])$/,\r\n            ipv4Cidr: /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$/,\r\n            ipv6: /^((?=.*::)(?!.*::.+::)(::)?([\\dA-F]{1,4}:(:|\\b)|){5}|([\\dA-F]{1,4}:){6})((([\\dA-F]{1,4}((?!\\3)::|:\\b|$))|(?!\\2\\3)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?\\b){4})$/i,\r\n            ipv6Cidr: /^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*(\\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?$/\r\n        },\r\n        validate: function(value) {\r\n            return this.regex.ipv4.test(value) || this.regex.ipv6.test(value) || this.regex.ipv4Cidr.test(value) || this.regex.ipv6Cidr.test(value);\r\n        },\r\n        message: '{title} must be a valid IP address',\r\n        expects: false\r\n    },\r\n    /**\r\n     * Checks if a value is a minimum of n characters.\r\n     */\r\n    min: {\r\n        validate: function(value, pars) {\r\n            return typeof value === 'string' && value.length >= pars.min;\r\n        },\r\n        message: '{title} must be a minimum of {min} characters',\r\n        expects: ['min']\r\n    },\r\n    /**\r\n     * Checks if a value is a maximum of n characters.\r\n     */\r\n    max: {\r\n        validate: function(value, pars) {\r\n            return typeof value === 'string' && value.length <= pars.max;\r\n        },\r\n        message: '{title} must be a maximum of {max} characters',\r\n        expects: ['max']\r\n    },\r\n    /**\r\n     * Checks if a string's length or number is between a minimum and maximum.\r\n     */\r\n    range: {\r\n        validate: function(value, pars) {\r\n            if (typeof value === 'string')\r\n            {\r\n                return value.length >= pars.min && value.length <= pars.max;\r\n            } else if (typeof value === 'number') {\r\n                return value >= pars.min && value <= pars.max;\r\n            }\r\n            return false;\r\n        },\r\n        message: '{title} must be a minimum of {min} and a maximum of {max} characters',\r\n        expects: ['min', 'max']\r\n    },\r\n    /**\r\n     * Checks if a value is the same as the value of another.\r\n     */\r\n    equal: {\r\n        validate: function(value, pars) {\r\n            return '' + value === '' + pars.value;\r\n        },\r\n        message: '{title} must be equal to {field}',\r\n        expects: ['value', 'field']\r\n    },\r\n    /**\r\n     * Checks if a value passes a given regular expression.\r\n     */\r\n    format: {\r\n        validate: function(value, pars) {\r\n            if (Object.prototype.toString.call(pars.regex) === '[object RegExp]') {\r\n                return pars.regex.test(value);\r\n            }\r\n            throw 'approve.value(): [format] - regex is not a valid regular expression.';\r\n        },\r\n        message: '{title} did not pass the [{regex}] test',\r\n        expects: ['regex']\r\n    },\r\n    /**\r\n     * Checks if a value is a valid time string (hh:mm:ss).\r\n     */\r\n    time: {\r\n        regex: /^(2[0-3]|[01]?[0-9]):([0-5]?[0-9]):([0-5]?[0-9])$/,\r\n        validate: function(value) {\r\n            return this.regex.test(value);\r\n        },\r\n        message: '{title} is not a valid time',\r\n        expects: false\r\n    },\r\n    /**\r\n     * Checks if a value is a valid date.\r\n     */\r\n    date: {\r\n        formats: {\r\n            ymd: /^(?:\\2)(?:[0-9]{2})?[0-9]{2}([\\/-])(1[0-2]|0?[1-9])([\\/-])(3[01]|[12][0-9]|0?[1-9])$/,\r\n            dmy: /^(3[01]|[12][0-9]|0?[1-9])([\\/-])(1[0-2]|0?[1-9])([\\/-])(?:[0-9]{2})?[0-9]{2}$/\r\n        },\r\n        validate: function(value, pars) {\r\n            return this.formats[pars.format].test(value);\r\n        },\r\n        message: '{title} is not a valid date',\r\n        expects: ['format']\r\n    },\r\n    /**\r\n     * Checks if a value is truthy ('yes', 'true', 'ok[ay]', '1').\r\n     */\r\n    truthy: {\r\n        regex: /^(?:1|t(?:rue)?|y(?:es)?|ok(?:ay)?)$/i,\r\n        validate: function(value) {\r\n            return this.regex.test(value);\r\n        },\r\n        message: '{title} is not valid',\r\n        expects: false\r\n    },\r\n    /**\r\n     * Checks if a value is falsy ('No', 'false', '0').\r\n     */\r\n    falsy: {\r\n        regex: /^(?:1|t(?:rue)?|y(?:es)?|ok(?:ay)?)$/i,\r\n        validate: function(value) {\r\n            return !this.regex.test(value);\r\n        },\r\n        message: '{title} is not valid',\r\n        expects: false\r\n    },\r\n    cc: cc,\r\n    strength: strength\r\n};\n\nvar Result = function() {\r\n    this.approved = true;\r\n    this.errors = [];\r\n    // Provides easy access to the loop for the errors.\r\n    this.each = function(callback) {\r\n        var isFunc = callback && callback.constructor && callback.call && callback.apply,\r\n            i = this.errors.length;\r\n        while (i--) {\r\n            if (isFunc) {\r\n                callback(this.errors[i]);\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\n/** @constructor */\r\nvar approve = {\r\n\t/**\r\n\t * Default tests.<br>\r\n\t */\r\n\ttests: tests,\r\n\t/**\r\n\t * A helper function for formatting strings.\r\n\t */\r\n\t_format: function(text, col) {\r\n\t    col = typeof col === 'object' ? col : Array.prototype.slice.call(arguments, 1);\r\n\t    return text.replace(/\\{\\{|\\}\\}|\\{(\\w+)\\}/g, function (m, n) {\r\n\t        if (m === \"{{\") { return \"{\"; }\r\n\t        if (m === \"}}\") { return \"}\"; }\r\n\t        return col[n];\r\n\t    }).trim();\r\n\t},\r\n\t/**\r\n\t * Checks whether the given rule is not a config property.\r\n\t */\r\n\t_isRule: function(rule) {\r\n\t\tvar props = [\r\n\t\t\t'title',\r\n\t\t\t'stop'\r\n\t\t];\r\n\t\treturn props.indexOf(rule) < 0;\r\n\t},\r\n\t/**\r\n\t * The start of the validation process.\r\n\t */\r\n\t_start: function(value, rules) {\r\n\t    // Instantiate a result object.\r\n\t    var result = new Result(),\r\n\t        // This is used to format the message with the value title.\r\n\t        title = '',\r\n\t        // When true, tests will not continue after first failed test.\r\n\t        stop = false;\r\n\t    // Check if the rule has a title property?\r\n\t    if (rules.hasOwnProperty('title')) {\r\n\t        title = rules.title;\r\n\t    }\r\n\t    // Check if the rule has a stop property?\r\n\t    if (rules.hasOwnProperty('stop')) {\r\n\t        stop = rules.stop;\r\n\t    }\r\n\t    // Loop through given rules.\r\n\t    for (var rule in rules) {\r\n\t    \t// Stop validating after each failed test\r\n\t    \tif (stop && !result.approved) {\r\n\t    \t\tbreak;\r\n\t    \t}\r\n\t        if (rules.hasOwnProperty(rule) && this._isRule(rule)) {\r\n\t            var constraint = rules[rule];\r\n\t            // Check if rule exists in tests.\r\n\t            if (this.tests.hasOwnProperty(rule)) {\r\n\t                // Set a pointer to the current test.\r\n\t                var params = {\r\n\t                    constraint: constraint,\r\n\t                    rule: rule,\r\n\t                    title: title,\r\n\t                    test: this.tests[rule],\r\n\t                    value: value\r\n\t                };\r\n\t                this._test(params, result);\r\n\t            } else {\r\n\t                throw 'approve.value(): ' + rule + ' test not defined.';\r\n\t            }\r\n\t        }\r\n\t    }\r\n\r\n\t    return result;\r\n\t},\r\n\t/**\r\n\t * Performs the actual testing of the value and returns the result including any errors.\r\n\t */\r\n\t_test: function(params, result) {\r\n\t    // Create an args object for required parameters.\r\n\t    var args = this._getArgs(params),\r\n\t        // Test the value.\r\n\t        ret = params.test.validate(params.value, args);\r\n\t    // Check if the returned value is an object.\r\n\t    if(typeof ret === 'object')\r\n\t    {\r\n\t        // An object was returned.\r\n\t        // Check if the test was successful.\r\n\t        result.approved = !ret.valid ? false : result.approved;\r\n\t        // Add the error messages returned by the resluting object.\r\n\t        if (ret.hasOwnProperty('errors')) {\r\n\t            result.errors = result.errors.concat(this._formatMessages(ret.errors, params));\r\n\t        }\r\n\t        // Merge any properties from the resulting object with the main result to be returned.\r\n\t        for (var prop in ret) {\r\n\t            if (ret.hasOwnProperty(prop) && !result.hasOwnProperty(prop)) {\r\n\t                result[prop] = ret[prop];\r\n\t            }\r\n\t        }\r\n\t    } else if (typeof ret !== 'boolean') {\r\n\t        // We don't process if it's not a boolean or object.\r\n\t        throw 'approve.value(): ' + params.rule + ' returned an invalid value';\r\n\t    } else {\r\n\t        result.approved = !ret ? false : result.approved;\r\n\t    }\r\n\t    if (!result.approved) {\r\n\t        result.errors.push(this._formatMessage(params));\r\n\t    }\r\n\t},\r\n\t/**\r\n\t * Helper method to loop over expected test parameters.\r\n\t */\r\n\t_eachExpected: function(params, fn) {\r\n\t    if (Array.isArray(params.test.expects)) {\r\n\t        var expectsLength = params.test.expects.length,\r\n\t            i = expectsLength;\r\n\t        // This test expects paramaters.\r\n\t        // Loop through the test's expected parameters and call the given function.\r\n\t        while (i--) {\r\n\t            fn(params.test.expects[i], expectsLength);\r\n\t        }\r\n\t    }\r\n\t},\r\n\t/**\r\n\t * Returns an object containing the arguments for a test's expected parameters.\r\n\t */\r\n\t_getArgs: function(params) {\r\n\t    var pars = {};\r\n\t    // Does the test for this rule expect any paramaters?\r\n\t    this._eachExpected(params, function(expects, expectsLength) {\r\n\t        // Check if the rule object has the required parameter.\r\n\t        if (params.constraint.hasOwnProperty(expects)) {\r\n\t            // Add the expected parameter value to the pars object.\r\n\t            pars[expects] = params.constraint[expects];\r\n\t        } else if (expectsLength <= 1 && /^[A-Za-z0-9]+$/i.test(params.constraint)) {\r\n\t            // Set the parameter to the rule's value.\r\n\t            pars[expects] = params.constraint;\r\n\t        } else {\r\n\t            throw 'approve.value(): ' + params.rule + ' expects the ' + expects + ' parameter.';\r\n\t        }\r\n\t    });\r\n\r\n\t    // Does the rule have config?\r\n\t    if (params.constraint.hasOwnProperty('config')) {\r\n\t        // Add the config to the pars object.\r\n\t        pars.config = params.constraint.config;\r\n\t    }\r\n\t    // Return the parameters object\r\n\t    return pars;\r\n\t},\r\n\t/**\r\n\t * Returns an object containing placholder values to correctly format an error message.\r\n\t */\r\n\t_getFormat: function(params) {\r\n\t    var format = {};\r\n\t    // Does the test for the rule expect parameters?\r\n\t    this._eachExpected(params, function(expects) {\r\n\t        // Check if the rule object has the required parameter.\r\n\t        if (params.constraint.hasOwnProperty(expects)) {\r\n\t            // Add the expected parameter's format to the parameter value.\r\n\t            format[expects] = params.constraint[expects];\r\n\t        }\r\n\t        // Expected parameter not present, is the constraint formattable?\r\n\t        if (/^[A-Za-z0-9]+$/i.test(params.constraint)) {\r\n\t            format[expects] = params.constraint;\r\n\t        }\r\n\t    });\r\n\t    format.title = params.title;\r\n\t    // Return the formatted message.\r\n\t    return format;\r\n\t},\r\n\t/**\r\n\t * Returns an array of formatted error messages returned by tests that return objects instead of booleans.\r\n\t */\r\n\t_formatMessages: function(errors, params) {\r\n\t    var format = this._getFormat(params),\r\n\t        i = errors.length;\r\n\t    while (i--) {\r\n\t        errors[i] = this._format(errors[i], format);\r\n\t    }\r\n\t    return errors;\r\n\t},\r\n\t/**\r\n\t * Returns the correctly formatted message representing the current test's failure.\r\n\t */\r\n\t_formatMessage: function(params) {\r\n\t    var format = this._getFormat(params);\r\n\t    var message;\r\n\r\n\t    // Does the provided rule have a custom message?\r\n\t    if (params.constraint.hasOwnProperty('message')) {\r\n\t        // The rule has a custom message, return it.\r\n\t        message = params.constraint.message;\r\n\t        return this._format(message, format);\r\n\t    }\r\n\t    else {\r\n\t        // The rule does not have a custom message.\r\n\t        // Get the default message from the tests.\r\n\t        message = params.test.message;\r\n\t        return this._format(message, format);\r\n\t    }\r\n\t},\r\n\t/**\r\n\t * Executes the tests based on given rules to validate a given value.\r\n\t */\r\n\tvalue: function(value, rules) {\r\n\r\n\t    // If rules is not an object, we cannot continue.\r\n\t    if (typeof rules !== 'object') {\r\n\t        throw 'approve.value(value, rules): rules is not a valid object.';\r\n\t    }\r\n\t    // Return the result object.\r\n\t    return this._start(value, rules);\r\n\t},\r\n\t/**\r\n\t * Used to add custom tests.\r\n\t */\r\n\taddTest: function(obj, name) {\r\n\t    // If obj is not a valid object, we cannot continue.\r\n\t    if (typeof obj !== 'object') {\r\n\t        throw 'approve.addTest(obj, name): obj is not a valid object.';\r\n\t    }\r\n\t    try {\r\n\t        // Check if the test name already exists.\r\n\t        if (!this.tests.hasOwnProperty(name)) {\r\n\t            // The name does not exist, add it to the tests.\r\n\t            this.tests[name] = obj;\r\n\t        }\r\n\t    } catch (e) {\r\n\t        throw 'approve.addTest(): ' + e.message;\r\n\t    }\r\n\t}\r\n};\n\nreturn approve;\n\n})));\n"],"sourceRoot":"/source/"}