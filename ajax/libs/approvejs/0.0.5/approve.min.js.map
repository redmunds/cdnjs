{"version":3,"sources":["approve.js"],"names":["root","factory","define","amd","approve","exports","module","this","VERSION","tests","required","validate","value","message","expects","email","regex","test","url","cc","alphaNumeric","numeric","alpha","decimal","currency","ip","ipv4","ipv6","min","pars","length","max","range","equal","format","Object","prototype","toString","call","console","error","_format","text","col","Array","slice","arguments","replace","m","n","_formatMessages","errors","rule","rules","title","_getFormat","i","trim","isArray","hasOwnProperty","_message","result","approved","each","fn","isFunc","constructor","apply","config","ret","valid","push","concat","prop","addTest","obj","name","e","strength","minimum","minimumBonus","messages","0","1","2","3","4","5","6","isMinimum","hasLower","hasUpper","hasNumber","hasSpecial","score","isBonus","match","Math","ceil","bonus"],"mappings":"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","file":"approve.min.js","sourcesContent":["/**\r\n * approve.js 0.0.5\r\n * A simple validation library that doesn't interfere.\r\n * Author: Charl Gottschalk\r\n * @license: MIT\r\n */\r\n\r\n/** @namespace approve */\r\n;(function(root, factory) {    // eslint-disable-line no-extra-semi\r\n    if (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define(function() {\r\n            // Also create a global in case some scripts\r\n            // that are loaded still are looking for\r\n            // a global even when an AMD loader is in use.\r\n            return (root.approve = factory());\r\n        });\r\n    } else if (typeof exports === 'object') {\r\n        // Node. Does not work with strict CommonJS, but\r\n        // only CommonJS-like enviroments that support module.exports,\r\n        // like Node.\r\n        module.exports = factory();\r\n    } else {\r\n        // Browser globals (root is self)\r\n        root.approve = factory();\r\n    }\r\n}(this, function(root) {\n    /** @constructor */\r\n    var approve = {};\r\n\r\n    /** \r\n     * ApproveJs version\r\n     * @memberOf approve\r\n     * @ignore\r\n     */\r\n    approve.VERSION = '0.0.5';\r\n\r\n    /**\r\n     * Default tests.<br>\r\n     * Each test has at least three members.<br>\r\n     * <code>validate()</code> - the method which is called when testing a value.<br>\r\n     * <code>message</code> - the property that holds the default error message.<br>\r\n     * <code>expects</code> - the property that is either false if the test expects no parameters, or an array of strings representing the names of the expected parameters.<br>\r\n     * Each test either returns a boolean or an object.\r\n     * @memberOf approve\r\n     * @namespace approve.tests\r\n     */\r\n    approve.tests = {\r\n        /**\r\n         * Checks if a value is present.\r\n         * @example\r\n         * approve.value('some value', {required: true});\r\n         * @function required\r\n         * @memberOf approve.tests\r\n         * @inner\r\n         */\r\n        required: {\r\n            validate: function(value) {\r\n                return !!value;\r\n            },\r\n            message: '{title} is required',\r\n            expects: false\r\n        },\r\n        /**\r\n         * Checks if a value is a valid email address.\r\n         * @example\r\n         * approve.value('some value', {email: true});\r\n         * @function email\r\n         * @memberOf approve.tests\r\n         * @inner\r\n         */\r\n        email: {\r\n            regex: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i, // eslint-disable-line no-control-regex\r\n            validate: function(value) {\r\n                return this.regex.test(value);\r\n            },\r\n            message: '{title} must be a valid email address',\r\n            expects: false\r\n        },\r\n        /**\r\n         * Checks if a value is a valid web address.\r\n         * @example\r\n         * approve.value('some value', {url: true});\r\n         * @function url\r\n         * @memberOf approve.tests\r\n         * @inner\r\n         */\r\n        url: {\r\n            regex: /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/i,\r\n            validate: function(value) {\r\n                return this.regex.test(value);\r\n            },\r\n            message: '{title} must be a valid web address',\r\n            expects: false\r\n        },\r\n        /**\r\n         * Checks if a value is a valid credit card number.\r\n         * @example\r\n         * approve.value('some value', {cc: true});\r\n         * @function cc\r\n         * @memberOf approve.tests\r\n         * @inner\r\n         */\r\n        cc: {\r\n            regex: /^(?:(4[0-9]{12}(?:[0-9]{3})?)|(5[1-5][0-9]{14})|(6(?:011|5[0-9]{2})[0-9]{12})|(3[47][0-9]{13})|(3(?:0[0-5]|[68][0-9])[0-9]{11})|((?:2131|1800|35[0-9]{3})[0-9]{11}))$/,\r\n            validate: function(value) {\r\n                return this.regex.test(value);\r\n            },\r\n            message: '{title} must be a valid credit card number',\r\n            expects: false\r\n        },\r\n        /**\r\n         * Checks if a value contains both letters and numbers.\r\n         * @example\r\n         * approve.value('some value', {alphaNumeric: true});\r\n         * @function alphaNumeric\r\n         * @memberOf approve.tests\r\n         * @inner\r\n         */\r\n        alphaNumeric: {\r\n            regex: /^[A-Za-z0-9]+$/i,\r\n            validate: function(value) {\r\n                return this.regex.test(value);\r\n            },\r\n            message: '{title} may only contain [A-Za-z] and [0-9]',\r\n            expects: false\r\n        },\r\n        /**\r\n         * Checks if a value contains only numbers.\r\n         * @example\r\n         * approve.value('some value', {numeric: true});\r\n         * @function numeric\r\n         * @memberOf approve.tests\r\n         * @inner\r\n         */\r\n        numeric: {\r\n            regex: /^[0-9]+$/,\r\n            validate: function(value) {\r\n                return this.regex.test(value);\r\n            },\r\n            message: '{title} may only contain [0-9]',\r\n            expects: false\r\n        },\r\n        /**\r\n         * Checks if a value contains only letters.\r\n         * @example\r\n         * approve.value('some value', {alpha: true});\r\n         * @function alpha\r\n         * @memberOf approve.tests\r\n         * @inner\r\n         */\r\n        alpha: {\r\n            regex: /^[A-Za-z]+$/,\r\n            validate: function(value) {\r\n                return this.regex.test(value);\r\n            },\r\n            message: '{title} may only contain [A-Za-z]',\r\n            expects: false\r\n        },\r\n        /**\r\n         * Checks if a value is a valid decimal.\r\n         * @example\r\n         * approve.value('some value', {decimal: true});\r\n         * @function decimal\r\n         * @memberOf approve.tests\r\n         * @inner\r\n         */\r\n        decimal: {\r\n            regex: /^\\s*(\\+|-)?((\\d+(\\.\\d+)?)|(\\.\\d+))\\s*$/,\r\n            validate: function(value) {\r\n                return this.regex.test(value);\r\n            },\r\n            message: '{title} must be a valid decimal',\r\n            expects: false\r\n        },\r\n        /**\r\n         * Similar to 'decimal', but for currency values.\r\n         * @example\r\n         * approve.value('some value', {currency: true});\r\n         * @function currency\r\n         * @memberOf approve.tests\r\n         * @inner\r\n         */\r\n        currency: {\r\n            regex: /^\\s*(\\+|-)?((\\d+(\\.\\d\\d)?)|(\\.\\d\\d))\\s*$/,\r\n            validate: function(value) {\r\n                return this.regex.test(value);\r\n            },\r\n            message: '{title} must be a valid currency value',\r\n            expects: false\r\n        },\r\n        /**\r\n         * Checks if a value is a valid ipv4 or ipv6 address.\r\n         * @example\r\n         * approve.value('some value', {ip: true});\r\n         * @function ip\r\n         * @memberOf approve.tests\r\n         * @inner\r\n         */\r\n        ip: {\r\n            regex: {\r\n                ipv4: /^(?:(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])\\.){3}(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])$/,\r\n                ipv6: /^((?=.*::)(?!.*::.+::)(::)?([\\dA-F]{1,4}:(:|\\b)|){5}|([\\dA-F]{1,4}:){6})((([\\dA-F]{1,4}((?!\\3)::|:\\b|$))|(?!\\2\\3)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?\\b){4})$/i\r\n            },\r\n            validate: function(value) {\r\n                return this.regex.ipv4.test(value) || this.regex.ipv6.test(value);\r\n            },\r\n            message: '{title} must be a valid IP address',\r\n            expects: false\r\n        },\r\n        /**\r\n         * Checks if a value is a minimum of n characters.\r\n         * @param {Integer} min - The minimum allowed length.\r\n         * @example\r\n         * approve.value('some value', {min: 5});\r\n         * @function min\r\n         * @memberOf approve.tests\r\n         * @inner\r\n         */\r\n        min: {\r\n            validate: function(value, pars) {\r\n                return typeof value === 'string' && value.length >= pars.min;\r\n            },\r\n            message: '{title} must be a minimum of {min} characters',\r\n            expects: ['min']\r\n        },\r\n        /**\r\n         * Checks if a value is a maximum of n characters.\r\n         * @param {Integer} max - The maximum allowed length.\r\n         * @example\r\n         * approve.value('some value', {max: 20});\r\n         * @function max\r\n         * @memberOf approve.tests\r\n         * @inner\r\n         */\r\n        max: {\r\n            validate: function(value, pars) {\r\n                return typeof value === 'string' && value.length <= pars.max;\r\n            },\r\n            message: '{title} must be a maximum of {max} characters',\r\n            expects: ['max']\r\n        },\r\n        /**\r\n         * Checks if a value's length is between a minimum and maximum.\r\n         * @param {Integer} min - The minimum allowed length.\r\n         * @param {Integer} max - The maximum allowed length.\r\n         * @example\r\n         * var rule = {\r\n         *     range: {\r\n         *         min: 5,\r\n         *         max: 20\r\n         *     }\r\n         * };\r\n         * approve.value('some value', rule);\r\n         * @function range\r\n         * @memberOf approve.tests\r\n         * @inner\r\n         */\r\n        range: {\r\n            validate: function(value, pars) {\r\n                return typeof value === 'string' && value.length >= pars.min && value.length <= pars.max;\r\n            },\r\n            message: '{title} must be a minimum of {min} and a maximum of {max} characters',\r\n            expects: ['min', 'max']\r\n        },\r\n        /**\r\n         * Checks if a value is the same as the value of another.\r\n         * This test gets the value from a DOM &lt;input/&gt; element.\r\n         * @param {String} field - The id of the DOM &lt;input/&gt; element to test against.\r\n         * @example\r\n         * var rule = {\r\n         *     equal: 'password'\r\n         * };\r\n         * approve.value('some value', rule);\r\n         * @function equal\r\n         * @memberOf approve.tests\r\n         * @inner\r\n         */\r\n        equal: {\r\n            validate: function(value, pars) {\r\n                return '' + value === '' + pars.value;\r\n            },\r\n            message: '{title} must be equal to {field}',\r\n            expects: ['value', 'field']\r\n        },\r\n        /**\r\n         * Checks if a value passes a given regular expression.\r\n         * @param {RegExp} regex - The regular expression to test against. <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp\" target=\"_blank\">MDN</a>\r\n         * @example\r\n         * var rule = {\r\n         *     format: /^[A-Za-z0-9]+$/i\r\n         * };\r\n         * approve.value('some value', rule);\r\n         * @function format\r\n         * @memberOf approve.tests\r\n         * @inner\r\n         */\r\n        format: {\r\n            validate: function(value, pars) {\r\n                if (Object.prototype.toString.call(pars.regex) === '[object RegExp]') {\r\n                    return pars.regex.test(value);\r\n                }\r\n                console.error('approve.tests.format(value, regex): regex is not a valid regular expression.');\r\n                return false;\r\n            },\r\n            message: '{title} did not pass the [{regex}] test',\r\n            expects: ['regex']\r\n        }\r\n    };\r\n\r\n    /** \r\n     * A helper function for formatting strings:\r\n     * @example\r\n     * this._format('i can speak {language} since i was {age}', {language:'javascript',age:10});\r\n     * @example\r\n     * this._format('i can speak {0} since i was {1}', 'javascript',10});\r\n     * @memberOf approve\r\n     * @ignore\r\n     */\r\n    approve._format = function(text, col) {\r\n        col = typeof col === 'object' ? col : Array.prototype.slice.call(arguments, 1);\r\n        return text.replace(/\\{\\{|\\}\\}|\\{(\\w+)\\}/g, function (m, n) {\r\n            if (m == \"{{\") { return \"{\"; }\r\n            if (m == \"}}\") { return \"}\"; }\r\n            return col[n];\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Returns an array of formatted error messages returned by tests that return objects instead of booleans.\r\n     * @example\r\n     * this._formatMessages(['array', 'of', 'errors'], title);\r\n     * @param {Array} errors - The array of unformatted errors returned by the test's result.\r\n     * @param {String} title - The title to replace the {title} placeholder with.\r\n     * @return {Array} The formatted errors\r\n     * @memberOf approve\r\n     * @ignore\r\n     */\r\n    approve._formatMessages = function(errors, rule, rules, title) {\r\n        var format = this._getFormat(rule, rules, title);\r\n        for (var i = errors.length - 1; i >= 0; i--) {\r\n            errors[i] = this._format(errors[i], format).trim();\r\n        }\r\n        return errors;  \r\n    };\r\n\r\n    /**\r\n     * Returns format object to correctly format an error message with the correct test values.\r\n     * @example\r\n     * this._getFormat(rule, rules, title);\r\n     * @param {String} rule - The current rule being processed.\r\n     * @param {Object} rules - The rules object for the value being tested.\r\n     * @param {String} title - The title to replace the {title} placeholder with.\r\n     * @return {Object} The object used to format an error message\r\n     * @memberOf approve\r\n     * @ignore\r\n     */\r\n    approve._getFormat = function(rule, rules, title) {\r\n        var format = {};\r\n        // Does the test for the rule expect parameters?\r\n        if (Array.isArray(this.tests[rule].expects)) {\r\n            // The test for the rule expects paramaters.\r\n            // Loop through expected paramaters for the rule's test.\r\n            var expects = '';\r\n            for (var i = this.tests[rule].expects.length - 1; i >= 0; i--) {\r\n                expects = this.tests[rule].expects[i];\r\n                // Check if the rule object has the required parameter.\r\n                if (rules[rule].hasOwnProperty(expects)) {\r\n                    // Add the expected parameter's format to the parameter value.\r\n                    format[expects] = rules[rule][expects];\r\n                }\r\n                // Expected parameter not present, is the constraint formattable?\r\n                if (/^[A-Za-z0-9]+$/i.test(rules[rule])) {\r\n                    format[expects] = rules[rule];\r\n                }\r\n            }\r\n        }\r\n        // Check if the rule has a name property?\r\n        // This is used to format the message with the field name.\r\n        if (rules.hasOwnProperty('title')) {\r\n            // Format the message to include the field name.\r\n            format.title = rules.title;\r\n        } else {\r\n            // Format the message to include the provided title paramater as the field name.\r\n            format.title = title;\r\n        }\r\n        // Return the formatted message.\r\n        return format;\r\n    };\r\n\r\n    /**\r\n     * Returns the correctly formatted message representing the current test's failure.\r\n     * @example\r\n     * this._message(rule, rules, title);\r\n     * @param {String} rule - The current rule being processed.\r\n     * @param {Object} rules - The rules object for the value being tested.\r\n     * @param {String} title - The title to replace the {title} placeholder with.\r\n     * @return {String} The correctly formatted error message\r\n     * @memberOf approve\r\n     * @ignore\r\n     */\r\n    approve._message = function(rule, rules, title) {\r\n        // Does the provided rule have a custom message?\r\n        if (rules[rule].hasOwnProperty('message')) {\r\n            // The rule has a custom message, return it.\r\n            return rules[rule].message;\r\n        }\r\n        else {\r\n            // The rule does not have a custom message.\r\n            // Get the default message from the tests.\r\n            var message = this.tests[rule].message,\r\n                format = this._getFormat(rule, rules, title);\r\n            return this._format(message, format).trim();\r\n        }        \r\n    };\r\n\r\n    /**\r\n     * Executes the tests based on given rules to validate a given value.<br><br>\r\n     * Returns an object with at least two properties:<br>\r\n     * <code>approved</code> : Boolean - <code>true</code> if test succeeded, otherwise <code>false</code>.<br>\r\n     * <code>errors</code> : Array of String - holds a list of formatted errors.\r\n     * @example\r\n     * var result = approve.value('some value', {test: constraints});\r\n     * if (result.approved) {\r\n     *    // Value is approved - do something\r\n     * } else {\r\n     *    // Do something with the errors\r\n     *    result.each(function(error) {\r\n     *       console.log(error);\r\n     *    });\r\n     * }\r\n     * @param {String|Integer} value - The value to test against the rules.\r\n     * @param {Object} rules - The constraints for the value being tested.\r\n     * @param {String} [title] - The title to replace the {title} placeholder in error messages with.\r\n     * @return {Object} The object containing the result of the tests performed.\r\n     * @memberOf approve\r\n     */\r\n    approve.value = function(value, rules, title) {\r\n\r\n        // If rules is not an object, we cannot continue.\r\n        if (typeof rules !== 'object') {\r\n            console.error('approve.value(value, rules): rules is not a valid object.');\r\n        }\r\n\r\n        // Instantiate a new result object.\r\n        var result = {\r\n            approved: true,\r\n            errors: [],\r\n            // Provides easy access to the loop for the errors.\r\n            each: function(fn) {\r\n                var isFunc = fn && fn.constructor && fn.call && fn.apply;\r\n                for (var i = this.errors.length - 1; i >= 0; i--) {\r\n                    if (isFunc) {\r\n                        fn(this.errors[i]);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        // Loop through given rules.\r\n        for (var rule in rules) {\r\n            if (rules.hasOwnProperty(rule)) {\r\n                title = title || '';\r\n                // Check if rule exists in tests.\r\n                if (this.tests.hasOwnProperty(rule)) {\r\n                    // Create a pars object for required parameters.\r\n                    var pars = {};\r\n                    // Does the test for this rule expect any paramaters?\r\n                    if (Array.isArray(this.tests[rule].expects)) {\r\n                        // This test expects paramaters.\r\n                        // Loop through the test's expected parameters and add the values from the rule.\r\n                        for (var i = this.tests[rule].expects.length - 1; i >= 0; i--) {\r\n                            var expects = this.tests[rule].expects[i];\r\n                            // Check if the rule object has the required parameter.\r\n                            if (rules[rule].hasOwnProperty(expects)) {\r\n                                // Add the expected parameter value to the pars object.\r\n                                pars[expects] = rules[rule][expects];\r\n                            } else {\r\n                                // Set the parameter to the rule's value.\r\n                                pars[expects] = rules[rule];\r\n                            }\r\n                        }\r\n                    }\r\n                    // Does the rule have config?\r\n                    if (rules[rule].hasOwnProperty('config')) {\r\n                        // Add the config to the pars object.\r\n                        pars.config = rules[rule].config;\r\n                    }\r\n                    // Test the value.\r\n                    var ret = this.tests[rule].validate(value, pars);\r\n                    // Check if the returned value is an object.\r\n                    if(typeof ret === 'object')\r\n                    {\r\n                        // An object was returned.\r\n                        // Check if the test was successful.\r\n                        if (!ret.valid) {\r\n                            // The test failed, set the result object properties.\r\n                            result.approved = false;\r\n                            result.errors.push(this._message(rule, rules, title));\r\n                        }\r\n                        // Add the error messages returned by the resluting object.\r\n                        result.errors = result.errors.concat(this._formatMessages(ret.errors, rule, rules, title));\r\n                        // Merge any properties from the resulting object with the main result to be returned.\r\n                        for (var prop in ret) {\r\n                            if (ret.hasOwnProperty(prop)) {\r\n                                result[prop] = ret[prop];\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // Check if the returned value is a boolean\r\n                        if (typeof ret !== 'boolean') {\r\n                            // We don't process if it's not a boolean or object.\r\n                            result.approved = false;\r\n                            result.errors.push(this._message(rule, rules, title));\r\n                        } else {\r\n                            if (!ret) {\r\n                                // The test failed, set the result object properties.\r\n                                result.approved = false;\r\n                                result.errors.push(this._message(rule, rules, title));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Return the result object.\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Used to add custom tests.\r\n     * @example\r\n     * var test = {\r\n     *    expects: false,\r\n     *    message: '{title} did not pass the test.',\r\n     *    validate: function(value) {\r\n     *        return this.strength(value);\r\n     *    },\r\n     * };\r\n     * approve.addTest(test, 'test_name');\r\n     * @param {Object} obj - The test object to add.\r\n     * @param {String} name - The name of the test.\r\n     * @return void\r\n     * @memberOf approve\r\n     */\r\n    approve.addTest = function(obj, name) {\r\n        // If obj is not a valid object, we cannot continue.\r\n        if (typeof obj !== 'object') {\r\n            console.error('approve.addTest(obj, name): obj is not a valid object.');\r\n        }\r\n        try {\r\n            // Check if the test name already exists.\r\n            if (!this.tests.hasOwnProperty(name)) {\r\n                // The name does not exist, add it to the tests.\r\n                this.tests[name] = obj;\r\n            }\r\n        } catch (e) {\r\n            console.error('approve.addTest(): ' + e.message);\r\n        }\r\n    };\r\n\n    /** \r\n     * Checks if a value is a strong password string.\r\n     * @example\r\n     * var rule = {\r\n     *     strength: {\r\n     *         min: 8,\r\n     *         bonus: 10\r\n     *     }\r\n     * };\r\n     * approve.value('some value', rule);\r\n     * @return {Object} An object with various properties relating to the value's score.\r\n     * @function strength\r\n     * @memberOf approve.tests\r\n     * @inner\r\n     */\r\n    var strength = {\r\n        /**\r\n         * The minimum length a password must be.\r\n         */\r\n        minimum: 8,\r\n        /**\r\n         * The minimum length a password must be for a bonus point.\r\n         */\r\n        minimumBonus: 10,\r\n        /**\r\n         * The text representing the strength of a password.\r\n         */\r\n        messages: {\r\n            0: 'Very Weak',\r\n            1: 'Weak',\r\n            2: 'Better',\r\n            3: 'Almost',\r\n            4: 'Acceptable',\r\n            5: 'Strong',\r\n            6: 'Very Strong'\r\n        },\r\n        /**\r\n         * The default error message.\r\n         */\r\n        message: '{title} did not pass the strength test.',\r\n        /**\r\n         * Expects the 'min' and 'bonus' parameters.\r\n         */\r\n        expects: ['min', 'bonus'],\r\n        /**\r\n         * Default error messages\r\n         * @type {Object}\r\n         */\r\n        errors: {\r\n            isMinimum: '{title} must be at least {min} characters',\r\n            hasLower: '{title} must have at least 1 lower case character',\r\n            hasUpper: '{title} must have at least 1 upper case character',\r\n            hasNumber: '{title} must have at least 1 number',\r\n            hasSpecial: '{title} must have at least 1 special character'\r\n        },\r\n        /**\r\n         * Returns an object containing the score of a value.\r\n         * @param {String} text - The text to score.\r\n         * @return {Object} The score of the text.\r\n         */\r\n        score: function(text) {\r\n            // Create the object that represents the score of the text\r\n            var score = {\r\n                value: 0,\r\n                isMinimum: false,\r\n                hasLower: false,\r\n                hasUpper: false,\r\n                hasNumber: false,\r\n                hasSpecial: false,\r\n                isBonus: false,\r\n                strength: 0\r\n            };\r\n            // If text is longer than minimum give 1 point.\r\n            if (text.length > this.minimum){\r\n                score.value++;\r\n                score.isMinimum = true;\r\n            } else {\r\n                score.value = 1;\r\n                score.isMinimum = false;\r\n            }\r\n            // If text has lowercase characters give 1 point.\r\n            if ( text.match(/[a-z]/) ) {\r\n                if(score.isMinimum) {\r\n                    score.value++;\r\n                }\r\n                score.hasLower = true;\r\n            }\r\n            // If text has uppercase characters give 1 point.\r\n            if ( text.match(/[A-Z]/) ) {\r\n                if(score.isMinimum) {\r\n                    score.value++;\r\n                }\r\n                score.hasUpper = true;\r\n            }\r\n            // If text has at least one number give 1 point.\r\n            if (text.match(/\\d+/)) {\r\n                if(score.isMinimum) {\r\n                    score.value++;\r\n                }\r\n                score.hasNumber = true;\r\n            }\r\n            // If text has at least one special caracther give 1 point.\r\n            if ( text.match(/.[!,@,#,$,%,^,&,*,?,_,~,-,(,)]/) ) {\r\n                if(score.isMinimum) {\r\n                    score.value++;\r\n                }\r\n                score.hasSpecial = true;\r\n            }\r\n            // If text is longer than minimumBonus give another 1 point.\r\n            if (text.length > this.minimumBonus) {\r\n                score.value++;\r\n                score.isBonus = true;\r\n            }\r\n            // Set the percentage value.\r\n            score.strength = Math.ceil((score.value / 6) * 100);\r\n            // Return the score object.\r\n            return score;\r\n        },\r\n        /**\r\n         * Returns an object containing the score and validation of a value.\r\n         * @param {String} text - The text to score.\r\n         * @return {Object} The score and validation of the text.\r\n         */\r\n        strength: function (text) {\r\n            var result = {\r\n                    message: this.messages[0],\r\n                    minimum: this.minimum,\r\n                    minimumBonus: this.minimumBonus,\r\n                    score: {},\r\n                    valid: false,\r\n                    errors: []\r\n                };\r\n            result.score = this.score(text);\r\n            result.message = this.messages[result.score.value];\r\n            if (!result.score.isMinimum) {\r\n                result.errors.push(this.errors.isMinimum);\r\n            }\r\n            if (!result.score.hasLower) {\r\n                result.errors.push(this.errors.hasLower);\r\n            }\r\n            if (!result.score.hasUpper) {\r\n                result.errors.push(this.errors.hasUpper);\r\n            }\r\n            if (!result.score.hasSpecial) {\r\n                result.errors.push(this.errors.hasSpecial);\r\n            }\r\n            if (!result.score.hasNumber) {\r\n                result.errors.push(this.errors.hasNumber);\r\n            }\r\n            if (result.score.value > 4) {\r\n              result.valid = true;\r\n            } \r\n            return result;\r\n        },\r\n        /**\r\n         * The method that is called by ApproveJs to perform the test.\r\n         * @param {String} value - The value to test.\r\n         * @return {Object} The result object of the test.\r\n         */\r\n        validate: function(value, pars) {\r\n            this.minimum = pars.min || this.minimum;\r\n            this.minimumBonus = pars.bonus || this.minimumBonus;\r\n            if (pars.hasOwnProperty('config') && pars.config.hasOwnProperty('messages')) {\r\n                for (var message in pars.config.messages) {\r\n                    if (pars.config.messages.hasOwnProperty(message)) {\r\n                        this.errors[message] = pars.config.messages[message];\r\n                    }\r\n                }\r\n            }\r\n            return this.strength(value);\r\n        },\r\n    };\r\n    approve.tests.strength = strength;\r\n\n    /*\r\n     * Return the main ApproveJs object.\r\n     */\r\n    return approve;\r\n}));"],"sourceRoot":"/source/"}