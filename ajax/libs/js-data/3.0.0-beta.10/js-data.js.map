{"version":3,"file":null,"sources":["../src/utils.js","../src/Settable.js","../src/Component.js","../src/Query.js","../lib/mindex/_utils.js","../lib/mindex/index.js","../src/Collection.js","../src/Record.js","../src/Schema.js","../src/Relation.js","../src/Relation/BelongsTo.js","../src/Relation/HasMany.js","../src/Relation/HasOne.js","../src/relations.js","../src/decorators.js","../src/Mapper.js","../src/Container.js","../src/LinkedCollection.js","../src/DataStore.js","../src/index.js"],"sourcesContent":["/**\n * Utility methods used by JSData.\n *\n * @example\n * import {utils} from 'js-data'\n * console.log(utils.isString('foo')) // true\n *\n * @namespace utils\n * @type {Object}\n */\n\nconst DOMAIN = 'utils'\n\nconst INFINITY = 1 / 0\nconst MAX_INTEGER = 1.7976931348623157e+308\nconst BOOL_TAG = '[object Boolean]'\nconst DATE_TAG = '[object Date]'\nconst FUNC_TAG = '[object Function]'\nconst NUMBER_TAG = '[object Number]'\nconst OBJECT_TAG = '[object Object]'\nconst REGEXP_TAG = '[object RegExp]'\nconst STRING_TAG = '[object String]'\nconst objToString = Object.prototype.toString\nconst PATH = /^(.+)\\.(.+)$/\n\nconst ERRORS = {\n  '400' () { return `expected: ${arguments[0]}, found: ${arguments[2] ? arguments[1] : typeof arguments[1]}` },\n  '404' () { return `${arguments[0]} not found` }\n}\n\nconst toInteger = function (value) {\n  if (!value) {\n    return 0\n  }\n  // Coerce to number\n  value = +value\n  if (value === INFINITY || value === -INFINITY) {\n    const sign = (value < 0 ? -1 : 1)\n    return sign * MAX_INTEGER\n  }\n  const remainder = value % 1\n  return value === value ? (remainder ? value - remainder : value) : 0 // eslint-disable-line\n}\n\nconst toStr = function (value) {\n  return objToString.call(value)\n}\n\nconst isPlainObject = function (value) {\n  return (!!value && typeof value === 'object' && value.constructor === Object)\n}\n\nconst mkdirP = function (object, path) {\n  if (!path) {\n    return object\n  }\n  const parts = path.split('.')\n  parts.forEach(function (key) {\n    if (!object[key]) {\n      object[key] = {}\n    }\n    object = object[key]\n  })\n  return object\n}\n\nconst utils = {\n  /**\n   * Reference to the Promise constructor used by JSData. Defaults to\n   * `window.Promise` or `global.Promise`.\n   *\n   * @example <caption>Make JSData use a different `Promise` constructor</caption>\n   * import Promise from 'bluebird'\n   * import {utils} from 'js-data'\n   * utils.Promise = Promise\n   *\n   * @name utils.Promise\n   * @since 3.0.0\n   * @type {Function}\n   */\n  Promise: Promise,\n\n  /**\n   * Shallow copy properties that meet the following criteria from `src` to\n   * `dest`:\n   *\n   * - own enumerable\n   * - not a function\n   * - does not start with \"_\"\n   *\n   * @method utils._\n   * @param {Object} dest Destination object.\n   * @param {Object} src Source object.\n   * @private\n   * @since 3.0.0\n   */\n  _ (dest, src) {\n    utils.forOwn(src, function (value, key) {\n      if (key && dest[key] === undefined && !utils.isFunction(value) && key.indexOf('_') !== 0) {\n        dest[key] = value\n      }\n    })\n  },\n\n  /**\n   * Recursively iterates over relations found in `opts.with`.\n   *\n   * @method utils._forRelation\n   * @param {Object} opts Configuration options.\n   * @param {Relation} def Relation definition.\n   * @param {Function} fn Callback function.\n   * @param {*} [thisArg] Execution context for the callback function.\n   * @private\n   * @since 3.0.0\n   */\n  _forRelation (opts, def, fn, thisArg) {\n    const relationName = def.relation\n    let containedName = null\n    let index\n    opts || (opts = {})\n    opts.with || (opts.with = [])\n\n    if ((index = utils._getIndex(opts.with, relationName)) >= 0) {\n      containedName = relationName\n    } else if ((index = utils._getIndex(opts.with, def.localField)) >= 0) {\n      containedName = def.localField\n    }\n\n    if (opts.withAll) {\n      fn.call(thisArg, def, {})\n      return\n    } else if (!containedName) {\n      return\n    }\n    let optsCopy = {}\n    utils.fillIn(optsCopy, def.getRelation())\n    utils.fillIn(optsCopy, opts)\n    optsCopy.with = opts.with.slice()\n    optsCopy._activeWith = optsCopy.with.splice(index, 1)[0]\n    optsCopy.with.forEach(function (relation, i) {\n      if (relation && relation.indexOf(containedName) === 0 && relation.length >= containedName.length && relation[containedName.length] === '.') {\n        optsCopy.with[i] = relation.substr(containedName.length + 1)\n      } else {\n        optsCopy.with[i] = ''\n      }\n    })\n    fn.call(thisArg, def, optsCopy)\n  },\n\n  /**\n   * Find the index of a relation in the given list\n   *\n   * @method utils._getIndex\n   * @param {string[]} list List to search.\n   * @param {string} relation Relation to find.\n   * @private\n   * @returns {number}\n   */\n  _getIndex (list, relation) {\n    let index = -1\n    list.forEach(function (_relation, i) {\n      if (_relation === relation) {\n        index = i\n        return false\n      } else if (utils.isObject(_relation)) {\n        if (_relation.relation === relation) {\n          index = i\n          return false\n        }\n      }\n    })\n    return index\n  },\n\n  /**\n   * Define hidden (non-enumerable), writable properties on `target` from the\n   * provided `props`.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * function Cat () {}\n   * utils.addHiddenPropsToTarget(Cat.prototype, {\n   *   say () {\n   *     console.log('meow')\n   *   }\n   * })\n   * const cat = new Cat()\n   * cat.say() // \"meow\"\n   *\n   * @method utils.addHiddenPropsToTarget\n   * @param {Object} target That to which `props` should be added.\n   * @param {Object} props Properties to be added to `target`.\n   * @since 3.0.0\n   */\n  addHiddenPropsToTarget (target, props) {\n    const map = {}\n    Object.keys(props).forEach(function (propName) {\n      const descriptor = Object.getOwnPropertyDescriptor(props, propName)\n\n      descriptor.enumerable = false\n      map[propName] = descriptor\n    })\n    Object.defineProperties(target, map)\n  },\n\n  /**\n   * Return whether the two objects are deeply different.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * utils.areDifferent({}, {}) // false\n   * utils.areDifferent({ a: 1 }, { a: 1 }) // false\n   * utils.areDifferent({ foo: 'bar' }, {}) // true\n   *\n   * @method utils.areDifferent\n   * @param {Object} a Base object.\n   * @param {Object} b Comparison object.\n   * @param {Object} [opts] Configuration options.\n   * @param {Function} [opts.equalsFn={@link utils.deepEqual}] Equality function.\n   * @param {Array} [opts.ignore=[]] Array of strings or RegExp of fields to ignore.\n   * @returns {boolean} Whether the two objects are deeply different.\n   * @see utils.diffObjects\n   * @since 3.0.0\n   */\n  areDifferent (newObject, oldObject, opts) {\n    opts || (opts = {})\n    const diff = utils.diffObjects(newObject, oldObject, opts)\n    const diffCount = Object.keys(diff.added).length +\n    Object.keys(diff.removed).length +\n    Object.keys(diff.changed).length\n    return diffCount > 0\n  },\n\n  /**\n   * Verified that the given constructor is being invoked via `new`, as opposed\n   * to just being called like a normal function.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * function Cat () {\n   *   utils.classCallCheck(this, Cat)\n   * }\n   * const cat = new Cat() // this is ok\n   * Cat() // this throws an error\n   *\n   * @method utils.classCallCheck\n   * @param {*} instance Instance that is being constructed.\n   * @param {Constructor} ctor Constructor function used to construct the\n   * instance.\n   * @since 3.0.0\n   * @throws {Error} Throws an error if the constructor is being improperly\n   * invoked.\n   */\n  classCallCheck (instance, ctor) {\n    if (!(instance instanceof ctor)) {\n      throw utils.err(`${ctor.name}`)(500, 'Cannot call a class as a function')\n    }\n  },\n\n  /**\n   * Deep copy a value.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = { foo: { bar: 'baz' } }\n   * const b = utils.copy(a)\n   * a === b // false\n   * utils.areDifferent(a, b) // false\n   *\n   * @param {*} from Value to deep copy.\n   * @param {*} [to] Destination object for the copy operation.\n   * @param {*} [stackFrom] For internal use.\n   * @param {*} [stackTo] For internal use.\n   * @param {string[]|RegExp[]} [blacklist] List of strings or RegExp of\n   * properties to skip.\n   * @param {boolean} [plain] Whether to make a plain copy (don't try to use\n   * original prototype).\n   * @returns {*} Deep copy of `from`.\n   * @since 3.0.0\n   */\n  copy (from, to, stackFrom, stackTo, blacklist, plain) {\n    if (!to) {\n      to = from\n      if (from) {\n        if (utils.isArray(from)) {\n          to = utils.copy(from, [], stackFrom, stackTo, blacklist, plain)\n        } else if (utils.isDate(from)) {\n          to = new Date(from.getTime())\n        } else if (utils.isRegExp(from)) {\n          to = new RegExp(from.source, from.toString().match(/[^\\/]*$/)[0])\n          to.lastIndex = from.lastIndex\n        } else if (utils.isObject(from)) {\n          if (plain) {\n            to = utils.copy(from, {}, stackFrom, stackTo, blacklist, plain)\n          } else {\n            to = utils.copy(from, Object.create(Object.getPrototypeOf(from)), stackFrom, stackTo, blacklist, plain)\n          }\n        }\n      }\n    } else {\n      if (from === to) {\n        throw utils.err(`${DOMAIN}.copy`)(500, 'Cannot copy! Source and destination are identical.')\n      }\n\n      stackFrom = stackFrom || []\n      stackTo = stackTo || []\n\n      if (utils.isObject(from)) {\n        let index = stackFrom.indexOf(from)\n        if (index !== -1) {\n          return stackTo[index]\n        }\n\n        stackFrom.push(from)\n        stackTo.push(to)\n      }\n\n      let result\n      if (utils.isArray(from)) {\n        let i\n        to.length = 0\n        for (i = 0; i < from.length; i++) {\n          result = utils.copy(from[i], null, stackFrom, stackTo, blacklist, plain)\n          if (utils.isObject(from[i])) {\n            stackFrom.push(from[i])\n            stackTo.push(result)\n          }\n          to.push(result)\n        }\n      } else {\n        if (utils.isArray(to)) {\n          to.length = 0\n        } else {\n          utils.forOwn(to, function (value, key) {\n            delete to[key]\n          })\n        }\n        for (var key in from) {\n          if (from.hasOwnProperty(key)) {\n            if (utils.isBlacklisted(key, blacklist)) {\n              continue\n            }\n            result = utils.copy(from[key], null, stackFrom, stackTo, blacklist, plain)\n            if (utils.isObject(from[key])) {\n              stackFrom.push(from[key])\n              stackTo.push(result)\n            }\n            to[key] = result\n          }\n        }\n      }\n    }\n    return to\n  },\n\n  /**\n   * Recursively shallow fill in own enumerable properties from `source` to\n   * `dest`.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = { foo: { bar: 'baz' }, beep: 'boop' }\n   * const b = { beep: 'bip' }\n   * utils.deepFillIn(b, a)\n   * console.log(b) // {\"foo\":{\"bar\":\"baz\"},\"beep\":\"bip\"}\n   *\n   * @method utils.deepFillIn\n   * @param {Object} dest The destination object.\n   * @param {Object} source The source object.\n   * @see utils.fillIn\n   * @see utils.deepMixIn\n   * @since 3.0.0\n   */\n  deepFillIn (dest, source) {\n    if (source) {\n      utils.forOwn(source, function (value, key) {\n        const existing = dest[key]\n        if (isPlainObject(value) && isPlainObject(existing)) {\n          utils.deepFillIn(existing, value)\n        } else if (!dest.hasOwnProperty(key) || dest[key] === undefined) {\n          dest[key] = value\n        }\n      })\n    }\n    return dest\n  },\n\n  /**\n   * Recursively shallow copy enumerable properties from `source` to `dest`.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = { foo: { bar: 'baz' }, beep: 'boop' }\n   * const b = { beep: 'bip' }\n   * utils.deepFillIn(b, a)\n   * console.log(b) // {\"foo\":{\"bar\":\"baz\"},\"beep\":\"boop\"}\n   *\n   * @method utils.deepMixIn\n   * @param {Object} dest The destination object.\n   * @param {Object} source The source object.\n   * @see utils.fillIn\n   * @see utils.deepFillIn\n   * @since 3.0.0\n   */\n  deepMixIn (dest, source) {\n    if (source) {\n      for (var key in source) {\n        const value = source[key]\n        const existing = dest[key]\n        if (isPlainObject(value) && isPlainObject(existing)) {\n          utils.deepMixIn(existing, value)\n        } else {\n          dest[key] = value\n        }\n      }\n    }\n    return dest\n  },\n\n  /**\n   * Return a diff of the base object to the comparison object.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const oldObject = { foo: 'bar', a: 1234 }\n   * const newObject = { beep: 'boop', a: 5678 }\n   * const diff = utils.diffObjects(oldObject, newObject)\n   * console.log(diff.added) // {\"beep\":\"boop\"}\n   * console.log(diff.changed) // {\"a\":5678}\n   * console.log(diff.removed) // {\"foo\":undefined}\n   *\n   * @method utils.diffObjects\n   * @param {Object} newObject Comparison object.\n   * @param {Object} oldObject Base object.\n   * @param {Object} [opts] Configuration options.\n   * @param {Function} [opts.equalsFn={@link utils.deepEqual}] Equality function.\n   * @param {Array} [opts.ignore=[]] Array of strings or RegExp of fields to ignore.\n   * @returns {Object} The diff from the base object to the comparison object.\n   * @see utils.areDifferent\n   * @since 3.0.0\n   */\n  diffObjects (newObject, oldObject, opts) {\n    opts || (opts = {})\n    let equalsFn = opts.equalsFn\n    let blacklist = opts.ignore\n    const diff = {\n      added: {},\n      changed: {},\n      removed: {}\n    }\n    if (!utils.isFunction(equalsFn)) {\n      equalsFn = utils.deepEqual\n    }\n\n    const newKeys = Object.keys(newObject).filter(function (key) {\n      return !utils.isBlacklisted(key, blacklist)\n    })\n    const oldKeys = Object.keys(oldObject).filter(function (key) {\n      return !utils.isBlacklisted(key, blacklist)\n    })\n\n    // Check for properties that were added or changed\n    newKeys.forEach(function (key) {\n      const oldValue = oldObject[key]\n      const newValue = newObject[key]\n      if (equalsFn(oldValue, newValue)) {\n        return\n      }\n      if (oldValue === undefined) {\n        diff.added[key] = newValue\n      } else {\n        diff.changed[key] = newValue\n      }\n    })\n\n    // Check for properties that were removed\n    oldKeys.forEach(function (key) {\n      const oldValue = oldObject[key]\n      const newValue = newObject[key]\n      if (newValue === undefined && oldValue !== undefined) {\n        diff.removed[key] = undefined\n      }\n    })\n\n    return diff\n  },\n\n  /**\n   * Return whether the two values are equal according to the `==` operator.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * console.log(utils.equal(1,1)) // true\n   * console.log(utils.equal(1,'1')) // true\n   * console.log(utils.equal(93, 66)) // false\n   *\n   * @method utils.equal\n   * @param {*} a First value in the comparison.\n   * @param {*} b Second value in the comparison.\n   * @returns {boolean} Whether the two values are equal according to `==`.\n   * @since 3.0.0\n   */\n  equal (a, b) {\n    return a == b // eslint-disable-line\n  },\n\n  /**\n   * Produce a factory function for making Error objects with the provided\n   * metadata. Used throughout the various js-data components.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const errorFactory = utils.err('domain', 'target')\n   * const error400 = errorFactory(400, 'expected type', 'actual type')\n   * console.log(error400) // [Error: [domain:target] expected: expected type, found: string\nhttp://www.js-data.io/v3.0/docs/errors#400]\n   * @method utils.err\n   * @param {string} domain Namespace.\n   * @param {string} target Target.\n   * @returns {Function} Factory function.\n   * @since 3.0.0\n   */\n  err (domain, target) {\n    return function (code) {\n      const prefix = `[${domain}:${target}] `\n      let message = ERRORS[code].apply(null, Array.prototype.slice.call(arguments, 1))\n      message = `${prefix}${message}\nhttp://www.js-data.io/v3.0/docs/errors#${code}`\n      return new Error(message)\n    }\n  },\n\n  /**\n   * Add eventing capabilities into the target object.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const user = { name: 'John' }\n   * utils.eventify(user)\n   * user.on('foo', () => console.log(arguments))\n   * user.emit('foo', 1, 'bar') // should log to console values (1, \"bar\")\n   *\n   * @method utils.eventify\n   * @param {Object} target Target object.\n   * @param {Function} [getter] Custom getter for retrieving the object's event\n   * listeners.\n   * @param {Function} [setter] Custom setter for setting the object's event\n   * listeners.\n   * @since 3.0.0\n   */\n  eventify (target, getter, setter) {\n    target = target || this\n    let _events = {}\n    if (!getter && !setter) {\n      getter = function () { return _events }\n      setter = function (value) { _events = value }\n    }\n    Object.defineProperties(target, {\n      emit: {\n        value (...args) {\n          const events = getter.call(this) || {}\n          const type = args.shift()\n          let listeners = events[type] || []\n          let i\n          for (i = 0; i < listeners.length; i++) {\n            listeners[i].f.apply(listeners[i].c, args)\n          }\n          listeners = events.all || []\n          args.unshift(type)\n          for (i = 0; i < listeners.length; i++) {\n            listeners[i].f.apply(listeners[i].c, args)\n          }\n        }\n      },\n      off: {\n        value (type, func) {\n          const events = getter.call(this)\n          const listeners = events[type]\n          if (!listeners) {\n            setter.call(this, {})\n          } else if (func) {\n            for (let i = 0; i < listeners.length; i++) {\n              if (listeners[i].f === func) {\n                listeners.splice(i, 1)\n                break\n              }\n            }\n          } else {\n            listeners.splice(0, listeners.length)\n          }\n        }\n      },\n      on: {\n        value (type, func, thisArg) {\n          if (!getter.call(this)) {\n            setter.call(this, {})\n          }\n          const events = getter.call(this)\n          events[type] = events[type] || []\n          events[type].push({\n            c: thisArg,\n            f: func\n          })\n        }\n      }\n    })\n  },\n\n  /**\n   * Used for sublcassing. Invoke this method in the context of a superclass to\n   * to produce a subclass based on `props` and `classProps`.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * function Animal () {}\n   * Animal.extend = utils.extend\n   * const Cat = Animal.extend({\n   *   say () {\n   *     console.log('meow')\n   *   }\n   * })\n   * const cat = new Cat()\n   * cat instanceof Animal // true\n   * cat instanceof Cat // true\n   * cat.say() // \"meow\"\n   *\n   * @method utils.extend\n   * @param {Object} props Instance properties for the subclass.\n   * @param {Object} [props.constructor] Provide a custom constructor function\n   * to use as the subclass.\n   * @param {Object} props Static properties for the subclass.\n   * @returns {Constructor} A new subclass.\n   * @since 3.0.0\n   */\n  extend (props, classProps) {\n    const superClass = this\n    let subClass\n\n    props || (props = {})\n    classProps || (classProps = {})\n\n    if (props.hasOwnProperty('constructor')) {\n      subClass = props.constructor\n      delete props.constructor\n    } else {\n      subClass = function (...args) {\n        utils.classCallCheck(this, subClass)\n        superClass.apply(this, args)\n      }\n    }\n\n    // Setup inheritance of instance members\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        configurable: true,\n        enumerable: false,\n        value: subClass,\n        writable: true\n      }\n    })\n\n    const obj = Object\n    // Setup inheritance of static members\n    if (obj.setPrototypeOf) {\n      obj.setPrototypeOf(subClass, superClass)\n    } else if (classProps.strictEs6Class) {\n      subClass.__proto__ = superClass // eslint-disable-line\n    } else {\n      utils.forOwn(superClass, function (value, key) {\n        subClass[key] = value\n      })\n    }\n    if (!subClass.hasOwnProperty('__super__')) {\n      Object.defineProperty(subClass, '__super__', {\n        configurable: true,\n        value: superClass\n      })\n    }\n\n    utils.addHiddenPropsToTarget(subClass.prototype, props)\n    utils.fillIn(subClass, classProps)\n\n    return subClass\n  },\n\n  /**\n   * Shallow copy own enumerable properties from `src` to `dest` that are on\n   * `src` but are missing from `dest.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = { foo: 'bar', beep: 'boop' }\n   * const b = { beep: 'bip' }\n   * utils.fillIn(b, a)\n   * console.log(b) // {\"foo\":\"bar\",\"beep\":\"bip\"}\n   *\n   * @method utils.fillIn\n   * @param {Object} dest The destination object.\n   * @param {Object} source The source object.\n   * @see utils.deepFillIn\n   * @see utils.deepMixIn\n   * @since 3.0.0\n   */\n  fillIn (dest, src) {\n    utils.forOwn(src, function (value, key) {\n      if (!dest.hasOwnProperty(key) || dest[key] === undefined) {\n        dest[key] = value\n      }\n    })\n  },\n\n  /**\n   * Find the last index of an item in an array according to the given checker function.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   *\n   * const john = { name: 'John', age: 20 }\n   * const sara = { name: 'Sara', age: 25 }\n   * const dan = { name: 'Dan', age: 20 }\n   * const users = [john, sara, dan]\n   *\n   * console.log(utils.findIndex(users, (user) => user.age === 25)) // 1\n   * console.log(utils.findIndex(users, (user) => user.age > 19)) // 2\n   * console.log(utils.findIndex(users, (user) => user.name === 'John')) // 0\n   * console.log(utils.findIndex(users, (user) => user.name === 'Jimmy')) // -1\n   *\n   * @method utils.findIndex\n   * @param {Array} array The array to search.\n   * @param {Function} fn Checker function.\n   * @returns {number} Index if found or -1 if not found.\n   * @since 3.0.0\n   */\n  findIndex (array, fn) {\n    let index = -1\n    if (!array) {\n      return index\n    }\n    array.forEach(function (record, i) {\n      if (fn(record)) {\n        index = i\n        return false\n      }\n    })\n    return index\n  },\n\n  /**\n   * Recursively iterate over a {@link Mapper}'s relations according to\n   * `opts.with`.\n   *\n   * @method utils.forEachRelation\n   * @param {Mapper} mapper Mapper.\n   * @param {Object} opts Configuration options.\n   * @param {Function} fn Callback function.\n   * @param {*} thisArg Execution context for the callback function.\n   * @since 3.0.0\n   */\n  forEachRelation (mapper, opts, fn, thisArg) {\n    const relationList = mapper.relationList || []\n    if (!relationList.length) {\n      return\n    }\n    relationList.forEach(function (def) {\n      utils._forRelation(opts, def, fn, thisArg)\n    })\n  },\n\n  /**\n   * Iterate over an object's own enumerable properties.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = { b: 1, c: 4 }\n   * let sum = 0\n   * utils.forOwn(a, function (value, key) {\n   *   sum += value\n   * })\n   * console.log(sum) // 5\n   *\n   * @method utils.forOwn\n   * @param {Object} object The object whose properties are to be enumerated.\n   * @param {Function} fn Iteration function.\n   * @param {Object} [thisArg] Content to which to bind `fn`.\n   * @since 3.0.0\n   */\n  forOwn (obj, fn, thisArg) {\n    const keys = Object.keys(obj)\n    const len = keys.length\n    let i\n    for (i = 0; i < len; i++) {\n      fn.call(thisArg, obj[keys[i]], keys[i], obj)\n    }\n  },\n\n  /**\n   * Proxy for `JSON.parse`.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   *\n   * const a = utils.fromJson('{\"name\" : \"John\"}')\n   * console.log(a) // { name: 'John' }\n   *\n   * @method utils.fromJson\n   * @param {string} json JSON to parse.\n   * @returns {Object} Parsed object.\n   * @see utils.toJson\n   * @since 3.0.0\n   */\n  fromJson (json) {\n    return utils.isString(json) ? JSON.parse(json) : json\n  },\n\n  /**\n   * Retrieve the specified property from the given object. Supports retrieving\n   * nested properties.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = { foo: { bar: 'baz' }, beep: 'boop' }\n   * console.log(utils.get(a, 'beep')) // \"boop\"\n   * console.log(utils.get(a, 'foo.bar')) // \"baz\"\n   *\n   * @method utils.get\n   * @param {Object} object Object from which to retrieve a property's value.\n   * @param {string} prop Property to retrieve.\n   * @returns {*} Value of the specified property.\n   * @see utils.set\n   * @since 3.0.0\n   */\n  'get': function (object, prop) {\n    if (!prop) {\n      return\n    }\n    const parts = prop.split('.')\n    const last = parts.pop()\n\n    while (prop = parts.shift()) { // eslint-disable-line\n      object = object[prop]\n      if (object == null) { // eslint-disable-line\n        return\n      }\n    }\n\n    return object[last]\n  },\n\n  /**\n   * Return the superclass for the given instance or subclass. If an instance is\n   * provided, then finds the parent class of the instance's constructor.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * // using ES2015 classes\n   * class Foo {}\n   * class Bar extends Foo {}\n   * const barInstance = new Bar()\n   * let baseType = utils.getSuper(barInstance)\n   * console.log(Foo === baseType) // true\n   *\n   * // using Function constructor with utils.extend\n   * function Foo () {}\n   * Foo.extend = utils.extend\n   * const Bar = Foo.extend()\n   * const barInstance = new Bar()\n   * let baseType = utils.getSuper(barInstance)\n   * console.log(Foo === baseType) // true\n   *\n   * @method utils.getSuper\n   * @param {Object|Function} instance Instance or constructor.\n   * @param {boolean} [isCtor=false] Whether `instance` is a constructor.\n   * @returns {Constructor} The superclass (grandparent constructor).\n   * @since 3.0.0\n   */\n  getSuper (instance, isCtor) {\n    const ctor = isCtor ? instance : instance.constructor\n    if (ctor.hasOwnProperty('__super__')) {\n      return ctor.__super__\n    }\n    return Object.getPrototypeOf(ctor) || ctor.__proto__ // eslint-disable-line\n  },\n\n  /**\n   * Return the intersection of two arrays.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const arrA = ['green', 'red', 'blue', 'red']\n   * const arrB = ['green', 'yellow', 'red']\n   * const intersected = utils.intersection(arrA, arrB)\n   *\n   * console.log(intersected) // ['green', 'red'])\n   *\n   * @method utils.intersection\n   * @param {Array} array1 First array.\n   * @param {Array} array2 Second array.\n   * @returns {Array} Array of elements common to both arrays.\n   * @since 3.0.0\n   */\n  intersection (array1, array2) {\n    if (!array1 || !array2) {\n      return []\n    }\n    const result = []\n    let item\n    let i\n    const len = array1.length\n    for (i = 0; i < len; i++) {\n      item = array1[i]\n      if (result.indexOf(item) !== -1) {\n        continue\n      }\n      if (array2.indexOf(item) !== -1) {\n        result.push(item)\n      }\n    }\n    return result\n  },\n\n  /**\n   * Proxy for `Array.isArray`.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = [1,2,3,4,5]\n   * const b = { foo: \"bar\" }\n   * console.log(utils.isArray(a)) // true\n   * console.log(utils.isArray(b)) // false\n   *\n   * @method utils.isArray\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is an array.\n   * @since 3.0.0\n   */\n  isArray: Array.isArray,\n\n  /**\n   * Return whether `prop` is matched by any string or regular expression in\n   * `blacklist`.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const blacklist = [/^\\$hashKey/g, /^_/g, 'id']\n   * console.log(utils.isBlacklisted(\"$hashKey\", blacklist)) // true\n   * console.log(utils.isBlacklisted(\"id\", blacklist)) // true\n   * console.log(utils.isBlacklisted(\"_myProp\", blacklist)) // true\n   * console.log(utils.isBlacklisted(\"my_id\", blacklist)) // false\n   *\n   * @method utils.isBlacklisted\n   * @param {string} prop The name of a property to check.\n   * @param {Array} blacklist Array of strings and regular expressions.\n   * @returns {boolean} Whether `prop` was matched.\n   * @since 3.0.0\n   */\n  isBlacklisted (prop, blacklist) {\n    if (!blacklist || !blacklist.length) {\n      return false\n    }\n    let matches\n    for (var i = 0; i < blacklist.length; i++) {\n      if ((toStr(blacklist[i]) === REGEXP_TAG && blacklist[i].test(prop)) || blacklist[i] === prop) {\n        matches = prop\n        return !!matches\n      }\n    }\n    return !!matches\n  },\n\n  /**\n   * Return whether the provided value is a boolean.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = true\n   * const b = { foo: \"bar\" }\n   * console.log(utils.isBoolean(a)) // true\n   * console.log(utils.isBoolean(b)) // false\n   *\n   * @method utils.isBoolean\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a boolean.\n   * @since 3.0.0\n   */\n  isBoolean (value) {\n    return toStr(value) === BOOL_TAG\n  },\n\n  /**\n   * Return whether the provided value is a date.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = new Date()\n   * const b = { foo: \"bar\" }\n   * console.log(utils.isDate(a)) // true\n   * console.log(utils.isDate(b)) // false\n   *\n   * @method utils.isDate\n   * @param {*} value The value to test.\n   * @returns {Date} Whether the provided value is a date.\n   * @since 3.0.0\n   */\n  isDate (value) {\n    return (value && typeof value === 'object' && toStr(value) === DATE_TAG)\n  },\n\n  /**\n   * Return whether the provided value is a function.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = function (){ console.log('foo bar')}\n   * const b = { foo: \"bar\" }\n   * console.log(utils.isFunction(a)) // true\n   * console.log(utils.isFunction(b)) // false\n   *\n   * @method utils.isFunction\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a function.\n   * @since 3.0.0\n   */\n  isFunction (value) {\n    return typeof value === 'function' || (value && toStr(value) === FUNC_TAG)\n  },\n\n  /**\n   * Return whether the provided value is an integer.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = 1\n   * const b = 1.25\n   * const c = '1'\n   * console.log(utils.isInteger(a)) // true\n   * console.log(utils.isInteger(b)) // false\n   * console.log(utils.isInteger(c)) // false\n   *\n   * @method utils.isInteger\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is an integer.\n   * @since 3.0.0\n   */\n  isInteger (value) {\n    return toStr(value) === NUMBER_TAG && value == toInteger(value) // eslint-disable-line\n  },\n\n  /**\n   * Return whether the provided value is `null`.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = null\n   * const b = { foo: \"bar\" }\n   * console.log(utils.isNull(a)) // true\n   * console.log(utils.isNull(b)) // false\n   *\n   * @method utils.isNull\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is `null`.\n   * @since 3.0.0\n   */\n  isNull (value) {\n    return value === null\n  },\n\n  /**\n   * Return whether the provided value is a number.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = 1\n   * const b = -1.25\n   * const c = '1'\n   * console.log(utils.isNumber(a)) // true\n   * console.log(utils.isNumber(b)) // true\n   * console.log(utils.isNumber(c)) // false\n   *\n   * @method utils.isNumber\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a number.\n   * @since 3.0.0\n   */\n  isNumber (value) {\n    const type = typeof value\n    return type === 'number' || (value && type === 'object' && toStr(value) === NUMBER_TAG)\n  },\n\n  /**\n   * Return whether the provided value is an object.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = { foo: \"bar\" }\n   * const b = 'foo bar'\n   * console.log(utils.isObject(a)) // true\n   * console.log(utils.isObject(b)) // false\n   *\n   * @method utils.isObject\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is an object.\n   * @since 3.0.0\n   */\n  isObject (value) {\n    return toStr(value) === OBJECT_TAG\n  },\n\n  /**\n   * Return whether the provided value is a regular expression.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = /^\\$.+$/ig\n   * const b = new RegExp('^\\$.+$', 'ig')\n   * const c = { foo: \"bar\" }\n   * console.log(utils.isRegExp(a)) // true\n   * console.log(utils.isRegExp(b)) // true\n   * console.log(utils.isRegExp(c)) // false\n   *\n   * @method utils.isRegExp\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a regular expression.\n   * @since 3.0.0\n   */\n  isRegExp (value) {\n    return toStr(value) === REGEXP_TAG\n  },\n\n  /**\n   * Return whether the provided value is a string or a number.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * console.log(utils.isSorN('')) // true\n   * console.log(utils.isSorN(-1.65)) // true\n   * console.log(utils.isSorN('my string')) // true\n   * console.log(utils.isSorN({})) // false\n   * console.log(utils.isSorN([1,2,4])) // false\n   *\n   * @method utils.isSorN\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a string or a number.\n   * @since 3.0.0\n   */\n  isSorN (value) {\n    return utils.isString(value) || utils.isNumber(value)\n  },\n\n  /**\n   * Return whether the provided value is a string.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * console.log(utils.isString('')) // true\n   * console.log(utils.isString('my string')) // true\n   * console.log(utils.isString(100)) // false\n   * console.log(utils.isString([1,2,4])) // false\n   *\n   * @method utils.isString\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a string.\n   * @since 3.0.0\n   */\n  isString (value) {\n    return typeof value === 'string' || (value && typeof value === 'object' && toStr(value) === STRING_TAG)\n  },\n\n  /**\n   * Return whether the provided value is a `undefined`.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = undefined\n   * const b = { foo: \"bar\"}\n   * console.log(utils.isUndefined(a)) // true\n   * console.log(utils.isUndefined(b.baz)) // true\n   * console.log(utils.isUndefined(b)) // false\n   * console.log(utils.isUndefined(b.foo)) // false\n   *\n   * @method utils.isUndefined\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a `undefined`.\n   * @since 3.0.0\n   */\n  isUndefined (value) {\n    return value === undefined\n  },\n\n  /**\n   * Mix in logging capabilities to the target.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = { foo: \"bar\"}\n   *\n   * // Add standard logging to an object\n   * utils.logify(a)\n   * a.log('info', 'test log info') // output 'test log info' to console.\n   *\n   * // Toggle debug output of an object\n   * a.dbg('test debug output') // does not output because debug is off.\n   * a.debug = true\n   * a.dbg('test debug output') // output 'test debug output' to console.\n   *\n   * @method utils.logify\n   * @param {*} target The target.\n   * @since 3.0.0\n   */\n  logify (target) {\n    utils.addHiddenPropsToTarget(target, {\n      dbg (...args) {\n        if (utils.isFunction(this.log)) {\n          this.log('debug', ...args)\n        }\n      },\n      log (level, ...args) {\n        if (level && !args.length) {\n          args.push(level)\n          level = 'debug'\n        }\n        if (level === 'debug' && !this.debug) {\n          return\n        }\n        const prefix = `${level.toUpperCase()}: (${this.name || this.constructor.name})`\n        if (utils.isFunction(console[level])) {\n          console[level](prefix, ...args)\n        } else {\n          console.log(prefix, ...args)\n        }\n      }\n    })\n  },\n\n  /**\n   * Adds the given record to the provided array only if it's not already in the\n   * array.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const colors = ['red', 'green', 'yellow']\n   *\n   * console.log(colors.length) // 3\n   * utils.noDupeAdd(colors, 'red')\n   * console.log(colors.length) // 3, red already exists\n   *\n   * utils.noDupeAdd(colors, 'blue')\n   * console.log(colors.length) // 4, blue was added\n   *\n   * @method utils.noDupeAdd\n   * @param {Array} array The array.\n   * @param {*} record The value to add.\n   * @param {Function} fn Callback function passed to {@link utils.findIndex}.\n   * @since 3.0.0\n   */\n  noDupeAdd (array, record, fn) {\n    if (!array) {\n      return\n    }\n    const index = this.findIndex(array, fn)\n    if (index < 0) {\n      array.push(record)\n    }\n  },\n\n  /**\n   * Return a shallow copy of the provided object, minus the properties\n   * specified in `keys`.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = { name: 'John', $hashKey: 1214910 }\n   *\n   * let b = utils.omit(a, ['$hashKey'])\n   * console.log(b) // { name: 'John' }\n   *\n   * @method utils.omit\n   * @param {Object} props The object to copy.\n   * @param {string[]} keys Array of strings, representing properties to skip.\n   * @returns {Object} Shallow copy of `props`, minus `keys`.\n   * @since 3.0.0\n   */\n  omit (props, keys) {\n    const _props = {}\n    utils.forOwn(props, function (value, key) {\n      if (keys.indexOf(key) === -1) {\n        _props[key] = value\n      }\n    })\n    return _props\n  },\n\n  /**\n   * Return a shallow copy of the provided object, but only include the\n   * properties specified in `keys`.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = { name: 'John', $hashKey: 1214910 }\n   *\n   * let b = utils.pick(a, ['$hashKey'])\n   * console.log(b) // { $hashKey: 1214910 }\n   *\n   * @method utils.pick\n   * @param {Object} props The object to copy.\n   * @param {string[]} keys Array of strings, representing properties to keep.\n   * @returns {Object} Shallow copy of `props`, but only including `keys`.\n   * @since 3.0.0\n   */\n  pick (props, keys) {\n    const _props = {}\n    utils.forOwn(props, function (value, key) {\n      if (keys.indexOf(key) !== -1) {\n        _props[key] = value\n      }\n    })\n    return _props\n  },\n\n  /**\n   * Return a plain copy of the given value.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   * const a = { name: 'John' }\n   * let b = utils.plainCopy(a)\n   * console.log(a === b) // false\n   *\n   * @method utils.plainCopy\n   * @param {*} value The value to copy.\n   * @returns {*} Plain copy of `value`.\n   * @see utils.copy\n   * @since 3.0.0\n   */\n  plainCopy (value) {\n    return utils.copy(value, undefined, undefined, undefined, undefined, true)\n  },\n\n  /**\n   * Shortcut for `utils.Promise.reject(value)`.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   *\n   * utils.reject(\"Testing static reject\").then(function(data) {\n   *   // not called\n   * }).catch(function(reason) {\n   *   console.log(reason); // \"Testing static reject\"\n   * })\n   *\n   * @method utils.reject\n   * @param {*} [value] Value with which to reject the Promise.\n   * @returns {Promise} Promise reject with `value`.\n   * @see utils.Promise\n   * @since 3.0.0\n   */\n  reject (value) {\n    return utils.Promise.reject(value)\n  },\n\n  /**\n   * Remove the last item found in array according to the given checker function.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   *\n   * const colors = ['red', 'green', 'yellow', 'red']\n   * utils.remove(colors, (color) => color === 'red')\n   * console.log(colors) // ['red', 'green', 'yellow']\n   *\n   * @method utils.remove\n   * @param {Array} array The array to search.\n   * @param {Function} fn Checker function.\n   */\n  remove (array, fn) {\n    if (!array || !array.length) {\n      return\n    }\n    const index = this.findIndex(array, fn)\n    if (index >= 0) {\n      array.splice(index, 1) // todo should this be recursive?\n    }\n  },\n\n  /**\n   * Shortcut for `utils.Promise.resolve(value)`.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   *\n   * utils.resolve(\"Testing static resolve\").then(function(data) {\n   *   console.log(data); // \"Testing static resolve\"\n   * }).catch(function(reason) {\n   *   // not called\n   * })\n   *\n   * @param {*} [value] Value with which to resolve the Promise.\n   * @returns {Promise} Promise resolved with `value`.\n   * @see utils.Promise\n   * @since 3.0.0\n   */\n  resolve (value) {\n    return utils.Promise.resolve(value)\n  },\n\n  /**\n   * Set the value at the provided key or path.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   *\n   * const john = {\n   *   name: 'John',\n   *   age: 25,\n   *   parent: {\n   *     name: 'John's Mom',\n   *     age: 50\n   *   }\n   * }\n   * // set value by key\n   * utils.set(john, 'id', 98)\n   * console.log(john.id) // 98\n   *\n   * // set value by path\n   * utils.set(john, 'parent.id', 20)\n   * console.log(john.parent.id) // 20\n   *\n   * // set value by path/value map\n   * utils.set(john, {\n   *   'id': 1098,\n   *   'parent': { id: 1020 },\n   *   'parent.age': '55'\n   * })\n   * console.log(john.id) // 1098\n   * console.log(john.parent.id) // 1020\n   * console.log(john.parent.age) // 55\n   *\n   * @method utils.set\n   * @param {Object} object The object on which to set a property.\n   * @param {(string|Object)} path The key or path to the property. Can also\n   * pass in an object of path/value pairs, which will all be set on the target\n   * object.\n   * @param {*} [value] The value to set.\n   */\n  set: function (object, path, value) {\n    if (utils.isObject(path)) {\n      utils.forOwn(path, function (value, _path) {\n        utils.set(object, _path, value)\n      })\n    } else {\n      const parts = PATH.exec(path)\n      if (parts) {\n        mkdirP(object, parts[1])[parts[2]] = value\n      } else {\n        object[path] = value\n      }\n    }\n  },\n\n  /**\n   * Check whether the two provided objects are deeply equal.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   *\n   * const objA = {\n   *   name: 'John',\n   *   id: 27,\n   *   nested: {\n   *     item: 'item 1',\n   *     colors: ['red', 'green', 'blue']\n   *   }\n   * }\n   *\n   * const objB = {\n   *   name: 'John',\n   *   id: 27,\n   *   nested: {\n   *     item: 'item 1',\n   *     colors: ['red', 'green', 'blue']\n   *   }\n   * }\n   *\n   * console.log(utils.deepEqual(a,b)) // true\n   * objB.nested.colors.add('yellow') // make a change to a nested object's array\n   * console.log(utils.deepEqual(a,b)) // false\n   *\n   * @method utils.deepEqual\n   * @param {Object} a First object in the comparison.\n   * @param {Object} b Second object in the comparison.\n   * @returns {boolean} Whether the two provided objects are deeply equal.\n   * @see utils.equal\n   * @since 3.0.0\n   */\n  deepEqual (a, b) {\n    if (a === b) {\n      return true\n    }\n    let _equal = true\n    if (utils.isObject(a) && utils.isObject(b)) {\n      utils.forOwn(a, function (value, key) {\n        _equal = _equal && utils.deepEqual(value, b[key])\n      })\n      if (!_equal) {\n        return _equal\n      }\n      utils.forOwn(b, function (value, key) {\n        _equal = _equal && utils.deepEqual(value, a[key])\n      })\n    } else if (utils.isArray(a) && utils.isArray(b)) {\n      a.forEach(function (value, i) {\n        _equal = _equal && utils.deepEqual(value, b[i])\n        if (!_equal) {\n          return false\n        }\n      })\n    } else {\n      return false\n    }\n    return _equal\n  },\n\n  /**\n   * Proxy for `JSON.stringify`.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   *\n   * const a = { name: 'John' }\n   * let jsonVal = utils.toJson(a)\n   * console.log(jsonVal) // '{\"name\" : \"John\"}'\n   *\n   * @method utils.toJson\n   * @param {*} value Value to serialize to JSON.\n   * @returns {string} JSON string.\n   * @see utils.fromJson\n   * @since 3.0.0\n   */\n  toJson: JSON.stringify,\n\n  /**\n   * Unset the value at the provided key or path.\n   *\n   * @example\n   * import {utils} from 'js-data'\n   *\n   * const john = {\n   *   name: 'John',\n   *   age: 25,\n   *   parent: {\n   *     name: 'John's Mom',\n   *     age: 50\n   *   }\n   * }\n   *\n   * utils.unset(john, age)\n   * utils.unset(john, parent.age)\n   *\n   * console.log(john.age) // null\n   * console.log(john.parent.age) // null\n   *\n   * @method utils.unset\n   * @param {Object} object The object from which to delete the property.\n   * @param {string} path The key or path to the property.\n   * @see utils.set\n   * @since 3.0.0\n   */\n  unset (object, path) {\n    const parts = path.split('.')\n    const last = parts.pop()\n\n    while (path = parts.shift()) { // eslint-disable-line\n      object = object[path]\n      if (object == null) { // eslint-disable-line\n        return\n      }\n    }\n\n    object[last] = undefined\n  }\n}\n\nexport default utils\n","import utils from './utils'\n\n/**\n * A base class which gives instances private properties.\n *\n * Typically you won't instantiate this class directly, but you may find it\n * useful as an abstract class for your own components.\n *\n * See {@link Settable.extend} for an example of using {@link Settable} as a\n * base class.\n *\n *```javascript\n * import {Settable} from 'js-data'\n * ```\n *\n * @class Settable\n * @returns {Settable} A new {@link Settable} instance.\n * @since 3.0.0\n */\nexport default function Settable () {\n  const _props = {}\n  Object.defineProperties(this, {\n    /**\n     * Get a private property of this instance.\n     *\n     * __Don't use the method unless you know what you're doing.__\n     *\n     * @method Settable#_get\n     * @param {string} key The property to retrieve.\n     * @returns {*} The value of the property.\n     * @since 3.0.0\n     */\n    _get: { value (key) { return utils.get(_props, key) } },\n\n    /**\n     * Set a private property of this instance.\n     *\n     * __Don't use the method unless you know what you're doing.__\n     *\n     * @method __Don't use the method unless you know what you're doing.__#_set\n     * @param {(string|Object)} key The key or path to the property. Can also\n     * pass in an object of key/value pairs, which will all be set on the instance.\n     * @param {*} [value] The value to set.\n     * @since 3.0.0\n     */\n    _set: { value (key, value) { return utils.set(_props, key, value) } },\n\n    /**\n     * Unset a private property of this instance.\n     *\n     * __Don't use the method unless you know what you're doing.__\n     *\n     * @method __Don't use the method unless you know what you're doing.__#_unset\n     * @param {string} key The property to unset.\n     * @since 3.0.0\n     */\n    _unset: { value (key) { return utils.unset(_props, key) } }\n  })\n}\n\n/**\n * Create a subclass of this Settable:\n *\n * @example <caption>Settable.extend</caption>\n * // Normally you would do: import {Settable} from 'js-data'\n * const JSData = require('js-data@3.0.0-beta.7')\n * const {Settable} = JSData\n * console.log('Using JSData v' + JSData.version.full)\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomSettableClass extends Settable {\n *   foo () { return 'bar' }\n *   static beep () { return 'boop' }\n * }\n * const customSettable = new CustomSettableClass()\n * console.log(customSettable.foo())\n * console.log(CustomSettableClass.beep())\n *\n * // Extend the class using alternate method.\n * const OtherSettableClass = Settable.extend({\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const otherSettable = new OtherSettableClass()\n * console.log(otherSettable.foo())\n * console.log(OtherSettableClass.beep())\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherSettableClass () {\n *   Settable.call(this)\n *   this.created_at = new Date().getTime()\n * }\n * Settable.extend({\n *   constructor: AnotherSettableClass,\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const anotherSettable = new AnotherSettableClass()\n * console.log(anotherSettable.created_at)\n * console.log(anotherSettable.foo())\n * console.log(AnotherSettableClass.beep())\n *\n * @method Settable.extend\n * @param {Object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {Object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {Object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Settable class.\n * @since 3.0.0\n */\nSettable.extend = utils.extend\n","import utils from './utils'\nimport Settable from './Settable'\n\n/**\n * The base class from which all JSData components inherit some basic\n * functionality.\n *\n * Typically you won't instantiate this class directly, but you may find it\n * useful as an abstract class for your own components.\n *\n * See {@link Component.extend} for an example of using {@link Component} as a\n * base class.\n *\n *```javascript\n * import {Component} from 'js-data'\n * ```\n *\n * @class Component\n * @param {Object} [opts] Configuration options.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @returns {Component} A new {@link Component} instance.\n * @since 3.0.0\n */\nfunction Component (opts) {\n  Settable.call(this)\n  opts || (opts = {})\n\n  /**\n   * Whether to enable debug-level logs for this component. Anything that\n   * extends `Component` inherits this option and the corresponding logging\n   * functionality.\n   *\n   * @example <caption>Component#debug</caption>\n   * // Normally you would do: import {Component} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Component} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   *\n   * const component = new Component()\n   * component.log('debug', 'some message') // nothing gets logged\n   * // Display debug logs:\n   * component.debug = true\n   * component.log('debug', 'other message') // this DOES get logged\n   *\n   * @default false\n   * @name Component#debug\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  this.debug = opts.hasOwnProperty('debug') ? !!opts.debug : false\n\n  /**\n   * Event listeners attached to this Component. __Do not modify.__ Use\n   * {@link Component#on} and {@link Component#off} instead.\n   *\n   * @name Component#_listeners\n   * @instance\n   * @since 3.0.0\n   * @type {Object}\n   */\n  Object.defineProperty(this, '_listeners', { value: {}, writable: true })\n}\n\nexport default Settable.extend({\n  constructor: Component\n})\n\n/**\n * Create a subclass of this Component:\n *\n * @example <caption>Component.extend</caption>\n * // Normally you would do: import {Component} from 'js-data'\n * const JSData = require('js-data@3.0.0-beta.7')\n * const {Component} = JSData\n * console.log('Using JSData v' + JSData.version.full)\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomComponentClass extends Component {\n *   foo () { return 'bar' }\n *   static beep () { return 'boop' }\n * }\n * const customComponent = new CustomComponentClass()\n * console.log(customComponent.foo())\n * console.log(CustomComponentClass.beep())\n *\n * // Extend the class using alternate method.\n * const OtherComponentClass = Component.extend({\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const otherComponent = new OtherComponentClass()\n * console.log(otherComponent.foo())\n * console.log(OtherComponentClass.beep())\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherComponentClass () {\n *   Component.call(this)\n *   this.created_at = new Date().getTime()\n * }\n * Component.extend({\n *   constructor: AnotherComponentClass,\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const anotherComponent = new AnotherComponentClass()\n * console.log(anotherComponent.created_at)\n * console.log(anotherComponent.foo())\n * console.log(AnotherComponentClass.beep())\n *\n * @method Component.extend\n * @param {Object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {Object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {Object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Component class.\n * @since 3.0.0\n */\nComponent.extend = utils.extend\n\n/**\n * Log the provided values at the \"debug\" level. Debug-level logs are only\n * logged if {@link Component#debug} is `true`.\n *\n * `.dbg(...)` is shorthand for `.log('debug', ...)`.\n *\n * @method Component#dbg\n * @param {...*} [args] Values to log.\n * @since 3.0.0\n */\n/**\n * Log the provided values. By default sends values to `console[level]`.\n * Debug-level logs are only logged if {@link Component#debug} is `true`.\n *\n * Will attempt to use appropriate `console` methods if they are available.\n *\n * @method Component#log\n * @param {string} level Log level.\n * @param {...*} [args] Values to log.\n * @since 3.0.0\n */\nutils.logify(Component.prototype)\n\n/**\n * Register a new event listener on this Component.\n *\n * @example\n * // Listen for all \"afterCreate\" events in a DataStore\n * store.on('afterCreate', (mapperName, props, opts, result) => {\n *   console.log(mapperName) // \"post\"\n *   console.log(props.id) // undefined\n *   console.log(result.id) // 1234\n * })\n * store.create('post', { title: 'Modeling your data' }).then((post) => {\n *   console.log(post.id) // 1234\n * })\n *\n * @example\n * // Listen for the \"add\" event on a collection\n * collection.on('add', (records) => {\n *   console.log(records) // [...]\n * })\n *\n * @example\n * // Listen for \"change\" events on a record\n * post.on('change', (record, changes) => {\n *   console.log(changes) // { changed: { title: 'Modeling your data' } }\n * })\n * post.title = 'Modeling your data'\n *\n * @method Component#on\n * @param {string} event Name of event to subsribe to.\n * @param {Function} listener Listener function to handle the event.\n * @param {*} [ctx] Optional content in which to invoke the listener.\n * @since 3.0.0\n */\n/**\n * Remove an event listener from this Component. If no listener is provided,\n * then all listeners for the specified event will be removed. If no event is\n * specified then all listeners for all events will be removed.\n *\n * @example\n * // Remove a particular listener for a particular event\n * collection.off('add', handler)\n *\n * @example\n * // Remove all listeners for a particular event\n * record.off('change')\n *\n * @example\n * // Remove all listeners to all events\n * store.off()\n *\n * @method Component#off\n * @param {string} [event] Name of event to unsubsribe to.\n * @param {Function} [listener] Listener to remove.\n * @since 3.0.0\n */\n/**\n * Trigger an event on this Component.\n *\n * @example <caption>Component#emit</caption>\n * // import {Collection, DataStore} from 'js-data'\n * const JSData = require('js-data@3.0.0-beta.7')\n * const {Collection, DataStore} = JSData\n *\n * const collection = new Collection()\n * collection.on('foo', function (msg) {\n *   console.log(msg)\n * })\n * collection.emit('foo', 'bar')\n *\n * const store = new DataStore()\n * store.on('beep', function (msg) {\n *   console.log(msg)\n * })\n * store.emit('beep', 'boop')\n *\n * @method Component#emit\n * @param {string} event Name of event to emit.\n * @param {...*} [args] Arguments to pass to any listeners.\n * @since 3.0.0\n */\nutils.eventify(\n  Component.prototype,\n  function () {\n    return this._listeners\n  },\n  function (value) {\n    this._listeners = value\n  }\n)\n","import utils from './utils'\nimport Component from './Component'\n\nconst DOMAIN = 'Query'\nconst INDEX_ERR = 'Index inaccessible after first operation'\n\n// Reserved words used by JSData's Query Syntax\nconst reserved = {\n  limit: '',\n  offset: '',\n  orderBy: '',\n  skip: '',\n  sort: '',\n  where: ''\n}\n\n// Used by our JavaScript implementation of the LIKE operator\nconst escapeRegExp = /([.*+?^=!:${}()|[\\]\\/\\\\])/g\nconst percentRegExp = /%/g\nconst underscoreRegExp = /_/g\nconst escape = function (pattern) {\n  return pattern.replace(escapeRegExp, '\\\\$1')\n}\n\n/**\n * A class used by the {@link Collection} class to build queries to be executed\n * against the collection's data. An instance of `Query` is returned by\n * {@link Collection#query}. Query instances are typically short-lived, and you\n * shouldn't have to create them yourself. Just use {@link Collection#query}.\n *\n * ```javascript\n * import {Query} from 'js-data'\n * ```\n *\n * @example\n * const store = new JSData.DataStore()\n * store.defineMapper('post')\n * const posts = [\n *   { author: 'John', age: 30, status: 'published', id: 1 },\n *   { author: 'Sally', age: 31, status: 'draft', id: 2 },\n *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n *   { author: 'Adam', age: 33, status: 'draft', id: 5 }\n * ]\n * store.add('post', posts)\n * const drafts = store.query('post').filter({ status: 'draft' }).limit(2).run()\n * console.log(drafts)\n *\n * @class Query\n * @extends Component\n * @param {Collection} collection The collection on which this query operates.\n * @since 3.0.0\n */\nfunction Query (collection) {\n  utils.classCallCheck(this, Query)\n\n  /**\n   * The {@link Collection} on which this query operates.\n   *\n   * @name Query#collection\n   * @since 3.0.0\n   * @type {Collection}\n   */\n  this.collection = collection\n\n  /**\n   * The current data result of this query.\n   *\n   * @name Query#data\n   * @since 3.0.0\n   * @type {Array}\n   */\n  this.data = null\n}\n\nexport default Component.extend({\n  constructor: Query,\n\n  _applyWhereFromObject (where) {\n    const fields = []\n    const ops = []\n    const predicates = []\n    utils.forOwn(where, (clause, field) => {\n      if (!utils.isObject(clause)) {\n        clause = {\n          '==': clause\n        }\n      }\n      utils.forOwn(clause, (expr, op) => {\n        fields.push(field)\n        ops.push(op)\n        predicates.push(expr)\n      })\n    })\n    return {\n      fields,\n      ops,\n      predicates\n    }\n  },\n\n  _applyWhereFromArray (where) {\n    const groups = []\n    where.forEach((_where, i) => {\n      if (utils.isString(_where)) {\n        return\n      }\n      const prev = where[i - 1]\n      const parser = utils.isArray(_where) ? this._applyWhereFromArray : this._applyWhereFromObject\n      const group = parser.call(this, _where)\n      if (prev === 'or') {\n        group.isOr = true\n      }\n      groups.push(group)\n    })\n    groups.isArray = true\n    return groups\n  },\n\n  _testObjectGroup (keep, first, group, item) {\n    let i\n    const fields = group.fields\n    const ops = group.ops\n    const predicates = group.predicates\n    const len = ops.length\n    for (i = 0; i < len; i++) {\n      let op = ops[i]\n      const isOr = op.charAt(0) === '|'\n      op = isOr ? op.substr(1) : op\n      const expr = this.evaluate(utils.get(item, fields[i]), op, predicates[i])\n      if (expr !== undefined) {\n        keep = first ? expr : (isOr ? keep || expr : keep && expr)\n      }\n      first = false\n    }\n    return { keep, first }\n  },\n\n  _testArrayGroup (keep, first, groups, item) {\n    let i\n    const len = groups.length\n    for (i = 0; i < len; i++) {\n      const group = groups[i]\n      const parser = group.isArray ? this._testArrayGroup : this._testObjectGroup\n      const result = parser.call(this, true, true, group, item)\n      if (groups[i - 1]) {\n        if (group.isOr) {\n          keep = keep || result.keep\n        } else {\n          keep = keep && result.keep\n        }\n      } else {\n        keep = result.keep\n      }\n      first = result.first\n    }\n    return { keep, first }\n  },\n\n  /**\n   * Find all entities between two boundaries.\n   *\n   * @example <caption>Get the users ages 18 to 30.</caption>\n   * const store = new JSData.DataStore()\n   * store.defineMapper('user')\n   * const users = [\n   *   { name: 'Peter', age: 25, id: 1 },\n   *   { name: 'Jim', age: 19, id: 2 },\n   *   { name: 'Mike', age: 17, id: 3 },\n   *   { name: 'Alan', age: 29, id: 4 },\n   *   { name: 'Katie', age: 33, id: 5 }\n   * ]\n   * store.add('post', posts)\n   * const filteredUsers = store.query('user').between(18, 30, { index: 'age' }).run()\n   * console.log(filteredUsers)\n   *\n   * @example <caption>Same as above.</caption>\n   * const store = new JSData.DataStore()\n   * store.defineMapper('user')\n   * const users = [\n   *   { name: 'Peter', age: 25, id: 1 },\n   *   { name: 'Jim', age: 19, id: 2 },\n   *   { name: 'Mike', age: 17, id: 3 },\n   *   { name: 'Alan', age: 29, id: 4 },\n   *   { name: 'Katie', age: 33, id: 5 }\n   * ]\n   * store.add('post', posts)\n   * const filteredUsers = store.query('user').between([18], [30], { index: 'age' }).run()\n   * console.log(filteredUsers)\n   *\n   * @method Query#between\n   * @param {Array} leftKeys Keys defining the left boundary.\n   * @param {Array} rightKeys Keys defining the right boundary.\n   * @param {Object} [opts] Configuration options.\n   * @param {string} [opts.index] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @param {boolean} [opts.leftInclusive=true] Whether to include entities\n   * on the left boundary.\n   * @param {boolean} [opts.rightInclusive=false] Whether to include entities\n   * on the left boundary.\n   * @param {boolean} [opts.limit] Limit the result to a certain number.\n   * @param {boolean} [opts.offset] The number of resulting entities to skip.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  between (leftKeys, rightKeys, opts) {\n    opts || (opts = {})\n    if (this.data) {\n      throw utils.err(`${DOMAIN}#between`)(500, 'Cannot access index')\n    }\n    this.data = this.collection.getIndex(opts.index).between(leftKeys, rightKeys, opts)\n    return this\n  },\n\n  /**\n   * The comparison function used by the {@link Query} class.\n   *\n   * @method Query#compare\n   * @param {Array} orderBy An orderBy clause used for sorting and sub-sorting.\n   * @param {number} index The index of the current orderBy clause being used.\n   * @param {*} a The first item in the comparison.\n   * @param {*} b The second item in the comparison.\n   * @returns {number} -1 if `b` should preceed `a`. 0 if `a` and `b` are equal.\n   * 1 if `a` should preceed `b`.\n   * @since 3.0.0\n   */\n  compare (orderBy, index, a, b) {\n    const def = orderBy[index]\n    let cA = utils.get(a, def[0])\n    let cB = utils.get(b, def[0])\n    if (cA && utils.isString(cA)) {\n      cA = cA.toUpperCase()\n    }\n    if (cB && utils.isString(cB)) {\n      cB = cB.toUpperCase()\n    }\n    if (a === undefined) {\n      a = null\n    }\n    if (b === undefined) {\n      b = null\n    }\n    if (def[1].toUpperCase() === 'DESC') {\n      const temp = cB\n      cB = cA\n      cA = temp\n    }\n    if (cA < cB) {\n      return -1\n    } else if (cA > cB) {\n      return 1\n    } else {\n      if (index < orderBy.length - 1) {\n        return this.compare(orderBy, index + 1, a, b)\n      } else {\n        return 0\n      }\n    }\n  },\n\n  /**\n   * Predicate evaluation function used by the {@link Query} class.\n   *\n   * @method Query#evaluate\n   * @param {*} value The value to evaluate.\n   * @param {string} op The operator to use in this evaluation.\n   * @param {*} predicate The predicate to use in this evaluation.\n   * @returns {boolean} Whether the value passed the evaluation or not.\n   * @since 3.0.0\n   */\n  evaluate (value, op, predicate) {\n    const ops = this.constructor.ops\n    if (ops[op]) {\n      return ops[op](value, predicate)\n    }\n    if (op.indexOf('like') === 0) {\n      return !utils.isNull(this.like(predicate, op.substr(4)).exec(value))\n    } else if (op.indexOf('notLike') === 0) {\n      return utils.isNull(this.like(predicate, op.substr(7)).exec(value))\n    }\n  },\n\n  /**\n   * Find the record or records that match the provided query or are accepted by\n   * the provided filter function.\n   *\n   * @example <caption>Get the draft posts by authors younger than 30</caption>\n   * const store = new JSData.DataStore()\n   * store.defineMapper('post')\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   *   { author: 'Peter', age: 25, status: 'deleted', id: 6 },\n   *   { author: 'Sally', age: 21, status: 'draft', id: 7 },\n   *   { author: 'Jim', age: 27, status: 'draft', id: 8 },\n   *   { author: 'Jim', age: 27, status: 'published', id: 9 },\n   *   { author: 'Jason', age: 55, status: 'published', id: 10 }\n   * ]\n   * store.add('post', posts)\n   * let results = store.query('post').filter({\n   *   where: {\n   *     status: {\n   *       '==': 'draft'\n   *     },\n   *     age: {\n   *       '<': 30\n   *     }\n   *   }\n   * }).run()\n   * console.log(results)\n   *\n   * @example <caption>Use a custom filter function</caption>\n   * const posts = query.filter(function (post) {\n   *   return post.isReady()\n   * }).run()\n   *\n   * @method Query#filter\n   * @param {(Object|Function)} [queryOrFn={}] Selection query or filter\n   * function.\n   * @param {Function} [thisArg] Context to which to bind `queryOrFn` if\n   * `queryOrFn` is a function.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  filter (query, thisArg) {\n    /**\n     * Selection query as defined by JSData's [Query Syntax][querysyntax].\n     *\n     * [querysyntax]: http://www.js-data.io/v3.0/docs/query-syntax\n     *\n     * @example <caption>Empty \"findAll\" query</caption>\n     * const store = new JSData.DataStore()\n     * store.defineMapper('post')\n     * store.findAll('post').then((posts) => {\n     *   console.log(posts) // [...]\n     * })\n     *\n     * @example <caption>Empty \"filter\" query</caption>\n     * const store = new JSData.DataStore()\n     * store.defineMapper('post')\n     * const posts = store.filter('post')\n     * console.log(posts) // [...]\n     *\n     * @example <caption>Complex \"filter\" query</caption>\n     * const PAGE_SIZE = 2\n     * let currentPage = 3\n     *\n     * const store = new JSData.DataStore()\n     * store.defineMapper('post')\n     * const posts = [\n     *   { author: 'John', age: 30, status: 'published', id: 1 },\n     *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n     *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n     *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n     *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n     *   { author: 'Peter', age: 25, status: 'deleted', id: 6 },\n     *   { author: 'Sally', age: 21, status: 'draft', id: 7 },\n     *   { author: 'Jim', age: 27, status: 'draft', id: 8 },\n     *   { author: 'Jim', age: 27, status: 'published', id: 9 },\n     *   { author: 'Jason', age: 55, status: 'published', id: 10 }\n     * ]\n     * store.add('post', posts)\n     * // Retrieve a filtered page of blog posts\n     * // Would typically replace filter with findAll\n     * store.filter('post', {\n     *   where: {\n     *     status: {\n     *       // WHERE status = 'published'\n     *       '==': 'published'\n     *     },\n     *     author: {\n     *       // AND author IN ('bob', 'alice')\n     *       'in': ['bob', 'alice'],\n     *       // OR author IN ('karen')\n     *       '|in': ['karen']\n     *     }\n     *   },\n     *   orderBy: [\n     *     // ORDER BY date_published DESC,\n     *     ['date_published', 'DESC'],\n     *     // ORDER BY title ASC\n     *     ['title', 'ASC']\n     *   ],\n     *   // LIMIT 2\n     *   limit: PAGE_SIZE,\n     *   // SKIP 4\n     *   offset: PAGE_SIZE * (currentPage - 1)\n     * })\n     *\n     * @namespace query\n     * @property {number} [limit] See {@link query.limit}.\n     * @property {number} [offset] See {@link query.offset}.\n     * @property {string|Array[]} [orderBy] See {@link query.orderBy}.\n     * @property {number} [skip] Alias for {@link query.offset}.\n     * @property {string|Array[]} [sort] Alias for {@link query.orderBy}.\n     * @property {Object} [where] See {@link query.where}.\n     * @since 3.0.0\n     * @tutorial [\"http://www.js-data.io/v3.0/docs/query-syntax\",\"JSData's Query Syntax\"]\n     */\n    query || (query = {})\n    this.getData()\n    if (utils.isObject(query)) {\n      let where = {}\n\n      /**\n       * Filtering criteria. Records that do not meet this criteria will be exluded\n       * from the result.\n       *\n       * @example <caption>Return posts where author is at least 32 years old</caption>\n       * const store = new JSData.DataStore()\n       * store.defineMapper('post')\n       * const posts = [\n       *   { author: 'John', age: 30, id: 5 },\n       *   { author: 'Sally', age: 31, id: 6 },\n       *   { author: 'Mike', age: 32, id: 7 },\n       *   { author: 'Adam', age: 33, id: 8 },\n       *   { author: 'Adam', age: 33, id: 9 }\n       * ]\n       * store.add('post', posts)\n       * store.filter('post', {\n       *   where: {\n       *     age: {\n       *       '>=': 30\n       *     }\n       *   }\n       * })\n       * console.log(results)\n       *\n       * @name query.where\n       * @type {Object}\n       * @see http://www.js-data.io/v3.0/docs/query-syntax\n       * @since 3.0.0\n       */\n      if (utils.isObject(query.where) || utils.isArray(query.where)) {\n        where = query.where\n      }\n      utils.forOwn(query, function (value, key) {\n        if (!(key in reserved) && !(key in where)) {\n          where[key] = {\n            '==': value\n          }\n        }\n      })\n      let groups\n\n      // Apply filter for each field\n      if (utils.isObject(where) && Object.keys(where).length !== 0) {\n        groups = this._applyWhereFromArray([where])\n      } else if (utils.isArray(where)) {\n        groups = this._applyWhereFromArray(where)\n      }\n\n      if (groups) {\n        this.data = this.data.filter((item, i) => this._testArrayGroup(true, true, groups, item).keep)\n      }\n\n      // Sort\n      let orderBy = query.orderBy || query.sort\n\n      if (utils.isString(orderBy)) {\n        orderBy = [\n          [orderBy, 'ASC']\n        ]\n      }\n      if (!utils.isArray(orderBy)) {\n        orderBy = null\n      }\n\n      /**\n       * Determines how records should be ordered in the result.\n       *\n       * @example <caption>Order posts by `author` then by `id` descending </caption>\n       * const store = new JSData.DataStore()\n       * store.defineMapper('post')\n       * const posts = [\n       *   { author: 'John', age: 30, id: 5 },\n       *   { author: 'Sally', age: 31, id: 6 },\n       *   { author: 'Mike', age: 32, id: 7 },\n       *   { author: 'Adam', age: 33, id: 8 },\n       *   { author: 'Adam', age: 33, id: 9 }\n       * ]\n       * store.add('post', posts)\n       * store.filter('post', {\n       *     orderBy:[['author','ASC'],['id','DESC']]\n       * })\n       * console.log(results)\n       *\n       * @name query.orderBy\n       * @type {string|Array[]}\n       * @see http://www.js-data.io/v3.0/docs/query-syntax\n       * @since 3.0.0\n       */\n      if (orderBy) {\n        let index = 0\n        orderBy.forEach(function (def, i) {\n          if (utils.isString(def)) {\n            orderBy[i] = [def, 'ASC']\n          }\n        })\n        this.data.sort((a, b) => this.compare(orderBy, index, a, b))\n      }\n\n      /**\n       * Number of records to skip.\n       *\n       * @example <caption>Retrieve the first \"page\" of blog posts using findAll</caption>\n       * const PAGE_SIZE = 10\n       * let currentPage = 1\n       * PostMapper.findAll({\n       *   offset: PAGE_SIZE * (currentPage 1)\n       *   limit: PAGE_SIZE\n       * })\n       *\n       * @example <caption>Retrieve the last \"page\" of blog posts using filter</caption>\n       * const PAGE_SIZE = 5\n       * let currentPage = 2\n       * const store = new JSData.DataStore()\n       * store.defineMapper('post')\n       * const posts = [\n       *   { author: 'John', age: 30, id: 1 },\n       *   { author: 'Sally', age: 31, id: 2 },\n       *   { author: 'Mike', age: 32, id: 3 },\n       *   { author: 'Adam', age: 33, id: 4 },\n       *   { author: 'Adam', age: 33, id: 5 },\n       *   { author: 'Peter', age: 25, id: 6 },\n       *   { author: 'Sally', age: 21, id: 7 },\n       *   { author: 'Jim', age: 27, id: 8 },\n       *   { author: 'Jim', age: 27, id: 9 },\n       *   { author: 'Jason', age: 55, id: 10 }\n       * ]\n       * store.add('post', posts)\n       * store.filter('post', {\n       *   offset: PAGE_SIZE * (currentPage 1)\n       *   limit: PAGE_SIZE\n       * })\n       *\n       * console.log(results)\n       *\n       * @name query.offset\n       * @type {number}\n       * @see http://www.js-data.io/v3.0/docs/query-syntax\n       * @since 3.0.0\n       */\n      if (utils.isNumber(query.skip)) {\n        this.skip(query.skip)\n      } else if (utils.isNumber(query.offset)) {\n        this.skip(query.offset)\n      }\n\n      /**\n       * Maximum number of records to retrieve.\n       *\n       * @example <caption>Retrieve the first \"page\" of blog posts using findAll</caption>\n       * const PAGE_SIZE = 10\n       * let currentPage = 1\n       * PostMapper.findAll({\n       *   offset: PAGE_SIZE * (currentPage 1)\n       *   limit: PAGE_SIZE\n       * })\n       *\n       * @example <caption>Retrieve the last \"page\" of blog posts using filter</caption>\n       * const PAGE_SIZE = 5\n       * let currentPage = 2\n       * const store = new JSData.DataStore()\n       * store.defineMapper('post')\n       * const posts = [\n       *   { author: 'John', age: 30, id: 1 },\n       *   { author: 'Sally', age: 31, id: 2 },\n       *   { author: 'Mike', age: 32, id: 3 },\n       *   { author: 'Adam', age: 33, id: 4 },\n       *   { author: 'Adam', age: 33, id: 5 },\n       *   { author: 'Peter', age: 25, id: 6 },\n       *   { author: 'Sally', age: 21, id: 7 },\n       *   { author: 'Jim', age: 27, id: 8 },\n       *   { author: 'Jim', age: 27, id: 9 },\n       *   { author: 'Jason', age: 55, id: 10 }\n       * ]\n       * store.add('post', posts)\n       * store.filter('post', {\n       *   offset: PAGE_SIZE * (currentPage 1)\n       *   limit: PAGE_SIZE\n       * })\n       *\n       * console.log(results)\n       * @name query.limit\n       * @type {number}\n       * @see http://www.js-data.io/v3.0/docs/query-syntax\n       * @since 3.0.0\n       */\n      if (utils.isNumber(query.limit)) {\n        this.limit(query.limit)\n      }\n    } else if (utils.isFunction(query)) {\n      this.data = this.data.filter(query, thisArg)\n    }\n    return this\n  },\n\n  /**\n   * Iterate over all entities.\n   *\n   * @method Query#forEach\n   * @param {Function} forEachFn Iteration function.\n   * @param {*} [thisArg] Context to which to bind `forEachFn`.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  forEach (forEachFn, thisArg) {\n    this.getData().forEach(forEachFn, thisArg)\n    return this\n  },\n\n  /**\n   * Find the entity or entities that match the provided key.\n   *\n   * @example <caption>Get the entity whose primary key is 25.</caption>\n   * const entities = query.get(25).run()\n   *\n   * @example <caption>Same as above.</caption>\n   * const entities = query.get([25]).run()\n   *\n   * @example <caption>Get all users who are active and have the \"admin\" role.</caption>\n   * const activeAdmins = query.get(['active', 'admin'], {\n   *   index: 'activityAndRoles'\n   * }).run()\n   *\n   * @example <caption>Get all entities that match a certain weather condition.</caption>\n   * const niceDays = query.get(['sunny', 'humid', 'calm'], {\n   *   index: 'weatherConditions'\n   * }).run()\n   *\n   * @method Query#get\n   * @param {Array} keyList Key(s) defining the entity to retrieve. If\n   * `keyList` is not an array (i.e. for a single-value key), it will be\n   * wrapped in an array.\n   * @param {Object} [opts] Configuration options.\n   * @param {string} [opts.string] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  get (keyList, opts) {\n    keyList || (keyList = [])\n    opts || (opts = {})\n    if (this.data) {\n      throw utils.err(`${DOMAIN}#get`)(500, INDEX_ERR)\n    }\n    if (keyList && !utils.isArray(keyList)) {\n      keyList = [keyList]\n    }\n    if (!keyList.length) {\n      this.getData()\n      return this\n    }\n    this.data = this.collection.getIndex(opts.index).get(keyList)\n    return this\n  },\n\n  /**\n   * Find the entity or entities that match the provided keyLists.\n   *\n   * @example <caption>Get the posts where \"status\" is \"draft\" or \"inReview\".</caption>\n   * const posts = query.getAll('draft', 'inReview', { index: 'status' }).run()\n   *\n   * @example <caption>Same as above.</caption>\n   * const posts = query.getAll(['draft'], ['inReview'], { index: 'status' }).run()\n   *\n   * @method Query#getAll\n   * @param {...Array} [keyList] Provide one or more keyLists, and all\n   * entities matching each keyList will be retrieved. If no keyLists are\n   * provided, all entities will be returned.\n   * @param {Object} [opts] Configuration options.\n   * @param {string} [opts.index] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  getAll (...args) {\n    let opts = {}\n    if (this.data) {\n      throw utils.err(`${DOMAIN}#getAll`)(500, INDEX_ERR)\n    }\n    if (!args.length || args.length === 1 && utils.isObject(args[0])) {\n      this.getData()\n      return this\n    } else if (args.length && utils.isObject(args[args.length - 1])) {\n      opts = args[args.length - 1]\n      args.pop()\n    }\n    const collection = this.collection\n    const index = collection.getIndex(opts.index)\n    this.data = []\n    args.forEach((keyList) => {\n      this.data = this.data.concat(index.get(keyList))\n    })\n    return this\n  },\n\n  /**\n   * Return the current data result of this query.\n   *\n   * @method Query#getData\n   * @returns {Array} The data in this query.\n   * @since 3.0.0\n   */\n  getData () {\n    if (!this.data) {\n      this.data = this.collection.index.getAll()\n    }\n    return this.data\n  },\n\n  /**\n   * Implementation used by the `like` operator. Takes a pattern and flags and\n   * returns a `RegExp` instance that can test strings.\n   *\n   * @method Query#like\n   * @param {string} pattern Testing pattern.\n   * @param {string} flags Flags for the regular expression.\n   * @returns {RegExp} Regular expression for testing strings.\n   * @since 3.0.0\n   */\n  like (pattern, flags) {\n    return new RegExp(`^${(escape(pattern).replace(percentRegExp, '.*').replace(underscoreRegExp, '.'))}$`, flags)\n  },\n\n  /**\n   * Limit the result.\n   *\n   * @example <caption>Get only the first 2 posts.</caption>\n   * const store = new JSData.DataStore()\n   * store.defineMapper('post')\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'draft', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'draft', id: 5 }\n   * ]\n   * store.add('post', posts)\n   * const results = store.query('post').limit(2).run()\n   * console.log(results)\n   *\n   * @method Query#limit\n   * @param {number} num The maximum number of entities to keep in the result.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  limit (num) {\n    if (!utils.isNumber(num)) {\n      throw utils.err(`${DOMAIN}#limit`, 'num')(400, 'number', num)\n    }\n    const data = this.getData()\n    this.data = data.slice(0, Math.min(data.length, num))\n    return this\n  },\n\n  /**\n   * Apply a mapping function to the result data.\n   *\n   * @example\n   * // Return the age of all users\n   * const store = new JSData.DataStore()\n   * store.defineMapper('user')\n   * const users = [\n   *   { name: 'Peter', age: 25, id: 1 },\n   *   { name: 'Jim', age: 19, id: 2 },\n   *   { name: 'Mike', age: 17, id: 3 },\n   *   { name: 'Alan', age: 29, id: 4 },\n   *   { name: 'Katie', age: 33, id: 5 }\n   * ]\n   * store.add('post', posts)\n   * const ages = store.query('user').map((user) => {\n   *   return user.age\n   * }).run()\n   * console.log(ages)\n   *\n   * @method Query#map\n   * @param {Function} mapFn Mapping function.\n   * @param {*} [thisArg] Context to which to bind `mapFn`.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  map (mapFn, thisArg) {\n    this.data = this.getData().map(mapFn, thisArg)\n    return this\n  },\n\n  /**\n   * Return the result of calling the specified function on each item in this\n   * collection's main index.\n   *\n   * @example\n   * const stringAges = UserCollection.query().mapCall('toString').run()\n   *\n   * @method Query#mapCall\n   * @param {string} funcName Name of function to call\n   * @parama {...*} [args] Remaining arguments to be passed to the function.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  mapCall (funcName, ...args) {\n    this.data = this.getData().map(function (item) {\n      return item[funcName](...args)\n    })\n    return this\n  },\n\n  /**\n   * Complete the execution of the query and return the resulting data.\n   *\n   * @method Query#run\n   * @returns {Array} The result of executing this query.\n   * @since 3.0.0\n   */\n  run () {\n    const data = this.data\n    this.data = null\n    return data\n  },\n\n  /**\n   * Skip a number of results.\n   *\n   * @example <caption>Get all but the first 2 posts.</caption>\n   * const store = new JSData.DataStore()\n   * store.defineMapper('post')\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'draft', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'draft', id: 5 }\n   * ]\n   * store.add('post', posts)\n   * const results = store.query('post').skip(2).run()\n   * console.log(results)\n   *\n   * @method Query#skip\n   * @param {number} num The number of entities to skip.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  skip (num) {\n    if (!utils.isNumber(num)) {\n      throw utils.err(`${DOMAIN}#skip`, 'num')(400, 'number', num)\n    }\n    const data = this.getData()\n    if (num < data.length) {\n      this.data = data.slice(num)\n    } else {\n      this.data = []\n    }\n    return this\n  }\n}, {\n  /**\n   * The filtering operators supported by {@link Query#filter}, and which are\n   * implemented by adapters (for the most part).\n   *\n   * @example <caption>Variant 1</caption>\n   *\n   * const store = new JSData.DataStore()\n   * store.defineMapper('post')\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ]\n   * store.add('post', posts)\n   *\n   * const publishedPosts = store.filter('post', {\n   *   status: 'published',\n   *   limit: 2\n   * })\n   *\n   * console.log(publishedPosts)\n   *\n   *\n   * @example <caption>Variant 2</caption>\n   *\n   * const store = new JSData.DataStore()\n   * store.defineMapper('post')\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ]\n   * store.add('post', posts)\n   *\n   * const publishedPosts = store.filter('post', {\n   *   where: {\n   *     status: {\n   *       '==': 'published'\n   *     }\n   *   },\n   *   limit: 2\n   * })\n   *\n   * console.log(publishedPosts)\n   *\n   * @example <caption>Variant 3</caption>\n   *\n   * const store = new JSData.DataStore()\n   * store.defineMapper('post')\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ]\n   * store.add('post', posts)\n   *\n   * const publishedPosts = store.query('post').filter({\n   *   status: 'published'\n   * }).limit(2).run()\n   *\n   * console.log(publishedPosts)\n   *\n   * @example <caption>Variant 4</caption>\n   *\n   * const store = new JSData.DataStore()\n   * store.defineMapper('post')\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ]\n   * store.add('post', posts)\n   *\n   * const publishedPosts = store.query('post').filter({\n   *   where: {\n   *     status: {\n   *       '==': 'published'\n   *     }\n   *   }\n   * }).limit(2).run()\n   *\n   * console.log(publishedPosts)\n   *\n   * @example <caption>Multiple operators</caption>\n   *\n   * const store = new JSData.DataStore()\n   * store.defineMapper('post')\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ]\n   * store.add('post', posts)\n   *\n   * const myPublishedPosts = store.filter('post', {\n   *   where: {\n   *     status: {\n   *       '==': 'published'\n   *     },\n   *     user_id: {\n   *       '==': currentUser.id\n   *     }\n   *   }\n   * })\n   *\n   * console.log(myPublishedPosts)\n   *\n   * @name Query.ops\n   * @property {Function} == Equality operator.\n   * @property {Function} != Inequality operator.\n   * @property {Function} > Greater than operator.\n   * @property {Function} >= Greater than (inclusive) operator.\n   * @property {Function} < Less than operator.\n   * @property {Function} <= Less than (inclusive) operator.\n   * @property {Function} isectEmpty Operator that asserts that the intersection\n   * between two arrays is empty.\n   * @property {Function} isectNotEmpty Operator that asserts that the\n   * intersection between two arrays is __not__ empty.\n   * @property {Function} in Operator that asserts whether a value is in an\n   * array.\n   * @property {Function} notIn Operator that asserts whether a value is __not__\n   * in an array.\n   * @property {Function} contains Operator that asserts whether an array\n   * contains a value.\n   * @property {Function} notContains Operator that asserts whether an array\n   * does __not__ contain a value.\n   * @since 3.0.0\n   * @type {Object}\n   */\n  ops: {\n    '=': function (value, predicate) {\n      return value == predicate // eslint-disable-line\n    },\n    '==': function (value, predicate) {\n      return value == predicate // eslint-disable-line\n    },\n    '===': function (value, predicate) {\n      return value === predicate\n    },\n    '!=': function (value, predicate) {\n      return value != predicate // eslint-disable-line\n    },\n    '!==': function (value, predicate) {\n      return value !== predicate\n    },\n    '>': function (value, predicate) {\n      return value > predicate\n    },\n    '>=': function (value, predicate) {\n      return value >= predicate\n    },\n    '<': function (value, predicate) {\n      return value < predicate\n    },\n    '<=': function (value, predicate) {\n      return value <= predicate\n    },\n    'isectEmpty': function (value, predicate) {\n      return !utils.intersection((value || []), (predicate || [])).length\n    },\n    'isectNotEmpty': function (value, predicate) {\n      return utils.intersection((value || []), (predicate || [])).length\n    },\n    'in': function (value, predicate) {\n      return predicate.indexOf(value) !== -1\n    },\n    'notIn': function (value, predicate) {\n      return predicate.indexOf(value) === -1\n    },\n    'contains': function (value, predicate) {\n      return (value || []).indexOf(predicate) !== -1\n    },\n    'notContains': function (value, predicate) {\n      return (value || []).indexOf(predicate) === -1\n    }\n  }\n})\n\n/**\n * Create a subclass of this Query:\n * @example <caption>Query.extend</caption>\n * // Normally you would do: import {Query} from 'js-data'\n * const JSData = require('js-data@3.0.0-beta.7')\n * const {Query} = JSData\n * console.log('Using JSData v' + JSData.version.full)\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomQueryClass extends Query {\n *   foo () { return 'bar' }\n *   static beep () { return 'boop' }\n * }\n * const customQuery = new CustomQueryClass()\n * console.log(customQuery.foo())\n * console.log(CustomQueryClass.beep())\n *\n * // Extend the class using alternate method.\n * const OtherQueryClass = Query.extend({\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const otherQuery = new OtherQueryClass()\n * console.log(otherQuery.foo())\n * console.log(OtherQueryClass.beep())\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherQueryClass (collection) {\n *   Query.call(this, collection)\n *   this.created_at = new Date().getTime()\n * }\n * Query.extend({\n *   constructor: AnotherQueryClass,\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const anotherQuery = new AnotherQueryClass()\n * console.log(anotherQuery.created_at)\n * console.log(anotherQuery.foo())\n * console.log(AnotherQueryClass.beep())\n *\n * @method Query.extend\n * @param {Object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {Object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {Object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Query class.\n * @since 3.0.0\n */\n","export function sort (a, b, hashCode) {\n  // Short-circuit comparison if a and b are strictly equal\n  // This is absolutely necessary for indexed objects that\n  // don't have the idAttribute field\n  if (a === b) {\n    return 0\n  }\n  if (hashCode) {\n    a = hashCode(a)\n    b = hashCode(b)\n  }\n  if ((a === null && b === null) || (a === undefined && b === undefined)) {\n    return -1\n  }\n\n  if (a === null || a === undefined) {\n    return -1\n  }\n\n  if (b === null || b === undefined) {\n    return 1\n  }\n\n  if (a < b) {\n    return -1\n  }\n\n  if (a > b) {\n    return 1\n  }\n\n  return 0\n}\n\nexport function insertAt (array, index, value) {\n  array.splice(index, 0, value)\n  return array\n}\n\nexport function removeAt (array, index) {\n  array.splice(index, 1)\n  return array\n}\n\nexport function binarySearch (array, value, field) {\n  let lo = 0\n  let hi = array.length\n  let compared\n  let mid\n\n  while (lo < hi) {\n    mid = ((lo + hi) / 2) | 0\n    compared = sort(value, array[mid], field)\n    if (compared === 0) {\n      return {\n        found: true,\n        index: mid\n      }\n    } else if (compared < 0) {\n      hi = mid\n    } else {\n      lo = mid + 1\n    }\n  }\n\n  return {\n    found: false,\n    index: hi\n  }\n}\n","// Copyright (c) 2015, InternalFX.\n\n// Permission to use, copy, modify, and/or distribute this software for any purpose with or\n// without fee is hereby granted, provided that the above copyright notice and this permission\n// notice appear in all copies.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO\n// THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT\n// SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR\n// ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION\n// OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n// USE OR PERFORMANCE OF THIS SOFTWARE.\n\n// Modifications\n// Copyright 2015-2016 Jason Dobry\n//\n// Summary of modifications:\n// Reworked dependencies so as to re-use code already in js-data\n// Removed unused code\nimport utils from '../../src/utils'\nimport {binarySearch, insertAt, removeAt} from './_utils'\n\nexport default function Index (fieldList, opts) {\n  utils.classCallCheck(this, Index)\n  fieldList || (fieldList = [])\n\n  if (!utils.isArray(fieldList)) {\n    throw new Error('fieldList must be an array.')\n  }\n\n  opts || (opts = {})\n  this.fieldList = fieldList\n  this.fieldGetter = opts.fieldGetter\n  this.hashCode = opts.hashCode\n  this.isIndex = true\n  this.keys = []\n  this.values = []\n}\n\nutils.addHiddenPropsToTarget(Index.prototype, {\n  'set' (keyList, value) {\n    if (!utils.isArray(keyList)) {\n      keyList = [keyList]\n    }\n\n    let key = keyList.shift() || undefined\n    let pos = binarySearch(this.keys, key)\n\n    if (keyList.length === 0) {\n      if (pos.found) {\n        let dataLocation = binarySearch(this.values[pos.index], value, this.hashCode)\n        if (!dataLocation.found) {\n          insertAt(this.values[pos.index], dataLocation.index, value)\n        }\n      } else {\n        insertAt(this.keys, pos.index, key)\n        insertAt(this.values, pos.index, [value])\n      }\n    } else {\n      if (pos.found) {\n        this.values[pos.index].set(keyList, value)\n      } else {\n        insertAt(this.keys, pos.index, key)\n        let newIndex = new Index([], { hashCode: this.hashCode })\n        newIndex.set(keyList, value)\n        insertAt(this.values, pos.index, newIndex)\n      }\n    }\n  },\n\n  'get' (keyList) {\n    if (!utils.isArray(keyList)) {\n      keyList = [keyList]\n    }\n\n    let key = keyList.shift() || undefined\n    let pos = binarySearch(this.keys, key)\n\n    if (keyList.length === 0) {\n      if (pos.found) {\n        if (this.values[pos.index].isIndex) {\n          return this.values[pos.index].getAll()\n        } else {\n          return this.values[pos.index].slice()\n        }\n      } else {\n        return []\n      }\n    } else {\n      if (pos.found) {\n        return this.values[pos.index].get(keyList)\n      } else {\n        return []\n      }\n    }\n  },\n\n  getAll (opts) {\n    opts || (opts = {})\n    let results = []\n    const values = this.values\n    if (opts.order === 'desc') {\n      for (let i = values.length - 1; i >= 0; i--) {\n        const value = values[i]\n        if (value.isIndex) {\n          results = results.concat(value.getAll(opts))\n        } else {\n          results = results.concat(value)\n        }\n      }\n    } else {\n      for (let i = 0; i < values.length; i++) {\n        const value = values[i]\n        if (value.isIndex) {\n          results = results.concat(value.getAll(opts))\n        } else {\n          results = results.concat(value)\n        }\n      }\n    }\n    return results\n  },\n\n  visitAll (cb, thisArg) {\n    this.values.forEach(function (value) {\n      if (value.isIndex) {\n        value.visitAll(cb, thisArg)\n      } else {\n        value.forEach(cb, thisArg)\n      }\n    })\n  },\n\n  between (leftKeys, rightKeys, opts) {\n    opts || (opts = {})\n    if (!utils.isArray(leftKeys)) {\n      leftKeys = [leftKeys]\n    }\n    if (!utils.isArray(rightKeys)) {\n      rightKeys = [rightKeys]\n    }\n    utils.fillIn(opts, {\n      leftInclusive: true,\n      rightInclusive: false,\n      limit: undefined,\n      offset: 0\n    })\n\n    let results = this._between(leftKeys, rightKeys, opts)\n\n    if (opts.limit) {\n      return results.slice(opts.offset, opts.limit + opts.offset)\n    } else {\n      return results.slice(opts.offset)\n    }\n  },\n\n  _between (leftKeys, rightKeys, opts) {\n    let results = []\n\n    let leftKey = leftKeys.shift()\n    let rightKey = rightKeys.shift()\n\n    let pos\n\n    if (leftKey !== undefined) {\n      pos = binarySearch(this.keys, leftKey)\n    } else {\n      pos = {\n        found: false,\n        index: 0\n      }\n    }\n\n    if (leftKeys.length === 0) {\n      if (pos.found && opts.leftInclusive === false) {\n        pos.index += 1\n      }\n\n      for (let i = pos.index; i < this.keys.length; i += 1) {\n        if (rightKey !== undefined) {\n          if (opts.rightInclusive) {\n            if (this.keys[i] > rightKey) { break }\n          } else {\n            if (this.keys[i] >= rightKey) { break }\n          }\n        }\n\n        if (this.values[i].isIndex) {\n          results = results.concat(this.values[i].getAll())\n        } else {\n          results = results.concat(this.values[i])\n        }\n\n        if (opts.limit) {\n          if (results.length >= (opts.limit + opts.offset)) {\n            break\n          }\n        }\n      }\n    } else {\n      for (let i = pos.index; i < this.keys.length; i += 1) {\n        let currKey = this.keys[i]\n        if (currKey > rightKey) { break }\n\n        if (this.values[i].isIndex) {\n          if (currKey === leftKey) {\n            results = results.concat(this.values[i]._between(utils.copy(leftKeys), rightKeys.map(function () { return undefined }), opts))\n          } else if (currKey === rightKey) {\n            results = results.concat(this.values[i]._between(leftKeys.map(function () { return undefined }), utils.copy(rightKeys), opts))\n          } else {\n            results = results.concat(this.values[i].getAll())\n          }\n        } else {\n          results = results.concat(this.values[i])\n        }\n\n        if (opts.limit) {\n          if (results.length >= (opts.limit + opts.offset)) {\n            break\n          }\n        }\n      }\n    }\n\n    if (opts.limit) {\n      return results.slice(0, opts.limit + opts.offset)\n    } else {\n      return results\n    }\n  },\n\n  peek () {\n    if (this.values.length) {\n      if (this.values[0].isIndex) {\n        return this.values[0].peek()\n      } else {\n        return this.values[0]\n      }\n    }\n    return []\n  },\n\n  clear () {\n    this.keys = []\n    this.values = []\n  },\n\n  insertRecord (data) {\n    let keyList = this.fieldList.map(function (field) {\n      if (utils.isFunction(field)) {\n        return field(data) || undefined\n      } else {\n        return data[field] || undefined\n      }\n    })\n    this.set(keyList, data)\n  },\n\n  removeRecord (data) {\n    let removed\n    const isUnique = this.hashCode(data) !== undefined\n    this.values.forEach((value, i) => {\n      if (value.isIndex) {\n        if (value.removeRecord(data)) {\n          if (value.keys.length === 0) {\n            removeAt(this.keys, i)\n            removeAt(this.values, i)\n          }\n          removed = true\n          return false\n        }\n      } else {\n        let dataLocation = {}\n        if (this.keys[i] === undefined || !isUnique) {\n          for (let j = value.length - 1; j >= 0; j--) {\n            if (value[j] === data) {\n              dataLocation = {\n                found: true,\n                index: j\n              }\n              break\n            }\n          }\n        } else if (isUnique) {\n          dataLocation = binarySearch(value, data, this.hashCode)\n        }\n        if (dataLocation.found) {\n          removeAt(value, dataLocation.index)\n          if (value.length === 0) {\n            removeAt(this.keys, i)\n            removeAt(this.values, i)\n          }\n          removed = true\n          return false\n        }\n      }\n    })\n    return removed ? data : undefined\n  },\n\n  updateRecord (data) {\n    const removed = this.removeRecord(data)\n    if (removed !== undefined) {\n      this.insertRecord(data)\n    }\n  }\n})\n","import utils from './utils'\nimport Component from './Component'\nimport Query from './Query'\nimport Index from '../lib/mindex/index'\n\nconst DOMAIN = 'Collection'\n\nconst COLLECTION_DEFAULTS = {\n  /**\n   * Whether to call {@link Record#commit} on records that are added to the\n   * collection and already exist in the collection.\n   *\n   * @name Collection#commitOnMerge\n   * @type {boolean}\n   * @default true\n   */\n  commitOnMerge: true,\n\n  /**\n   * Field to be used as the unique identifier for records in this collection.\n   * Defaults to `\"id\"` unless {@link Collection#mapper} is set, in which case\n   * this will default to {@link Mapper#idAttribute}.\n   *\n   * @name Collection#idAttribute\n   * @type {string}\n   * @default \"id\"\n   */\n  idAttribute: 'id',\n\n  /**\n   * What to do when inserting a record into this Collection that shares a\n   * primary key with a record already in this Collection.\n   *\n   * Possible values:\n   * merge\n   * replace\n   *\n   * Merge:\n   *\n   * Recursively shallow copy properties from the new record onto the existing\n   * record.\n   *\n   * Replace:\n   *\n   * Shallow copy top-level properties from the new record onto the existing\n   * record. Any top-level own properties of the existing record that are _not_\n   * on the new record will be removed.\n   *\n   * @name Collection#onConflict\n   * @type {string}\n   * @default \"merge\"\n   */\n  onConflict: 'merge'\n}\n\n/**\n * An ordered set of {@link Record} instances.\n *\n * @example <caption>Collection#constructor</caption>\n * // import {Collection, Record} from 'js-data'\n * const JSData = require('js-data@3.0.0-beta.7')\n * const {Collection, Record} = JSData\n * console.log('Using JSData v' + JSData.version.full)\n *\n * const user1 = new Record({ id: 1 })\n * const user2 = new Record({ id: 2 })\n * const UserCollection = new Collection([user1, user2])\n * console.log(UserCollection.get(1) === user1)\n *\n * @class Collection\n * @extends Component\n * @param {Array} [records] Initial set of records to insert into the\n * collection.\n * @param {Object} [opts] Configuration options.\n * @param {string} [opts.commitOnMerge] See {@link Collection#commitOnMerge}.\n * @param {string} [opts.idAttribute] See {@link Collection#idAttribute}.\n * @param {string} [opts.onConflict=\"merge\"] See {@link Collection#onConflict}.\n * @param {string} [opts.mapper] See {@link Collection#mapper}.\n * @since 3.0.0\n */\nfunction Collection (records, opts) {\n  utils.classCallCheck(this, Collection)\n  Component.call(this, opts)\n\n  if (records && !utils.isArray(records)) {\n    opts = records\n    records = []\n  }\n  if (utils.isString(opts)) {\n    opts = { idAttribute: opts }\n  }\n\n  // Default values for arguments\n  records || (records = [])\n  opts || (opts = {})\n\n  Object.defineProperties(this, {\n    /**\n     * Default Mapper for this collection. Optional. If a Mapper is provided, then\n     * the collection will use the {@link Mapper#idAttribute} setting, and will\n     * wrap records in {@link Mapper#recordClass}.\n     *\n     * @example <caption>Collection#mapper</caption>\n     * // Normally you would do: import {Collection, Mapper} from 'js-data'\n     * const JSData = require('js-data@3.0.0-beta.7')\n     * const {Collection, Mapper} = JSData\n     * console.log('Using JSData v' + JSData.version.full)\n     *\n     * class MyMapperClass extends Mapper {\n     *   foo () { return 'bar' }\n     * }\n     * const myMapper = new MyMapperClass({ name: 'myMapper' })\n     * const collection = new Collection(null, { mapper: myMapper })\n     *\n     * @name Collection#mapper\n     * @type {Mapper}\n     * @default null\n     * @since 3.0.0\n     */\n    mapper: {\n      value: undefined,\n      writable: true\n    },\n    // Query class used by this collection\n    queryClass: {\n      value: undefined,\n      writable: true\n    }\n  })\n\n  // Apply user-provided configuration\n  utils.fillIn(this, opts)\n  // Fill in any missing options with the defaults\n  utils.fillIn(this, utils.copy(COLLECTION_DEFAULTS))\n\n  if (!this.queryClass) {\n    this.queryClass = Query\n  }\n\n  const idAttribute = this.recordId()\n\n  Object.defineProperties(this, {\n    /**\n     * The main index, which uses @{link Collection#recordId} as the key.\n     *\n     * @name Collection#index\n     * @type {Index}\n     */\n    index: {\n      value: new Index([idAttribute], {\n        hashCode (obj) {\n          return utils.get(obj, idAttribute)\n        }\n      })\n    },\n\n    /**\n     * Object that holds the secondary indexes of this collection.\n     *\n     * @name Collection#indexes\n     * @type {Object.<string, Index>}\n     */\n    indexes: {\n      value: {}\n    }\n  })\n\n  // Insert initial data into the collection\n  if (utils.isObject(records) || (utils.isArray(records) && records.length)) {\n    this.add(records)\n  }\n}\n\nexport default Component.extend({\n  constructor: Collection,\n\n  /**\n   * Used to bind to events emitted by records in this Collection.\n   *\n   * @method Collection#_onRecordEvent\n   * @since 3.0.0\n   * @private\n   * @param {...*} [arg] Args passed to {@link Collection#emit}.\n   */\n  _onRecordEvent (...args) {\n    this.emit(...args)\n  },\n\n  /**\n   * Insert the provided record or records.\n   *\n   * If a record is already in the collection then the provided record will\n   * either merge with or replace the existing record based on the value of the\n   * `onConflict` option.\n   *\n   * The collection's secondary indexes will be updated as each record is\n   * visited.\n   *\n   * @method Collection#add\n   * @since 3.0.0\n   * @param {(Object|Object[]|Record|Record[])} data The record or records to insert.\n   * @param {Object} [opts] Configuration options.\n   * @param {boolean} [opts.commitOnMerge=true] See {@link Collection#commitOnMerge}.\n   * @param {string} [opts.onConflict] See {@link Collection#onConflict}.\n   * @returns {(Object|Object[]|Record|Record[])} The added record or records.\n   */\n  add (records, opts) {\n    // Default values for arguments\n    opts || (opts = {})\n\n    // Fill in \"opts\" with the Collection's configuration\n    utils._(opts, this)\n    records = this.beforeAdd(records, opts) || records\n\n    // Track whether just one record or an array of records is being inserted\n    let singular = false\n    const idAttribute = this.recordId()\n    if (!utils.isArray(records)) {\n      if (utils.isObject(records)) {\n        records = [records]\n        singular = true\n      } else {\n        throw utils.err(`${DOMAIN}#add`, 'records')(400, 'object or array', records)\n      }\n    }\n\n    // Map the provided records to existing records.\n    // New records will be inserted. If any records map to existing records,\n    // they will be merged into the existing records according to the onConflict\n    // option.\n    records = records.map((record) => {\n      let id = this.recordId(record)\n      // Grab existing record if there is one\n      const existing = id === undefined ? id : this.get(id)\n      // If the currently visited record is just a reference to an existing\n      // record, then there is nothing to be done. Exit early.\n      if (record === existing) {\n        return existing\n      }\n\n      if (existing) {\n        // Here, the currently visited record corresponds to a record already\n        // in the collection, so we need to merge them\n        const onConflict = opts.onConflict || this.onConflict\n        if (onConflict === 'merge') {\n          utils.deepMixIn(existing, record)\n        } else if (onConflict === 'replace') {\n          utils.forOwn(existing, (value, key) => {\n            if (key !== idAttribute && record[key] === undefined) {\n              existing[key] = undefined\n            }\n          })\n          existing.set(record)\n        } else {\n          throw utils.err(`${DOMAIN}#add`, 'opts.onConflict')(400, 'one of (merge, replace)', onConflict, true)\n        }\n        record = existing\n        if (opts.commitOnMerge && utils.isFunction(record.commit)) {\n          record.commit()\n        }\n        // Update all indexes in the collection\n        this.updateIndexes(record)\n      } else {\n        // Here, the currently visted record does not correspond to any record\n        // in the collection, so (optionally) instantiate this record and insert\n        // it into the collection\n        record = this.mapper ? this.mapper.createRecord(record, opts) : record\n        this.index.insertRecord(record)\n        utils.forOwn(this.indexes, function (index, name) {\n          index.insertRecord(record)\n        })\n        if (record && utils.isFunction(record.on)) {\n          record.on('all', this._onRecordEvent, this)\n        }\n      }\n      return record\n    })\n    // Finally, return the inserted data\n    const result = singular ? records[0] : records\n    this.emit('add', result)\n    return this.afterAdd(records, opts, result) || result\n  },\n\n  /**\n   * Lifecycle hook called by {@link Collection#add}. If this method returns a\n   * value then {@link Collection#add} will return that same value.\n   *\n   * @method Collection#method\n   * @since 3.0.0\n   * @param {(Object|Object[]|Record|Record[])} result The record or records\n   * that were added to this Collection by {@link Collection#add}.\n   * @param {Object} opts The `opts` argument passed to {@link Collection#add}.\n   */\n  afterAdd () {},\n\n  /**\n   * Lifecycle hook called by {@link Collection#remove}. If this method returns\n   * a value then {@link Collection#remove} will return that same value.\n   *\n   * @method Collection#afterRemove\n   * @since 3.0.0\n   * @param {(string|number)} id The `id` argument passed to {@link Collection#remove}.\n   * @param {Object} opts The `opts` argument passed to {@link Collection#remove}.\n   * @param {Object} record The result that will be returned by {@link Collection#remove}.\n   */\n  afterRemove () {},\n\n  /**\n   * Lifecycle hook called by {@link Collection#removeAll}. If this method\n   * returns a value then {@link Collection#removeAll} will return that same\n   * value.\n   *\n   * @method Collection#afterRemoveAll\n   * @since 3.0.0\n   * @param {Object} query The `query` argument passed to {@link Collection#removeAll}.\n   * @param {Object} opts The `opts` argument passed to {@link Collection#removeAll}.\n   * @param {Object} records The result that will be returned by {@link Collection#removeAll}.\n   */\n  afterRemoveAll () {},\n\n  /**\n   * Lifecycle hook called by {@link Collection#add}. If this method returns a\n   * value then the `records` argument in {@link Collection#add} will be\n   * re-assigned to the returned value.\n   *\n   * @method Collection#beforeAdd\n   * @since 3.0.0\n   * @param {(Object|Object[]|Record|Record[])} records The `records` argument passed to {@link Collection#add}.\n   * @param {Object} opts The `opts` argument passed to {@link Collection#add}.\n   */\n  beforeAdd () {},\n\n  /**\n   * Lifecycle hook called by {@link Collection#remove}.\n   *\n   * @method Collection#beforeRemove\n   * @since 3.0.0\n   * @param {(string|number)} id The `id` argument passed to {@link Collection#remove}.\n   * @param {Object} opts The `opts` argument passed to {@link Collection#remove}.\n   */\n  beforeRemove () {},\n\n  /**\n   * Lifecycle hook called by {@link Collection#removeAll}.\n   *\n   * @method Collection#beforeRemoveAll\n   * @since 3.0.0\n   * @param {Object} query The `query` argument passed to {@link Collection#removeAll}.\n   * @param {Object} opts The `opts` argument passed to {@link Collection#removeAll}.\n   */\n  beforeRemoveAll () {},\n\n  /**\n   * Find all records between two boundaries.\n   *\n   * Shortcut for `collection.query().between(18, 30, { index: 'age' }).run()`\n   *\n   * @example\n   * // Get all users ages 18 to 30\n   * const users = collection.between(18, 30, { index: 'age' })\n   *\n   * @example\n   * // Same as above\n   * const users = collection.between([18], [30], { index: 'age' })\n   *\n   * @method Collection#between\n   * @since 3.0.0\n   * @param {Array} leftKeys Keys defining the left boundary.\n   * @param {Array} rightKeys Keys defining the right boundary.\n   * @param {Object} [opts] Configuration options.\n   * @param {string} [opts.index] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @param {boolean} [opts.leftInclusive=true] Whether to include records\n   * on the left boundary.\n   * @param {boolean} [opts.rightInclusive=false] Whether to include records\n   * on the left boundary.\n   * @param {boolean} [opts.limit] Limit the result to a certain number.\n   * @param {boolean} [opts.offset] The number of resulting records to skip.\n   * @returns {Object[]|Record[]} The result.\n   */\n  between (leftKeys, rightKeys, opts) {\n    return this.query().between(leftKeys, rightKeys, opts).run()\n  },\n\n  /**\n   * Create a new secondary index on the contents of the collection.\n   *\n   * @example\n   * // Index users by age\n   * collection.createIndex('age')\n   *\n   * @example\n   * // Index users by status and role\n   * collection.createIndex('statusAndRole', ['status', 'role'])\n   *\n   * @method Collection#createIndex\n   * @since 3.0.0\n   * @param {string} name The name of the new secondary index.\n   * @param {string[]} [fieldList] Array of field names to use as the key or\n   * compound key of the new secondary index. If no fieldList is provided, then\n   * the name will also be the field that is used to index the collection.\n   */\n  createIndex (name, fieldList, opts) {\n    if (utils.isString(name) && fieldList === undefined) {\n      fieldList = [name]\n    }\n    opts || (opts = {})\n    opts.hashCode || (opts.hashCode = (obj) => this.recordId(obj))\n    const index = this.indexes[name] = new Index(fieldList, opts)\n    this.index.visitAll(index.insertRecord, index)\n  },\n\n  /**\n   * Find the record or records that match the provided query or pass the\n   * provided filter function.\n   *\n   * Shortcut for `collection.query().filter(queryOrFn[, thisArg]).run()`\n   *\n   * @example <caption>Collection#filter</caption>\n   * // Normally you would do: import {Collection} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Collection} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   *\n   * const collection = new Collection([\n   *   { id: 1, status: 'draft', created_at_timestamp: new Date().getTime() }\n   * ])\n   *\n   * // Get the draft posts created less than three months ago\n   * let posts = collection.filter({\n   *   where: {\n   *     status: {\n   *       '==': 'draft'\n   *     },\n   *     created_at_timestamp: {\n   *       '>=': (new Date().getTime() - (1000 \\* 60 \\* 60 \\* 24 \\* 30 \\* 3)) // 3 months ago\n   *     }\n   *   }\n   * })\n   * console.log(posts)\n   *\n   * // Use a custom filter function\n   * posts = collection.filter(function (post) {\n   *   return post.id % 2 === 0\n   * })\n   *\n   * @method Collection#filter\n   * @param {(Object|Function)} [queryOrFn={}] Selection query or filter\n   * function.\n   * @param {Object} [thisArg] Context to which to bind `queryOrFn` if\n   * `queryOrFn` is a function.\n   * @returns {Array} The result.\n   * @see query\n   * @since 3.0.0\n   */\n  filter (query, thisArg) {\n    return this.query().filter(query, thisArg).run()\n  },\n\n  /**\n   * Iterate over all records.\n   *\n   * @example\n   * collection.forEach(function (record) {\n   *   // do something\n   * })\n   *\n   * @method Collection#forEach\n   * @since 3.0.0\n   * @param {Function} forEachFn Iteration function.\n   * @param {*} [thisArg] Context to which to bind `forEachFn`.\n   * @returns {Array} The result.\n   */\n  forEach (cb, thisArg) {\n    this.index.visitAll(cb, thisArg)\n  },\n\n  /**\n   * Get the record with the given id.\n   *\n   * @method Collection#get\n   * @since 3.0.0\n   * @param {(string|number)} id The primary key of the record to get.\n   * @returns {(Object|Record)} The record with the given id.\n   */\n  get (id) {\n    const instances = this.query().get(id).run()\n    return instances.length ? instances[0] : undefined\n  },\n\n  /**\n   * Find the record or records that match the provided keyLists.\n   *\n   * Shortcut for `collection.query().getAll(keyList1, keyList2, ...).run()`\n   *\n   * @example\n   * // Get the posts where \"status\" is \"draft\" or \"inReview\"\n   * const posts = collection.getAll('draft', 'inReview', { index: 'status' })\n   *\n   * @example\n   * // Same as above\n   * const posts = collection.getAll(['draft'], ['inReview'], { index: 'status' })\n   *\n   * @method Collection#getAll\n   * @since 3.0.0\n   * @param {...Array} [keyList] Provide one or more keyLists, and all\n   * records matching each keyList will be retrieved. If no keyLists are\n   * provided, all records will be returned.\n   * @param {Object} [opts] Configuration options.\n   * @param {string} [opts.index] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @returns {Array} The result.\n   */\n  getAll (...args) {\n    return this.query().getAll(...args).run()\n  },\n\n  /**\n   * Return the index with the given name. If no name is provided, return the\n   * main index. Throws an error if the specified index does not exist.\n   *\n   * @method Collection#getIndex\n   * @since 3.0.0\n   * @param {string} [name] The name of the index to retrieve.\n   */\n  getIndex (name) {\n    const index = name ? this.indexes[name] : this.index\n    if (!index) {\n      throw utils.err(`${DOMAIN}#getIndex`, name)(404, 'index')\n    }\n    return index\n  },\n\n  /**\n   * Limit the result.\n   *\n   * Shortcut for `collection.query().limit(maximumNumber).run()`\n   *\n   * @example\n   * const posts = collection.limit(10)\n   *\n   * @method Collection#limit\n   * @since 3.0.0\n   * @param {number} num The maximum number of records to keep in the result.\n   * @returns {Array} The result.\n   */\n  limit (num) {\n    return this.query().limit(num).run()\n  },\n\n  /**\n   * Apply a mapping function to all records.\n   *\n   * @example\n   * const names = collection.map(function (user) {\n   *   return user.name\n   * })\n   *\n   * @method Collection#map\n   * @since 3.0.0\n   * @param {Function} mapFn Mapping function.\n   * @param {*} [thisArg] Context to which to bind `mapFn`.\n   * @returns {Array} The result of the mapping.\n   */\n  map (cb, thisArg) {\n    const data = []\n    this.index.visitAll(function (value) {\n      data.push(cb.call(thisArg, value))\n    })\n    return data\n  },\n\n  /**\n   * Return the result of calling the specified function on each record in this\n   * collection's main index.\n   *\n   * @method Collection#mapCall\n   * @since 3.0.0\n   * @param {string} funcName Name of function to call\n   * @parama {...*} [args] Remaining arguments to be passed to the function.\n   * @returns {Array} The result.\n   */\n  mapCall (funcName, ...args) {\n    const data = []\n    this.index.visitAll(function (record) {\n      data.push(record[funcName](...args))\n    })\n    return data\n  },\n\n  /**\n   * Return all \"unsaved\" (not uniquely identifiable) records in this colleciton.\n   *\n   * @method Collection#prune\n   * @param {Object} [opts] Configuration options, passed to {@link Collection#removeAll}.\n   * @since 3.0.0\n   * @returns {Array} The removed records, if any.\n   */\n  prune (opts) {\n    return this.removeAll(this.unsaved(), opts)\n  },\n\n  /**\n   * Create a new query to be executed against the contents of the collection.\n   * The result will be all or a subset of the contents of the collection.\n   *\n   * @example\n   * // Grab page 2 of users between ages 18 and 30\n   * collection.query()\n   *   .between(18, 30, { index: 'age' }) // between ages 18 and 30\n   *   .skip(10) // second page\n   *   .limit(10) // page size\n   *   .run()\n   *\n   * @method Collection#query\n   * @since 3.0.0\n   * @returns {Query} New query object.\n   */\n  query () {\n    const Ctor = this.queryClass\n    return new Ctor(this)\n  },\n\n  /**\n   * Return the primary key of the given, or if no record is provided, return the\n   * name of the field that holds the primary key of records in this Collection.\n   *\n   * @method Collection#recordId\n   * @since 3.0.0\n   * @param {(Object|Record)} [record] The record whose primary key is to be\n   * returned.\n   * @returns {(string|number)} Primary key or name of field that holds primary\n   * key.\n   */\n  recordId (record) {\n    if (record) {\n      return utils.get(record, this.recordId())\n    }\n    return this.mapper ? this.mapper.idAttribute : this.idAttribute\n  },\n\n  /**\n   * Reduce the data in the collection to a single value and return the result.\n   *\n   * @example\n   * const totalVotes = collection.reduce(function (prev, record) {\n   *   return prev + record.upVotes + record.downVotes\n   * }, 0)\n   *\n   * @method Collection#reduce\n   * @since 3.0.0\n   * @param {Function} cb Reduction callback.\n   * @param {*} initialValue Initial value of the reduction.\n   * @returns {*} The result.\n   */\n  reduce (cb, initialValue) {\n    const data = this.getAll()\n    return data.reduce(cb, initialValue)\n  },\n\n  /**\n   * Remove the record with the given id from this Collection.\n   *\n   * @method Collection#remove\n   * @since 3.0.0\n   * @param {(string|number|object|Record)} idOrRecord The primary key of the\n   * record to be removed, or a reference to the record that is to be removed.\n   * @param {Object} [opts] Configuration options.\n   * @returns {Object|Record} The removed record, if any.\n   */\n  remove (idOrRecord, opts) {\n    // Default values for arguments\n    opts || (opts = {})\n    this.beforeRemove(idOrRecord, opts)\n    let record = utils.isSorN(idOrRecord) ? this.get(idOrRecord) : idOrRecord\n\n    // The record is in the collection, remove it\n    if (utils.isObject(record)) {\n      record = this.index.removeRecord(record)\n      if (record) {\n        utils.forOwn(this.indexes, function (index, name) {\n          index.removeRecord(record)\n        })\n        if (utils.isFunction(record.off)) {\n          record.off('all', this._onRecordEvent, this)\n          if (!opts.silent) {\n            this.emit('remove', record)\n          }\n        }\n      }\n    }\n    return this.afterRemove(idOrRecord, opts, record) || record\n  },\n\n  /**\n   * Remove from this collection the given records or the records selected by\n   * the given \"query\".\n   *\n   * @method Collection#removeAll\n   * @since 3.0.0\n   * @param {Object|Object[]|Record[]} [queryOrRecords={}] Records to be removed or selection query. See {@link query}.\n   * @param {Object} [queryOrRecords.where] See {@link query.where}.\n   * @param {number} [queryOrRecords.offset] See {@link query.offset}.\n   * @param {number} [queryOrRecords.limit] See {@link query.limit}.\n   * @param {string|Array[]} [queryOrRecords.orderBy] See {@link query.orderBy}.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(Object[]|Record[])} The removed records, if any.\n   */\n  removeAll (queryOrRecords, opts) {\n    // Default values for arguments\n    opts || (opts = {})\n    this.beforeRemoveAll(queryOrRecords, opts)\n    let records = utils.isArray(queryOrRecords) ? queryOrRecords.slice() : this.filter(queryOrRecords)\n\n    // Remove each selected record from the collection\n    const optsCopy = utils.plainCopy(opts)\n    optsCopy.silent = true\n    records = records\n      .map((record) => this.remove(record, optsCopy))\n      .filter((record) => record)\n    if (!opts.silent) {\n      this.emit('remove', records)\n    }\n    return this.afterRemoveAll(queryOrRecords, opts, records) || records\n  },\n\n  /**\n   * Skip a number of results.\n   *\n   * Shortcut for `collection.query().skip(numberToSkip).run()`\n   *\n   * @example\n   * const posts = collection.skip(10)\n   *\n   * @method Collection#skip\n   * @since 3.0.0\n   * @param {number} num The number of records to skip.\n   * @returns {Array} The result.\n   */\n  skip (num) {\n    return this.query().skip(num).run()\n  },\n\n  /**\n   * Return the plain JSON representation of all items in this collection.\n   * Assumes records in this collection have a toJSON method.\n   *\n   * @method Collection#toJSON\n   * @since 3.0.0\n   * @param {Object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Array of relation names or relation fields\n   * to include in the representation.\n   * @returns {Array} The records.\n   */\n  toJSON (opts) {\n    return this.mapCall('toJSON', opts)\n  },\n\n  /**\n   * Return all \"unsaved\" (not uniquely identifiable) records in this colleciton.\n   *\n   * @method Collection#unsaved\n   * @since 3.0.0\n   * @returns {Array} The unsaved records, if any.\n   */\n  unsaved (opts) {\n    return this.index.get()\n  },\n\n  /**\n   * Update a record's position in a single index of this collection. See\n   * {@link Collection#updateIndexes} to update a record's position in all\n   * indexes at once.\n   *\n   * @method Collection#updateIndex\n   * @since 3.0.0\n   * @param {Object} record The record to update.\n   * @param {Object} [opts] Configuration options.\n   * @param {string} [opts.index] The index in which to update the record's\n   * position. If you don't specify an index then the record will be updated\n   * in the main index.\n   */\n  updateIndex (record, opts) {\n    opts || (opts = {})\n    this.getIndex(opts.index).updateRecord(record)\n  },\n\n  /**\n   * Updates all indexes in this collection for the provided record. Has no\n   * effect if the record is not in the collection.\n   *\n   * @method Collection#updateIndexes\n   * @since 3.0.0\n   * @param {Object} record TODO\n   */\n  updateIndexes (record) {\n    this.index.updateRecord(record)\n    utils.forOwn(this.indexes, function (index, name) {\n      index.updateRecord(record)\n    })\n  }\n})\n\n/**\n * Fired when a record changes. Only works for records that have tracked changes.\n * See {@link Collection~changeListener} on how to listen for this event.\n *\n * @event Collection#change\n * @see Collection~changeListener\n */\n\n/**\n * Callback signature for the {@link Collection#event:change} event.\n *\n * @example\n * function onChange (record, changes) {\n *   // do something\n * }\n * collection.on('change', onChange)\n *\n * @callback Collection~changeListener\n * @param {Record} The Record that changed.\n * @param {Object} The changes.\n * @see Collection#event:change\n * @since 3.0.0\n */\n\n/**\n * Fired when one or more records are added to the Collection. See\n * {@link Collection~addListener} on how to listen for this event.\n *\n * @event Collection#add\n * @see Collection~addListener\n * @see Collection#event:add\n * @see Collection#add\n */\n\n/**\n * Callback signature for the {@link Collection#event:add} event.\n *\n * @example\n * function onAdd (recordOrRecords) {\n *   // do something\n * }\n * collection.on('add', onAdd)\n *\n * @callback Collection~addListener\n * @param {Record|Record[]} The Record or Records that were added.\n * @see Collection#event:add\n * @see Collection#add\n * @since 3.0.0\n */\n\n/**\n * Fired when one or more records are removed from the Collection. See\n * {@link Collection~removeListener} for how to listen for this event.\n *\n * @event Collection#remove\n * @see Collection~removeListener\n * @see Collection#event:remove\n * @see Collection#remove\n * @see Collection#removeAll\n */\n\n/**\n * Callback signature for the {@link Collection#event:remove} event.\n *\n * @example\n * function onRemove (recordsOrRecords) {\n *   // do something\n * }\n * collection.on('remove', onRemove)\n *\n * @callback Collection~removeListener\n * @param {Record|Record[]} Record or Records that were removed.\n * @see Collection#event:remove\n * @see Collection#remove\n * @see Collection#removeAll\n * @since 3.0.0\n */\n\n/**\n * Create a subclass of this Collection:\n * @example <caption>Collection.extend</caption>\n * // Normally you would do: import {Collection} from 'js-data'\n * const JSData = require('js-data@3.0.0-beta.7')\n * const {Collection} = JSData\n * console.log('Using JSData v' + JSData.version.full)\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomCollectionClass extends Collection {\n *   foo () { return 'bar' }\n *   static beep () { return 'boop' }\n * }\n * const customCollection = new CustomCollectionClass()\n * console.log(customCollection.foo())\n * console.log(CustomCollectionClass.beep())\n *\n * // Extend the class using alternate method.\n * const OtherCollectionClass = Collection.extend({\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const otherCollection = new OtherCollectionClass()\n * console.log(otherCollection.foo())\n * console.log(OtherCollectionClass.beep())\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherCollectionClass () {\n *   Collection.call(this)\n *   this.created_at = new Date().getTime()\n * }\n * Collection.extend({\n *   constructor: AnotherCollectionClass,\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const anotherCollection = new AnotherCollectionClass()\n * console.log(anotherCollection.created_at)\n * console.log(anotherCollection.foo())\n * console.log(AnotherCollectionClass.beep())\n *\n * @method Collection.extend\n * @param {Object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {Object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {Object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Collection class.\n * @since 3.0.0\n */\n","import utils from './utils'\nimport Component from './Component'\nimport Settable from './Settable'\n\nconst DOMAIN = 'Record'\n\nconst superMethod = function (mapper, name) {\n  const store = mapper.datastore\n  if (store && store[name]) {\n    return function (...args) {\n      return store[name](mapper.name, ...args)\n    }\n  }\n  return mapper[name].bind(mapper)\n}\n\n/**\n * js-data's Record class. An instance of `Record` corresponds to an in-memory\n * representation of a single row or document in a database, Firebase,\n * localstorage, etc. Basically, a `Record` instance represents whatever kind of\n * entity in your persistence layer that has a primary key.\n *\n * ```javascript\n * import {Record} from 'js-data'\n * ```\n *\n * @example <caption>Record#constructor</caption>\n * // Normally you would do: import {Record} from 'js-data'\n * const JSData = require('js-data@3.0.0-beta.7')\n * const {Record} = JSData\n * console.log('Using JSData v' + JSData.version.full)\n *\n * // Instantiate a plain record\n * let record = new Record()\n * console.log('record: ' + JSON.stringify(record))\n *\n * // You can supply properties on instantiation\n * record = new Record({ name: 'John' })\n * console.log('record: ' + JSON.stringify(record))\n *\n * @example <caption>Record#constructor2</caption>\n * // Normally you would do: import {Mapper} from 'js-data'\n * const JSData = require('js-data@3.0.0-beta.7')\n * const {Mapper} = JSData\n * console.log('Using JSData v' + JSData.version.full)\n *\n * // Instantiate a record that's associated with a Mapper:\n * const UserMapper = new Mapper({ name: 'user' })\n * const User = UserMapper.recordClass\n * const user = UserMapper.createRecord({ name: 'John' })\n * const user2 = new User({ name: 'Sally' })\n * console.log('user: ' + JSON.stringify(user))\n * console.log('user2: ' + JSON.stringify(user2))\n *\n * @example <caption>Record#constructor3</caption>\n * // Normally you would do: import {Container} from 'js-data'\n * const JSData = require('js-data@3.0.0-beta.7')\n * const {Container} = JSData\n * console.log('Using JSData v' + JSData.version.full)\n *\n * const store = new Container()\n * store.defineMapper('user')\n *\n * // Instantiate a record that's associated with a store's Mapper\n * const user = store.createRecord('user', { name: 'John' })\n * console.log('user: ' + JSON.stringify(user))\n *\n * @example <caption>Record#constructor4</caption>\n * // Normally you would do: import {Container} from 'js-data'\n * const JSData = require('js-data@3.0.0-beta.7')\n * const {Container} = JSData\n * console.log('Using JSData v' + JSData.version.full)\n *\n * const store = new Container()\n * store.defineMapper('user', {\n *   schema: {\n *     properties: {\n *       name: { type: 'string' }\n *     }\n *   }\n * })\n *\n * // Validate on instantiation\n * const user = store.createRecord('user', { name: 1234 })\n * console.log('user: ' + JSON.stringify(user))\n *\n * @example <caption>Record#constructor5</caption>\n * // Normally you would do: import {Container} from 'js-data'\n * const JSData = require('js-data@3.0.0-beta.7')\n * const {Container} = JSData\n * console.log('Using JSData v' + JSData.version.full)\n *\n * const store = new Container()\n * store.defineMapper('user', {\n *   schema: {\n *     properties: {\n *       name: { type: 'string' }\n *     }\n *   }\n * })\n *\n * // Skip validation on instantiation\n * const user = store.createRecord('user', { name: 1234 }, { noValidate: true })\n * console.log('user: ' + JSON.stringify(user))\n * console.log('user.isValid(): ' + user.isValid())\n *\n * @class Record\n * @extends Component\n * @param {Object} [props] The initial properties of the new Record instance.\n * @param {Object} [opts] Configuration options.\n * @param {boolean} [opts.noValidate=false] Whether to skip validation on the\n * initial properties.\n * @since 3.0.0\n */\nfunction Record (props, opts) {\n  utils.classCallCheck(this, Record)\n  Settable.call(this)\n  props || (props = {})\n  opts || (opts = {})\n  const _set = this._set\n  // TODO: Optimize these strings\n  _set('creating', true)\n  if (opts.noValidate) {\n    _set('noValidate', true)\n  }\n  // Set the idAttribute value first, if it exists.\n  const mapper = this.constructor.mapper\n  const id = mapper ? utils.get(props, mapper.idAttribute) : undefined\n  if (id !== undefined) {\n    utils.set(this, mapper.idAttribute, id)\n  }\n  utils.fillIn(this, props)\n  _set('creating', false)\n  _set('noValidate', false)\n  _set('previous', utils.plainCopy(props))\n}\n\nexport default Component.extend({\n  constructor: Record,\n\n  /**\n   * Returns the {@link Mapper} paired with this record's class, if any.\n   *\n   * @method Record#_mapper\n   * @returns {Mapper} The {@link Mapper} paired with this record's class, if any.\n   * @since 3.0.0\n   */\n  _mapper () {\n    const mapper = this.constructor.mapper\n    if (!mapper) {\n      throw utils.err(`${DOMAIN}#_mapper`, '')(404, 'mapper')\n    }\n    return mapper\n  },\n\n  /**\n   * Lifecycle hook.\n   *\n   * @method Record#afterLoadRelations\n   * @param {string[]} relations The `relations` argument passed to {@link Record#loadRelations}.\n   * @param {Object} opts The `opts` argument passed to {@link Record#loadRelations}.\n   * @since 3.0.0\n   */\n  afterLoadRelations () {},\n\n  /**\n   * Lifecycle hook.\n   *\n   * @method Record#beforeLoadRelations\n   * @param {string[]} relations The `relations` argument passed to {@link Record#loadRelations}.\n   * @param {Object} opts The `opts` argument passed to {@link Record#loadRelations}.\n   * @since 3.0.0\n   */\n  beforeLoadRelations () {},\n\n  /**\n   * Return the change history of this record since it was instantiated or\n   * {@link Record#commit} was called.\n   *\n   * @method Record#changeHistory\n   * @since 3.0.0\n   */\n  changeHistory () {\n    return (this._get('history') || []).slice()\n  },\n\n  /**\n   * Return changes to this record since it was instantiated or\n   * {@link Record#commit} was called.\n   *\n   * @example <caption>Record#changes</caption>\n   * // Normally you would do: import {Container} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Container} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   *\n   * const store = new Container()\n   * store.defineMapper('user')\n   * const user = store.createRecord('user')\n   * console.log('user changes: ' + JSON.stringify(user.changes()))\n   * user.name = 'John'\n   * console.log('user changes: ' + JSON.stringify(user.changes()))\n   *\n   * @method Record#changes\n   * @param [opts] Configuration options.\n   * @param {Function} [opts.equalsFn={@link utils.deepEqual}] Equality function.\n   * @param {Array} [opts.ignore=[]] Array of strings or RegExp of fields to ignore.\n   * @returns {Object} Object describing the changes to this record since it was\n   * instantiated or its {@link Record#commit} method was last called.\n   * @since 3.0.0\n   */\n  changes (opts) {\n    opts || (opts = {})\n    return utils.diffObjects(typeof this.toJSON === 'function' ? this.toJSON(opts) : this, this._get('previous'), opts)\n  },\n\n  /**\n   * Make the record's current in-memory state it's only state, with any\n   * previous property values being set to current values.\n   *\n   * @example <caption>Record#commit</caption>\n   * // Normally you would do: import {Container} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Container} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   *\n   * const store = new Container()\n   * store.defineMapper('user')\n   * const user = store.createRecord('user')\n   * console.log('user hasChanges: ' + user.hasChanges())\n   * user.name = 'John'\n   * console.log('user hasChanges: ' + user.hasChanges())\n   * user.commit()\n   * console.log('user hasChanges: ' + user.hasChanges())\n   *\n   * @method Record#commit\n   * @since 3.0.0\n   */\n  commit () {\n    this._set('changed') // unset\n    this._set('history', []) // clear history\n    this._set('previous', utils.plainCopy(this))\n  },\n\n  /**\n   * Call {@link Mapper#destroy} using this record's primary key.\n   *\n   * @example\n   * import {Container} from 'js-data'\n   * import {RethinkDBAdapter} from 'js-data-rethinkdb'\n   *\n   * const store = new Container()\n   * store.registerAdapter('rethink', new RethinkDBAdapter(), { default: true })\n   * store.defineMapper('user')\n   * store.find('user', 1234).then((user) => {\n   *   console.log(user.id) // 1234\n   *\n   *   // Destroy this user from the database\n   *   return user.destroy()\n   * })\n   *\n   * @method Record#destroy\n   * @param {Object} [opts] Configuration options passed to {@link Mapper#destroy}.\n   * @returns {Promise} The result of calling {@link Mapper#destroy} with the\n   * primary key of this record.\n   * @since 3.0.0\n   */\n  destroy (opts) {\n    opts || (opts = {})\n    const mapper = this._mapper()\n    return superMethod(mapper, 'destroy')(utils.get(this, mapper.idAttribute), opts)\n  },\n\n  /**\n   * Return the value at the given path for this instance.\n   *\n   * @example <caption>Record#get</caption>\n   * // Normally you would do: import {Container} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Container} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   * const store = new Container()\n   * store.defineMapper('user')\n   *\n   * const user = store.createRecord('user', { name: 'Bob' })\n   * console.log('user.get(\"name\"): ' + user.get('name'))\n   *\n   * @method Record#get\n   * @param {string} key Path of value to retrieve.\n   * @returns {*} Value at path.\n   * @since 3.0.0\n   */\n  'get' (key) {\n    return utils.get(this, key)\n  },\n\n  /**\n   * Return whether this record has changed since it was instantiated or\n   * {@link Record#commit} was called.\n   *\n   * @example <caption>Record#hasChanges</caption>\n   * // Normally you would do: import {Container} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Container} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   * const store = new Container()\n   * store.defineMapper('user')\n   * const user = store.createRecord('user')\n   * console.log('user hasChanges: ' + user.hasChanges())\n   * user.name = 'John'\n   * console.log('user hasChanges: ' + user.hasChanges())\n   * user.commit()\n   * console.log('user hasChanges: ' + user.hasChanges())\n   *\n   * @method Record#hasChanges\n   * @param [opts] Configuration options.\n   * @param {Function} [opts.equalsFn={@link utils.deepEqual}] Equality function.\n   * @param {Array} [opts.ignore=[]] Array of strings or RegExp of fields to ignore.\n   * @returns {boolean} Return whether the record has changed since it was\n   * instantiated or since its {@link Record#commit} method was called.\n   * @since 3.0.0\n   */\n  hasChanges (opts) {\n    const quickHasChanges = !!(this._get('changed') || []).length\n    return quickHasChanges || utils.areDifferent(typeof this.toJSON === 'function' ? this.toJSON(opts) : this, this._get('previous'), opts)\n  },\n\n  /**\n   * Return whether the record is unsaved. Records that have primary keys are\n   * considered \"saved\". Records without primary keys are considered \"unsaved\".\n   *\n   * @example <caption>Record#isNew</caption>\n   * // Normally you would do: import {Container} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Container} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   * const store = new Container()\n   * store.defineMapper('user')\n   * const user = store.createRecord('user', {\n   *   id: 1234\n   * })\n   * const user2 = store.createRecord('user')\n   * console.log('user isNew: ' + user.isNew()) // false\n   * console.log('user2 isNew: ' + user2.isNew()) // true\n   *\n   * @method Record#isNew\n   * @returns {boolean} Whether the record is unsaved.\n   * @since 3.0.0\n   */\n  isNew (opts) {\n    return utils.get(this, this._mapper().idAttribute) === undefined\n  },\n\n  /**\n   * Return whether the record in its current state passes validation.\n   *\n   * @example <caption>Record#isValid</caption>\n   * // Normally you would do: import {Container} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Container} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   * const store = new Container()\n   * store.defineMapper('user', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' }\n   *     }\n   *   }\n   * })\n   * const user = store.createRecord('user', {\n   *   name: 1234\n   * }, {\n   *   noValidate: true // this allows us to put the record into an invalid state\n   * })\n   * console.log('user isValid: ' + user.isValid())\n   * user.name = 'John'\n   * console.log('user isValid: ' + user.isValid())\n   *\n   * @method Record#isValid\n   * @param {Object} [opts] Configuration options. Passed to {@link Mapper#validate}.\n   * @returns {boolean} Whether the record in its current state passes\n   * validation.\n   * @since 3.0.0\n   */\n  isValid (opts) {\n    return !this._mapper().validate(this, opts)\n  },\n\n  /**\n   * Lazy load relations of this record, to be attached to the record once their\n   * loaded.\n   *\n   * @example\n   * import {Container} from 'js-data'\n   * import {RethinkDBAdapter} from 'js-data-rethinkdb'\n   *\n   * const store = new Container()\n   * store.registerAdapter('rethink', new RethinkDBAdapter(), { default: true })\n   * store.defineMapper('user', {\n   *   relations: {\n   *     hasMany: {\n   *       post: {\n   *         localField: 'posts',\n   *         foreignKey: 'user_id'\n   *       }\n   *     }\n   *   }\n   * })\n   * store.defineMapper('post', {\n   *   relations: {\n   *     belongsTo: {\n   *       user: {\n   *         localField: 'user',\n   *         foreignKey: 'user_id'\n   *       }\n   *     }\n   *   }\n   * })\n   * store.find('user', 1234).then((user) => {\n   *   console.log(user.id) // 1234\n   *\n   *   // Load the user's post relations\n   *   return user.loadRelations(['post'])\n   * }).then((user) => {\n   *   console.log(user.posts) // [{...}, {...}, ...]\n   * })\n   *\n   * @method Record#loadRelations\n   * @param {string[]} [relations] List of relations to load. Can use localField\n   * names or Mapper names to pick relations.\n   * @param {Object} [opts] Configuration options.\n   * @returns {Promise} Resolves with the record, with the loaded relations now\n   * attached.\n   * @since 3.0.0\n   */\n  loadRelations (relations, opts) {\n    let op\n    const mapper = this._mapper()\n\n    // Default values for arguments\n    relations || (relations = [])\n    if (utils.isString(relations)) {\n      relations = [relations]\n    }\n    opts || (opts = {})\n    opts.with = relations\n\n    // Fill in \"opts\" with the Model's configuration\n    utils._(opts, mapper)\n    opts.adapter = mapper.getAdapterName(opts)\n\n    // beforeLoadRelations lifecycle hook\n    op = opts.op = 'beforeLoadRelations'\n    return utils.resolve(this[op](relations, opts)).then(() => {\n      // Now delegate to the adapter\n      op = opts.op = 'loadRelations'\n      mapper.dbg(op, this, relations, opts)\n      let tasks = []\n      let task\n      utils.forEachRelation(mapper, opts, (def, optsCopy) => {\n        const relatedMapper = def.getRelation()\n        optsCopy.raw = false\n        if (utils.isFunction(def.load)) {\n          task = def.load(mapper, def, this, opts)\n        } else if (def.type === 'hasMany' || def.type === 'hasOne') {\n          if (def.foreignKey) {\n            task = superMethod(relatedMapper, 'findAll')({\n              [def.foreignKey]: utils.get(this, mapper.idAttribute)\n            }, optsCopy).then(function (relatedData) {\n              if (def.type === 'hasOne') {\n                return relatedData.length ? relatedData[0] : undefined\n              }\n              return relatedData\n            })\n          } else if (def.localKeys) {\n            task = superMethod(relatedMapper, 'findAll')({\n              where: {\n                [relatedMapper.idAttribute]: {\n                  'in': utils.get(this, def.localKeys)\n                }\n              }\n            })\n          } else if (def.foreignKeys) {\n            task = superMethod(relatedMapper, 'findAll')({\n              where: {\n                [def.foreignKeys]: {\n                  'contains': utils.get(this, mapper.idAttribute)\n                }\n              }\n            }, opts)\n          }\n        } else if (def.type === 'belongsTo') {\n          const key = utils.get(this, def.foreignKey)\n          if (utils.isSorN(key)) {\n            task = superMethod(relatedMapper, 'find')(key, optsCopy)\n          }\n        }\n        if (task) {\n          task = task.then((relatedData) => {\n            def.setLocalField(this, relatedData)\n          })\n          tasks.push(task)\n        }\n      })\n      return Promise.all(tasks)\n    }).then(() => {\n      // afterLoadRelations lifecycle hook\n      op = opts.op = 'afterLoadRelations'\n      return utils.resolve(this[op](relations, opts)).then(() => this)\n    })\n  },\n\n  /**\n   * Return the properties with which this record was instantiated.\n   *\n   * @example <caption>Record#previous</caption>\n   * // import {Container} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Container} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   * const store = new Container()\n   * store.defineMapper('user')\n   * const user = store.createRecord('user', {\n   *   name: 'William'\n   * })\n   * console.log('user previous: ' + JSON.stringify(user.previous()))\n   * user.name = 'Bob'\n   * console.log('user previous: ' + JSON.stringify(user.previous()))\n   * user.commit()\n   * console.log('user previous: ' + JSON.stringify(user.previous()))\n   *\n   * @method Record#previous\n   * @param {string} [key] If specified, return just the initial value of the\n   * given key.\n   * @returns {Object} The initial properties of this record.\n   * @since 3.0.0\n   */\n  previous (key) {\n    if (key) {\n      return this._get(`previous.${key}`)\n    }\n    return this._get('previous')\n  },\n\n  /**\n   * Revert changes to this record back to the properties it had when it was\n   * instantiated.\n   *\n   * @example <caption>Record#revert</caption>\n   * // import {Container} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Container} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   * const store = new Container()\n   * store.defineMapper('user')\n   * const user = store.createRecord('user', {\n   *   name: 'William'\n   * })\n   * console.log('user: ' + JSON.stringify(user))\n   * user.name = 'Bob'\n   * console.log('user: ' + JSON.stringify(user))\n   * user.revert()\n   * console.log('user: ' + JSON.stringify(user))\n   *\n   * @method Record#revert\n   * @param {Object} [opts] Configuration options.\n   * @param {string[]} [opts.preserve] Array of strings or Regular Expressions\n   * denoting properties that should not be reverted.\n   * @since 3.0.0\n   */\n  revert (opts) {\n    const previous = this._get('previous')\n    opts || (opts = {})\n    opts.preserve || (opts.preserve = [])\n    utils.forOwn(this, (value, key) => {\n      if (key !== this._mapper().idAttribute && !previous.hasOwnProperty(key) && this.hasOwnProperty(key) && opts.preserve.indexOf(key) === -1) {\n        delete this[key]\n      }\n    })\n    utils.forOwn(previous, (value, key) => {\n      if (opts.preserve.indexOf(key) === -1) {\n        this[key] = value\n      }\n    })\n    this.commit()\n  },\n\n  /**\n   * Delegates to {@link Mapper#create} or {@link Mapper#update}.\n   *\n   * @example\n   * import {Container} from 'js-data'\n   * import {RethinkDBAdapter} from 'js-data-rethinkdb'\n   *\n   * const store = new Container()\n   * store.registerAdapter('rethink', new RethinkDBAdapter(), { default: true })\n   * store.defineMapper('session')\n   * const session = store.createRecord('session', { topic: 'Node.js' })\n   *\n   * // Create a new record in the database\n   * session.save().then(() => {\n   *   console.log(session.id) // 1234\n   *\n   *   session.skill_level = 'beginner'\n   *\n   *   // Update the record in the database\n   *   return user.save()\n   * })\n   *\n   * @method Record#save\n   * @param {Object} [opts] Configuration options. See {@link Mapper#create} and\n   * {@link Mapper#update}.\n   * @param {boolean} [opts.changesOnly] Equality function. Default uses `===`.\n   * @param {Function} [opts.equalsFn] Passed to {@link Record#changes} when\n   * `opts.changesOnly` is `true`.\n   * @param {Array} [opts.ignore] Passed to {@link Record#changes} when\n   * `opts.changesOnly` is `true`.\n   * @returns {Promise} The result of calling {@link Mapper#create} or\n   * {@link Mapper#update}.\n   * @since 3.0.0\n   */\n  save (opts) {\n    opts || (opts = {})\n    const mapper = this._mapper()\n    const id = utils.get(this, mapper.idAttribute)\n    let props = this\n\n    const postProcess = (result) => {\n      const record = opts.raw ? result.data : result\n      if (record) {\n        utils.deepMixIn(this, record)\n        this.commit()\n      }\n      return result\n    }\n\n    if (id === undefined) {\n      return superMethod(mapper, 'create')(props, opts).then(postProcess)\n    }\n    if (opts.changesOnly) {\n      const changes = this.changes(opts)\n      props = {}\n      utils.fillIn(props, changes.added)\n      utils.fillIn(props, changes.changed)\n    }\n    return superMethod(mapper, 'update')(id, props, opts).then(postProcess)\n  },\n\n  /**\n   * Set the value for a given key, or the values for the given keys if \"key\" is\n   * an object. Triggers change events on those properties that have `track: true`\n   * in {@link Mapper#schema}.\n   *\n   * @example <caption>Record#set</caption>\n   * // Normally you would do: import {Container} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Container} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   * const store = new Container()\n   * store.defineMapper('user')\n   *\n   * const user = store.createRecord('user')\n   * console.log('user: ' + JSON.stringify(user))\n   *\n   * user.set('name', 'Bob')\n   * console.log('user: ' + JSON.stringify(user))\n   *\n   * user.set({ age: 30, role: 'admin' })\n   * console.log('user: ' + JSON.stringify(user))\n   *\n   * @fires Record#change\n   * @method Record#set\n   * @param {(string|Object)} key Key to set or hash of key-value pairs to set.\n   * @param {*} [value] Value to set for the given key.\n   * @param {Object} [opts] Configuration options.\n   * @param {boolean} [opts.silent=false] Whether to trigger change events.\n   * @since 3.0.0\n   */\n  'set' (key, value, opts) {\n    if (utils.isObject(key)) {\n      opts = value\n    }\n    opts || (opts = {})\n    if (opts.silent) {\n      this._set('silent', true)\n    }\n    utils.set(this, key, value)\n    if (!this._get('eventId')) {\n      this._set('silent') // unset\n    }\n  },\n\n  /**\n   * Return a plain object representation of this record. If the class from\n   * which this record was created has a Mapper, then {@link Mapper#toJSON} will\n   * be called with this record instead.\n   *\n   * @example <caption>Record#toJSON</caption>\n   * // Normally you would do: import {Container} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Container} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   * const store = new Container()\n   * store.defineMapper('user', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' }\n   *     }\n   *   }\n   * })\n   *\n   * const user = store.createRecord('user', {\n   *   name: 'John',\n   *   $$hashKey: '1234'\n   * })\n   * console.log('user: ' + JSON.stringify(user.toJSON()))\n   * console.log('user: ' + JSON.stringify(user.toJSON({ strict: true })))\n   *\n   * @method Record#toJSON\n   * @param {Object} [opts] Configuration options.\n   * @param {boolean} [opts.strict] Whether to exclude properties that are not\n   * defined in {@link Mapper#schema}.\n   * @param {string[]} [opts.with] Array of relation names or relation fields\n   * to include in the representation. Only available as an option if the class\n   * from which this record was created has a Mapper and this record resides in\n   * an instance of {@link DataStore}.\n   * @returns {Object} Plain object representation of this record.\n   * @since 3.0.0\n   */\n  toJSON (opts) {\n    const mapper = this.constructor.mapper\n    if (mapper) {\n      return mapper.toJSON(this, opts)\n    } else {\n      const json = {}\n      utils.forOwn(this, function (prop, key) {\n        json[key] = utils.plainCopy(prop)\n      })\n      return json\n    }\n  },\n\n  /**\n   * Unset the value for a given key. Triggers change events on those properties\n   * that have `track: true` in {@link Mapper#schema}.\n   *\n   * @example <caption>Record#unset</caption>\n   * // Normally you would do: import {Container} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Container} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   * const store = new Container()\n   * store.defineMapper('user')\n   *\n   * const user = store.createRecord('user', {\n   *   name: 'John'\n   * })\n   * console.log('user: ' + JSON.stringify(user))\n   *\n   * user.unset('name')\n   * console.log('user: ' + JSON.stringify(user))\n   *\n   * @method Record#unset\n   * @param {string} key Key to unset.\n   * @param {Object} [opts] Configuration options.\n   * @param {boolean} [opts.silent=false] Whether to trigger change events.\n   * @since 3.0.0\n   */\n  unset (key, opts) {\n    this.set(key, undefined, opts)\n  },\n\n  /**\n   * Validate this record based on its current properties.\n   *\n   * @example <caption>Record#validate</caption>\n   * // Normally you would do: import {Container} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Container} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   * const store = new Container()\n   * store.defineMapper('user', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' }\n   *     }\n   *   }\n   * })\n   * const user = store.createRecord('user', {\n   *   name: 1234\n   * }, {\n   *   noValidate: true // this allows us to put the record into an invalid state\n   * })\n   * console.log('user validation: ' + JSON.stringify(user.validate()))\n   * user.name = 'John'\n   * console.log('user validation: ' + user.validate())\n   *\n   * @method Record#validate\n   * @param {Object} [opts] Configuration options. Passed to {@link Mapper#validate}.\n   * @returns {*} Array of errors or `undefined` if no errors.\n   * @since 3.0.0\n   */\n  validate (opts) {\n    return this._mapper().validate(this, opts)\n  }\n})\n\n/**\n * Allow records to emit events.\n *\n * An record's registered listeners are stored in the record's private data.\n */\nutils.eventify(\n  Record.prototype,\n  function () {\n    return this._get('events')\n  },\n  function (value) {\n    this._set('events', value)\n  }\n)\n\n/**\n * Fired when a record changes. Only works for records that have tracked fields.\n * See {@link Record~changeListener} on how to listen for this event.\n *\n * @event Record#change\n * @see Record~changeListener\n */\n\n/**\n * Callback signature for the {@link Record#event:change} event.\n *\n * @example\n * function onChange (mapperName, record, changes) {\n *   // do something\n * }\n * store.on('change', onChange)\n *\n * @callback Record~changeListener\n * @param {Record} The Record that changed.\n * @param {Object} The changes.\n * @see Record#event:change\n * @since 3.0.0\n */\n\n/**\n * Create a subclass of this Record:\n * @example <caption>Record.extend</caption>\n * // Normally you would do: import {Record} from 'js-data'\n * const JSData = require('js-data@3.0.0-beta.7')\n * const {Record} = JSData\n * console.log('Using JSData v' + JSData.version.full)\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomRecordClass extends Record {\n *   foo () { return 'bar' }\n *   static beep () { return 'boop' }\n * }\n * const customRecord = new CustomRecordClass()\n * console.log(customRecord.foo())\n * console.log(CustomRecordClass.beep())\n *\n * // Extend the class using alternate method.\n * const OtherRecordClass = Record.extend({\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const otherRecord = new OtherRecordClass()\n * console.log(otherRecord.foo())\n * console.log(OtherRecordClass.beep())\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherRecordClass () {\n *   Record.call(this)\n *   this.created_at = new Date().getTime()\n * }\n * Record.extend({\n *   constructor: AnotherRecordClass,\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const anotherRecord = new AnotherRecordClass()\n * console.log(anotherRecord.created_at)\n * console.log(anotherRecord.foo())\n * console.log(AnotherRecordClass.beep())\n *\n * @method Record.extend\n * @param {Object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {Object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {Object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Record class.\n * @since 3.0.0\n */\n","import utils from './utils'\nimport Component from './Component'\n\nconst DOMAIN = 'Schema'\n\n/**\n * A function map for each of the seven primitive JSON types defined by the core specification.\n * Each function will check a given value and return true or false if the value is an instance of that type.\n * ```\n *   types.integer(1) // returns true\n *   types.string({}) // returns false\n * ```\n * http://json-schema.org/latest/json-schema-core.html#anchor8\n * @name Schema.types\n * @type {Object}\n */\nconst types = {\n  array: utils.isArray,\n  boolean: utils.isBoolean,\n  integer: utils.isInteger,\n  'null': utils.isNull,\n  number: utils.isNumber,\n  object: utils.isObject,\n  string: utils.isString\n}\n\n/**\n * @ignore\n */\nconst segmentToString = function (segment, prev) {\n  let str = ''\n  if (segment) {\n    if (utils.isNumber(segment)) {\n      str += `[${segment}]`\n    } else if (prev) {\n      str += `.${segment}`\n    } else {\n      str += `${segment}`\n    }\n  }\n  return str\n}\n\n/**\n * @ignore\n */\nconst makePath = function (opts) {\n  opts || (opts = {})\n  let path = ''\n  const segments = opts.path || []\n  segments.forEach(function (segment) {\n    path += segmentToString(segment, path)\n  })\n  path += segmentToString(opts.prop, path)\n  return path\n}\n\n/**\n * @ignore\n */\nconst makeError = function (actual, expected, opts) {\n  return {\n    expected,\n    actual: '' + actual,\n    path: makePath(opts)\n  }\n}\n\n/**\n * @ignore\n */\nconst addError = function (actual, expected, opts, errors) {\n  errors.push(makeError(actual, expected, opts))\n}\n\n/**\n * @ignore\n */\nconst maxLengthCommon = function (keyword, value, schema, opts) {\n  const max = schema[keyword]\n  if (value.length > max) {\n    return makeError(value.length, `length no more than ${max}`, opts)\n  }\n}\n\n/**\n * @ignore\n */\nconst minLengthCommon = function (keyword, value, schema, opts) {\n  const min = schema[keyword]\n  if (value.length < min) {\n    return makeError(value.length, `length no less than ${min}`, opts)\n  }\n}\n\n/**\n * A map of all object member validation functions for each keyword defined in the JSON Schema.\n * @name Schema.validationKeywords\n * @type {Object}\n */\nconst validationKeywords = {\n  /**\n   * Validates the provided value against all schemas defined in the Schemas `allOf` keyword.\n   * The instance is valid against if and only if it is valid against all the schemas declared in the Schema's value.\n   *\n   * The value of this keyword MUST be an array. This array MUST have at least one element.\n   * Each element of this array MUST be a valid JSON Schema.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor82\n   *\n   * @name Schema.validationKeywords.allOf\n   * @method\n   * @param {*} value Value to be validated.\n   * @param {Object} schema Schema containing the `allOf` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  allOf (value, schema, opts) {\n    let allErrors = []\n    schema.allOf.forEach(function (_schema) {\n      allErrors = allErrors.concat(validate(value, _schema, opts) || [])\n    })\n    return allErrors.length ? undefined : allErrors\n  },\n\n  /**\n   * Validates the provided value against all schemas defined in the Schemas `anyOf` keyword.\n   * The instance is valid against this keyword if and only if it is valid against\n   * at least one of the schemas in this keyword's value.\n   *\n   * The value of this keyword MUST be an array. This array MUST have at least one element.\n   * Each element of this array MUST be an object, and each object MUST be a valid JSON Schema.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor85\n   *\n   * @name Schema.validationKeywords.anyOf\n   * @method\n   * @param {*} value Value to be validated.\n   * @param {Object} schema Schema containing the `anyOf` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  anyOf (value, schema, opts) {\n    let validated = false\n    let allErrors = []\n    schema.anyOf.forEach(function (_schema) {\n      const errors = validate(value, _schema, opts)\n      if (errors) {\n        allErrors = allErrors.concat(errors)\n      } else {\n        validated = true\n      }\n    })\n    return validated ? undefined : allErrors\n  },\n\n  /**\n   * http://json-schema.org/latest/json-schema-validation.html#anchor70\n   *\n   * @name Schema.validationKeywords.dependencies\n   * @method\n   * @param {*} value TODO\n   * @param {Object} schema TODO\n   * @param {Object} opts TODO\n   */\n  dependencies (value, schema, opts) {\n    // TODO\n  },\n\n  /**\n   * Validates the provided value against an array of possible values defined by the Schema's `enum` keyword\n   * Validation succeeds if the value is deeply equal to one of the values in the array.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor76\n   *\n   * @name Schema.validationKeywords.enum\n   * @method\n   * @param {*} value Value to validate\n   * @param {Object} schema Schema containing the `enum` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  enum (value, schema, opts) {\n    const possibleValues = schema['enum']\n    if (utils.findIndex(possibleValues, (item) => utils.deepEqual(item, value)) === -1) {\n      return makeError(value, `one of (${possibleValues.join(', ')})`, opts)\n    }\n  },\n\n  /**\n   * Validates each of the provided array values against a schema or an array of schemas defined by the Schema's `items` keyword\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor37 for validation rules.\n   *\n   * @name Schema.validationKeywords.items\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {Object} schema Schema containing the items keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  items (value, schema, opts) {\n    opts || (opts = {})\n    // TODO: additionalItems\n    let items = schema.items\n    let errors = []\n    const checkingTuple = utils.isArray(items)\n    const length = value.length\n    for (var prop = 0; prop < length; prop++) {\n      if (checkingTuple) {\n        // Validating a tuple, instead of just checking each item against the\n        // same schema\n        items = schema.items[prop]\n      }\n      opts.prop = prop\n      errors = errors.concat(validate(value[prop], items, opts) || [])\n    }\n    return errors.length ? errors : undefined\n  },\n\n  /**\n   * Validates the provided number against a maximum value defined by the Schema's `maximum` keyword\n   * Validation succeeds if the value is a number, and is less than, or equal to, the value of this keyword.\n   * http://json-schema.org/latest/json-schema-validation.html#anchor17\n   *\n   * @name Schema.validationKeywords.maximum\n   * @method\n   * @param {*} value Number to validate against the keyword.\n   * @param {Object} schema Schema containing the `maximum` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  maximum (value, schema, opts) {\n    // Must be a number\n    const maximum = schema.maximum\n    // Must be a boolean\n    // Depends on maximum\n    // default: false\n    const exclusiveMaximum = schema.exclusiveMaximum\n    if (typeof value === typeof maximum && !(exclusiveMaximum ? maximum > value : maximum >= value)) {\n      return exclusiveMaximum\n        ? makeError(value, `no more than nor equal to ${maximum}`, opts)\n        : makeError(value, `no more than ${maximum}`, opts)\n    }\n  },\n\n  /**\n   * Validates the length of the provided array against a maximum value defined by the Schema's `maxItems` keyword.\n   * Validation succeeds if the length of the array is less than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor42\n   *\n   * @name Schema.validationKeywords.maxItems\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {Object} schema Schema containing the `maxItems` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  maxItems (value, schema, opts) {\n    if (utils.isArray(value)) {\n      return maxLengthCommon('maxItems', value, schema, opts)\n    }\n  },\n\n  /**\n   * Validates the length of the provided string against a maximum value defined in the Schema's `maxLength` keyword.\n   * Validation succeeds if the length of the string is less than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor26\n   *\n   * @name Schema.validationKeywords.maxLength\n   * @method\n   * @param {*} value String to be validated.\n   * @param {Object} schema Schema containing the `maxLength` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  maxLength (value, schema, opts) {\n    return maxLengthCommon('maxLength', value, schema, opts)\n  },\n\n  /**\n   * Validates the count of the provided object's properties against a maximum value defined in the Schema's `maxProperties` keyword.\n   * Validation succeeds if the object's property count is less than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor54\n   *\n   * @name Schema.validationKeywords.maxProperties\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {Object} schema Schema containing the `maxProperties` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  maxProperties (value, schema, opts) {\n    // validate only objects\n    if (!utils.isObject(value)) return\n    const maxProperties = schema.maxProperties\n    const length = Object.keys(value).length\n    if (length > maxProperties) {\n      return makeError(length, `no more than ${maxProperties} properties`, opts)\n    }\n  },\n\n  /**\n   * Validates the provided value against a minimum value defined by the Schema's `minimum` keyword\n   * Validation succeeds if the value is a number and is greater than, or equal to, the value of this keyword.\n   * http://json-schema.org/latest/json-schema-validation.html#anchor21\n   *\n   * @name Schema.validationKeywords.minimum\n   * @method\n   * @param {*} value Number to validate against the keyword.\n   * @param {Object} schema Schema containing the `minimum` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  minimum (value, schema, opts) {\n    // Must be a number\n    const minimum = schema.minimum\n    // Must be a boolean\n    // Depends on minimum\n    // default: false\n    const exclusiveMinimum = schema.exclusiveMinimum\n    if (typeof value === typeof minimum && !(exclusiveMinimum ? value > minimum : value >= minimum)) {\n      return exclusiveMinimum\n        ? makeError(value, `no less than nor equal to ${minimum}`, opts)\n        : makeError(value, `no less than ${minimum}`, opts)\n    }\n  },\n\n  /**\n   * Validates the length of the provided array against a minimum value defined by the Schema's `minItems` keyword.\n   * Validation succeeds if the length of the array is greater than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor45\n   *\n   * @name Schema.validationKeywords.minItems\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {Object} schema Schema containing the `minItems` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  minItems (value, schema, opts) {\n    if (utils.isArray(value)) {\n      return minLengthCommon('minItems', value, schema, opts)\n    }\n  },\n\n  /**\n   * Validates the length of the provided string against a minimum value defined in the Schema's `minLength` keyword.\n   * Validation succeeds if the length of the string is greater than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor29\n   *\n   * @name Schema.validationKeywords.minLength\n   * @method\n   * @param {*} value String to be validated.\n   * @param {Object} schema Schema containing the `minLength` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  minLength (value, schema, opts) {\n    return minLengthCommon('minLength', value, schema, opts)\n  },\n\n  /**\n   * Validates the count of the provided object's properties against a minimum value defined in the Schema's `minProperties` keyword.\n   * Validation succeeds if the object's property count is greater than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor57\n   *\n   * @name Schema.validationKeywords.minProperties\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {Object} schema Schema containing the `minProperties` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  minProperties (value, schema, opts) {\n    // validate only objects\n    if (!utils.isObject(value)) return\n    const minProperties = schema.minProperties\n    const length = Object.keys(value).length\n    if (length < minProperties) {\n      return makeError(length, `no more than ${minProperties} properties`, opts)\n    }\n  },\n\n  /**\n   * Validates the provided number is a multiple of the number defined in the Schema's `multipleOf` keyword.\n   * Validation succeeds if the number can be divided equally into the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor14\n   *\n   * @name Schema.validationKeywords.multipleOf\n   * @method\n   * @param {*} value Number to be validated.\n   * @param {Object} schema Schema containing the `multipleOf` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  multipleOf (value, schema, opts) {\n    const multipleOf = schema.multipleOf\n    if (utils.isNumber(value)) {\n      if ((value / multipleOf) % 1 !== 0) {\n        return makeError(value, `multipleOf ${multipleOf}`, opts)\n      }\n    }\n  },\n\n  /**\n   * Validates the provided value is not valid with any of the schemas defined in the Schema's `not` keyword.\n   * An instance is valid against this keyword if and only if it is NOT valid against the schemas in this keyword's value.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor91\n   * @name Schema.validationKeywords.not\n   * @method\n   * @param {*} value to be checked.\n   * @param {Object} schema Schema containing the not keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  not (value, schema, opts) {\n    if (!validate(value, schema.not, opts)) {\n      // TODO: better messaging\n      return makeError('succeeded', 'should have failed', opts)\n    }\n  },\n\n  /**\n   * Validates the provided value is valid with one and only one of the schemas defined in the Schema's `oneOf` keyword.\n   * An instance is valid against this keyword if and only if it is valid against a single schemas in this keyword's value.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor88\n   * @name Schema.validationKeywords.oneOf\n   * @method\n   * @param {*} value to be checked.\n   * @param {Object} schema Schema containing the `oneOf` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  oneOf (value, schema, opts) {\n    let validated = false\n    let allErrors = []\n    schema.oneOf.forEach(function (_schema) {\n      const errors = validate(value, _schema, opts)\n      if (errors) {\n        allErrors = allErrors.concat(errors)\n      } else if (validated) {\n        allErrors = [makeError('valid against more than one', 'valid against only one', opts)]\n        validated = false\n        return false\n      } else {\n        validated = true\n      }\n    })\n    return validated ? undefined : allErrors\n  },\n\n  /**\n   * Validates the provided string matches a pattern defined in the Schema's `pattern` keyword.\n   * Validation succeeds if the string is a match of the regex value of this keyword.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor33\n   * @name Schema.validationKeywords.pattern\n   * @method\n   * @param {*} value String to be validated.\n   * @param {Object} schema Schema containing the `pattern` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  pattern (value, schema, opts) {\n    const pattern = schema.pattern\n    if (utils.isString(value) && !value.match(pattern)) {\n      return makeError(value, pattern, opts)\n    }\n  },\n\n  /**\n   * Validates the provided object's properties against a map of values defined in the Schema's `properties` keyword.\n   * Validation succeeds if the object's property are valid with each of the schema's in the provided map.\n   * Validation also depends on the additionalProperties and or patternProperties.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor64 for more info.\n   *\n   * @name Schema.validationKeywords.properties\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {Object} schema Schema containing the `properties` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  properties (value, schema, opts) {\n    opts || (opts = {})\n    // Can be a boolean or an object\n    // Technically the default is an \"empty schema\", but here \"true\" is\n    // functionally the same\n    const additionalProperties = schema.additionalProperties === undefined ? true : schema.additionalProperties\n    // \"s\": The property set of the instance to validate.\n    const toValidate = {}\n    // \"p\": The property set from \"properties\".\n    // Default is an object\n    const properties = schema.properties || {}\n    // \"pp\": The property set from \"patternProperties\".\n    // Default is an object\n    const patternProperties = schema.patternProperties || {}\n    let errors = []\n\n    // Collect set \"s\"\n    utils.forOwn(value, function (_value, prop) {\n      toValidate[prop] = undefined\n    })\n    // Remove from \"s\" all elements of \"p\", if any.\n    utils.forOwn(properties || {}, function (_schema, prop) {\n      if (value[prop] === undefined && _schema['default'] !== undefined) {\n        value[prop] = utils.copy(_schema['default'])\n      }\n      opts.prop = prop\n      errors = errors.concat(validate(value[prop], _schema, opts) || [])\n      delete toValidate[prop]\n    })\n    // For each regex in \"pp\", remove all elements of \"s\" which this regex\n    // matches.\n    utils.forOwn(patternProperties, function (_schema, pattern) {\n      utils.forOwn(toValidate, function (undef, prop) {\n        if (prop.match(pattern)) {\n          opts.prop = prop\n          errors = errors.concat(validate(value[prop], _schema, opts) || [])\n          delete toValidate[prop]\n        }\n      })\n    })\n    const keys = Object.keys(toValidate)\n    // If \"s\" is not empty, validation fails\n    if (additionalProperties === false) {\n      if (keys.length) {\n        addError(`extra fields: ${keys.join(', ')}`, 'no extra fields', opts, errors)\n      }\n    } else if (utils.isObject(additionalProperties)) {\n      // Otherwise, validate according to provided schema\n      keys.forEach(function (prop) {\n        opts.prop = prop\n        errors = errors.concat(validate(value[prop], additionalProperties, opts) || [])\n      })\n    }\n    return errors.length ? errors : undefined\n  },\n\n  /**\n   * Validates the provided object's has all properties listed in the Schema's `properties` keyword array.\n   * Validation succeeds if the object contains all properties provided in the array value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor61\n   *\n   * @name Schema.validationKeywords.required\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {Object} schema Schema containing the `required` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  required (value, schema, opts) {\n    opts || (opts = {})\n    const required = schema.required\n    let errors = []\n    if (!opts.existingOnly) {\n      required.forEach(function (prop) {\n        if (utils.get(value, prop) === undefined) {\n          const prevProp = opts.prop\n          opts.prop = prop\n          addError(undefined, 'a value', opts, errors)\n          opts.prop = prevProp\n        }\n      })\n    }\n    return errors.length ? errors : undefined\n  },\n\n  /**\n   * Validates the provided value's type is equal to the type, or array of types, defined in the Schema's `type` keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor79\n   *\n   * @name Schema.validationKeywords.type\n   * @method\n   * @param {*} value Value to be validated.\n   * @param {Object} schema Schema containing the `type` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  type (value, schema, opts) {\n    let type = schema.type\n    let validType\n    // Can be one of several types\n    if (utils.isString(type)) {\n      type = [type]\n    }\n    // Try to match the value against an expected type\n    type.forEach(function (_type) {\n      // TODO: throw an error if type is not defined\n      if (types[_type](value, schema, opts)) {\n        // Matched a type\n        validType = _type\n        return false\n      }\n    })\n    // Value did not match any expected type\n    if (!validType) {\n      return makeError(value !== undefined && value !== null ? typeof value : '' + value, `one of (${type.join(', ')})`, opts)\n    }\n    // Run keyword validators for matched type\n    // http://json-schema.org/latest/json-schema-validation.html#anchor12\n    const validator = typeGroupValidators[validType]\n    if (validator) {\n      return validator(value, schema, opts)\n    }\n  },\n\n  /**\n   * Validates the provided array values are unique.\n   * Validation succeeds if the items in the array are unique, but only if the value of this keyword is true\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor49\n   *\n   * @name Schema.validationKeywords.uniqueItems\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {Object} schema Schema containing the `uniqueItems` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  uniqueItems (value, schema, opts) {\n    if (value && value.length && schema.uniqueItems) {\n      const length = value.length\n      let item, i, j\n      // Check n - 1 items\n      for (i = length - 1; i > 0; i--) {\n        item = value[i]\n        // Only compare against unchecked items\n        for (j = i - 1; j >= 0; j--) {\n          // Found a duplicate\n          if (utils.deepEqual(item, value[j])) {\n            return makeError(item, 'no duplicates', opts)\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * @ignore\n */\nconst validateKeyword = function (op, value, schema, opts) {\n  return schema[op] !== undefined && validationKeywords[op](value, schema, opts)\n}\n\n/**\n * @ignore\n */\nconst runOps = function (ops, value, schema, opts) {\n  let errors = []\n  ops.forEach(function (op) {\n    errors = errors.concat(validateKeyword(op, value, schema, opts) || [])\n  })\n  return errors.length ? errors : undefined\n}\n\nconst ANY_OPS = ['enum', 'type', 'allOf', 'anyOf', 'oneOf', 'not']\nconst ARRAY_OPS = ['items', 'maxItems', 'minItems', 'uniqueItems']\nconst NUMERIC_OPS = ['multipleOf', 'maximum', 'minimum']\nconst OBJECT_OPS = ['maxProperties', 'minProperties', 'required', 'properties', 'dependencies']\nconst STRING_OPS = ['maxLength', 'minLength', 'pattern']\n\n/**\n * http://json-schema.org/latest/json-schema-validation.html#anchor75\n * @ignore\n */\nconst validateAny = function (value, schema, opts) {\n  return runOps(ANY_OPS, value, schema, opts)\n}\n\n/**\n * Validates the provided value against a given Schema according to the http://json-schema.org/ v4 specification.\n *\n * @name Schema.validate\n * @method\n * @param {*} value Value to be validated.\n * @param {Object} schema Valid Schema according to the http://json-schema.org/ v4 specification.\n * @param {Object} [opts] Configuration options.\n * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n */\nconst validate = function (value, schema, opts) {\n  let errors = []\n  opts || (opts = {})\n  let shouldPop\n  let prevProp = opts.prop\n  if (schema === undefined) {\n    return\n  }\n  if (!utils.isObject(schema)) {\n    throw utils.err(`${DOMAIN}#validate`)(500, `Invalid schema at path: \"${opts.path}\"`)\n  }\n  if (opts.path === undefined) {\n    opts.path = []\n  }\n  // Track our location as we recurse\n  if (opts.prop !== undefined) {\n    shouldPop = true\n    opts.path.push(opts.prop)\n    opts.prop = undefined\n  }\n  // Validate against parent schema\n  if (schema['extends']) {\n    // opts.path = path\n    // opts.prop = prop\n    if (utils.isFunction(schema['extends'].validate)) {\n      errors = errors.concat(schema['extends'].validate(value, opts) || [])\n    } else {\n      errors = errors.concat(validate(value, schema['extends'], opts) || [])\n    }\n  }\n  if (value === undefined) {\n    // Check if property is required\n    if (schema.required === true && !opts.existingOnly) {\n      addError(value, 'a value', opts, errors)\n    }\n    if (shouldPop) {\n      opts.path.pop()\n      opts.prop = prevProp\n    }\n    return errors.length ? errors : undefined\n  }\n\n  errors = errors.concat(validateAny(value, schema, opts) || [])\n  if (shouldPop) {\n    opts.path.pop()\n    opts.prop = prevProp\n  }\n  return errors.length ? errors : undefined\n}\n\n// These strings are cached for optimal performance of the change detection\n// boolean - Whether a Record is changing in the current execution frame\nconst changingPath = 'changing'\n// string[] - Properties that have changed in the current execution frame\nconst changedPath = 'changed'\n// Object[] - History of change records\nconst changeHistoryPath = 'history'\n// boolean - Whether a Record is currently being instantiated\nconst creatingPath = 'creating'\n// number - The setTimeout change event id of a Record, if any\nconst eventIdPath = 'eventId'\n// boolean - Whether to skip validation for a Record's currently changing property\nconst noValidatePath = 'noValidate'\n// boolean - Whether to skip change notification for a Record's currently\n// changing property\nconst silentPath = 'silent'\nconst validationFailureMsg = 'validation failed'\n\n/**\n * Assemble a property descriptor which will be added to the prototype of\n * {@link Mapper#recordClass}. This method is called when\n * {@link Mapper#applySchema} is set to `true`.\n *\n * @ignore\n */\nconst makeDescriptor = function (prop, schema, opts) {\n  const descriptor = {\n    // Better to allow configurability, but at the user's own risk\n    configurable: true,\n    // These properties are enumerable by default, but regardless of their\n    // enumerability, they won't be \"own\" properties of individual records\n    enumerable: schema.enumerable === undefined ? true : !!schema.enumerable\n  }\n  // Cache a few strings for optimal performance\n  const keyPath = `props.${prop}`\n  const previousPath = `previous.${prop}`\n  const getter = opts.getter\n  const setter = opts.setter\n  const unsetter = opts.unsetter\n  const track = utils.isBoolean(opts.track) ? opts.track : schema.track\n\n  descriptor.get = function () {\n    return this._get(keyPath)\n  }\n\n  if (utils.isFunction(schema.get)) {\n    const originalGet = descriptor.get\n    descriptor.get = function () {\n      return schema.get.call(this, originalGet)\n    }\n  }\n\n  descriptor.set = function (value) {\n    // These are accessed a lot\n    const _get = this[getter]\n    const _set = this[setter]\n    const _unset = this[unsetter]\n\n    // Optionally check that the new value passes validation\n    if (!_get(noValidatePath)) {\n      const errors = schema.validate(value, { path: [prop] })\n      if (errors) {\n        // Immediately throw an error, preventing the record from getting into\n        // an invalid state\n        const error = new Error(validationFailureMsg)\n        error.errors = errors\n        throw error\n      }\n    }\n    // TODO: Make it so tracking can be turned on for all properties instead of\n    // only per-property\n    if (track && !_get(creatingPath)) {\n      const previous = _get(previousPath)\n      const current = _get(keyPath)\n      let changing = _get(changingPath)\n      let changed = _get(changedPath)\n\n      if (!changing) {\n        // Track properties that are changing in the current event loop\n        changed = []\n      }\n\n      // Add changing properties to this array once at most\n      const index = changed.indexOf(prop)\n      if (current !== value && index === -1) {\n        changed.push(prop)\n      }\n      if (previous === value) {\n        if (index >= 0) {\n          changed.splice(index, 1)\n        }\n      }\n      // No changes in current event loop\n      if (!changed.length) {\n        changing = false\n        _unset(changingPath)\n        _unset(changedPath)\n        // Cancel pending change event\n        if (_get(eventIdPath)) {\n          clearTimeout(_get(eventIdPath))\n          _unset(eventIdPath)\n        }\n      }\n      // Changes detected in current event loop\n      if (!changing && changed.length) {\n        _set(changedPath, changed)\n        _set(changingPath, true)\n        // Saving the timeout id allows us to batch all changes in the same\n        // event loop into a single \"change\"\n        // TODO: Optimize\n        _set(eventIdPath, setTimeout(() => {\n          // Previous event loop where changes were gathered has ended, so\n          // notify any listeners of those changes and prepare for any new\n          // changes\n          _unset(changedPath)\n          _unset(eventIdPath)\n          _unset(changingPath)\n          // TODO: Optimize\n          if (!_get(silentPath)) {\n            let i\n            for (i = 0; i < changed.length; i++) {\n              this.emit('change:' + changed[i], this, utils.get(this, changed[i]))\n            }\n            const changes = this.changes()\n            const changeRecord = utils.plainCopy(changes)\n            changeRecord.timestamp = new Date().getTime()\n            const changeHistory = _get(changeHistoryPath) || []\n            _set(changeHistoryPath, changeHistory)\n            changeHistory.push(changeRecord)\n            this.emit('change', this, changes)\n          }\n          _unset(silentPath)\n        }, 0))\n      }\n    }\n    _set(keyPath, value)\n    return value\n  }\n\n  if (utils.isFunction(schema.set)) {\n    const originalSet = descriptor.set\n    descriptor.set = function (value) {\n      return schema.set.call(this, value, originalSet)\n    }\n  }\n\n  return descriptor\n}\n\n/**\n * A map of validation functions grouped by type.\n *\n * @name Schema.typeGroupValidators\n * @type {Object}\n */\nconst typeGroupValidators = {\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an array.\n   * The validation keywords for the type `array` are:\n   *```\n   * ['items', 'maxItems', 'minItems', 'uniqueItems']\n   *```\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor25\n   *\n   * @name Schema.typeGroupValidators.array\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {Object} schema Schema containing at least one array keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  array: function (value, schema, opts) {\n    return runOps(ARRAY_OPS, value, schema, opts)\n  },\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an integer.\n   * The validation keywords for the type `integer` are:\n   *```\n   * ['multipleOf', 'maximum', 'minimum']\n   *```\n   * @name Schema.typeGroupValidators.integer\n   * @method\n   * @param {*} value Number to be validated.\n   * @param {Object} schema Schema containing at least one `integer` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  integer: function (value, schema, opts) {\n    // Additional validations for numerics are the same\n    return typeGroupValidators.numeric(value, schema, opts)\n  },\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an number.\n   * The validation keywords for the type `number` are:\n   *```\n   * ['multipleOf', 'maximum', 'minimum']\n   *```\n   * @name Schema.typeGroupValidators.number\n   * @method\n   * @param {*} value Number to be validated.\n   * @param {Object} schema Schema containing at least one `number` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  number: function (value, schema, opts) {\n    // Additional validations for numerics are the same\n    return typeGroupValidators.numeric(value, schema, opts)\n  },\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of a number or integer.\n   * The validation keywords for the type `numeric` are:\n   *```\n   * ['multipleOf', 'maximum', 'minimum']\n   *```\n   * See http://json-schema.org/latest/json-schema-validation.html#anchor13.\n   *\n   * @name Schema.typeGroupValidators.numeric\n   * @method\n   * @param {*} value Number to be validated.\n   * @param {Object} schema Schema containing at least one `numeric` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  numeric: function (value, schema, opts) {\n    return runOps(NUMERIC_OPS, value, schema, opts)\n  },\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an object.\n   * The validation keywords for the type `object` are:\n   *```\n   * ['maxProperties', 'minProperties', 'required', 'properties', 'dependencies']\n   *```\n   * See http://json-schema.org/latest/json-schema-validation.html#anchor53.\n   *\n   * @name Schema.typeGroupValidators.object\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {Object} schema Schema containing at least one `object` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  object: function (value, schema, opts) {\n    return runOps(OBJECT_OPS, value, schema, opts)\n  },\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an string.\n   * The validation keywords for the type `string` are:\n   *```\n   * ['maxLength', 'minLength', 'pattern']\n   *```\n   * See http://json-schema.org/latest/json-schema-validation.html#anchor25.\n   *\n   * @name Schema.typeGroupValidators.string\n   * @method\n   * @param {*} value String to be validated.\n   * @param {Object} schema Schema containing at least one `string` keyword.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  string: function (value, schema, opts) {\n    return runOps(STRING_OPS, value, schema, opts)\n  }\n}\n\n/**\n * js-data's Schema class.\n *\n * @example <caption>Schema#constructor</caption>\n * // Normally you would do:  import {Schema} from 'js-data'\n * const JSData = require('js-data@3.0.0-beta.7')\n * const {Schema} = JSData\n * console.log('Using JSData v' + JSData.version.full)\n *\n * const PostSchema = new Schema({\n *   type: 'object',\n *   properties: {\n *     title: { type: 'string' }\n *   }\n * })\n * PostSchema.validate({ title: 1234 })\n *\n * @class Schema\n * @extends Component\n * @param {Object} definition Schema definition according to json-schema.org\n */\nfunction Schema (definition) {\n  definition || (definition = {})\n  // TODO: schema validation\n  utils.fillIn(this, definition)\n\n  if (this.type === 'object' && this.properties) {\n    utils.forOwn(this.properties, (_definition, prop) => {\n      if (!(_definition instanceof Schema)) {\n        this.properties[prop] = new Schema(_definition)\n      }\n    })\n  }\n  if (this.type === 'array' && this.items && !(this.items instanceof Schema)) {\n    this.items = new Schema(this.items)\n  }\n  ['allOf', 'anyOf', 'oneOf'].forEach((validationKeyword) => {\n    if (this[validationKeyword]) {\n      this[validationKeyword].forEach((_definition, i) => {\n        if (!(_definition instanceof Schema)) {\n          this[validationKeyword][i] = new Schema(_definition)\n        }\n      })\n    }\n  })\n}\n\nexport default Component.extend({\n  constructor: Schema,\n\n  /**\n   * This adds ES5 getters/setters to the target based on the \"properties\" in\n   * this Schema, which makes possible change tracking and validation on\n   * property assignment.\n   *\n   * @name Schema#validate\n   * @method\n   * @param {Object} target The prototype to which to apply this schema.\n   */\n  apply (target, opts) {\n    opts || (opts = {})\n    opts.getter || (opts.getter = '_get')\n    opts.setter || (opts.setter = '_set')\n    opts.unsetter || (opts.unsetter = '_unset')\n    opts.track || (opts.track = this.track)\n    const properties = this.properties || {}\n    utils.forOwn(properties, function (schema, prop) {\n      Object.defineProperty(\n        target,\n        prop,\n        makeDescriptor(prop, schema, opts)\n      )\n    })\n  },\n\n  /**\n   * Validate the provided value against this schema.\n   *\n   * @name Schema#validate\n   * @method\n   * @param {*} value Value to validate.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  validate (value, opts) {\n    return validate(value, this, opts)\n  }\n}, {\n  typeGroupValidators,\n  types,\n  validate,\n  validationKeywords\n})\n\n/**\n * Create a subclass of this Schema:\n * @example <caption>Schema.extend</caption>\n * // Normally you would do: import {Schema} from 'js-data'\n * const JSData = require('js-data@3.0.0-beta.7')\n * const {Schema} = JSData\n * console.log('Using JSData v' + JSData.version.full)\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomSchemaClass extends Schema {\n *   foo () { return 'bar' }\n *   static beep () { return 'boop' }\n * }\n * const customSchema = new CustomSchemaClass()\n * console.log(customSchema.foo())\n * console.log(CustomSchemaClass.beep())\n *\n * // Extend the class using alternate method.\n * const OtherSchemaClass = Schema.extend({\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const otherSchema = new OtherSchemaClass()\n * console.log(otherSchema.foo())\n * console.log(OtherSchemaClass.beep())\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherSchemaClass () {\n *   Schema.call(this)\n *   this.created_at = new Date().getTime()\n * }\n * Schema.extend({\n *   constructor: AnotherSchemaClass,\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const anotherSchema = new AnotherSchemaClass()\n * console.log(anotherSchema.created_at)\n * console.log(anotherSchema.foo())\n * console.log(AnotherSchemaClass.beep())\n *\n * @method Schema.extend\n * @param {Object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {Object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {Object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Schema class.\n * @since 3.0.0\n */\n\n","import utils from './utils'\n\n// TODO: remove this when the rest of the project is cleaned\nexport const belongsToType = 'belongsTo'\nexport const hasManyType = 'hasMany'\nexport const hasOneType = 'hasOne'\n\nconst DOMAIN = 'Relation'\n\nexport function Relation (relatedMapper, options = {}) {\n  utils.classCallCheck(this, Relation)\n\n  options.type = this.constructor.TYPE_NAME\n  this.validateOptions(relatedMapper, options)\n\n  if (typeof relatedMapper === 'object') {\n    Object.defineProperty(this, 'relatedMapper', { value: relatedMapper })\n  }\n\n  Object.defineProperty(this, 'inverse', { writable: true })\n  utils.fillIn(this, options)\n}\n\nRelation.extend = utils.extend\n\nutils.addHiddenPropsToTarget(Relation.prototype, {\n  get canAutoAddLinks () {\n    return this.add === undefined || !!this.add\n  },\n\n  get relatedCollection () {\n    return this.mapper.datastore.getCollection(this.relation)\n  },\n\n  validateOptions (related, opts) {\n    const DOMAIN_ERR = `new ${DOMAIN}`\n\n    const localField = opts.localField\n    if (!localField) {\n      throw utils.err(DOMAIN_ERR, 'opts.localField')(400, 'string', localField)\n    }\n\n    const foreignKey = opts.foreignKey = opts.foreignKey || opts.localKey\n    if (!foreignKey && (opts.type === belongsToType || opts.type === hasOneType)) {\n      throw utils.err(DOMAIN_ERR, 'opts.foreignKey')(400, 'string', foreignKey)\n    }\n\n    if (utils.isString(related)) {\n      opts.relation = related\n      if (!utils.isFunction(opts.getRelation)) {\n        throw utils.err(DOMAIN_ERR, 'opts.getRelation')(400, 'function', opts.getRelation)\n      }\n    } else if (related) {\n      opts.relation = related.name\n    } else {\n      throw utils.err(DOMAIN_ERR, 'related')(400, 'Mapper or string', related)\n    }\n  },\n\n  assignTo (mapper) {\n    this.name = mapper.name\n    Object.defineProperty(this, 'mapper', { value: mapper })\n\n    mapper.relationList || Object.defineProperty(mapper, 'relationList', { value: [] })\n    mapper.relationFields || Object.defineProperty(mapper, 'relationFields', { value: [] })\n    mapper.relationList.push(this)\n    mapper.relationFields.push(this.localField)\n  },\n\n  canFindLinkFor () {\n    return !!(this.foreignKey || this.localKey)\n  },\n\n  getRelation () {\n    return this.relatedMapper\n  },\n\n  getForeignKey (record) {\n    return utils.get(record, this.mapper.idAttribute)\n  },\n\n  setForeignKey (record, relatedRecord) {\n    if (!record || !relatedRecord) {\n      return\n    }\n\n    this._setForeignKey(record, relatedRecord)\n  },\n\n  _setForeignKey (record, relatedRecords) {\n    const idAttribute = this.mapper.idAttribute\n\n    if (!utils.isArray(relatedRecords)) {\n      relatedRecords = [relatedRecords]\n    }\n\n    relatedRecords.forEach((relatedRecord) => {\n      utils.set(relatedRecord, this.foreignKey, utils.get(record, idAttribute))\n    })\n  },\n\n  getLocalField (record) {\n    return utils.get(record, this.localField)\n  },\n\n  setLocalField (record, relatedData) {\n    return utils.set(record, this.localField, relatedData)\n  },\n\n  getInverse (mapper) {\n    if (!this.inverse) {\n      this.findInverseRelation(mapper)\n    }\n\n    return this.inverse\n  },\n\n  findInverseRelation (mapper) {\n    this.getRelation().relationList.forEach((def) => {\n      if (def.getRelation() === mapper && this.isInversedTo(def)) {\n        this.inverse = def\n        return true\n      }\n    })\n  },\n\n  isInversedTo (def) {\n    return !def.foreignKey || def.foreignKey === this.foreignKey\n  },\n\n  addLinkedRecords (records) {\n    const datastore = this.mapper.datastore\n\n    records.forEach((record) => {\n      let relatedData = this.getLocalField(record)\n\n      if (utils.isFunction(this.add)) {\n        relatedData = this.add(datastore, this, record)\n      } else if (relatedData) {\n        relatedData = this.linkRecord(record, relatedData)\n      }\n\n      const isEmptyLinks = !relatedData || utils.isArray(relatedData) && !relatedData.length\n\n      if (isEmptyLinks && this.canFindLinkFor(record)) {\n        relatedData = this.findExistingLinksFor(record)\n      }\n\n      if (relatedData) {\n        this.setLocalField(record, relatedData)\n      }\n    })\n  },\n\n  removeLinkedRecords (relatedMapper, records) {\n    const localField = this.localField\n    records.forEach((record) => {\n      const relatedData = utils.get(record, localField)\n      this.unlinkInverseRecords(relatedData)\n      utils.set(record, localField, undefined)\n    })\n  },\n\n  unlinkInverseRecords (record) {\n    if (!record) {\n      return\n    }\n    utils.set(record, this.getInverse(this.mapper).localField, undefined)\n  },\n\n  linkRecord (record, relatedRecord) {\n    const relatedId = utils.get(relatedRecord, this.mapper.idAttribute)\n\n    if (relatedId === undefined) {\n      const unsaved = this.relatedCollection.unsaved()\n      if (unsaved.indexOf(relatedRecord) === -1) {\n        if (this.canAutoAddLinks) {\n          relatedRecord = this.relatedCollection.add(relatedRecord)\n        }\n      }\n    } else {\n      if (relatedRecord !== this.relatedCollection.get(relatedId)) {\n        this.setForeignKey(record, relatedRecord)\n\n        if (this.canAutoAddLinks) {\n          relatedRecord = this.relatedCollection.add(relatedRecord)\n        }\n      }\n    }\n\n    return relatedRecord\n  },\n\n  // e.g. user hasMany post via \"foreignKey\", so find all posts of user\n  findExistingLinksByForeignKey (id) {\n    return this.relatedCollection.filter({\n      [this.foreignKey]: id\n    })\n  }\n})\n","import utils from '../utils'\nimport { Relation } from '../Relation'\n\nexport const BelongsToRelation = Relation.extend({\n  getForeignKey (record) {\n    return utils.get(record, this.foreignKey)\n  },\n\n  _setForeignKey (record, relatedRecord) {\n    utils.set(record, this.foreignKey, utils.get(relatedRecord, this.getRelation().idAttribute))\n  },\n\n  findExistingLinksFor (record) {\n    // console.log('\\tBelongsTo#findExistingLinksFor', record)\n    if (!record) {\n      return\n    }\n    const relatedId = utils.get(record, this.foreignKey)\n    if (relatedId !== undefined) {\n      return this.relatedCollection.get(relatedId)\n    }\n  }\n}, {\n  TYPE_NAME: 'belongsTo'\n})\n","import utils from '../utils'\nimport { Relation } from '../Relation'\n\nexport const HasManyRelation = Relation.extend({\n  validateOptions (related, opts) {\n    Relation.prototype.validateOptions.call(this, related, opts)\n\n    const { localKeys, foreignKeys, foreignKey } = opts\n\n    if (!foreignKey && !localKeys && !foreignKeys) {\n      throw utils.err('new Relation', 'opts.<foreignKey|localKeys|foreignKeys>')(400, 'string', foreignKey)\n    }\n  },\n\n  canFindLinkFor (record) {\n    const hasForeignKeys = this.foreignKey || this.foreignKeys\n    return !!(hasForeignKeys || (this.localKeys && utils.get(record, this.localKeys)))\n  },\n\n  unlinkInverseRecords (records) {\n    if (!records) {\n      return\n    }\n    const localField = this.getInverse(this.mapper).localField\n    records.forEach(function (record) {\n      utils.set(record, localField, undefined)\n    })\n  },\n\n  linkRecord (record, relatedRecords) {\n    const relatedCollection = this.relatedCollection\n    const canAutoAddLinks = this.canAutoAddLinks\n    const foreignKey = this.foreignKey\n    const unsaved = this.relatedCollection.unsaved()\n\n    return relatedRecords.map((relatedRecord) => {\n      const relatedId = relatedCollection.recordId(relatedRecord)\n\n      if ((relatedId === undefined && unsaved.indexOf(relatedRecord) === -1) || relatedRecord !== relatedCollection.get(relatedId)) {\n        if (foreignKey) {\n          // TODO: slow, could be optimized? But user loses hook\n          this.setForeignKey(record, relatedRecord)\n        }\n        if (canAutoAddLinks) {\n          relatedRecord = relatedCollection.add(relatedRecord)\n        }\n      }\n\n      return relatedRecord\n    })\n  },\n\n  findExistingLinksFor (record) {\n    const id = utils.get(record, this.mapper.idAttribute)\n    const ids = this.localKeys ? utils.get(record, this.localKeys) : null\n    let records\n\n    if (id !== undefined && this.foreignKey) {\n      records = this.findExistingLinksByForeignKey(id)\n    } else if (this.localKeys && ids) {\n      records = this.findExistingLinksByLocalKeys(ids)\n    } else if (id !== undefined && this.foreignKeys) {\n      records = this.findExistingLinksByForeignKeys(id)\n    }\n\n    if (records && records.length) {\n      return records\n    }\n  },\n\n  // e.g. user hasMany group via \"foreignKeys\", so find all users of a group\n  findExistingLinksByLocalKeys (ids) {\n    return this.relatedCollection.filter({\n      where: {\n        [this.mapper.idAttribute]: {\n          'in': ids\n        }\n      }\n    })\n  },\n\n  // e.g. group hasMany user via \"localKeys\", so find all groups that own a user\n  findExistingLinksByForeignKeys (id) {\n    return this.relatedCollection.filter({\n      where: {\n        [this.foreignKeys]: {\n          'contains': id\n        }\n      }\n    })\n  }\n}, {\n  TYPE_NAME: 'hasMany'\n})\n","import utils from '../utils'\nimport { Relation } from '../Relation'\n\nexport const HasOneRelation = Relation.extend({\n  findExistingLinksFor (relatedMapper, record) {\n    const recordId = utils.get(record, relatedMapper.idAttribute)\n    const records = this.findExistingLinksByForeignKey(recordId)\n\n    if (records.length) {\n      return records[0]\n    }\n  }\n}, {\n  TYPE_NAME: 'hasOne'\n})\n","import { Relation } from './Relation'\nimport { BelongsToRelation } from './Relation/BelongsTo'\nimport { HasManyRelation } from './Relation/HasMany'\nimport { HasOneRelation } from './Relation/HasOne'\n\n[BelongsToRelation, HasManyRelation, HasOneRelation].forEach(function (RelationType) {\n  Relation[RelationType.TYPE_NAME] = function (related, options) {\n    return new RelationType(related, options)\n  }\n})\n\nexport { belongsToType, hasManyType, hasOneType, Relation } from './Relation'\n","import { Relation } from './relations'\n\nexport { belongsToType, hasManyType, hasOneType } from './relations'\n/**\n * BelongsTo relation decorator. You probably won't use this directly.\n *\n * @name module:js-data.belongsTo\n * @method\n * @param {Mapper} related The relation the target belongs to.\n * @param {Object} opts Configuration options.\n * @param {string} opts.foreignKey The field that holds the primary key of the\n * related record.\n * @param {string} opts.localField The field that holds a reference to the\n * related record object.\n * @returns {Function} Invocation function, which accepts the target as the only\n * parameter.\n */\nexport const belongsTo = function (related, opts) {\n  return function (mapper) {\n    Relation.belongsTo(related, opts).assignTo(mapper)\n  }\n}\n\n/**\n * HasMany relation decorator. You probably won't use this directly.\n *\n * @name module:js-data.hasMany\n * @method\n * @param {Mapper} related The relation of which the target has many.\n * @param {Object} opts Configuration options.\n * @param {string} [opts.foreignKey] The field that holds the primary key of the\n * related record.\n * @param {string} opts.localField The field that holds a reference to the\n * related record object.\n * @returns {Function} Invocation function, which accepts the target as the only\n * parameter.\n */\nexport const hasMany = function (related, opts) {\n  return function (mapper) {\n    Relation.hasMany(related, opts).assignTo(mapper)\n  }\n}\n\n/**\n * HasOne relation decorator. You probably won't use this directly.\n *\n * @name module:js-data.hasOne\n * @method\n * @param {Mapper} related The relation of which the target has one.\n * @param {Object} opts Configuration options.\n * @param {string} [opts.foreignKey] The field that holds the primary key of the\n * related record.\n * @param {string} opts.localField The field that holds a reference to the\n * related record object.\n * @returns {Function} Invocation function, which accepts the target as the only\n * parameter.\n */\nexport const hasOne = function (related, opts) {\n  return function (mapper) {\n    Relation.hasOne(related, opts).assignTo(mapper)\n  }\n}\n","import utils from './utils'\nimport Component from './Component'\nimport Record from './Record'\nimport Schema from './Schema'\nimport { Relation } from './relations'\nimport {\n  belongsTo,\n  belongsToType,\n  hasMany,\n  hasManyType,\n  hasOne,\n  hasOneType\n} from './decorators'\n\nconst DOMAIN = 'Mapper'\nconst validatingHooks = [\n  'beforeCreate',\n  'beforeCreateMany',\n  'beforeUpdate',\n  'beforeUpdateAll',\n  'beforeUpdateMany'\n]\nconst makeNotify = function (num) {\n  return function (...args) {\n    const opts = args[args.length - num]\n    const op = opts.op\n    this.dbg(op, ...args)\n\n    // Automatic validation\n    if (validatingHooks.indexOf(op) !== -1 && opts.validate !== false) {\n      // Save current value of option\n      const originalExistingOnly = opts.existingOnly\n\n      // For updates, ignore required fields if they aren't present\n      if (op.indexOf('beforeUpdate') === 0 && opts.existingOnly === undefined) {\n        opts.existingOnly = true\n      }\n      const errors = this.validate(args[op === 'beforeUpdate' ? 1 : 0], utils.pick(opts, ['existingOnly']))\n\n      // Restore option\n      opts.existingOnly = originalExistingOnly\n\n      // Abort lifecycle due to validation errors\n      if (errors) {\n        return utils.reject(errors)\n      }\n    }\n\n    // Emit lifecycle event\n    if (opts.notify || (opts.notify === undefined && this.notify)) {\n      setTimeout(() => {\n        this.emit(op, ...args)\n      })\n    }\n  }\n}\n\n// These are the default implementations of all of the lifecycle hooks\nconst notify = makeNotify(1)\nconst notify2 = makeNotify(2)\n\n// This object provides meta information used by Mapper#crud to actually\n// execute each lifecycle method\nconst LIFECYCLE_METHODS = {\n  count: {\n    defaults: [{}, {}],\n    skip: true,\n    types: []\n  },\n  destroy: {\n    defaults: [{}, {}],\n    skip: true,\n    types: []\n  },\n  destroyAll: {\n    defaults: [{}, {}],\n    skip: true,\n    types: []\n  },\n  find: {\n    defaults: [undefined, {}],\n    types: []\n  },\n  findAll: {\n    defaults: [{}, {}],\n    types: []\n  },\n  sum: {\n    defaults: [undefined, {}, {}],\n    skip: true,\n    types: []\n  },\n  update: {\n    adapterArgs (mapper, id, props, opts) {\n      return [id, mapper.toJSON(props, opts), opts]\n    },\n    beforeAssign: 1,\n    defaults: [undefined, {}, {}],\n    types: []\n  },\n  updateAll: {\n    adapterArgs (mapper, props, query, opts) {\n      return [mapper.toJSON(props, opts), query, opts]\n    },\n    beforeAssign: 0,\n    defaults: [{}, {}, {}],\n    types: []\n  },\n  updateMany: {\n    adapterArgs (mapper, records, opts) {\n      return [records.map(function (record) {\n        return mapper.toJSON(record, opts)\n      }), opts]\n    },\n    beforeAssign: 0,\n    defaults: [[], {}],\n    types: []\n  }\n}\n\nconst MAPPER_DEFAULTS = {\n  /**\n   * Hash of registered adapters. Don't modify directly. Use\n   * {@link Mapper#registerAdapter} instead.\n   *\n   * @default {}\n   * @name Mapper#_adapters\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  _adapters: {},\n\n  /**\n   * Whether to augment {@link Mapper#recordClass} with ES5 getters and setters\n   * according to the properties defined in {@link Mapper#schema}. This makes\n   * possible validation and change tracking on individual properties\n   * when using the dot (e.g. `user.name = \"Bob\"`) operator to modify a\n   * property, and is `true` by default.\n   *\n   * @default true\n   * @name Mapper#applySchema\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  applySchema: true,\n\n  /**\n   * The name of the registered adapter that this Mapper should used by default.\n   *\n   * @default \"http\"\n   * @name Mapper#defaultAdapter\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   * @type {string}\n   */\n  defaultAdapter: 'http',\n\n  /**\n   * The field used as the unique identifier on records handled by this Mapper.\n   *\n   * @default id\n   * @name Mapper#idAttribute\n   * @since 3.0.0\n   * @type {string}\n   */\n  idAttribute: 'id',\n\n  /**\n   * Whether this Mapper should emit operational events.\n   *\n   * @default true\n   * @name Mapper#notify\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  notify: true,\n\n  /**\n   * Whether {@link Mapper#create}, {@link Mapper#createMany},\n   * {@link Mapper#update}, {@link Mapper#updateAll}, {@link Mapper#updateMany},\n   * {@link Mapper#find}, {@link Mapper#findAll}, {@link Mapper#destroy},\n   * {@link Mapper#destroyAll}, {@link Mapper#count}, and {@link Mapper#sum}\n   * should return a raw result object that contains both the instance data\n   * returned by the adapter _and_ metadata about the operation.\n   *\n   * The default is to NOT return the result object, and instead return just the\n   * instance data.\n   *\n   * @default false\n   * @name Mapper#raw\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  raw: false\n}\n\n/**\n * The core of JSData's [ORM/ODM][orm] implementation. Given a minimum amout of\n * meta information about a resource, a Mapper can perform generic CRUD\n * operations against that resource. Apart from its configuration, a Mapper is\n * stateless. The particulars of various persistence layers have been abstracted\n * into adapters, which a Mapper uses to perform its operations.\n *\n * The term \"Mapper\" comes from the [Data Mapper Pattern][pattern] described in\n * Martin Fowler's [Patterns of Enterprise Application Architecture][book]. A\n * Data Mapper moves data between [in-memory object instances][record] and a\n * relational or document-based database. JSData's Mapper can work with any\n * persistence layer you can write an adapter for.\n *\n * _(\"Model\" is a heavily overloaded term and is avoided in this documentation\n * to prevent confusion.)_\n *\n * [orm]: https://en.wikipedia.org/wiki/Object-relational_mapping\n * [pattern]: https://en.wikipedia.org/wiki/Data_mapper_pattern\n * [book]: http://martinfowler.com/books/eaa.html\n * [record]: Record.html\n *\n * @example\n * // Import and instantiate\n * import {Mapper} from 'js-data'\n * const UserMapper = new Mapper({ name: 'user' })\n *\n * @example\n * // Define a Mapper using the Container component\n * import {Container} from 'js-data'\n * const store = new Container()\n * store.defineMapper('user')\n *\n * @class Mapper\n * @extends Component\n * @param {Object} opts Configuration options.\n * @param {boolean} [opts.applySchema=true] See {@link Mapper#applySchema}.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @param {string} [opts.defaultAdapter=http] See {@link Mapper#defaultAdapter}.\n * @param {string} [opts.idAttribute=id] See {@link Mapper#idAttribute}.\n * @param {Object} [opts.methods] See {@link Mapper#methods}.\n * @param {string} opts.name See {@link Mapper#name}.\n * @param {boolean} [opts.notify] See {@link Mapper#notify}.\n * @param {boolean} [opts.raw=false] See {@link Mapper#raw}.\n * @param {Function|boolean} [opts.recordClass] See {@link Mapper#recordClass}.\n * @param {Object|Schema} [opts.schema] See {@link Mapper#schema}.\n * @returns {Mapper} A new {@link Mapper} instance.\n * @see http://www.js-data.io/v3.0/docs/components-of-jsdata#mapper\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#mapper\",\"Components of JSData: Mapper\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/modeling-your-data\",\"Modeling your data\"]\n */\nfunction Mapper (opts) {\n  utils.classCallCheck(this, Mapper)\n  Component.call(this)\n  opts || (opts = {})\n\n  // Prepare certain properties to be non-enumerable\n  Object.defineProperties(this, {\n    _adapters: {\n      value: undefined,\n      writable: true\n    },\n\n    /**\n     * The {@link Container} that holds this Mapper. __Do not modify.__\n     *\n     * @name Mapper#lifecycleMethods\n     * @since 3.0.0\n     * @type {Object}\n     */\n    datastore: {\n      value: undefined,\n      writable: true\n    },\n\n    /**\n     * The meta information describing this Mapper's available lifecycle\n     * methods. __Do not modify.__\n     *\n     * @name Mapper#lifecycleMethods\n     * @since 3.0.0\n     * @type {Object}\n     */\n    lifecycleMethods: {\n      value: LIFECYCLE_METHODS\n    },\n\n    /**\n     * Set to `false` to force the Mapper to work with POJO objects only.\n     *\n     * @example\n     * // Use POJOs only.\n     * import {Mapper, Record} from 'js-data'\n     * const UserMapper = new Mapper({ recordClass: false })\n     * UserMapper.recordClass // false\n     * const user = UserMapper#createRecord()\n     * user instanceof Record // false\n     *\n     * @example\n     * // Set to a custom class to have records wrapped in your custom class.\n     * import {Mapper, Record} from 'js-data'\n     *  // Custom class\n     * class User {\n     *   constructor (props = {}) {\n     *     for (var key in props) {\n     *       if (props.hasOwnProperty(key)) {\n     *         this[key] = props[key]\n     *       }\n     *     }\n     *   }\n     * }\n     * const UserMapper = new Mapper({ recordClass: User })\n     * UserMapper.recordClass // function User() {}\n     * const user = UserMapper#createRecord()\n     * user instanceof Record // false\n     * user instanceof User // true\n     *\n     *\n     * @example\n     * // Extend the {@link Record} class.\n     * import {Mapper, Record} from 'js-data'\n     *  // Custom class\n     * class User extends Record {\n     *   constructor () {\n     *     super(props)\n     *   }\n     * }\n     * const UserMapper = new Mapper({ recordClass: User })\n     * UserMapper.recordClass // function User() {}\n     * const user = UserMapper#createRecord()\n     * user instanceof Record // true\n     * user instanceof User // true\n     *\n     * @name Mapper#recordClass\n     * @default {@link Record}\n     * @see Record\n     * @since 3.0.0\n     */\n    recordClass: {\n      value: undefined,\n      writable: true\n    },\n\n    /**\n     * This Mapper's {@link Schema}.\n     *\n     * @example <caption>Mapper#schema</caption>\n     * // Normally you would do: import {Mapper} from 'js-data'\n     * const JSData = require('js-data@3.0.0-beta.7')\n     * const {Mapper} = JSData\n     * console.log('Using JSData v' + JSData.version.full)\n     *\n     * const UserMapper = new Mapper({\n     *   name: 'user',\n     *   schema: {\n     *     properties: {\n     *       id: { type: 'number' },\n     *       first: { type: 'string', track: true },\n     *       last: { type: 'string', track: true },\n     *       role: { type: 'string', track: true, required: true },\n     *       age: { type: 'integer', track: true },\n     *       is_active: { type: 'number' }\n     *     }\n     *   }\n     * })\n     * const user = UserMapper.createRecord({\n     *   id: 1,\n     *   name: 'John',\n     *   role: 'admin'\n     * })\n     * user.on('change', function (user, changes) {\n     *   console.log(changes)\n     * })\n     * user.on('change:role', function (user, value) {\n     *   console.log('change:role - ' + value)\n     * })\n     * user.role = 'owner'\n     *\n     * @name Mapper#schema\n     * @see Schema\n     * @since 3.0.0\n     * @type {Schema}\n     */\n    schema: {\n      value: undefined,\n      writable: true\n    }\n  })\n\n  // Apply user-provided configuration\n  utils.fillIn(this, opts)\n  // Fill in any missing options with the defaults\n  utils.fillIn(this, utils.copy(MAPPER_DEFAULTS))\n\n  /**\n   * The name for this Mapper. This is the minimum amount of meta information\n   * required for a Mapper to be able to execute CRUD operations for a\n   * Resource.\n   *\n   * @name Mapper#name\n   * @since 3.0.0\n   * @type {string}\n   */\n  if (!this.name) {\n    throw utils.err(`new ${DOMAIN}`, 'opts.name')(400, 'string', this.name)\n  }\n\n  // Setup schema, with an empty default schema if necessary\n  if (this.schema) {\n    this.schema.type || (this.schema.type = 'object')\n  }\n  if (!(this.schema instanceof Schema)) {\n    this.schema = new Schema(this.schema || { type: 'object' })\n  }\n\n  // Create a subclass of Record that's tied to this Mapper\n  if (this.recordClass === undefined) {\n    const superClass = Record\n    this.recordClass = superClass.extend({\n      constructor: (function Record () {\n        var subClass = function Record (props, opts) {\n          utils.classCallCheck(this, subClass)\n          superClass.call(this, props, opts)\n        }\n        return subClass\n      })()\n    })\n  }\n\n  if (this.recordClass) {\n    this.recordClass.mapper = this\n\n    /**\n     * Functions that should be added to the prototype of {@link Mapper#recordClass}.\n     *\n     * @name Mapper#methods\n     * @since 3.0.0\n     * @type {Object}\n     */\n    if (utils.isObject(this.methods)) {\n      utils.addHiddenPropsToTarget(this.recordClass.prototype, this.methods)\n    }\n\n    // We can only apply the schema to the prototype of this.recordClass if the\n    // class extends Record\n    if (utils.getSuper(this.recordClass, true) === Record && this.schema && this.schema.apply && this.applySchema) {\n      this.schema.apply(this.recordClass.prototype)\n    }\n  }\n}\n\nexport default Component.extend({\n  constructor: Mapper,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#count}. If this method\n   * returns a promise then {@link Mapper#count} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterCount\n   * @param {Object} query The `query` argument passed to {@link Mapper#count}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#count}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterCount: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#create}. If this method\n   * returns a promise then {@link Mapper#create} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterCreate\n   * @param {Object} props The `props` argument passed to {@link Mapper#create}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#create}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterCreate: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#createMany}. If this method\n   * returns a promise then {@link Mapper#createMany} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterCreateMany\n   * @param {Array} records The `records` argument passed to {@link Mapper#createMany}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#createMany}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterCreateMany: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#destroy}. If this method\n   * returns a promise then {@link Mapper#destroy} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterDestroy\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#destroy}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#destroy}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterDestroy: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#destroyAll}. If this method\n   * returns a promise then {@link Mapper#destroyAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterDestroyAll\n   * @param {*} data The `data` returned by the adapter.\n   * @param {query} query The `query` argument passed to {@link Mapper#destroyAll}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#destroyAll}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterDestroyAll: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#find}. If this method\n   * returns a promise then {@link Mapper#find} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterFind\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#find}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#find}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterFind: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#findAll}. If this method\n   * returns a promise then {@link Mapper#findAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterFindAll\n   * @param {Object} query The `query` argument passed to {@link Mapper#findAll}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#findAll}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterFindAll: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#sum}. If this method\n   * returns a promise then {@link Mapper#sum} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterSum\n   * @param {Object} query The `query` argument passed to {@link Mapper#sum}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#sum}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterSum: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#update}. If this method\n   * returns a promise then {@link Mapper#update} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterUpdate\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#update}.\n   * @param {props} props The `props` argument passed to {@link Mapper#update}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#update}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterUpdate: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#updateAll}. If this method\n   * returns a promise then {@link Mapper#updateAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterUpdateAll\n   * @param {Object} props The `props` argument passed to {@link Mapper#updateAll}.\n   * @param {Object} query The `query` argument passed to {@link Mapper#updateAll}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#updateAll}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterUpdateAll: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#updateMany}. If this method\n   * returns a promise then {@link Mapper#updateMany} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterUpdateMany\n   * @param {Array} records The `records` argument passed to {@link Mapper#updateMany}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#updateMany}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterUpdateMany: notify2,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#create}. If this method\n   * returns a promise then {@link Mapper#create} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeCreate\n   * @param {Object} props The `props` argument passed to {@link Mapper#create}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#create}.\n   * @since 3.0.0\n   */\n  beforeCreate: notify,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#createMany}. If this method\n   * returns a promise then {@link Mapper#createMany} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeCreateMany\n   * @param {Array} records The `records` argument passed to {@link Mapper#createMany}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#createMany}.\n   * @since 3.0.0\n   */\n  beforeCreateMany: notify,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#count}. If this method\n   * returns a promise then {@link Mapper#count} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeCount\n   * @param {Object} query The `query` argument passed to {@link Mapper#count}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#count}.\n   * @since 3.0.0\n   */\n  beforeCount: notify,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#destroy}. If this method\n   * returns a promise then {@link Mapper#destroy} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeDestroy\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#destroy}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#destroy}.\n   * @since 3.0.0\n   */\n  beforeDestroy: notify,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#destroyAll}. If this method\n   * returns a promise then {@link Mapper#destroyAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeDestroyAll\n   * @param {query} query The `query` argument passed to {@link Mapper#destroyAll}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#destroyAll}.\n   * @since 3.0.0\n   */\n  beforeDestroyAll: notify,\n\n  /**\n   * Mappers lifecycle hook called by {@link Mapper#find}. If this method\n   * returns a promise then {@link Mapper#find} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeFind\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#find}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#find}.\n   * @since 3.0.0\n   */\n  beforeFind: notify,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#findAll}. If this method\n   * returns a promise then {@link Mapper#findAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeFindAll\n   * @param {Object} query The `query` argument passed to {@link Mapper#findAll}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#findAll}.\n   * @since 3.0.0\n   */\n  beforeFindAll: notify,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#sum}. If this method\n   * returns a promise then {@link Mapper#sum} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeSum\n   * @param {string} field The `field` argument passed to {@link Mapper#sum}.\n   * @param {Object} query The `query` argument passed to {@link Mapper#sum}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#sum}.\n   * @since 3.0.0\n   */\n  beforeSum: notify,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#update}. If this method\n   * returns a promise then {@link Mapper#update} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeUpdate\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#update}.\n   * @param {props} props The `props` argument passed to {@link Mapper#update}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#update}.\n   * @since 3.0.0\n   */\n  beforeUpdate: notify,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#updateAll}. If this method\n   * returns a promise then {@link Mapper#updateAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeUpdateAll\n   * @param {Object} props The `props` argument passed to {@link Mapper#updateAll}.\n   * @param {Object} query The `query` argument passed to {@link Mapper#updateAll}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#updateAll}.\n   * @since 3.0.0\n   */\n  beforeUpdateAll: notify,\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#updateMany}. If this method\n   * returns a promise then {@link Mapper#updateMany} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeUpdateMany\n   * @param {Array} records The `records` argument passed to {@link Mapper#updateMany}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#updateMany}.\n   * @since 3.0.0\n   */\n  beforeUpdateMany: notify,\n\n  /**\n   * This method is called at the end of most lifecycle methods. It does the\n   * following:\n   *\n   * 1. If `opts.raw` is `true`, add this Mapper's configuration to the `opts`\n   * argument as metadata for the operation.\n   * 2. Wrap the result data appropriately using {@link Mapper#wrap}, which\n   * calls {@link Mapper#createRecord}.\n   *\n   * @method Mapper#_end\n   * @private\n   * @since 3.0.0\n   */\n  _end (result, opts, skip) {\n    if (opts.raw) {\n      utils._(result, opts)\n    }\n    if (skip) {\n      return result\n    }\n    let _data = opts.raw ? result.data : result\n    if (_data && utils.isFunction(this.wrap)) {\n      _data = this.wrap(_data, opts)\n      if (opts.raw) {\n        result.data = _data\n      } else {\n        result = _data\n      }\n    }\n    return result\n  },\n\n  /**\n   * Define a belongsTo relationship. Only useful if you're managing your\n   * Mappers manually and not using a Container or DataStore component.\n   *\n   * @example\n   * PostMapper.belongsTo(UserMapper, {\n   *   // post.user_id points to user.id\n   *   foreignKey: 'user_id'\n   *   // user records will be attached to post records at \"post.user\"\n   *   localField: 'user'\n   * })\n   *\n   * CommentMapper.belongsTo(UserMapper, {\n   *   // comment.user_id points to user.id\n   *   foreignKey: 'user_id'\n   *   // user records will be attached to comment records at \"comment.user\"\n   *   localField: 'user'\n   * })\n   * CommentMapper.belongsTo(PostMapper, {\n   *   // comment.post_id points to post.id\n   *   foreignKey: 'post_id'\n   *   // post records will be attached to comment records at \"comment.post\"\n   *   localField: 'post'\n   * })\n   *\n   * @method Mapper#belongsTo\n   * @see http://www.js-data.io/v3.0/docs/relations\n   * @since 3.0.0\n   */\n  belongsTo (relatedMapper, opts) {\n    return belongsTo(relatedMapper, opts)(this)\n  },\n\n  /**\n   * Select records according to the `query` argument and return the count.\n   *\n   * {@link Mapper#beforeCount} will be called before calling the adapter.\n   * {@link Mapper#afterCount} will be called after calling the adapter.\n   *\n   * @example\n   * // Get the number of published blog posts\n   * PostMapper.count({ status: 'published' }).then((numPublished) => {\n   *   console.log(numPublished) // e.g. 45\n   * })\n   *\n   * @method Mapper#count\n   * @param {Object} [query={}] Selection query. See {@link query}.\n   * @param {Object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {Object} [opts] Configuration options. Refer to the `count` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves with the count of the selected records.\n   * @since 3.0.0\n   */\n  count (query, opts) {\n    return this.crud('count', query, opts)\n  },\n\n  /**\n   * Fired during {@link Mapper#create}. See\n   * {@link Mapper~beforeCreateListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeCreate\n   * @see Mapper~beforeCreateListener\n   * @see Mapper#create\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeCreate} event.\n   *\n   * @example\n   * function onBeforeCreate (props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreate', onBeforeCreate)\n   *\n   * @callback Mapper~beforeCreateListener\n   * @param {Object} props The `props` argument passed to {@link Mapper#beforeCreate}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#beforeCreate}.\n   * @see Mapper#event:beforeCreate\n   * @see Mapper#create\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#create}. See\n   * {@link Mapper~afterCreateListener} for how to listen for this event.\n   *\n   * @event Mapper#afterCreate\n   * @see Mapper~afterCreateListener\n   * @see Mapper#create\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterCreate} event.\n   *\n   * @example\n   * function onAfterCreate (props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreate', onAfterCreate)\n   *\n   * @callback Mapper~afterCreateListener\n   * @param {Object} props The `props` argument passed to {@link Mapper#afterCreate}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#afterCreate}.\n   * @param {Object} result The `result` argument passed to {@link Mapper#afterCreate}.\n   * @see Mapper#event:afterCreate\n   * @see Mapper#create\n   * @since 3.0.0\n   */\n  /**\n   * Create and save a new the record using the provided `props`.\n   *\n   * {@link Mapper#beforeCreate} will be called before calling the adapter.\n   * {@link Mapper#afterCreate} will be called after calling the adapter.\n   *\n   * @example\n   * // Create and save a new blog post\n   * PostMapper.create({\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }).then((post) => {\n   *   console.log(post) // { id: 1234, status: 'draft', ... }\n   * })\n   *\n   * @fires Mapper#beforeCreate\n   * @fires Mapper#afterCreate\n   * @method Mapper#create\n   * @param {Object} props The properties for the new record.\n   * @param {Object} [opts] Configuration options. Refer to the `create` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @param {string[]} [opts.with=[]] Relations to create in a cascading\n   * create if `props` contains nested relations. NOT performed in a\n   * transaction. Each nested create will result in another {@link Mapper#create}\n   * or {@link Mapper#createMany} call.\n   * @param {string[]} [opts.pass=[]] Relations to send to the adapter as part\n   * of the payload. Normally relations are not sent.\n   * @returns {Promise} Resolves with the created record.\n   * @since 3.0.0\n   */\n  create (props, opts) {\n    let op, adapter\n    // Default values for arguments\n    props || (props = {})\n    opts || (opts = {})\n    const originalRecord = props\n\n    // Fill in \"opts\" with the Mapper's configuration\n    utils._(opts, this)\n    adapter = opts.adapter = this.getAdapterName(opts)\n\n    // beforeCreate lifecycle hook\n    op = opts.op = 'beforeCreate'\n    return utils.resolve(this[op](props, opts)).then((_props) => {\n      // Allow for re-assignment from lifecycle hook\n      props = _props === undefined ? props : _props\n\n      // Deep pre-create belongsTo relations\n      const belongsToRelationData = {}\n      opts.with || (opts.with = [])\n      let tasks = []\n      utils.forEachRelation(this, opts, (def, optsCopy) => {\n        const relationData = def.getLocalField(props)\n        const relatedMapper = def.getRelation()\n        const relatedIdAttribute = relatedMapper.idAttribute\n        optsCopy.raw = false\n        if (!relationData) {\n          return\n        }\n        if (def.type === belongsToType) {\n          // Create belongsTo relation first because we need a generated id to\n          // attach to the child\n          tasks.push(relatedMapper.create(relationData, optsCopy).then((data) => {\n            def.setLocalField(belongsToRelationData, data)\n            def.setForeignKey(props, data)\n          }))\n        } else if (def.type === hasManyType && def.localKeys) {\n          // Create his hasMany relation first because it uses localKeys\n          tasks.push(relatedMapper.createMany(relationData, optsCopy).then((data) => {\n            def.setLocalField(belongsToRelationData, data)\n            utils.set(props, def.localKeys, data.map((record) => utils.get(record, relatedIdAttribute)))\n          }))\n        }\n      })\n      return utils.Promise.all(tasks).then(() => {\n        // Now delegate to the adapter for the main create\n        op = opts.op = 'create'\n        this.dbg(op, props, opts)\n        return utils.resolve(this.getAdapter(adapter)[op](this, this.toJSON(props, { with: opts.pass || [] }), opts))\n      }).then((result) => {\n        const createdRecordData = opts.raw ? result.data : result\n\n        // Deep post-create hasMany and hasOne relations\n        tasks = []\n        utils.forEachRelation(this, opts, (def, optsCopy) => {\n          const relationData = def.getLocalField(props)\n          if (!relationData) {\n            return\n          }\n          optsCopy.raw = false\n          let task\n          // Create hasMany and hasOne after the main create because we needed\n          // a generated id to attach to these items\n          if (def.type === hasManyType && def.foreignKey) {\n            def.setForeignKey(createdRecordData, relationData)\n            task = def.getRelation().createMany(relationData, optsCopy).then((result) => {\n              def.setLocalField(createdRecordData, result)\n            })\n          } else if (def.type === hasOneType) {\n            def.setForeignKey(createdRecordData, relationData)\n            task = def.getRelation().create(relationData, optsCopy).then((result) => {\n              def.setLocalField(createdRecordData, result)\n            })\n          } else if (def.type === belongsToType && def.getLocalField(belongsToRelationData)) {\n            def.setLocalField(createdRecordData, def.getLocalField(belongsToRelationData))\n          } else if (def.type === hasManyType && def.localKeys && def.getLocalField(belongsToRelationData)) {\n            def.setLocalField(createdRecordData, def.getLocalField(belongsToRelationData))\n          }\n          if (task) {\n            tasks.push(task)\n          }\n        })\n        return utils.Promise.all(tasks).then(() => {\n          utils.set(originalRecord, createdRecordData, { silent: true })\n          if (utils.isFunction(originalRecord.commit)) {\n            originalRecord.commit()\n          }\n          if (opts.raw) {\n            result.data = originalRecord\n          } else {\n            result = originalRecord\n          }\n          return result\n        })\n      })\n    }).then((result) => {\n      result = this._end(result, opts)\n      // afterCreate lifecycle hook\n      op = opts.op = 'afterCreate'\n      return utils.resolve(this[op](props, opts, result)).then((_result) => {\n        // Allow for re-assignment from lifecycle hook\n        return _result === undefined ? result : _result\n      })\n    })\n  },\n\n  /**\n   * Use {@link Mapper#createRecord} instead.\n   * @deprecated\n   * @method Mapper#createInstance\n   * @param {Object|Array} props See {@link Mapper#createRecord}.\n   * @param {Object} [opts] See {@link Mapper#createRecord}.\n   * @returns {Object|Array} See {@link Mapper#createRecord}.\n   * @see Mapper#createRecord\n   * @since 3.0.0\n   */\n  createInstance (props, opts) {\n    return this.createRecord(props, opts)\n  },\n\n  /**\n   * Fired during {@link Mapper#createMany}. See\n   * {@link Mapper~beforeCreateManyListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeCreateMany\n   * @see Mapper~beforeCreateManyListener\n   * @see Mapper#createMany\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeCreateMany} event.\n   *\n   * @example\n   * function onBeforeCreateMany (records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreateMany', onBeforeCreateMany)\n   *\n   * @callback Mapper~beforeCreateManyListener\n   * @param {Object} records The `records` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeCreateMany}.\n   * @see Mapper#event:beforeCreateMany\n   * @see Mapper#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#createMany}. See\n   * {@link Mapper~afterCreateManyListener} for how to listen for this event.\n   *\n   * @event Mapper#afterCreateMany\n   * @see Mapper~afterCreateManyListener\n   * @see Mapper#createMany\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterCreateMany} event.\n   *\n   * @example\n   * function onAfterCreateMany (records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreateMany', onAfterCreateMany)\n   *\n   * @callback Mapper~afterCreateManyListener\n   * @param {Object} records The `records` argument received by {@link Mapper#afterCreateMany}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterCreateMany}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterCreateMany}.\n   * @see Mapper#event:afterCreateMany\n   * @see Mapper#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Given an array of records, batch create them via an adapter.\n   *\n   * {@link Mapper#beforeCreateMany} will be called before calling the adapter.\n   * {@link Mapper#afterCreateMany} will be called after calling the adapter.\n   *\n   * @example\n   * // Create and save several new blog posts\n   * PostMapper.createMany([{\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }, {\n   *   title: 'Reading data',\n   *   status: 'draft'\n   * }]).then((posts) => {\n   *   console.log(posts[0]) // { id: 1234, status: 'draft', ... }\n   *   console.log(posts[1]) // { id: 1235, status: 'draft', ... }\n   * })\n   *\n   * @fires Mapper#beforeCreate\n   * @fires Mapper#afterCreate\n   * @method Mapper#createMany\n   * @param {Record[]} records Array of records to be created in one batch.\n   * @param {Object} [opts] Configuration options. Refer to the `createMany`\n   * method of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @param {string[]} [opts.with=[]] Relations to create in a cascading\n   * create if `records` contains nested relations. NOT performed in a\n   * transaction. Each nested create will result in another {@link Mapper#createMany}\n   * call.\n   * @param {string[]} [opts.pass=[]] Relations to send to the adapter as part\n   * of the payload. Normally relations are not sent.\n   * @returns {Promise} Resolves with the created records.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  createMany (records, opts) {\n    let op, adapter\n    // Default values for arguments\n    records || (records = [])\n    opts || (opts = {})\n    const originalRecords = records\n\n    // Fill in \"opts\" with the Mapper's configuration\n    utils._(opts, this)\n    adapter = opts.adapter = this.getAdapterName(opts)\n\n    // beforeCreateMany lifecycle hook\n    op = opts.op = 'beforeCreateMany'\n    return utils.resolve(this[op](records, opts)).then((_records) => {\n      // Allow for re-assignment from lifecycle hook\n      records = _records === undefined ? records : _records\n\n      // Deep pre-create belongsTo relations\n      const belongsToRelationData = {}\n      opts.with || (opts.with = [])\n      let tasks = []\n      utils.forEachRelation(this, opts, (def, optsCopy) => {\n        const relationData = records\n          .map((record) => def.getLocalField(record))\n          .filter((relatedRecord) => relatedRecord)\n        if (def.type === belongsToType && relationData.length === records.length) {\n          // Create belongsTo relation first because we need a generated id to\n          // attach to the child\n          tasks.push(def.getRelation().createMany(relationData, optsCopy).then((data) => {\n            const relatedRecords = optsCopy.raw ? data.data : data\n            def.setLocalField(belongsToRelationData, relatedRecords)\n            records.forEach((record, i) => {\n              def.setForeignKey(record, relatedRecords[i])\n            })\n          }))\n        }\n      })\n      return utils.Promise.all(tasks).then(() => {\n        // Now delegate to the adapter\n        op = opts.op = 'createMany'\n        const json = records.map((record) => this.toJSON(record, { with: opts.pass || [] }))\n        this.dbg(op, records, opts)\n        return utils.resolve(this.getAdapter(adapter)[op](this, json, opts))\n      }).then((result) => {\n        const createdRecordsData = opts.raw ? result.data : result\n\n        // Deep post-create hasOne relations\n        tasks = []\n        utils.forEachRelation(this, opts, (def, optsCopy) => {\n          const relationData = records\n            .map((record) => def.getLocalField(record))\n            .filter((relatedRecord) => relatedRecord)\n          if (relationData.length !== records.length) {\n            return\n          }\n          const belongsToData = def.getLocalField(belongsToRelationData)\n          let task\n          // Create hasMany and hasOne after the main create because we needed\n          // a generated id to attach to these items\n          if (def.type === hasManyType) {\n            // Not supported\n            this.log('warn', 'deep createMany of hasMany type not supported!')\n          } else if (def.type === hasOneType) {\n            createdRecordsData.forEach((createdRecordData, i) => {\n              def.setForeignKey(createdRecordData, relationData[i])\n            })\n            task = def.getRelation().createMany(relationData, optsCopy).then((result) => {\n              const relatedData = opts.raw ? result.data : result\n              createdRecordsData.forEach((createdRecordData, i) => {\n                def.setLocalField(createdRecordData, relatedData[i])\n              })\n            })\n          } else if (def.type === belongsToType && belongsToData && belongsToData.length === createdRecordsData.length) {\n            createdRecordsData.forEach((createdRecordData, i) => {\n              def.setLocalField(createdRecordData, belongsToData[i])\n            })\n          }\n          if (task) {\n            tasks.push(task)\n          }\n        })\n        return utils.Promise.all(tasks).then(() => {\n          createdRecordsData.forEach((createdRecordData, i) => {\n            const originalRecord = originalRecords[i]\n            utils.set(originalRecord, createdRecordData, { silent: true })\n            if (utils.isFunction(originalRecord.commit)) {\n              originalRecord.commit()\n            }\n          })\n          if (opts.raw) {\n            result.data = originalRecords\n          } else {\n            result = originalRecords\n          }\n          return result\n        })\n      })\n    }).then((result) => {\n      result = this._end(result, opts)\n      // afterCreateMany lifecycle hook\n      op = opts.op = 'afterCreateMany'\n      return utils.resolve(this[op](records, opts, result)).then((_result) => {\n        // Allow for re-assignment from lifecycle hook\n        return _result === undefined ? result : _result\n      })\n    })\n  },\n\n  /**\n   * Create an unsaved, uncached instance of this Mapper's\n   * {@link Mapper#recordClass}.\n   *\n   * Returns `props` if `props` is already an instance of\n   * {@link Mapper#recordClass}.\n   *\n   * __Note:__ This method does __not__ interact with any adapter, and does\n   * __not__ save any data. It only creates new objects in memory.\n   *\n   * @example\n   * // Create empty unsaved record instance\n   * const post = PostMapper.createRecord()\n   *\n   * @example\n   * // Create an unsaved record instance with inital properties\n   * const post = PostMapper.createRecord({\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * })\n   *\n   * @example\n   * // Create a record instance that corresponds to a saved record\n   * const post = PostMapper.createRecord({\n   *   // JSData thinks this record has been saved if it has a primary key\n   *   id: 1234,\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * })\n   *\n   * @example\n   * // Create record instances from an array\n   * const posts = PostMapper.createRecord([{\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }, {\n   *   title: 'Reading data',\n   *   status: 'draft'\n   * }])\n   *\n   * @example\n   * // Records are validated by default\n   * import {Mapper} from 'js-data'\n   * const PostMapper = new Mapper({\n   *   name: 'post',\n   *   schema: { properties: { title: { type: 'string' } } }\n   * })\n   * try {\n   *   const post = PostMapper.createRecord({\n   *     title: 1234,\n   *   })\n   * } catch (err) {\n   *   console.log(err.errors) // [{ expected: 'one of (string)', actual: 'number', path: 'title' }]\n   * }\n   *\n   * @example\n   * // Skip validation\n   * import {Mapper} from 'js-data'\n   * const PostMapper = new Mapper({\n   *   name: 'post',\n   *   schema: { properties: { title: { type: 'string' } } }\n   * })\n   * const post = PostMapper.createRecord({\n   *   title: 1234,\n   * }, { noValidate: true })\n   * console.log(post.isValid()) // false\n   *\n   * @method Mapper#createRecord\n   * @param {Object|Object[]} props The properties for the Record instance or an\n   * array of property objects for the Record instances.\n   * @param {Object} [opts] Configuration options.\n   * @param {boolean} [opts.noValidate=false] Whether to skip validation when\n   * the Record instances are created.\n   * @returns {Record|Record[]} The Record instance or Record instances.\n   * @since 3.0.0\n   */\n  createRecord (props, opts) {\n    props || (props = {})\n    if (utils.isArray(props)) {\n      return props.map((_props) => this.createRecord(_props, opts))\n    }\n    if (!utils.isObject(props)) {\n      throw utils.err(`${DOMAIN}#createRecord`, 'props')(400, 'array or object', props)\n    }\n    const recordClass = this.recordClass\n    const relationList = this.relationList || []\n    relationList.forEach(function (def) {\n      const relatedMapper = def.getRelation()\n      const relationData = def.getLocalField(props)\n      if (relationData && !relatedMapper.is(relationData)) {\n        if (utils.isArray(relationData) && (!relationData.length || relatedMapper.is(relationData[0]))) {\n          return\n        }\n        utils.set(props, def.localField, relatedMapper.createRecord(relationData, opts))\n      }\n    })\n    // Check to make sure \"props\" is not already an instance of this Mapper.\n    return recordClass ? (props instanceof recordClass ? props : new recordClass(props, opts)) : props // eslint-disable-line\n  },\n\n  /**\n   * Lifecycle invocation method. You probably won't call this method directly.\n   *\n   * @method Mapper#crud\n   * @param {string} method Name of the lifecycle method to invoke.\n   * @param {...*} args Arguments to pass to the lifecycle method.\n   * @returns {Promise}\n   * @since 3.0.0\n   */\n  crud (method, ...args) {\n    const config = this.lifecycleMethods[method]\n    if (!config) {\n      throw utils.err(`${DOMAIN}#crud`, method)(404, 'method')\n    }\n\n    const upper = `${method.charAt(0).toUpperCase()}${method.substr(1)}`\n    const before = `before${upper}`\n    const after = `after${upper}`\n\n    let op, adapter\n\n    // Default values for arguments\n    config.defaults.forEach((value, i) => {\n      if (args[i] === undefined) {\n        args[i] = utils.copy(value)\n      }\n    })\n\n    const opts = args[args.length - 1]\n\n    // Fill in \"opts\" with the Mapper's configuration\n    utils._(opts, this)\n    adapter = opts.adapter = this.getAdapterName(opts)\n\n    // before lifecycle hook\n    op = opts.op = before\n    return utils.resolve(this[op](...args)).then((_value) => {\n      if (args[config.beforeAssign] !== undefined) {\n        // Allow for re-assignment from lifecycle hook\n        args[config.beforeAssign] = _value === undefined ? args[config.beforeAssign] : _value\n      }\n      // Now delegate to the adapter\n      op = opts.op = method\n      args = config.adapterArgs ? config.adapterArgs(this, ...args) : args\n      this.dbg(op, ...args)\n      return utils.resolve(this.getAdapter(adapter)[op](this, ...args))\n    }).then((result) => {\n      result = this._end(result, opts, !!config.skip)\n      args.push(result)\n      // after lifecycle hook\n      op = opts.op = after\n      return utils.resolve(this[op](...args)).then((_result) => {\n        // Allow for re-assignment from lifecycle hook\n        return _result === undefined ? result : _result\n      })\n    })\n  },\n\n  /**\n   * Fired during {@link Mapper#destroy}. See\n   * {@link Mapper~beforeDestroyListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeDestroy\n   * @see Mapper~beforeDestroyListener\n   * @see Mapper#destroy\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeDestroy} event.\n   *\n   * @example\n   * function onBeforeDestroy (id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroy', onBeforeDestroy)\n   *\n   * @callback Mapper~beforeDestroyListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#beforeDestroy}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#beforeDestroy}.\n   * @see Mapper#event:beforeDestroy\n   * @see Mapper#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#destroy}. See\n   * {@link Mapper~afterDestroyListener} for how to listen for this event.\n   *\n   * @event Mapper#afterDestroy\n   * @see Mapper~afterDestroyListener\n   * @see Mapper#destroy\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterDestroy} event.\n   *\n   * @example\n   * function onAfterDestroy (id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroy', onAfterDestroy)\n   *\n   * @callback Mapper~afterDestroyListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#afterDestroy}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#afterDestroy}.\n   * @param {Object} result The `result` argument passed to {@link Mapper#afterDestroy}.\n   * @see Mapper#event:afterDestroy\n   * @see Mapper#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Using an adapter, destroy the record with the given primary key.\n   *\n   * {@link Mapper#beforeDestroy} will be called before destroying the record.\n   * {@link Mapper#afterDestroy} will be called after destroying the record.\n   *\n   * @example\n   * // Destroy a specific blog post\n   * PostMapper.destroy(1234).then(() => {\n   *   // Blog post #1234 has been destroyed\n   * })\n   *\n   * @example\n   * // Get full response\n   * PostMapper.destroy(1234, { raw: true }).then((result) => {\n   *   console.log(result.deleted) e.g. 1\n   *   console.log(...) // etc., more metadata can be found on the result\n   * })\n   *\n   * @fires Mapper#beforeDestroy\n   * @fires Mapper#afterDestroy\n   * @method Mapper#destroy\n   * @param {(string|number)} id The primary key of the record to destroy.\n   * @param {Object} [opts] Configuration options. Refer to the `destroy` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves when the record has been destroyed. Resolves\n   * even if no record was found to be destroyed.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  destroy (id, opts) {\n    return this.crud('destroy', id, opts)\n  },\n\n  /**\n   * Fired during {@link Mapper#destroyAll}. See\n   * {@link Mapper~beforeDestroyAllListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeDestroyAll\n   * @see Mapper~beforeDestroyAllListener\n   * @see Mapper#destroyAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeDestroyAll} event.\n   *\n   * @example\n   * function onBeforeDestroyAll (query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroyAll', onBeforeDestroyAll)\n   *\n   * @callback Mapper~beforeDestroyAllListener\n   * @param {Object} query The `query` argument passed to {@link Mapper#beforeDestroyAll}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#beforeDestroyAll}.\n   * @see Mapper#event:beforeDestroyAll\n   * @see Mapper#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#destroyAll}. See\n   * {@link Mapper~afterDestroyAllListener} for how to listen for this event.\n   *\n   * @event Mapper#afterDestroyAll\n   * @see Mapper~afterDestroyAllListener\n   * @see Mapper#destroyAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterDestroyAll} event.\n   *\n   * @example\n   * function onAfterDestroyAll (query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroyAll', onAfterDestroyAll)\n   *\n   * @callback Mapper~afterDestroyAllListener\n   * @param {Object} query The `query` argument passed to {@link Mapper#afterDestroyAll}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#afterDestroyAll}.\n   * @param {Object} result The `result` argument passed to {@link Mapper#afterDestroyAll}.\n   * @see Mapper#event:afterDestroyAll\n   * @see Mapper#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Destroy the records selected by `query` via an adapter. If no `query` is\n   * provided then all records will be destroyed.\n   *\n   * {@link Mapper#beforeDestroyAll} will be called before destroying the records.\n   * {@link Mapper#afterDestroyAll} will be called after destroying the records.\n   *\n   * @example\n   * // Destroy all blog posts\n   * PostMapper.destroyAll().then(() => {\n   *   // All blog posts have been destroyed\n   * })\n   *\n   * @example\n   * // Destroy all \"draft\" blog posts\n   * PostMapper.destroyAll({ status: 'draft' }).then(() => {\n   *   // All \"draft\" blog posts have been destroyed\n   * })\n   *\n   * @example\n   * // Get full response\n   * const query = null\n   * const options = { raw: true }\n   * PostMapper.destroyAll(query, options).then((result) => {\n   *   console.log(result.deleted) e.g. 14\n   *   console.log(...) // etc., more metadata can be found on the result\n   * })\n   *\n   * @fires Mapper#beforeDestroyAll\n   * @fires Mapper#afterDestroyAll\n   * @method Mapper#destroyAll\n   * @param {Object} [query={}] Selection query. See {@link query}.\n   * @param {Object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {Object} [opts] Configuration options. Refer to the `destroyAll`\n   * method of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves when the records have been destroyed. Resolves\n   * even if no records were found to be destroyed.\n   * @see query\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  destroyAll (query, opts) {\n    return this.crud('destroyAll', query, opts)\n  },\n\n  /**\n   * Fired during {@link Mapper#find}. See\n   * {@link Mapper~beforeFindListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeFind\n   * @see Mapper~beforeFindListener\n   * @see Mapper#find\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeFind} event.\n   *\n   * @example\n   * function onBeforeFind (id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFind', onBeforeFind)\n   *\n   * @callback Mapper~beforeFindListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#beforeFind}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#beforeFind}.\n   * @see Mapper#event:beforeFind\n   * @see Mapper#find\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#find}. See\n   * {@link Mapper~afterFindListener} for how to listen for this event.\n   *\n   * @event Mapper#afterFind\n   * @see Mapper~afterFindListener\n   * @see Mapper#find\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterFind} event.\n   *\n   * @example\n   * function onAfterFind (id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFind', onAfterFind)\n   *\n   * @callback Mapper~afterFindListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#afterFind}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#afterFind}.\n   * @param {Object} result The `result` argument passed to {@link Mapper#afterFind}.\n   * @see Mapper#event:afterFind\n   * @see Mapper#find\n   * @since 3.0.0\n   */\n  /**\n   * Retrieve via an adapter the record with the given primary key.\n   *\n   * {@link Mapper#beforeFind} will be called before calling the adapter.\n   * {@link Mapper#afterFind} will be called after calling the adapter.\n   *\n   * @example\n   * PostMapper.find(1).then((post) => {\n   *   console.log(post) // { id: 1, ...}\n   * })\n   *\n   * @example\n   * // Get full response\n   * PostMapper.find(1, { raw: true }).then((result) => {\n   *   console.log(result.data) // { id: 1, ...}\n   *   console.log(result.found) // 1\n   *   console.log(...) // etc., more metadata can be found on the result\n   * })\n   *\n   * @fires Mapper#beforeFind\n   * @fires Mapper#afterFind\n   * @method Mapper#find\n   * @param {(string|number)} id The primary key of the record to retrieve.\n   * @param {Object} [opts] Configuration options. Refer to the `find` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @param {string[]} [opts.with=[]] Relations to eager load in the request.\n   * @returns {Promise} Resolves with the found record. Resolves with\n   * `undefined` if no record was found.\n   * @see http://www.js-data.io/v3.0/docs/reading-data\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/reading-data\",\"Reading data\"]\n   */\n  find (id, opts) {\n    return this.crud('find', id, opts)\n  },\n\n  /**\n   * Fired during {@link Mapper#findAll}. See\n   * {@link Mapper~beforeFindAllListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeFindAll\n   * @see Mapper~beforeFindAllListener\n   * @see Mapper#findAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeFindAll} event.\n   *\n   * @example\n   * function onBeforeFindAll (query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFindAll', onBeforeFindAll)\n   *\n   * @callback Mapper~beforeFindAllListener\n   * @param {Object} query The `query` argument passed to {@link Mapper#beforeFindAll}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#beforeFindAll}.\n   * @see Mapper#event:beforeFindAll\n   * @see Mapper#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#findAll}. See\n   * {@link Mapper~afterFindAllListener} for how to listen for this event.\n   *\n   * @event Mapper#afterFindAll\n   * @see Mapper~afterFindAllListener\n   * @see Mapper#findAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterFindAll} event.\n   *\n   * @example\n   * function onAfterFindAll (query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFindAll', onAfterFindAll)\n   *\n   * @callback Mapper~afterFindAllListener\n   * @param {Object} query The `query` argument passed to {@link Mapper#afterFindAll}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#afterFindAll}.\n   * @param {Object} result The `result` argument passed to {@link Mapper#afterFindAll}.\n   * @see Mapper#event:afterFindAll\n   * @see Mapper#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Using the `query` argument, select records to retrieve via an adapter.\n   *\n   * {@link Mapper#beforeFindAll} will be called before calling the adapter.\n   * {@link Mapper#afterFindAll} will be called after calling the adapter.\n   *\n   * @example\n   * // Find all \"published\" blog posts\n   * PostMapper.findAll({ status: 'published' }).then((posts) => {\n   *   console.log(posts) // [{ id: 1, status: 'published', ...}, ...]\n   * })\n   *\n   * @example\n   * // Get full response\n   * PostMapper.findAll({ status: 'published' }, { raw: true }).then((result) => {\n   *   console.log(result.data) // [{ id: 1, status: 'published', ...}, ...]\n   *   console.log(result.found) // e.g. 13\n   *   console.log(...) // etc., more metadata can be found on the result\n   * })\n   *\n   * @fires Mapper#beforeFindAll\n   * @fires Mapper#afterFindAll\n   * @method Mapper#findAll\n   * @param {Object} [query={}] Selection query. See {@link query}.\n   * @param {Object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {Object} [opts] Configuration options. Refer to the `findAll` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @param {string[]} [opts.with=[]] Relations to eager load in the request.\n   * @returns {Promise} Resolves with the found records, if any.\n   * @see query\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/reading-data\",\"Reading data\"]\n   */\n  findAll (query, opts) {\n    return this.crud('findAll', query, opts)\n  },\n\n  /**\n   * Return the registered adapter with the given name or the default adapter if\n   * no name is provided.\n   *\n   * @method Mapper#getAdapter\n   * @param {string} [name] The name of the adapter to retrieve.\n   * @returns {Adapter} The adapter.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  getAdapter (name) {\n    this.dbg('getAdapter', 'name:', name)\n    const adapter = this.getAdapterName(name)\n    if (!adapter) {\n      throw utils.err(`${DOMAIN}#getAdapter`, 'name')(400, 'string', name)\n    }\n    return this.getAdapters()[adapter]\n  },\n\n  /**\n   * Return the name of a registered adapter based on the given name or options,\n   * or the name of the default adapter if no name provided.\n   *\n   * @method Mapper#getAdapterName\n   * @param {(Object|string)} [opts] The name of an adapter or options, if any.\n   * @returns {string} The name of the adapter.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  getAdapterName (opts) {\n    opts || (opts = {})\n    if (utils.isString(opts)) {\n      opts = { adapter: opts }\n    }\n    return opts.adapter || opts.defaultAdapter\n  },\n\n  /**\n   * Get the object of registered adapters for this Mapper.\n   *\n   * @method Mapper#getAdapters\n   * @returns {Object} {@link Mapper#_adapters}\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  getAdapters () {\n    return this._adapters\n  },\n\n  /**\n   * Returns this Mapper's {@link Schema}.\n   *\n   * @method Mapper#getSchema\n   * @returns {Schema} This Mapper's {@link Schema}.\n   * @see Mapper#schema\n   * @since 3.0.0\n   */\n  getSchema () {\n    return this.schema\n  },\n\n  /**\n   * Defines a hasMany relationship. Only useful if you're managing your\n   * Mappers manually and not using a Container or DataStore component.\n   *\n   * @example\n   * UserMapper.hasMany(PostMapper, {\n   *   // post.user_id points to user.id\n   *   foreignKey: 'user_id'\n   *   // post records will be attached to user records at \"user.posts\"\n   *   localField: 'posts'\n   * })\n   *\n   * @method Mapper#hasMany\n   * @see http://www.js-data.io/v3.0/docs/relations\n   * @since 3.0.0\n   */\n  hasMany (relatedMapper, opts) {\n    return hasMany(relatedMapper, opts)(this)\n  },\n\n  /**\n   * Defines a hasOne relationship. Only useful if you're managing your Mappers\n   * manually and not using a {@link Container} or {@link DataStore} component.\n   *\n   * @example\n   * UserMapper.hasOne(ProfileMapper, {\n   *   // profile.user_id points to user.id\n   *   foreignKey: 'user_id'\n   *   // profile records will be attached to user records at \"user.profile\"\n   *   localField: 'profile'\n   * })\n   *\n   * @method Mapper#hasOne\n   * @see http://www.js-data.io/v3.0/docs/relations\n   * @since 3.0.0\n   */\n  hasOne (relatedMapper, opts) {\n    return hasOne(relatedMapper, opts)(this)\n  },\n\n  /**\n   * Return whether `record` is an instance of this Mapper's recordClass.\n   *\n   * @example\n   * const post = PostMapper.createRecord()\n   *\n   * console.log(PostMapper.is(post)) // true\n   * // Equivalent to what's above\n   * console.log(post instanceof PostMapper.recordClass) // true\n   *\n   * @method Mapper#is\n   * @param {Object|Record} record The record to check.\n   * @returns {boolean} Whether `record` is an instance of this Mapper's\n   * {@link Mapper#recordClass}.\n   * @since 3.0.0\n   */\n  is (record) {\n    const recordClass = this.recordClass\n    return recordClass ? record instanceof recordClass : false\n  },\n\n  /**\n   * Register an adapter on this Mapper under the given name.\n   *\n   * @method Mapper#registerAdapter\n   * @param {string} name The name of the adapter to register.\n   * @param {Adapter} adapter The adapter to register.\n   * @param {Object} [opts] Configuration options.\n   * @param {boolean} [opts.default=false] Whether to make the adapter the\n   * default adapter for this Mapper.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  registerAdapter (name, adapter, opts) {\n    opts || (opts = {})\n    this.getAdapters()[name] = adapter\n    // Optionally make it the default adapter for the target.\n    if (opts === true || opts.default) {\n      this.defaultAdapter = name\n    }\n  },\n\n  /**\n   * Select records according to the `query` argument, and aggregate the sum\n   * value of the property specified by `field`.\n   *\n   * {@link Mapper#beforeSum} will be called before calling the adapter.\n   * {@link Mapper#afterSum} will be called after calling the adapter.\n   *\n   * @example\n   * PurchaseOrderMapper.sum('amount', { status: 'paid' }).then((amountPaid) => {\n   *   console.log(amountPaid) // e.g. 451125.34\n   * })\n   *\n   * @method Mapper#sum\n   * @param {string} field The field to sum.\n   * @param {Object} [query={}] Selection query. See {@link query}.\n   * @param {Object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {Object} [opts] Configuration options. Refer to the `sum` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves with the aggregated sum.\n   * @since 3.0.0\n   */\n  sum (field, query, opts) {\n    return this.crud('sum', field, query, opts)\n  },\n\n  /**\n   * Return a plain object representation of the given record. Relations can\n   * be optionally be included. Non-schema properties can be excluded.\n   *\n   * @example\n   * import {Mapper, Schema} from 'js-data'\n   * const PersonMapper = new Mapper({\n   *   name: 'person',\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     }\n   *   }\n   * })\n   * const person = PersonMapper.createRecord({ id: 1, name: 'John', foo: 'bar' })\n   * console.log(PersonMapper.toJSON(person)) // {\"id\":1,\"name\":\"John\",\"foo\":\"bar\"}\n   * console.log(PersonMapper.toJSON(person), { strict: true }) // {\"id\":1,\"name\":\"John\"}\n   *\n   * @method Mapper#toJSON\n   * @param {Record|Record[]} records Record or records from which to create a\n   * POJO representation.\n   * @param {Object} [opts] Configuration options.\n   * @param {boolean} [opts.strict] Whether to exclude properties that are not\n   * defined in {@link Mapper#schema}.\n   * @param {string[]} [opts.with] Array of relation names or relation fields\n   * to include in the POJO representation.\n   * @param {boolean} [opts.withAll] Whether to simply include all relations in\n   * the representation. Overrides `opts.with`.\n   * @returns {Object|Object[]} POJO representation of the record or records.\n   * @since 3.0.0\n   */\n  toJSON (records, opts) {\n    let record\n    opts || (opts = {})\n    if (utils.isArray(records)) {\n      return records.map((record) => this.toJSON(record, opts))\n    } else {\n      record = records\n    }\n    const relationFields = (this ? this.relationFields : []) || []\n    let json = {}\n    let properties\n    if (this && this.schema) {\n      properties = this.schema.properties || {}\n      // TODO: Make this work recursively\n      utils.forOwn(properties, (opts, prop) => {\n        json[prop] = utils.plainCopy(record[prop])\n      })\n    }\n    properties || (properties = {})\n    if (!opts.strict) {\n      for (var key in record) {\n        if (!properties[key] && relationFields.indexOf(key) === -1) {\n          json[key] = utils.plainCopy(record[key])\n        }\n      }\n    }\n    // The user wants to include relations in the resulting plain object\n    // representation\n    if (this && opts.withAll) {\n      opts.with = relationFields.slice()\n    }\n    if (this && opts.with) {\n      if (utils.isString(opts.with)) {\n        opts.with = [opts.with]\n      }\n      utils.forEachRelation(this, opts, (def, optsCopy) => {\n        const relationData = def.getLocalField(record)\n        if (relationData) {\n          // The actual recursion\n          if (utils.isArray(relationData)) {\n            def.setLocalField(json, relationData.map((item) => {\n              return def.getRelation().toJSON(item, optsCopy)\n            }))\n          } else {\n            def.setLocalField(json, def.getRelation().toJSON(relationData, optsCopy))\n          }\n        }\n      })\n    }\n    return json\n  },\n\n  /**\n   * Fired during {@link Mapper#update}. See\n   * {@link Mapper~beforeUpdateListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeUpdate\n   * @see Mapper~beforeUpdateListener\n   * @see Mapper#update\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeUpdate} event.\n   *\n   * @example\n   * function onBeforeUpdate (id, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdate', onBeforeUpdate)\n   *\n   * @callback Mapper~beforeUpdateListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#beforeUpdate}.\n   * @param {Object} props The `props` argument passed to {@link Mapper#beforeUpdate}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#beforeUpdate}.\n   * @see Mapper#event:beforeUpdate\n   * @see Mapper#update\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#update}. See\n   * {@link Mapper~afterUpdateListener} for how to listen for this event.\n   *\n   * @event Mapper#afterUpdate\n   * @see Mapper~afterUpdateListener\n   * @see Mapper#update\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterUpdate} event.\n   *\n   * @example\n   * function onAfterUpdate (id, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdate', onAfterUpdate)\n   *\n   * @callback Mapper~afterUpdateListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#afterUpdate}.\n   * @param {Object} props The `props` argument passed to {@link Mapper#afterUpdate}.\n   * @param {Object} opts The `opts` argument passed to {@link Mapper#afterUpdate}.\n   * @param {Object} result The `result` argument passed to {@link Mapper#afterUpdate}.\n   * @see Mapper#event:afterUpdate\n   * @see Mapper#update\n   * @since 3.0.0\n   */\n  /**\n   * Using an adapter, update the record with the primary key specified by the\n   * `id` argument.\n   *\n   * {@link Mapper#beforeUpdate} will be called before updating the record.\n   * {@link Mapper#afterUpdate} will be called after updating the record.\n   *\n   * @example\n   * // Update a specific post\n   * PostMapper.update(1234, {\n   *   status: 'published',\n   *   published_at: new Date()\n   * }).then((post) => {\n   *   console.log(post) // { id: 1234, status: 'published', ... }\n   * })\n   *\n   * @fires Mapper#beforeUpdate\n   * @fires Mapper#afterUpdate\n   * @method Mapper#update\n   * @param {(string|number)} id The primary key of the record to update.\n   * @param {Object} props The update to apply to the record.\n   * @param {Object} [opts] Configuration options. Refer to the `update` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * transaction.\n   * @returns {Promise} Resolves with the updated record. Rejects if the record\n   * could not be found.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  update (id, props, opts) {\n    return this.crud('update', id, props, opts)\n  },\n\n  /**\n   * Fired during {@link Mapper#updateAll}. See\n   * {@link Mapper~beforeUpdateAllListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeUpdateAll\n   * @see Mapper~beforeUpdateAllListener\n   * @see Mapper#updateAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeUpdateAll} event.\n   *\n   * @example\n   * function onBeforeUpdateAll (props, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateAll', onBeforeUpdateAll)\n   *\n   * @callback Mapper~beforeUpdateAllListener\n   * @param {Object} props The `props` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {Object} query The `query` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeUpdateAll}.\n   * @see Mapper#event:beforeUpdateAll\n   * @see Mapper#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#updateAll}. See\n   * {@link Mapper~afterUpdateAllListener} for how to listen for this event.\n   *\n   * @event Mapper#afterUpdateAll\n   * @see Mapper~afterUpdateAllListener\n   * @see Mapper#updateAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterUpdateAll} event.\n   *\n   * @example\n   * function onAfterUpdateAll (props, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateAll', onAfterUpdateAll)\n   *\n   * @callback Mapper~afterUpdateAllListener\n   * @param {Object} props The `props` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {Object} query The `query` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterUpdateAll}.\n   * @see Mapper#event:afterUpdateAll\n   * @see Mapper#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Using the `query` argument, perform the a single updated to the selected\n   * records.\n   *\n   * {@link Mapper#beforeUpdateAll} will be called before making the update.\n   * {@link Mapper#afterUpdateAll} will be called after making the update.\n   *\n   * @example\n   * // Turn all of John's blog posts into drafts.\n   * const update = { status: draft: published_at: null }\n   * const query = { userId: 1234 }\n   * PostMapper.updateAll(update, query).then((posts) => {\n   *   console.log(posts) // [...]\n   * })\n   *\n   * @fires Mapper#beforeUpdateAll\n   * @fires Mapper#afterUpdateAll\n   * @method Mapper#updateAll\n   * @param {Object} props Update to apply to selected records.\n   * @param {Object} [query={}] Selection query. See {@link query}.\n   * @param {Object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {Object} [opts] Configuration options. Refer to the `updateAll`\n   * method of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves with the update records, if any.\n   * @see query\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  updateAll (props, query, opts) {\n    return this.crud('updateAll', props, query, opts)\n  },\n\n  /**\n   * Fired during {@link Mapper#updateMany}. See\n   * {@link Mapper~beforeUpdateManyListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeUpdateMany\n   * @see Mapper~beforeUpdateManyListener\n   * @see Mapper#updateMany\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeUpdateMany} event.\n   *\n   * @example\n   * function onBeforeUpdateMany (records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateMany', onBeforeUpdateMany)\n   *\n   * @callback Mapper~beforeUpdateManyListener\n   * @param {Object} records The `records` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeUpdateMany}.\n   * @see Mapper#event:beforeUpdateMany\n   * @see Mapper#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#updateMany}. See\n   * {@link Mapper~afterUpdateManyListener} for how to listen for this event.\n   *\n   * @event Mapper#afterUpdateMany\n   * @see Mapper~afterUpdateManyListener\n   * @see Mapper#updateMany\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:afterUpdateMany} event.\n   *\n   * @example\n   * function onAfterUpdateMany (records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateMany', onAfterUpdateMany)\n   *\n   * @callback Mapper~afterUpdateManyListener\n   * @param {Object} records The `records` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterUpdateMany}.\n   * @see Mapper#event:afterUpdateMany\n   * @see Mapper#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Given an array of updates, perform each of the updates via an adapter. Each\n   * \"update\" is a hash of properties with which to update an record. Each\n   * update must contain the primary key of the record to be updated.\n   *\n   * {@link Mapper#beforeUpdateMany} will be called before making the update.\n   * {@link Mapper#afterUpdateMany} will be called after making the update.\n   *\n   * @example\n   * PostMapper.updateMany([\n   *   { id: 1234, status: 'draft' },\n   *   { id: 2468, status: 'published', published_at: new Date() }\n   * ]).then((posts) => {\n   *   console.log(posts) // [...]\n   * })\n   *\n   * @fires Mapper#beforeUpdateMany\n   * @fires Mapper#afterUpdateMany\n   * @method Mapper#updateMany\n   * @param {Record[]} records Array up record updates.\n   * @param {Object} [opts] Configuration options. Refer to the `updateMany`\n   * method of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves with the updated records. Rejects if any of the\n   * records could be found.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  updateMany (records, opts) {\n    return this.crud('updateMany', records, opts)\n  },\n\n  /**\n   * Validate the given record or records according to this Mapper's\n   * {@link Schema}. If there are no validation errors then the return value\n   * will be `undefined`.\n   *\n   * @example\n   * import {Mapper, Schema} from 'js-data'\n   * const PersonSchema = new Schema({\n   *   properties: {\n   *     name: { type: 'string' },\n   *     id: { type: 'string' }\n   *   }\n   * })\n   * const PersonMapper = new Mapper({\n   *   name: 'person',\n   *   schema: PersonSchema\n   * })\n   * let errors = PersonMapper.validate({ name: 'John' })\n   * console.log(errors) // undefined\n   * errors = PersonMapper.validate({ name: 123 })\n   * console.log(errors) // [{ expected: 'one of (string)', actual: 'number', path: 'name' }]\n   *\n   * @method Mapper#validate\n   * @param {Object|Object[]} record The record or records to validate.\n   * @param {Object} [opts] Configuration options. Passed to\n   * {@link Schema#validate}.\n   * @returns {Object[]} Array of errors or `undefined` if no errors.\n   * @since 3.0.0\n   */\n  validate (record, opts) {\n    opts || (opts = {})\n    const schema = this.getSchema()\n    const _opts = utils.pick(opts, ['existingOnly'])\n    if (utils.isArray(record)) {\n      const errors = record.map((_record) => schema.validate(_record, utils.pick(_opts, ['existingOnly'])))\n      let hasErrors = false\n      errors.forEach(function (err) {\n        if (err) {\n          hasErrors = true\n        }\n      })\n      if (hasErrors) {\n        return errors\n      }\n      return undefined\n    }\n    return schema.validate(record, _opts)\n  },\n\n  /**\n   * Method used to wrap data returned by an adapter with this Mapper's\n   * {@link Mapper#recordClass}. This method is used by all of a Mapper's CRUD\n   * methods. The provided implementation of this method assumes that the `data`\n   * passed to it is a record or records that need to be wrapped with\n   * {@link Mapper#createRecord}. Override with care.\n   *\n   * Provided implementation of {@link Mapper#wrap}:\n   *\n   * ```\n   * function (data, opts) {\n   *   return this.createRecord(data, opts)\n   * }\n   * ```\n   *\n   * @example\n   * const PostMapper = new Mapper({\n   *   name: 'post',\n   *   // Override to customize behavior\n   *   wrap (data, opts) {\n   *     const originalWrap = this.constructor.prototype.wrap\n   *     // Let's say \"GET /post\" doesn't return JSON quite like JSData expects,\n   *     // but the actual post records are nested under a \"posts\" field. So,\n   *     // we override Mapper#wrap to handle this special case.\n   *     if (opts.op === 'findAll') {\n   *       return originalWrap.call(this, data.posts, opts)\n   *     }\n   *     // Otherwise perform original behavior\n   *     return originalWrap.call(this, data, opts)\n   *   }\n   * })\n   *\n   * @method Mapper#wrap\n   * @param {Object|Object[]} data The record or records to be wrapped.\n   * @param {Object} [opts] Configuration options. Passed to {@link Mapper#createRecord}.\n   * @returns {Record|Record[]} The wrapped record or records.\n   * @since 3.0.0\n   */\n  wrap (data, opts) {\n    return this.createRecord(data, opts)\n  },\n\n  /**\n   * @ignore\n   */\n  defineRelations () {\n    // Setup the mapper's relations, including generating Mapper#relationList\n    // and Mapper#relationFields\n    utils.forOwn(this.relations, (group, type) => {\n      utils.forOwn(group, (relations, _name) => {\n        if (utils.isObject(relations)) {\n          relations = [relations]\n        }\n        relations.forEach((def) => {\n          const relatedMapper = this.datastore.getMapperByName(_name) || _name\n          def.getRelation = () => this.datastore.getMapper(_name)\n\n          if (typeof Relation[type] !== 'function') {\n            throw utils.err(DOMAIN, 'defineRelations')(400, 'relation type (hasOne, hasMany, etc)', type, true)\n          }\n\n          this[type](relatedMapper, def)\n        })\n      })\n    })\n  }\n})\n\n/**\n * Create a subclass of this Mapper:\n *\n * @example <caption>Mapper.extend</caption>\n * // Normally you would do: import {Mapper} from 'js-data'\n * const JSData = require('js-data@3.0.0-beta.7')\n * const {Mapper} = JSData\n * console.log('Using JSData v' + JSData.version.full)\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomMapperClass extends Mapper {\n *   foo () { return 'bar' }\n *   static beep () { return 'boop' }\n * }\n * const customMapper = new CustomMapperClass()\n * console.log(customMapper.foo())\n * console.log(CustomMapperClass.beep())\n *\n * // Extend the class using alternate method.\n * const OtherMapperClass = Mapper.extend({\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const otherMapper = new OtherMapperClass()\n * console.log(otherMapper.foo())\n * console.log(OtherMapperClass.beep())\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherMapperClass () {\n *   Mapper.call(this)\n *   this.created_at = new Date().getTime()\n * }\n * Mapper.extend({\n *   constructor: AnotherMapperClass,\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const anotherMapper = new AnotherMapperClass()\n * console.log(anotherMapper.created_at)\n * console.log(anotherMapper.foo())\n * console.log(AnotherMapperClass.beep())\n *\n * @method Mapper.extend\n * @param {Object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {Object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {Object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Mapper class.\n * @since 3.0.0\n */\n","import utils from './utils'\nimport Component from './Component'\nimport Mapper from './Mapper'\n\nconst DOMAIN = 'Container'\n\nexport const proxiedMapperMethods = [\n  /**\n   * Wrapper for {@link Mapper#count}.\n   *\n   * @example\n   * // Get the number of published blog posts\n   * import {Container} from 'js-data'\n   * import RethinkDBAdapter from 'js-data-rethinkdb'\n   * const store = new Container()\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true })\n   * store.defineMapper('post')\n   *\n   * store.count('post', { status: 'published' }).then((numPublished) => {\n   *   console.log(numPublished) // e.g. 45\n   * })\n   *\n   * @method Container#count\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Object} [query] See {@link Mapper#count}.\n   * @param {Object} [opts] See {@link Mapper#count}.\n   * @returns {Promise} See {@link Mapper#count}.\n   * @see Mapper#count\n   * @since 3.0.0\n   */\n  'count',\n\n  /**\n   * Fired during {@link Container#create}. See\n   * {@link Container~beforeCreateListener} for how to listen for this event.\n   *\n   * @event Container#beforeCreate\n   * @see Container~beforeCreateListener\n   * @see Container#create\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeCreate} event.\n   *\n   * @example\n   * function onBeforeCreate (mapperName, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreate', onBeforeCreate)\n   *\n   * @callback Container~beforeCreateListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeCreate}.\n   * @param {Object} props The `props` argument received by {@link Mapper#beforeCreate}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeCreate}.\n   * @see Container#event:beforeCreate\n   * @see Container#create\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#create}. See\n   * {@link Container~afterCreateListener} for how to listen for this event.\n   *\n   * @event Container#afterCreate\n   * @see Container~afterCreateListener\n   * @see Container#create\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterCreate} event.\n   *\n   * @example\n   * function onAfterCreate (mapperName, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreate', onAfterCreate)\n   *\n   * @callback Container~afterCreateListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterCreate}.\n   * @param {Object} props The `props` argument received by {@link Mapper#afterCreate}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterCreate}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterCreate}.\n   * @see Container#event:afterCreate\n   * @see Container#create\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#create}.\n   *\n   * @example\n   * // Create and save a new blog post\n   * import {Container} from 'js-data'\n   * import RethinkDBAdapter from 'js-data-rethinkdb'\n   * const store = new Container()\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true })\n   * store.defineMapper('post')\n   *\n   * store.create('post', {\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }).then((post) => {\n   *   console.log(post) // { id: 1234, status: 'draft', ... }\n   * })\n   *\n   * @fires Container#beforeCreate\n   * @fires Container#afterCreate\n   * @method Container#create\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Object} props See {@link Mapper#create}.\n   * @param {Object} [opts] See {@link Mapper#create}.\n   * @returns {Promise} See {@link Mapper#create}.\n   * @see Mapper#create\n   * @since 3.0.0\n   */\n  'create',\n\n  /**\n   * Fired during {@link Container#createMany}. See\n   * {@link Container~beforeCreateManyListener} for how to listen for this event.\n   *\n   * @event Container#beforeCreateMany\n   * @see Container~beforeCreateManyListener\n   * @see Container#createMany\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeCreateMany} event.\n   *\n   * @example\n   * function onBeforeCreateMany (mapperName, records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreateMany', onBeforeCreateMany)\n   *\n   * @callback Container~beforeCreateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {Object} records The `records` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeCreateMany}.\n   * @see Container#event:beforeCreateMany\n   * @see Container#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#createMany}. See\n   * {@link Container~afterCreateManyListener} for how to listen for this event.\n   *\n   * @event Container#afterCreateMany\n   * @see Container~afterCreateManyListener\n   * @see Container#createMany\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterCreateMany} event.\n   *\n   * @example\n   * function onAfterCreateMany (mapperName, records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreateMany', onAfterCreateMany)\n   *\n   * @callback Container~afterCreateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterCreateMany}.\n   * @param {Object} records The `records` argument received by {@link Mapper#afterCreateMany}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterCreateMany}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterCreateMany}.\n   * @see Container#event:afterCreateMany\n   * @see Container#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#createMany}.\n   *\n   * @example\n   * // Create and save several new blog posts\n   * import {Container} from 'js-data'\n   * import RethinkDBAdapter from 'js-data-rethinkdb'\n   * const store = new Container()\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true })\n   * store.defineMapper('post')\n   *\n   * store.createMany('post', [{\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }, {\n   *   title: 'Reading data',\n   *   status: 'draft'\n   * }]).then((posts) => {\n   *   console.log(posts[0]) // { id: 1234, status: 'draft', ... }\n   *   console.log(posts[1]) // { id: 1235, status: 'draft', ... }\n   * })\n   *\n   * @fires Container#beforeCreateMany\n   * @fires Container#afterCreateMany\n   * @method Container#createMany\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Record[]} records See {@link Mapper#createMany}.\n   * @param {Object} [opts] See {@link Mapper#createMany}.\n   * @returns {Promise} See {@link Mapper#createMany}.\n   * @see Mapper#createMany\n   * @since 3.0.0\n   */\n  'createMany',\n\n  /**\n   * Wrapper for {@link Mapper#createRecord}.\n   *\n   * __Note:__ This method does __not__ interact with any adapter, and does\n   * __not__ save any data. It only creates new objects in memory.\n   *\n   * @example\n   * // Create empty unsaved record instance\n   * import {Container} from 'js-data'\n   * const store = new Container()\n   * store.defineMapper('post')\n   * const post = PostMapper.createRecord()\n   *\n   * @method Container#createRecord\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Object|Object[]} props See {@link Mapper#createRecord}.\n   * @param {Object} [opts] See {@link Mapper#createRecord}.\n   * @returns {Promise} See {@link Mapper#createRecord}.\n   * @see Mapper#createRecord\n   * @since 3.0.0\n   */\n  'createRecord',\n\n  /**\n   * Fired during {@link Container#destroy}. See\n   * {@link Container~beforeDestroyListener} for how to listen for this event.\n   *\n   * @event Container#beforeDestroy\n   * @see Container~beforeDestroyListener\n   * @see Container#destroy\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeDestroy} event.\n   *\n   * @example\n   * function onBeforeDestroy (mapperName, id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroy', onBeforeDestroy)\n   *\n   * @callback Container~beforeDestroyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeDestroy}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeDestroy}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeDestroy}.\n   * @see Container#event:beforeDestroy\n   * @see Container#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#destroy}. See\n   * {@link Container~afterDestroyListener} for how to listen for this event.\n   *\n   * @event Container#afterDestroy\n   * @see Container~afterDestroyListener\n   * @see Container#destroy\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterDestroy} event.\n   *\n   * @example\n   * function onAfterDestroy (mapperName, id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroy', onAfterDestroy)\n   *\n   * @callback Container~afterDestroyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterDestroy}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterDestroy}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterDestroy}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterDestroy}.\n   * @see Container#event:afterDestroy\n   * @see Container#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#destroy}.\n   *\n   * @example\n   * // Destroy a specific blog post\n   * import {Container} from 'js-data'\n   * import RethinkDBAdapter from 'js-data-rethinkdb'\n   * const store = new Container()\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true })\n   * store.defineMapper('post')\n   *\n   * store.destroy('post', 1234).then(() => {\n   *   // Blog post #1234 has been destroyed\n   * })\n   *\n   * @fires Container#beforeDestroy\n   * @fires Container#afterDestroy\n   * @method Container#destroy\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id See {@link Mapper#destroy}.\n   * @param {Object} [opts] See {@link Mapper#destroy}.\n   * @returns {Promise} See {@link Mapper#destroy}.\n   * @see Mapper#destroy\n   * @since 3.0.0\n   */\n  'destroy',\n\n  /**\n   * Fired during {@link Container#destroyAll}. See\n   * {@link Container~beforeDestroyAllListener} for how to listen for this event.\n   *\n   * @event Container#beforeDestroyAll\n   * @see Container~beforeDestroyAllListener\n   * @see Container#destroyAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeDestroyAll} event.\n   *\n   * @example\n   * function onBeforeDestroyAll (mapperName, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroyAll', onBeforeDestroyAll)\n   *\n   * @callback Container~beforeDestroyAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeDestroyAll}.\n   * @param {Object} query The `query` argument received by {@link Mapper#beforeDestroyAll}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeDestroyAll}.\n   * @see Container#event:beforeDestroyAll\n   * @see Container#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#destroyAll}. See\n   * {@link Container~afterDestroyAllListener} for how to listen for this event.\n   *\n   * @event Container#afterDestroyAll\n   * @see Container~afterDestroyAllListener\n   * @see Container#destroyAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterDestroyAll} event.\n   *\n   * @example\n   * function onAfterDestroyAll (mapperName, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroyAll', onAfterDestroyAll)\n   *\n   * @callback Container~afterDestroyAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {Object} query The `query` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterDestroyAll}.\n   * @see Container#event:afterDestroyAll\n   * @see Container#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#destroyAll}.\n   *\n   * @example\n   * // Destroy all \"draft\" blog posts\n   * import {Container} from 'js-data'\n   * import RethinkDBAdapter from 'js-data-rethinkdb'\n   * const store = new Container()\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true })\n   * store.defineMapper('post')\n   *\n   * store.destroyAll('post', { status: 'draft' }).then(() => {\n   *   // All \"draft\" blog posts have been destroyed\n   * })\n   *\n   * @fires Container#beforeDestroyAll\n   * @fires Container#afterDestroyAll\n   * @method Container#destroyAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Object} [query] See {@link Mapper#destroyAll}.\n   * @param {Object} [opts] See {@link Mapper#destroyAll}.\n   * @returns {Promise} See {@link Mapper#destroyAll}.\n   * @see Mapper#destroyAll\n   * @since 3.0.0\n   */\n  'destroyAll',\n\n  /**\n   * Fired during {@link Container#find}. See\n   * {@link Container~beforeFindListener} for how to listen for this event.\n   *\n   * @event Container#beforeFind\n   * @see Container~beforeFindListener\n   * @see Container#find\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeFind} event.\n   *\n   * @example\n   * function onBeforeFind (mapperName, id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFind', onBeforeFind)\n   *\n   * @callback Container~beforeFindListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeFind}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeFind}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeFind}.\n   * @see Container#event:beforeFind\n   * @see Container#find\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#find}. See\n   * {@link Container~afterFindListener} for how to listen for this event.\n   *\n   * @event Container#afterFind\n   * @see Container~afterFindListener\n   * @see Container#find\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterFind} event.\n   *\n   * @example\n   * function onAfterFind (mapperName, id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFind', onAfterFind)\n   *\n   * @callback Container~afterFindListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterFind}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterFind}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterFind}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterFind}.\n   * @see Container#event:afterFind\n   * @see Container#find\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#find}.\n   *\n   * @example\n   * import {Container} from 'js-data'\n   * import RethinkDBAdapter from 'js-data-rethinkdb'\n   * const store = new Container()\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true })\n   * store.defineMapper('post')\n   *\n   * store.find('post', 1).then((post) => {\n   *   console.log(post) // { id: 1, ...}\n   * })\n   *\n   * @fires Container#beforeFind\n   * @fires Container#afterFind\n   * @method Container#find\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id See {@link Mapper#find}.\n   * @param {Object} [opts] See {@link Mapper#find}.\n   * @returns {Promise} See {@link Mapper#find}.\n   * @see Mapper#find\n   * @since 3.0.0\n   */\n  'find',\n\n  /**\n   * Fired during {@link Container#findAll}. See\n   * {@link Container~beforeFindAllListener} for how to listen for this event.\n   *\n   * @event Container#beforeFindAll\n   * @see Container~beforeFindAllListener\n   * @see Container#findAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeFindAll} event.\n   *\n   * @example\n   * function onBeforeFindAll (mapperName, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFindAll', onBeforeFindAll)\n   *\n   * @callback Container~beforeFindAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeFindAll}.\n   * @param {Object} query The `query` argument received by {@link Mapper#beforeFindAll}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeFindAll}.\n   * @see Container#event:beforeFindAll\n   * @see Container#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#findAll}. See\n   * {@link Container~afterFindAllListener} for how to listen for this event.\n   *\n   * @event Container#afterFindAll\n   * @see Container~afterFindAllListener\n   * @see Container#findAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterFindAll} event.\n   *\n   * @example\n   * function onAfterFindAll (mapperName, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFindAll', onAfterFindAll)\n   *\n   * @callback Container~afterFindAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterFindAll}.\n   * @param {Object} query The `query` argument received by {@link Mapper#afterFindAll}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterFindAll}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterFindAll}.\n   * @see Container#event:afterFindAll\n   * @see Container#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#createRecord}.\n   *\n   * @example\n   * // Find all \"published\" blog posts\n   * import {Container} from 'js-data'\n   * import RethinkDBAdapter from 'js-data-rethinkdb'\n   * const store = new Container()\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true })\n   * store.defineMapper('post')\n   *\n   * store.findAll('post', { status: 'published' }).then((posts) => {\n   *   console.log(posts) // [{ id: 1, ...}, ...]\n   * })\n   *\n   * @fires Container#beforeFindAll\n   * @fires Container#afterFindAll\n   * @method Container#findAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Object} [query] See {@link Mapper#findAll}.\n   * @param {Object} [opts] See {@link Mapper#findAll}.\n   * @returns {Promise} See {@link Mapper#findAll}.\n   * @see Mapper#findAll\n   * @since 3.0.0\n   */\n  'findAll',\n\n  /**\n   * Wrapper for {@link Mapper#getSchema}.\n   *\n   * @method Container#getSchema\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @returns {Schema} See {@link Mapper#getSchema}.\n   * @see Mapper#getSchema\n   * @since 3.0.0\n   */\n  'getSchema',\n\n  /**\n   * Wrapper for {@link Mapper#is}.\n   *\n   * @example\n   * import {Container} from 'js-data'\n   * const store = new Container()\n   * store.defineMapper('post')\n   * const post = store.createRecord()\n   *\n   * console.log(store.is('post', post)) // true\n   * // Equivalent to what's above\n   * console.log(post instanceof store.getMapper('post').recordClass) // true\n   *\n   * @method Container#is\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Object|Record} record See {@link Mapper#is}.\n   * @returns {boolean} See {@link Mapper#is}.\n   * @see Mapper#is\n   * @since 3.0.0\n   */\n  'is',\n\n  /**\n   * Wrapper for {@link Mapper#sum}.\n   *\n   * @example\n   * import {Container} from 'js-data'\n   * import RethinkDBAdapter from 'js-data-rethinkdb'\n   * const store = new Container()\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true })\n   * store.defineMapper('purchase_order')\n   *\n   * store.sum('purchase_order', 'amount', { status: 'paid' }).then((amountPaid) => {\n   *   console.log(amountPaid) // e.g. 451125.34\n   * })\n   *\n   * @method Container#sum\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {string} field See {@link Mapper#sum}.\n   * @param {Object} [query] See {@link Mapper#sum}.\n   * @param {Object} [opts] See {@link Mapper#sum}.\n   * @returns {Promise} See {@link Mapper#sum}.\n   * @see Mapper#sum\n   * @since 3.0.0\n   */\n  'sum',\n\n  /**\n   * Wrapper for {@link Mapper#toJSON}.\n   *\n   * @example\n   * import {Container} from 'js-data'\n   * import RethinkDBAdapter from 'js-data-rethinkdb'\n   * const store = new Container()\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true })\n   * store.defineMapper('person', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     }\n   *   }\n   * })\n   * const person = store.createRecord('person', { id: 1, name: 'John', foo: 'bar' })\n   * console.log(store.toJSON('person', person)) // {\"id\":1,\"name\":\"John\",\"foo\":\"bar\"}\n   * console.log(store.toJSON('person', person), { strict: true }) // {\"id\":1,\"name\":\"John\"}\n   *\n   * @method Container#toJSON\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Record|Record[]} records See {@link Mapper#toJSON}.\n   * @param {Object} [opts] See {@link Mapper#toJSON}.\n   * @returns {Object|Object[]} See {@link Mapper#toJSON}.\n   * @see Mapper#toJSON\n   * @since 3.0.0\n   */\n  'toJSON',\n\n  /**\n   * Fired during {@link Container#update}. See\n   * {@link Container~beforeUpdateListener} for how to listen for this event.\n   *\n   * @event Container#beforeUpdate\n   * @see Container~beforeUpdateListener\n   * @see Container#update\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeUpdate} event.\n   *\n   * @example\n   * function onBeforeUpdate (mapperName, id, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdate', onBeforeUpdate)\n   *\n   * @callback Container~beforeUpdateListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdate}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeUpdate}.\n   * @param {Object} props The `props` argument received by {@link Mapper#beforeUpdate}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeUpdate}.\n   * @see Container#event:beforeUpdate\n   * @see Container#update\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#update}. See\n   * {@link Container~afterUpdateListener} for how to listen for this event.\n   *\n   * @event Container#afterUpdate\n   * @see Container~afterUpdateListener\n   * @see Container#update\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterUpdate} event.\n   *\n   * @example\n   * function onAfterUpdate (mapperName, id, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdate', onAfterUpdate)\n   *\n   * @callback Container~afterUpdateListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdate}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterUpdate}.\n   * @param {Object} props The `props` argument received by {@link Mapper#afterUpdate}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterUpdate}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterUpdate}.\n   * @see Container#event:afterUpdate\n   * @see Container#update\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#update}.\n   *\n   * @example\n   * import {Container} from 'js-data'\n   * import RethinkDBAdapter from 'js-data-rethinkdb'\n   * const store = new Container()\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true })\n   * store.defineMapper('post')\n   *\n   * store.update('post', 1234, {\n   *   status: 'published',\n   *   published_at: new Date()\n   * }).then((post) => {\n   *   console.log(post) // { id: 1234, status: 'published', ... }\n   * })\n   *\n   * @fires Container#beforeUpdate\n   * @fires Container#afterUpdate\n   * @method Container#update\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id See {@link Mapper#update}.\n   * @param {Object} record See {@link Mapper#update}.\n   * @param {Object} [opts] See {@link Mapper#update}.\n   * @returns {Promise} See {@link Mapper#update}.\n   * @see Mapper#update\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  'update',\n\n  /**\n   * Fired during {@link Container#updateAll}. See\n   * {@link Container~beforeUpdateAllListener} for how to listen for this event.\n   *\n   * @event Container#beforeUpdateAll\n   * @see Container~beforeUpdateAllListener\n   * @see Container#updateAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeUpdateAll} event.\n   *\n   * @example\n   * function onBeforeUpdateAll (mapperName, props, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateAll', onBeforeUpdateAll)\n   *\n   * @callback Container~beforeUpdateAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {Object} props The `props` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {Object} query The `query` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeUpdateAll}.\n   * @see Container#event:beforeUpdateAll\n   * @see Container#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#updateAll}. See\n   * {@link Container~afterUpdateAllListener} for how to listen for this event.\n   *\n   * @event Container#afterUpdateAll\n   * @see Container~afterUpdateAllListener\n   * @see Container#updateAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterUpdateAll} event.\n   *\n   * @example\n   * function onAfterUpdateAll (mapperName, props, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateAll', onAfterUpdateAll)\n   *\n   * @callback Container~afterUpdateAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {Object} props The `props` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {Object} query The `query` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterUpdateAll}.\n   * @see Container#event:afterUpdateAll\n   * @see Container#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#updateAll}.\n   *\n   * @example\n   * // Turn all of John's blog posts into drafts.\n   * import {Container} from 'js-data'\n   * import RethinkDBAdapter from 'js-data-rethinkdb'\n   * const store = new Container()\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true })\n   * store.defineMapper('post')\n   *\n   * const update = { status: draft: published_at: null }\n   * const query = { userId: 1234 }\n   * store.updateAll('post', update, query).then((posts) => {\n   *   console.log(posts) // [...]\n   * })\n   *\n   * @fires Container#beforeUpdateAll\n   * @fires Container#afterUpdateAll\n   * @method Container#updateAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Object} update See {@link Mapper#updateAll}.\n   * @param {Object} [query] See {@link Mapper#updateAll}.\n   * @param {Object} [opts] See {@link Mapper#updateAll}.\n   * @returns {Promise} See {@link Mapper#updateAll}.\n   * @see Mapper#updateAll\n   * @since 3.0.0\n   */\n  'updateAll',\n\n  /**\n   * Fired during {@link Container#updateMany}. See\n   * {@link Container~beforeUpdateManyListener} for how to listen for this event.\n   *\n   * @event Container#beforeUpdateMany\n   * @see Container~beforeUpdateManyListener\n   * @see Container#updateMany\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeUpdateMany} event.\n   *\n   * @example\n   * function onBeforeUpdateMany (mapperName, records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateMany', onBeforeUpdateMany)\n   *\n   * @callback Container~beforeUpdateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {Object} records The `records` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeUpdateMany}.\n   * @see Container#event:beforeUpdateMany\n   * @see Container#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#updateMany}. See\n   * {@link Container~afterUpdateManyListener} for how to listen for this event.\n   *\n   * @event Container#afterUpdateMany\n   * @see Container~afterUpdateManyListener\n   * @see Container#updateMany\n   */\n  /**\n   * Callback signature for the {@link Container#event:afterUpdateMany} event.\n   *\n   * @example\n   * function onAfterUpdateMany (mapperName, records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateMany', onAfterUpdateMany)\n   *\n   * @callback Container~afterUpdateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {Object} records The `records` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterUpdateMany}.\n   * @see Container#event:afterUpdateMany\n   * @see Container#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#updateMany}.\n   *\n   * @example\n   * import {Container} from 'js-data'\n   * import RethinkDBAdapter from 'js-data-rethinkdb'\n   * const store = new Container()\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true })\n   * store.defineMapper('post')\n   *\n   * store.updateMany('post', [\n   *   { id: 1234, status: 'draft' },\n   *   { id: 2468, status: 'published', published_at: new Date() }\n   * ]).then((posts) => {\n   *   console.log(posts) // [...]\n   * })\n   *\n   * @fires Container#beforeUpdateMany\n   * @fires Container#afterUpdateMany\n   * @method Container#updateMany\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(Object[]|Record[])} records See {@link Mapper#updateMany}.\n   * @param {Object} [opts] See {@link Mapper#updateMany}.\n   * @returns {Promise} See {@link Mapper#updateMany}.\n   * @see Mapper#updateMany\n   * @since 3.0.0\n   */\n  'updateMany',\n\n  /**\n   * Wrapper for {@link Mapper#validate}.\n   *\n   * @example\n   * import {Container} from 'js-data'\n   * const store = new Container()\n   * store.defineMapper('post', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     }\n   *   }\n   * })\n   * let errors = store.validate('post', { name: 'John' })\n   * console.log(errors) // undefined\n   * errors = store.validate('post', { name: 123 })\n   * console.log(errors) // [{ expected: 'one of (string)', actual: 'number', path: 'name' }]\n   *\n   * @method Container#validate\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(Object[]|Record[])} records See {@link Mapper#validate}.\n   * @param {Object} [opts] See {@link Mapper#validate}.\n   * @returns {Promise} See {@link Mapper#validate}.\n   * @see Mapper#validate\n   * @since 3.0.0\n   */\n  'validate'\n]\n\n/**\n * The `Container` class is a place to define and store {@link Mapper} instances.\n *\n * A `Container` makes it easy to manage your Mappers.\n *\n * @example <caption>Container#constructor</caption>\n * // import {Container} from 'js-data'\n * const JSData = require('js-data@3.0.0-beta.7')\n * const {Container} = JSData\n * console.log('Using JSData v' + JSData.version.full)\n *\n * const store = new Container()\n *\n * @class Container\n * @extends Component\n * @param {Object} [opts] Configuration options.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @param {Constructor} [opts.mapperClass] See {@link Container#mapperClass}.\n * @param {Object} [opts.mapperDefaults] See {@link Container#mapperDefaults}.\n * @since 3.0.0\n */\nexport function Container (opts) {\n  utils.classCallCheck(this, Container)\n  Component.call(this)\n  opts || (opts = {})\n\n  Object.defineProperties(this, {\n    /**\n     * The adapters registered with this Container, which are also shared by all\n     * Mappers in this Container.\n     *\n     * @name Container#_adapters\n     * @see Container#registerAdapter\n     * @since 3.0.0\n     * @type {Object}\n     */\n    _adapters: {\n      value: {}\n    },\n\n    /**\n     * The the mappers in this container\n     *\n     * @name Container#_mappers\n     * @see Mapper\n     * @since 3.0.0\n     * @type {Object}\n     */\n    _mappers: {\n      value: {}\n    },\n\n    /**\n     * Constructor function to use in {@link Container#defineMapper} to create new\n     * {@link Mapper} instances. {@link Container#mapperClass} should extend\n     * {@link Mapper}. By default {@link Mapper} is used to instantiate Mappers.\n     *\n     * @example <caption>Container#mapperClass</caption>\n     * // import {Container, Mapper} from 'js-data'\n     * const JSData = require('js-data@3.0.0-beta.7')\n     * const {Container} = JSData\n     * console.log('Using JSData v' + JSData.version.full)\n     *\n     * class MyMapperClass extends Mapper {\n     *   foo () { return 'bar' }\n     * }\n     * const store = new Container({\n     *   mapperClass: MyMapperClass\n     * })\n     * store.defineMapper('user')\n     * console.log(store.getMapper('user').foo())\n     *\n     * @name Container#mapperClass\n     * @see Mapper\n     * @since 3.0.0\n     * @type {Constructor}\n     */\n    mapperClass: {\n      value: undefined,\n      writable: true\n    }\n  })\n\n  // Apply options provided by the user\n  utils.fillIn(this, opts)\n\n  /**\n   * Defaults options to pass to {@link Container#mapperClass} when creating a\n   * new {@link Mapper}.\n   *\n   * @example <caption>Container#mapperDefaults</caption>\n   * // import {Container} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Container} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   *\n   * const store = new Container({\n   *   mapperDefaults: {\n   *     idAttribute: '_id'\n   *   }\n   * })\n   * store.defineMapper('user')\n   * console.log(store.getMapper('user').idAttribute)\n   *\n   * @default {}\n   * @name Container#mapperDefaults\n   * @since 3.0.0\n   * @type {Object}\n   */\n  this.mapperDefaults = this.mapperDefaults || {}\n\n  // Use the Mapper class if the user didn't provide a mapperClass\n  this.mapperClass || (this.mapperClass = Mapper)\n}\n\nconst props = {\n  constructor: Container,\n\n  /**\n   * Register a new event listener on this Container.\n   *\n   * Proxy for {@link Component#on}. If an event was emitted by a {@link Mapper}\n   * in the Container, then the name of the {@link Mapper} will be prepended to\n   * the arugments passed to the listener.\n   *\n   * @example <caption>Container#on</caption>\n   * // import {Container} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Container} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   *\n   * const store = new Container()\n   * store.on('foo', function (...args) { console.log(args.join(':')) })\n   * store.defineMapper('user')\n   * store.emit('foo', 'arg1', 'arg2')\n   * store.getMapper('user').emit('foo', 'arg1', 'arg2')\n   *\n   * @method Container#on\n   * @param {string} event Name of event to subsribe to.\n   * @param {Function} listener Listener function to handle the event.\n   * @param {*} [ctx] Optional content in which to invoke the listener.\n   * @since 3.0.0\n   */\n\n  /**\n   * Used to bind to events emitted by mappers in this container.\n   *\n   * @method Container#_onMapperEvent\n   * @param {string} name Name of the mapper that emitted the event.\n   * @param {...*} [args] Args See {@link Mapper#emit}.\n   * @private\n   * @since 3.0.0\n   */\n  _onMapperEvent (name, ...args) {\n    const type = args.shift()\n    this.emit(type, name, ...args)\n  },\n\n  /**\n   * Return a container scoped to a particular mapper.\n   *\n   * @example <caption>Container#as</caption>\n   * // import {Container} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Container} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   *\n   * const store = new Container()\n   * const UserMapper = store.defineMapper('user')\n   * const UserStore = store.as('user')\n   *\n   * const user1 = store.createRecord('user', { name: 'John' })\n   * const user2 = UserStore.createRecord({ name: 'John' })\n   * const user3 = UserMapper.createRecord({ name: 'John' })\n   * console.log(user1 === user2)\n   * console.log(user2 === user3)\n   * console.log(user1 === user3)\n   *\n   * @method Container#as\n   * @param {string} name Name of the {@link Mapper}.\n   * @returns {Object} A container scoped to a particular mapper.\n   * @since 3.0.0\n   */\n  as (name) {\n    const props = {}\n    const original = this\n    proxiedMapperMethods.forEach(function (method) {\n      props[method] = {\n        writable: true,\n        value (...args) {\n          return original[method](name, ...args)\n        }\n      }\n    })\n    props.getMapper = {\n      writable: true,\n      value () {\n        return original.getMapper(name)\n      }\n    }\n    return Object.create(this, props)\n  },\n\n  /**\n   * Create a new mapper and register it in this container.\n   *\n   * @example <caption>Container#defineMapper</caption>\n   * // import {Container} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Container} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   *\n   * const store = new Container({\n   *   mapperDefaults: { foo: 'bar' }\n   * })\n   * // Container#defineMapper returns a direct reference to the newly created\n   * // Mapper.\n   * const UserMapper = store.defineMapper('user')\n   * console.log(UserMapper === store.getMapper('user'))\n   * console.log(UserMapper === store.as('user').getMapper())\n   * console.log(UserMapper.foo)\n   *\n   * @method Container#defineMapper\n   * @param {string} name Name under which to register the new {@link Mapper}.\n   * {@link Mapper#name} will be set to this value.\n   * @param {Object} [opts] Configuration options. Passed to\n   * {@link Container#mapperClass} when creating the new {@link Mapper}.\n   * @returns {Mapper} The newly created instance of {@link Mapper}.\n   * @see Container#as\n   * @since 3.0.0\n   */\n  defineMapper (name, opts) {\n    // For backwards compatibility with defineResource\n    if (utils.isObject(name)) {\n      opts = name\n      name = opts.name\n    }\n    if (!utils.isString(name)) {\n      throw utils.err(`${DOMAIN}#defineMapper`, 'name')(400, 'string', name)\n    }\n\n    // Default values for arguments\n    opts || (opts = {})\n    // Set Mapper#name\n    opts.name = name\n    opts.relations || (opts.relations = {})\n\n    // Check if the user is overriding the datastore's default mapperClass\n    const mapperClass = opts.mapperClass || this.mapperClass\n    delete opts.mapperClass\n\n    // Apply the datastore's defaults to the options going into the mapper\n    utils.fillIn(opts, this.mapperDefaults)\n\n    // Instantiate a mapper\n    const mapper = this._mappers[name] = new mapperClass(opts) // eslint-disable-line\n    mapper.relations || (mapper.relations = {})\n    // Make sure the mapper's name is set\n    mapper.name = name\n    // All mappers in this datastore will share adapters\n    mapper._adapters = this.getAdapters()\n\n    mapper.datastore = this\n\n    mapper.on('all', (...args) => this._onMapperEvent(name, ...args))\n    mapper.defineRelations()\n\n    return mapper\n  },\n\n  defineResource (name, opts) {\n    console.warn('DEPRECATED: defineResource is deprecated, use defineMapper instead')\n    return this.defineMapper(name, opts)\n  },\n\n  /**\n   * Return the registered adapter with the given name or the default adapter if\n   * no name is provided.\n   *\n   * @method Container#getAdapter\n   * @param {string} [name] The name of the adapter to retrieve.\n   * @returns {Adapter} The adapter.\n   * @since 3.0.0\n   */\n  getAdapter (name) {\n    const adapter = this.getAdapterName(name)\n    if (!adapter) {\n      throw utils.err(`${DOMAIN}#getAdapter`, 'name')(400, 'string', name)\n    }\n    return this.getAdapters()[adapter]\n  },\n\n  /**\n   * Return the name of a registered adapter based on the given name or options,\n   * or the name of the default adapter if no name provided.\n   *\n   * @method Container#getAdapterName\n   * @param {(Object|string)} [opts] The name of an adapter or options, if any.\n   * @returns {string} The name of the adapter.\n   * @since 3.0.0\n   */\n  getAdapterName (opts) {\n    opts || (opts = {})\n    if (utils.isString(opts)) {\n      opts = { adapter: opts }\n    }\n    return opts.adapter || this.mapperDefaults.defaultAdapter\n  },\n\n  /**\n   * Return the registered adapters of this container.\n   *\n   * @method Container#getAdapters\n   * @returns {Adapter}\n   * @since 3.0.0\n   */\n  getAdapters () {\n    return this._adapters\n  },\n\n  /**\n   * Return the mapper registered under the specified name.\n   *\n   * @example <caption>Container#getMapper</caption>\n   * // import {Container} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Container} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   *\n   * const store = new Container()\n   * // Container#defineMapper returns a direct reference to the newly created\n   * // Mapper.\n   * const UserMapper = store.defineMapper('user')\n   * console.log(UserMapper === store.getMapper('user'))\n   * console.log(UserMapper === store.as('user').getMapper())\n   * store.getMapper('profile') // throws Error, there is no mapper with name \"profile\"\n   *\n   * @method Container#getMapper\n   * @param {string} name {@link Mapper#name}.\n   * @returns {Mapper}\n   * @since 3.0.0\n   */\n  getMapper (name) {\n    const mapper = this.getMapperByName(name)\n    if (!mapper) {\n      throw utils.err(`${DOMAIN}#getMapper`, name)(404, 'mapper')\n    }\n    return mapper\n  },\n\n  /**\n   * Return the mapper registered under the specified name.\n   * Doesn't throw error if mapper doesn't exist.\n   *\n   * @example <caption>Container#getMapperByName</caption>\n   * // import {Container} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {Container} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   *\n   * const store = new Container()\n   * // Container#defineMapper returns a direct reference to the newly created\n   * // Mapper.\n   * const UserMapper = store.defineMapper('user')\n   * console.log(UserMapper === store.getMapper('user'))\n   * console.log(UserMapper === store.as('user').getMapper())\n   * console.log(store.getMapper('profile')) // Does NOT throw an error\n   *\n   * @method Container#getMapperByName\n   * @param {string} name {@link Mapper#name}.\n   * @returns {Mapper}\n   * @since 3.0.0\n   */\n  getMapperByName (name) {\n    return this._mappers[name]\n  },\n\n  /**\n   * Register an adapter on this container under the given name. Adapters\n   * registered on a container are shared by all mappers in the container.\n   *\n   * @example\n   * import {Container} from 'js-data'\n   * import {RethinkDBAdapter} from 'js-data-rethinkdb'\n   * const store = new Container()\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true })\n   *\n   * @method Container#registerAdapter\n   * @param {string} name The name of the adapter to register.\n   * @param {Adapter} adapter The adapter to register.\n   * @param {Object} [opts] Configuration options.\n   * @param {boolean} [opts.default=false] Whether to make the adapter the\n   * default adapter for all Mappers in this container.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  registerAdapter (name, adapter, opts) {\n    opts || (opts = {})\n    this.getAdapters()[name] = adapter\n    // Optionally make it the default adapter for the target.\n    if (opts === true || opts.default) {\n      this.mapperDefaults.defaultAdapter = name\n      utils.forOwn(this._mappers, function (mapper) {\n        mapper.defaultAdapter = name\n      })\n    }\n  }\n}\n\nproxiedMapperMethods.forEach(function (method) {\n  props[method] = function (name, ...args) {\n    return this.getMapper(name)[method](...args)\n  }\n})\n\nComponent.extend(props)\n\n/**\n * Create a subclass of this Container:\n * @example <caption>Container.extend</caption>\n * // Normally you would do: import {Container} from 'js-data'\n * const JSData = require('js-data@3.0.0-beta.7')\n * const {Container} = JSData\n * console.log('Using JSData v' + JSData.version.full)\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomContainerClass extends Container {\n *   foo () { return 'bar' }\n *   static beep () { return 'boop' }\n * }\n * const customContainer = new CustomContainerClass()\n * console.log(customContainer.foo())\n * console.log(CustomContainerClass.beep())\n *\n * // Extend the class using alternate method.\n * const OtherContainerClass = Container.extend({\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const otherContainer = new OtherContainerClass()\n * console.log(otherContainer.foo())\n * console.log(OtherContainerClass.beep())\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherContainerClass () {\n *   Container.call(this)\n *   this.created_at = new Date().getTime()\n * }\n * Container.extend({\n *   constructor: AnotherContainerClass,\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const anotherContainer = new AnotherContainerClass()\n * console.log(anotherContainer.created_at)\n * console.log(anotherContainer.foo())\n * console.log(AnotherContainerClass.beep())\n *\n * @method Container.extend\n * @param {Object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {Object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {Object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Container class.\n * @since 3.0.0\n */\n","import utils from './utils'\nimport './decorators'\nimport Collection from './Collection'\n\nconst DOMAIN = 'LinkedCollection'\n\n/**\n * Extends {@link Collection}. Used by a {@link DataStore} to implement an\n * Identity Map.\n *\n * ```javascript\n * import {LinkedCollection} from 'js-data'\n * ```\n *\n * @class LinkedCollection\n * @extends Collection\n * @param {Array} [records] Initial set of records to insert into the\n * collection. See {@link Collection}.\n * @param {Object} [opts] Configuration options. See {@link Collection}.\n * @returns {Mapper}\n */\nfunction LinkedCollection (records, opts) {\n  utils.classCallCheck(this, LinkedCollection)\n  // Make sure this collection has somewhere to store \"added\" timestamps\n  Object.defineProperties(this, {\n    _added: {\n      value: {}\n    },\n    datastore: {\n      writable: true,\n      value: undefined\n    }\n  })\n\n  Collection.call(this, records, opts)\n\n  // Make sure this collection has a reference to a datastore\n  if (!this.datastore) {\n    throw utils.err(`new ${DOMAIN}`, 'opts.datastore')(400, 'DataStore', this.datastore)\n  }\n}\n\nexport default Collection.extend({\n  constructor: LinkedCollection,\n\n  _addMeta (record, timestamp) {\n    // Track when this record was added\n    this._added[this.recordId(record)] = timestamp\n\n    if (utils.isFunction(record._set)) {\n      record._set('$', timestamp)\n    }\n  },\n\n  _clearMeta (record) {\n    delete this._added[this.recordId(record)]\n    if (utils.isFunction(record._set)) {\n      record._set('$') // unset\n    }\n  },\n\n  _onRecordEvent (...args) {\n    Collection.prototype._onRecordEvent.apply(this, args)\n    const event = args[0]\n    // This is a very brute force method\n    // Lots of room for optimization\n    if (utils.isString(event) && event.indexOf('change') === 0) {\n      this.updateIndexes(args[1])\n    }\n  },\n\n  add (records, opts) {\n    const mapper = this.mapper\n    const timestamp = new Date().getTime()\n    const singular = utils.isObject(records) && !utils.isArray(records)\n\n    if (singular) {\n      records = [records]\n    }\n    records = Collection.prototype.add.call(this, records, opts)\n\n    if (mapper.relationList.length && records.length) {\n      // Check the currently visited record for relations that need to be\n      // inserted into their respective collections.\n      mapper.relationList.forEach(function (def) {\n        def.addLinkedRecords(records)\n      })\n    }\n\n    records.forEach((record) => this._addMeta(record, timestamp))\n\n    return singular ? records[0] : records\n  },\n\n  remove (idOrRecord, opts) {\n    const mapper = this.mapper\n    const record = Collection.prototype.remove.call(this, idOrRecord, opts)\n    if (record) {\n      this._clearMeta(record)\n    }\n\n    if (mapper.relationList.length && record) {\n      // Check the currently visited record for relations that need to be\n      // inserted into their respective collections.\n      mapper.relationList.forEach(function (def) {\n        def.removeLinkedRecords(mapper, [record])\n      })\n    }\n\n    return record\n  },\n\n  removeAll (query, opts) {\n    const mapper = this.mapper\n    const records = Collection.prototype.removeAll.call(this, query, opts)\n    records.forEach(this._clearMeta, this)\n\n    if (mapper.relationList.length && records.length) {\n      // Check the currently visited record for relations that need to be\n      // inserted into their respective collections.\n      mapper.relationList.forEach(function (def) {\n        def.removeLinkedRecords(mapper, records)\n      })\n    }\n\n    return records\n  }\n})\n\n/**\n * Create a subclass of this LinkedCollection:\n *\n * @example <caption>LinkedCollection.extend</caption>\n * // Normally you would do: import {LinkedCollection} from 'js-data'\n * const JSData = require('js-data@3.0.0-beta.7')\n * const {LinkedCollection} = JSData\n * console.log('Using JSData v' + JSData.version.full)\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomLinkedCollectionClass extends LinkedCollection {\n *   foo () { return 'bar' }\n *   static beep () { return 'boop' }\n * }\n * const customLinkedCollection = new CustomLinkedCollectionClass()\n * console.log(customLinkedCollection.foo())\n * console.log(CustomLinkedCollectionClass.beep())\n *\n * // Extend the class using alternate method.\n * const OtherLinkedCollectionClass = LinkedCollection.extend({\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const otherLinkedCollection = new OtherLinkedCollectionClass()\n * console.log(otherLinkedCollection.foo())\n * console.log(OtherLinkedCollectionClass.beep())\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherLinkedCollectionClass () {\n *   LinkedCollection.call(this)\n *   this.created_at = new Date().getTime()\n * }\n * LinkedCollection.extend({\n *   constructor: AnotherLinkedCollectionClass,\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const anotherLinkedCollection = new AnotherLinkedCollectionClass()\n * console.log(anotherLinkedCollection.created_at)\n * console.log(anotherLinkedCollection.foo())\n * console.log(AnotherLinkedCollectionClass.beep())\n *\n * @method LinkedCollection.extend\n * @param {Object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {Object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {Object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this LinkedCollection class.\n * @since 3.0.0\n */\n","import utils from './utils'\nimport {\n  belongsToType,\n  hasManyType,\n  hasOneType\n} from './decorators'\nimport {proxiedMapperMethods, Container} from './Container'\nimport LinkedCollection from './LinkedCollection'\n\nconst DOMAIN = 'DataStore'\nconst proxiedCollectionMethods = [\n  /**\n   * Wrapper for {@link LinkedCollection#add}.\n   *\n   * @example <caption>DataStore#add</caption>\n   * // Normally you would do: import {DataStore} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {DataStore} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   *\n   * const store = new DataStore()\n   * store.defineMapper('book')\n   *\n   * // Add one book to the in-memory store:\n   * store.add('book', { id: 1, title: 'Respect your Data' })\n   * // Add multiple books to the in-memory store:\n   * store.add('book', [\n   *   { id: 2, title: 'Easy data recipes' },\n   *   { id: 3, title: 'Active Record 101' }\n   * ])\n   *\n   * @fires DataStore#add\n   * @method DataStore#add\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {(Object|Object[]|Record|Record[])} data See {@link LinkedCollection#add}.\n   * @param {Object} [opts] Configuration options. See {@link LinkedCollection#add}.\n   * @returns {(Object|Object[]|Record|Record[])} See {@link LinkedCollection#add}.\n   * @see LinkedCollection#add\n   * @see Collection#add\n   * @since 3.0.0\n   */\n  'add',\n\n  /**\n   * Wrapper for {@link LinkedCollection#between}.\n   *\n   * @example\n   * // Get all users ages 18 to 30\n   * const users = store.between('user', 18, 30, { index: 'age' })\n   *\n   * @example\n   * // Same as above\n   * const users = store.between('user', [18], [30], { index: 'age' })\n   *\n   * @method DataStore#between\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {Array} leftKeys See {@link LinkedCollection#between}.\n   * @param {Array} rightKeys See {@link LinkedCollection#between}.\n   * @param {Object} [opts] Configuration options. See {@link LinkedCollection#between}.\n   * @returns {Object[]|Record[]} See {@link LinkedCollection#between}.\n   * @see LinkedCollection#between\n   * @see Collection#between\n   * @since 3.0.0\n   */\n  'between',\n\n  /**\n   * Wrapper for {@link LinkedCollection#createIndex}.\n   *\n   * @example\n   * // Index users by age\n   * store.createIndex('user', 'age')\n   *\n   * @example\n   * // Index users by status and role\n   * store.createIndex('user', 'statusAndRole', ['status', 'role'])\n   *\n   * @method DataStore#createIndex\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {string} name See {@link LinkedCollection#createIndex}.\n   * @param {string[]} [fieldList] See {@link LinkedCollection#createIndex}.\n   * @see LinkedCollection#createIndex\n   * @see Collection#createIndex\n   * @since 3.0.0\n   */\n  'createIndex',\n\n  /**\n   * Wrapper for {@link LinkedCollection#filter}.\n   *\n   * @example <caption>DataStore#filter</caption>\n   * // import {DataStore} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {DataStore} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   *\n   * const store = new DataStore()\n   * store.defineMapper('post')\n   * store.add('post', [\n   *   { id: 1, status: 'draft', created_at_timestamp: new Date().getTime() }\n   * ])\n   *\n   * // Get the draft posts created less than three months ago\n   * let posts = store.filter('post', {\n   *   where: {\n   *     status: {\n   *       '==': 'draft'\n   *     },\n   *     created_at_timestamp: {\n   *       '>=': (new Date().getTime() - (1000 \\* 60 \\* 60 \\* 24 \\* 30 \\* 3)) // 3 months ago\n   *     }\n   *   }\n   * })\n   * console.log(posts)\n   *\n   * // Use a custom filter function\n   * posts = store.filter('post', function (post) { return post.id % 2 === 0 })\n   *\n   * @method DataStore#filter\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {(Object|Function)} [queryOrFn={}] See {@link LinkedCollection#filter}.\n   * @param {Object} [thisArg] See {@link LinkedCollection#filter}.\n   * @returns {Array} See {@link LinkedCollection#filter}.\n   * @see LinkedCollection#filter\n   * @see Collection#filter\n   * @since 3.0.0\n   */\n  'filter',\n\n  /**\n   * Wrapper for {@link LinkedCollection#get}.\n   *\n   * @example <caption>DataStore#get</caption>\n   * // import {DataStore} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {DataStore} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   *\n   * const store = new DataStore()\n   * store.defineMapper('post')\n   * store.add('post', [\n   *   { id: 1, status: 'draft', created_at_timestamp: new Date().getTime() }\n   * ])\n   *\n   * console.log(store.get('post', 1)) // {...}\n   * console.log(store.get('post', 2)) // undefined\n   *\n   * @method DataStore#get\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id See {@link LinkedCollection#get}.\n   * @returns {(Object|Record)} See {@link LinkedCollection#get}.\n   * @see LinkedCollection#get\n   * @see Collection#get\n   * @since 3.0.0\n   */\n  'get',\n\n  /**\n   * Wrapper for {@link LinkedCollection#getAll}.\n   *\n   * @example\n   * // Get the posts where \"status\" is \"draft\" or \"inReview\"\n   * const posts = store.getAll('post', 'draft', 'inReview', { index: 'status' })\n   *\n   * @example\n   * // Same as above\n   * const posts = store.getAll('post', ['draft'], ['inReview'], { index: 'status' })\n   *\n   * @method DataStore#getAll\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {...Array} [keyList] See {@link LinkedCollection#getAll}.\n   * @param {Object} [opts] See {@link LinkedCollection#getAll}.\n   * @returns {Array} See {@link LinkedCollection#getAll}.\n   * @see LinkedCollection#getAll\n   * @see Collection#getAll\n   * @since 3.0.0\n   */\n  'getAll',\n\n  /**\n   * Wrapper for {@link LinkedCollection#prune}.\n   *\n   * @method DataStore#prune\n   * @param {Object} [opts] See {@link LinkedCollection#prune}.\n   * @returns {Array} See {@link LinkedCollection#prune}.\n   * @see LinkedCollection#prune\n   * @see Collection#prune\n   * @since 3.0.0\n   */\n  'prune',\n\n  /**\n   * Wrapper for {@link LinkedCollection#query}.\n   *\n   * @example\n   * // Grab page 2 of users between ages 18 and 30\n   * store.query('user')\n   *   .between(18, 30, { index: 'age' }) // between ages 18 and 30\n   *   .skip(10) // second page\n   *   .limit(10) // page size\n   *   .run()\n   *\n   * @method DataStore#query\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @returns {Query} See {@link LinkedCollection#query}.\n   * @see LinkedCollection#query\n   * @see Collection#query\n   * @since 3.0.0\n   */\n  'query',\n\n  /**\n   * Wrapper for {@link LinkedCollection#toJSON}.\n   *\n   * @example\n   * store.defineMapper('post', {\n   *   schema: {\n   *     properties: {\n   *       id: { type: 'number' },\n   *       title: { type: 'string' }\n   *     }\n   *   }\n   * })\n   * store.add('post', [\n   *   { id: 1, status: 'published', title: 'Respect your Data' },\n   *   { id: 2, status: 'draft', title: 'Connecting to a data source' }\n   * ])\n   * console.log(store.toJSON('post'))\n   * const draftsJSON = store.query('post')\n   *   .filter({ status: 'draft' })\n   *   .mapCall('toJSON')\n   *   .run()\n   *\n   * @method DataStore#toJSON\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {Object} [opts] See {@link LinkedCollection#toJSON}.\n   * @returns {Array} See {@link LinkedCollection#toJSON}.\n   * @see LinkedCollection#toJSON\n   * @see Collection#toJSON\n   * @since 3.0.0\n   */\n  'toJSON',\n\n  /**\n   * Wrapper for {@link LinkedCollection#unsaved}.\n   *\n   * @method DataStore#unsaved\n   * @returns {Array} See {@link LinkedCollection#unsaved}.\n   * @see LinkedCollection#unsaved\n   * @see Collection#unsaved\n   * @since 3.0.0\n   */\n  'unsaved'\n]\nconst ownMethodsForScoping = [\n  'addToCache',\n  'cachedFind',\n  'cachedFindAll',\n  'cacheFind',\n  'cacheFindAll',\n  'hashQuery'\n]\n\nconst safeSetProp = function (record, field, value) {\n  if (record && record._set) {\n    record._set(`props.${field}`, value)\n  } else {\n    utils.set(record, field, value)\n  }\n}\n\nconst safeSetLink = function (record, field, value) {\n  if (record && record._set) {\n    record._set(`links.${field}`, value)\n  } else {\n    utils.set(record, field, value)\n  }\n}\n\nconst cachedFn = function (name, hashOrId, opts) {\n  const cached = this._completedQueries[name][hashOrId]\n  if (utils.isFunction(cached)) {\n    return cached(name, hashOrId, opts)\n  }\n  return cached\n}\n\nconst DATASTORE_DEFAULTS = {\n  /**\n   * Whether in-memory relations should be unlinked from records after they are\n   * destroyed.\n   *\n   * @default true\n   * @name DataStore#unlinkOnDestroy\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  unlinkOnDestroy: true,\n\n  /**\n   * Whether to use the pending query if a `find` request for the specified\n   * record is currently underway. Can be set to `true`, `false`, or to a\n   * function that returns `true` or `false`.\n   *\n   * @default true\n   * @name DataStore#usePendingFind\n   * @since 3.0.0\n   * @type {boolean|Function}\n   */\n  usePendingFind: true,\n\n  /**\n   * Whether to use the pending query if a `findAll` request for the given query\n   * is currently underway. Can be set to `true`, `false`, or to a function that\n   * returns `true` or `false`.\n   *\n   * @default true\n   * @name DataStore#usePendingFindAll\n   * @since 3.0.0\n   * @type {boolean|Function}\n   */\n  usePendingFindAll: true\n}\n\n/**\n * The `DataStore` class is an extension of {@link Container}. Not only does\n * `DataStore` manage mappers, but also collections. `DataStore` implements the\n * asynchronous {@link Mapper} methods, such as {@link Mapper#find} and\n * {@link Mapper#create}. If you use the asynchronous `DataStore` methods\n * instead of calling them directly on the mappers, then the results of the\n * method calls will be inserted into the store's collections. You can think of\n * a `DataStore` as an [Identity Map](https://en.wikipedia.org/wiki/Identity_map_pattern)\n * for the [ORM](https://en.wikipedia.org/wiki/Object-relational_mapping)\n * (the Mappers).\n *\n * ```javascript\n * import {DataStore} from 'js-data'\n * ```\n *\n * @example\n * import {DataStore} from 'js-data'\n * import HttpAdapter from 'js-data-http'\n * const store = new DataStore()\n *\n * // DataStore#defineMapper returns a direct reference to the newly created\n * // Mapper.\n * const UserMapper = store.defineMapper('user')\n *\n * // DataStore#as returns the store scoped to a particular Mapper.\n * const UserStore = store.as('user')\n *\n * // Call \"find\" on \"UserMapper\" (Stateless ORM)\n * UserMapper.find(1).then((user) => {\n *   // retrieved a \"user\" record via the http adapter, but that's it\n *\n *   // Call \"find\" on \"store\" targeting \"user\" (Stateful DataStore)\n *   return store.find('user', 1) // same as \"UserStore.find(1)\"\n * }).then((user) => {\n *   // not only was a \"user\" record retrieved, but it was added to the\n *   // store's \"user\" collection\n *   const cachedUser = store.getCollection('user').get(1)\n *   console.log(user === cachedUser) // true\n * })\n *\n * @class DataStore\n * @extends Container\n * @param {Object} [opts] Configuration options. See {@link Container}.\n * @param {boolean} [opts.collectionClass={@link LinkedCollection}] See {@link DataStore#collectionClass}.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @param {boolean} [opts.unlinkOnDestroy=true] See {@link DataStore#unlinkOnDestroy}.\n * @param {boolean|Function} [opts.usePendingFind=true] See {@link DataStore#usePendingFind}.\n * @param {boolean|Function} [opts.usePendingFindAll=true] See {@link DataStore#usePendingFindAll}.\n * @returns {DataStore}\n * @see Container\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#datastore\",\"Components of JSData: DataStore\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/working-with-the-datastore\",\"Working with the DataStore\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/jsdata-and-the-browser\",\"Notes on using JSData in the Browser\"]\n */\nfunction DataStore (opts) {\n  utils.classCallCheck(this, DataStore)\n\n  opts || (opts = {})\n  // Fill in any missing options with the defaults\n  utils.fillIn(opts, DATASTORE_DEFAULTS)\n  Container.call(this, opts)\n\n  this.collectionClass = this.collectionClass || LinkedCollection\n  this._collections = {}\n  this._pendingQueries = {}\n  this._completedQueries = {}\n}\n\nconst props = {\n  constructor: DataStore,\n\n  _callSuper (method, ...args) {\n    return this.constructor.__super__.prototype[method].apply(this, args)\n  },\n\n  /**\n   * Internal method used to handle Mapper responses.\n   *\n   * @method DataStore#_end\n   * @private\n   * @param {string} name Name of the {@link LinkedCollection} to which to\n   * add the data.\n   * @param {Object} result The result from a Mapper.\n   * @param {Object} [opts] Configuration options.\n   * @returns {(Object|Array)} Result.\n   */\n  _end (name, result, opts) {\n    let data = opts.raw ? result.data : result\n    if (data && utils.isFunction(this.addToCache)) {\n      data = this.addToCache(name, data, opts)\n      if (opts.raw) {\n        result.data = data\n      } else {\n        result = data\n      }\n    }\n    return result\n  },\n\n  /**\n   * Register a new event listener on this DataStore.\n   *\n   * Proxy for {@link Container#on}. If an event was emitted by a Mapper or\n   * Collection in the DataStore, then the name of the Mapper or Collection will\n   * be prepended to the arugments passed to the provided event handler.\n   *\n   * @example\n   * // Listen for all \"afterCreate\" events in a DataStore\n   * store.on('afterCreate', (mapperName, props, opts, result) => {\n   *   console.log(mapperName) // \"post\"\n   *   console.log(props.id) // undefined\n   *   console.log(result.id) // 1234\n   * })\n   * store.create('post', { title: 'Modeling your data' }).then((post) => {\n   *   console.log(post.id) // 1234\n   * })\n   *\n   * @example\n   * // Listen for the \"add\" event on a collection\n   * store.on('add', (mapperName, records) => {\n   *   console.log(records) // [...]\n   * })\n   *\n   * @example\n   * // Listen for \"change\" events on a record\n   * store.on('change', (mapperName, record, changes) => {\n   *   console.log(changes) // { changed: { title: 'Modeling your data' } }\n   * })\n   * post.title = 'Modeling your data'\n   *\n   * @method DataStore#on\n   * @param {string} event Name of event to subsribe to.\n   * @param {Function} listener Listener function to handle the event.\n   * @param {*} [ctx] Optional content in which to invoke the listener.\n   */\n\n  /**\n   * Used to bind to events emitted by collections in this store.\n   *\n   * @method DataStore#_onCollectionEvent\n   * @private\n   * @param {string} name Name of the collection that emitted the event.\n   * @param {...*} [args] Args passed to {@link Collection#emit}.\n   */\n  _onCollectionEvent (name, ...args) {\n    const type = args.shift()\n    this.emit(type, name, ...args)\n  },\n\n  /**\n   * This method takes the data received from {@link DataStore#find},\n   * {@link DataStore#findAll}, {@link DataStore#update}, etc., and adds the\n   * data to the store. _You don't need to call this method directly._\n   *\n   * If you're using the http adapter and your response data is in an unexpected\n   * format, you may need to override this method so the right data gets added\n   * to the store.\n   *\n   * @example\n   * const store = new DataStore({\n   *   addToCache (mapperName, data, opts) {\n   *     // Let's say for a particular Resource, response data is in a weird format\n   *     if (name === 'comment') {\n   *       // Re-assign the variable to add the correct records into the stores\n   *       data = data.items\n   *     }\n   *     // Now perform default behavior\n   *     return DataStore.prototype.addToCache.call(this, mapperName, data, opts)\n   *   }\n   * })\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends DataStore {\n   *   addToCache (mapperName, data, opts) {\n   *     // Let's say for a particular Resource, response data is in a weird format\n   *     if (name === 'comment') {\n   *       // Re-assign the variable to add the correct records into the stores\n   *       data = data.items\n   *     }\n   *     // Now perform default behavior\n   *     return super.addToCache(mapperName, data, opts)\n   *   }\n   * }\n   * const store = new MyStore()\n   *\n   * @method DataStore#addToCache\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {*} data Data from which data should be selected for add.\n   * @param {Object} [opts] Configuration options.\n   */\n  addToCache (name, data, opts) {\n    return this.getCollection(name).add(data, opts)\n  },\n\n  /**\n   * Return the store scoped to a particular mapper/collection pair.\n   *\n   * @example <caption>DataStore.as</caption>\n   * // Normally you would do: import {DataStore} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {DataStore} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   *\n   * const store = new DataStore()\n   * const UserMapper = store.defineMapper('user')\n   * const UserStore = store.as('user')\n   *\n   * const user1 = store.createRecord('user', { name: 'John' })\n   * const user2 = UserStore.createRecord({ name: 'John' })\n   * const user3 = UserMapper.createRecord({ name: 'John' })\n   * console.log(user1 === user2)\n   * console.log(user2 === user3)\n   * console.log(user1 === user3)\n   *\n   * @method DataStore#as\n   * @param {string} name Name of the {@link Mapper}.\n   * @returns {Object} The store, scoped to a particular Mapper/Collection pair.\n   * @since 3.0.0\n   */\n  as (name) {\n    const props = {}\n    const original = this\n    const methods = ownMethodsForScoping\n      .concat(proxiedMapperMethods)\n      .concat(proxiedCollectionMethods)\n\n    methods.forEach(function (method) {\n      props[method] = {\n        writable: true,\n        value (...args) {\n          return original[method](name, ...args)\n        }\n      }\n    })\n    props.getMapper = {\n      writable: true,\n      value () {\n        return original.getMapper(name)\n      }\n    }\n    props.getCollection = {\n      writable: true,\n      value () {\n        return original.getCollection(name)\n      }\n    }\n    return Object.create(this, props)\n  },\n\n  /**\n   * Retrieve a cached `find` result, if any. This method is called during\n   * {@link DataStore#find} to determine if {@link Mapper#find} needs to be\n   * called. If this method returns `undefined` then {@link Mapper#find} will\n   * be called. Otherwise {@link DataStore#find} will immediately resolve with\n   * the return value of this method.\n   *\n   * When using {@link DataStore} in the browser, you can override this method\n   * to implement your own cache-busting strategy.\n   *\n   * @example\n   * const store = new DataStore({\n   *   cachedFind (mapperName, id, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return undefined to trigger a Mapper#find call\n   *       return\n   *     }\n   *     // Otherwise perform default behavior\n   *     return DataStore.prototype.cachedFind.call(this, mapperName, id, opts)\n   *   }\n   * })\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends DataStore {\n   *   cachedFind (mapperName, id, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return undefined to trigger a Mapper#find call\n   *       return\n   *     }\n   *     // Otherwise perform default behavior\n   *     return super.cachedFind(mapperName, id, opts)\n   *   }\n   * }\n   * const store = new MyStore()\n   *\n   * @method DataStore#cachedFind\n   * @param {string} name The `name` argument passed to {@link DataStore#find}.\n   * @param {(string|number)} id The `id` argument passed to {@link DataStore#find}.\n   * @param {Object} opts The `opts` argument passed to {@link DataStore#find}.\n   * @since 3.0.0\n   */\n  cachedFind: cachedFn,\n\n  /**\n   * Retrieve a cached `findAll` result, if any. This method is called during\n   * {@link DataStore#findAll} to determine if {@link Mapper#findAll} needs to be\n   * called. If this method returns `undefined` then {@link Mapper#findAll} will\n   * be called. Otherwise {@link DataStore#findAll} will immediately resolve with\n   * the return value of this method.\n   *\n   * When using {@link DataStore} in the browser, you can override this method\n   * to implement your own cache-busting strategy.\n   *\n   * @example\n   * const store = new DataStore({\n   *   cachedFindAll (mapperName, hash, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return undefined to trigger a Mapper#findAll call\n   *       return undefined\n   *     }\n   *     // Otherwise perform default behavior\n   *     return DataStore.prototype.cachedFindAll.call(this, mapperName, hash, opts)\n   *   }\n   * })\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends DataStore {\n   *   cachedFindAll (mapperName, hash, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return undefined to trigger a Mapper#findAll call\n   *       return undefined\n   *     }\n   *     // Otherwise perform default behavior\n   *     return super.cachedFindAll(mapperName, hash, opts)\n   *   }\n   * }\n   * const store = new MyStore()\n   *\n   * @method DataStore#cachedFindAll\n   * @param {string} name The `name` argument passed to {@link DataStore#findAll}.\n   * @param {string} hash The result of calling {@link DataStore#hashQuery} on\n   * the `query` argument passed to {@link DataStore#findAll}.\n   * @param {Object} opts The `opts` argument passed to {@link DataStore#findAll}.\n   * @since 3.0.0\n   */\n  cachedFindAll: cachedFn,\n\n  /**\n   * Mark a {@link Mapper#find} result as cached by adding an entry to\n   * {@link DataStore#_completedQueries}. By default, once a `find` entry is\n   * added it means subsequent calls to the same Resource with the same `id`\n   * argument will immediately resolve with the result of calling\n   * {@link DataStore#get} instead of delegating to {@link Mapper#find}.\n   *\n   * As part of implementing your own caching strategy, you may choose to\n   * override this method.\n   *\n   * @example\n   * const store = new DataStore({\n   *   cacheFind (mapperName, data, id, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return without saving an entry to DataStore#_completedQueries\n   *       return\n   *     }\n   *     // Otherwise perform default behavior\n   *     return DataStore.prototype.cacheFind.call(this, mapperName, data, id, opts)\n   *   }\n   * })\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends DataStore {\n   *   cacheFind (mapperName, data, id, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return without saving an entry to DataStore#_completedQueries\n   *       return\n   *     }\n   *     // Otherwise perform default behavior\n   *     return super.cacheFind(mapperName, data, id, opts)\n   *   }\n   * }\n   * const store = new MyStore()\n   *\n   * @method DataStore#cacheFind\n   * @param {string} name The `name` argument passed to {@link DataStore#find}.\n   * @param {*} data The result to cache.\n   * @param {(string|number)} id The `id` argument passed to {@link DataStore#find}.\n   * @param {Object} opts The `opts` argument passed to {@link DataStore#find}.\n   * @since 3.0.0\n   */\n  cacheFind (name, data, id, opts) {\n    this._completedQueries[name][id] = (name, id, opts) => this.get(name, id)\n  },\n\n  /**\n   * Mark a {@link Mapper#findAll} result as cached by adding an entry to\n   * {@link DataStore#_completedQueries}. By default, once a `findAll` entry is\n   * added it means subsequent calls to the same Resource with the same `query`\n   * argument will immediately resolve with the result of calling\n   * {@link DataStore#filter} instead of delegating to {@link Mapper#findAll}.\n   *\n   * As part of implementing your own caching strategy, you may choose to\n   * override this method.\n   *\n   * @example\n   * const store = new DataStore({\n   *   cachedFindAll (mapperName, data, hash, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return without saving an entry to DataStore#_completedQueries\n   *       return\n   *     }\n   *     // Otherwise perform default behavior.\n   *     return DataStore.prototype.cachedFindAll.call(this, mapperName, data, hash, opts)\n   *   }\n   * })\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends DataStore {\n   *   cachedFindAll (mapperName, data, hash, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return without saving an entry to DataStore#_completedQueries\n   *       return\n   *     }\n   *     // Otherwise perform default behavior.\n   *     return super.cachedFindAll(mapperName, data, hash, opts)\n   *   }\n   * }\n   * const store = new MyStore()\n   *\n   * @method DataStore#cacheFindAll\n   * @param {string} name The `name` argument passed to {@link DataStore#findAll}.\n   * @param {*} data The result to cache.\n   * @param {string} hash The result of calling {@link DataStore#hashQuery} on\n   * the `query` argument passed to {@link DataStore#findAll}.\n   * @param {Object} opts The `opts` argument passed to {@link DataStore#findAll}.\n   * @since 3.0.0\n   */\n  cacheFindAll (name, data, hash, opts) {\n    this._completedQueries[name][hash] = (name, hash, opts) => this.filter(name, utils.fromJson(hash))\n  },\n\n  /**\n   * Remove __all__ records from the in-memory store and reset\n   * {@link DataStore#_completedQueries}.\n   *\n   * @method DataStore#clear\n   * @returns {Object} Object containing all records that were in the store.\n   * @see DataStore#remove\n   * @see DataStore#removeAll\n   * @since 3.0.0\n   */\n  clear () {\n    const removed = {}\n    utils.forOwn(this._collections, (collection, name) => {\n      removed[name] = collection.removeAll()\n      this._completedQueries[name] = {}\n    })\n    return removed\n  },\n\n  /**\n   * Fired during {@link DataStore#create}. See\n   * {@link DataStore~beforeCreateListener} for how to listen for this event.\n   *\n   * @event DataStore#beforeCreate\n   * @see DataStore~beforeCreateListener\n   * @see DataStore#create\n   */\n  /**\n   * Callback signature for the {@link DataStore#event:beforeCreate} event.\n   *\n   * @example\n   * function onBeforeCreate (mapperName, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreate', onBeforeCreate)\n   *\n   * @callback DataStore~beforeCreateListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeCreate}.\n   * @param {Object} props The `props` argument received by {@link Mapper#beforeCreate}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeCreate}.\n   * @see DataStore#event:beforeCreate\n   * @see DataStore#create\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link DataStore#create}. See\n   * {@link DataStore~afterCreateListener} for how to listen for this event.\n   *\n   * @event DataStore#afterCreate\n   * @see DataStore~afterCreateListener\n   * @see DataStore#create\n   */\n  /**\n   * Callback signature for the {@link DataStore#event:afterCreate} event.\n   *\n   * @example\n   * function onAfterCreate (mapperName, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreate', onAfterCreate)\n   *\n   * @callback DataStore~afterCreateListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterCreate}.\n   * @param {Object} props The `props` argument received by {@link Mapper#afterCreate}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterCreate}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterCreate}.\n   * @see DataStore#event:afterCreate\n   * @see DataStore#create\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#create}. Adds the created record to the store.\n   *\n   * @example\n   * import {DataStore} from 'js-data'\n   * import {HttpAdapter} from 'js-data-http'\n   *\n   * const store = new DataStore()\n   * store.registerAdapter('http', new HttpAdapter(), { default: true })\n   *\n   * store.defineMapper('book')\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   POST /book {\"author_id\":1234,...}\n   * store.create('book', {\n   *   author_id: 1234,\n   *   edition: 'First Edition',\n   *   title: 'Respect your Data'\n   * }).then((book) => {\n   *   console.log(book.id) // 120392\n   *   console.log(book.title) // \"Respect your Data\"\n   * })\n   *\n   * @fires DataStore#beforeCreate\n   * @fires DataStore#afterCreate\n   * @fires DataStore#add\n   * @method DataStore#create\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Object} record Passed to {@link Mapper#create}.\n   * @param {Object} [opts] Passed to {@link Mapper#create}. See\n   * {@link Mapper#create} for more configuration options.\n   * @returns {Promise} Resolves with the result of the create.\n   * @since 3.0.0\n   */\n  create (name, record, opts) {\n    opts || (opts = {})\n    return this._callSuper('create', name, record, opts)\n      .then((result) => this._end(name, result, opts))\n  },\n\n  /**\n   * Fired during {@link DataStore#createMany}. See\n   * {@link DataStore~beforeCreateManyListener} for how to listen for this event.\n   *\n   * @event DataStore#beforeCreateMany\n   * @see DataStore~beforeCreateManyListener\n   * @see DataStore#createMany\n   */\n  /**\n   * Callback signature for the {@link DataStore#event:beforeCreateMany} event.\n   *\n   * @example\n   * function onBeforeCreateMany (mapperName, records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreateMany', onBeforeCreateMany)\n   *\n   * @callback DataStore~beforeCreateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {Object} records The `records` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeCreateMany}.\n   * @see DataStore#event:beforeCreateMany\n   * @see DataStore#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link DataStore#createMany}. See\n   * {@link DataStore~afterCreateManyListener} for how to listen for this event.\n   *\n   * @event DataStore#afterCreateMany\n   * @see DataStore~afterCreateManyListener\n   * @see DataStore#createMany\n   */\n  /**\n   * Callback signature for the {@link DataStore#event:afterCreateMany} event.\n   *\n   * @example\n   * function onAfterCreateMany (mapperName, records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreateMany', onAfterCreateMany)\n   *\n   * @callback DataStore~afterCreateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterCreateMany}.\n   * @param {Object} records The `records` argument received by {@link Mapper#afterCreateMany}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterCreateMany}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterCreateMany}.\n   * @see DataStore#event:afterCreateMany\n   * @see DataStore#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#createMany}. Adds the created records to the\n   * store.\n   *\n   * @example\n   * import {DataStore} from 'js-data'\n   * import {HttpAdapter} from 'js-data-http'\n   *\n   * const store = new DataStore()\n   * store.registerAdapter('http', new HttpAdapter(), { default: true })\n   *\n   * store.defineMapper('book')\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   POST /book [{\"author_id\":1234,...},{...}]\n   * store.createMany('book', [{\n   *   author_id: 1234,\n   *   edition: 'First Edition',\n   *   title: 'Respect your Data'\n   * }, {\n   *   author_id: 1234,\n   *   edition: 'Second Edition',\n   *   title: 'Respect your Data'\n   * }]).then((books) => {\n   *   console.log(books[0].id) // 142394\n   *   console.log(books[0].title) // \"Respect your Data\"\n   * })\n   *\n   * @fires DataStore#beforeCreateMany\n   * @fires DataStore#afterCreateMany\n   * @fires DataStore#add\n   * @method DataStore#createMany\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Array} records Passed to {@link Mapper#createMany}.\n   * @param {Object} [opts] Passed to {@link Mapper#createMany}. See\n   * {@link Mapper#createMany} for more configuration options.\n   * @returns {Promise} Resolves with the result of the create.\n   * @since 3.0.0\n   */\n  createMany (name, records, opts) {\n    opts || (opts = {})\n    return this._callSuper('createMany', name, records, opts)\n      .then((result) => this._end(name, result, opts))\n  },\n\n  defineMapper (name, opts) {\n    // Complexity of this method is beyond simply using => functions to bind context\n    const self = this\n    const mapper = Container.prototype.defineMapper.call(self, name, opts)\n    self._pendingQueries[name] = {}\n    self._completedQueries[name] = {}\n    mapper.relationList || Object.defineProperty(mapper, 'relationList', { value: [] })\n\n    // The datastore uses a subclass of Collection that is \"datastore-aware\"\n    const collection = self._collections[name] = new self.collectionClass(null, { // eslint-disable-line\n      // Make sure the collection has somewhere to store \"added\" timestamps\n      _added: {},\n      // Give the collection a reference to this datastore\n      datastore: self,\n      // The mapper tied to the collection\n      mapper\n    })\n\n    const schema = mapper.schema || {}\n    const properties = schema.properties || {}\n    // TODO: Make it possible index nested properties?\n    utils.forOwn(properties, function (opts, prop) {\n      if (opts.indexed) {\n        collection.createIndex(prop)\n      }\n    })\n\n    // Create a secondary index on the \"added\" timestamps of records in the\n    // collection\n    collection.createIndex('addedTimestamps', ['$'], {\n      fieldGetter (obj) {\n        return collection._added[collection.recordId(obj)]\n      }\n    })\n\n    collection.on('all', function (...args) {\n      self._onCollectionEvent(name, ...args)\n    })\n\n    const idAttribute = mapper.idAttribute\n\n    mapper.relationList.forEach(function (def) {\n      const relation = def.relation\n      const localField = def.localField\n      const path = `links.${localField}`\n      const foreignKey = def.foreignKey\n      const type = def.type\n      const updateOpts = { index: foreignKey }\n      let descriptor\n\n      const getter = function () { return this._get(path) }\n\n      if (type === belongsToType) {\n        if (!collection.indexes[foreignKey]) {\n          collection.createIndex(foreignKey)\n        }\n\n        descriptor = {\n          get: getter,\n          // e.g. profile.user = someUser\n          // or comment.post = somePost\n          set (record) {\n            // e.g. const otherUser = profile.user\n            const currentParent = this._get(path)\n            // e.g. profile.user === someUser\n            if (record === currentParent) {\n              return currentParent\n            }\n            const id = utils.get(this, idAttribute)\n            const inverseDef = def.getInverse(mapper)\n\n            // e.g. profile.user !== someUser\n            // or comment.post !== somePost\n            if (currentParent) {\n              // e.g. otherUser.profile = undefined\n              if (inverseDef.type === hasOneType) {\n                safeSetLink(currentParent, inverseDef.localField, undefined)\n              } else if (inverseDef.type === hasManyType) {\n                // e.g. remove comment from otherPost.comments\n                const children = utils.get(currentParent, inverseDef.localField)\n                if (id === undefined) {\n                  utils.remove(children, (child) => child === this)\n                } else {\n                  utils.remove(children, (child) => child === this || id === utils.get(child, idAttribute))\n                }\n              }\n            }\n            if (record) {\n              // e.g. profile.user = someUser\n              const relatedIdAttribute = def.getRelation().idAttribute\n              const relatedId = utils.get(record, relatedIdAttribute)\n\n              // Prefer store record\n              if (relatedId !== undefined && this._get('$')) {\n                record = self.get(relation, relatedId) || record\n              }\n\n              // Set locals\n              // e.g. profile.user = someUser\n              // or comment.post = somePost\n              safeSetLink(this, localField, record)\n              safeSetProp(this, foreignKey, relatedId)\n              collection.updateIndex(this, updateOpts)\n\n              // Update (set) inverse relation\n              if (inverseDef.type === hasOneType) {\n                // e.g. someUser.profile = profile\n                safeSetLink(record, inverseDef.localField, this)\n              } else if (inverseDef.type === hasManyType) {\n                // e.g. add comment to somePost.comments\n                const children = utils.get(record, inverseDef.localField)\n                if (id === undefined) {\n                  utils.noDupeAdd(children, this, (child) => child === this)\n                } else {\n                  utils.noDupeAdd(children, this, (child) => child === this || id === utils.get(child, idAttribute))\n                }\n              }\n            } else {\n              // Unset in-memory link only\n              // e.g. profile.user = undefined\n              // or comment.post = undefined\n              safeSetLink(this, localField, undefined)\n            }\n            return record\n          }\n        }\n\n        let foreignKeyDescriptor = Object.getOwnPropertyDescriptor(mapper.recordClass.prototype, foreignKey)\n        if (!foreignKeyDescriptor) {\n          foreignKeyDescriptor = {\n            enumerable: true\n          }\n        }\n        const originalGet = foreignKeyDescriptor.get\n        foreignKeyDescriptor.get = function () {\n          if (originalGet) {\n            return originalGet.call(this)\n          }\n          return this._get(`props.${foreignKey}`)\n        }\n        const originalSet = foreignKeyDescriptor.set\n        foreignKeyDescriptor.set = function (value) {\n          if (originalSet) {\n            originalSet.call(this, value)\n          }\n          const currentParent = utils.get(this, localField)\n          const id = utils.get(this, idAttribute)\n          const inverseDef = def.getInverse(mapper)\n          const currentParentId = currentParent ? utils.get(currentParent, def.getRelation().idAttribute) : undefined\n\n          if (currentParent && currentParentId !== undefined && currentParentId !== value) {\n            if (inverseDef.type === hasOneType) {\n              safeSetLink(currentParent, inverseDef.localField, undefined)\n            } else if (inverseDef.type === hasManyType) {\n              const children = utils.get(currentParent, inverseDef.localField)\n              if (id === undefined) {\n                utils.remove(children, (child) => child === this)\n              } else {\n                utils.remove(children, (child) => child === this || id === utils.get(child, idAttribute))\n              }\n            }\n          }\n\n          safeSetProp(this, foreignKey, value)\n          collection.updateIndex(this, updateOpts)\n\n          if ((value === undefined || value === null)) {\n            if (currentParentId !== undefined) {\n              // Unset locals\n              utils.set(this, localField, undefined)\n            }\n          } else if (this._get('$')) {\n            const storeRecord = self.get(relation, value)\n            if (storeRecord) {\n              utils.set(this, localField, storeRecord)\n            }\n          }\n        }\n        Object.defineProperty(mapper.recordClass.prototype, foreignKey, foreignKeyDescriptor)\n      } else if (type === hasManyType) {\n        const localKeys = def.localKeys\n        const foreignKeys = def.foreignKeys\n\n        // TODO: Handle case when belongsTo relation isn't ever defined\n        if (self._collections[relation] && foreignKey && !self.getCollection(relation).indexes[foreignKey]) {\n          self.getCollection(relation).createIndex(foreignKey)\n        }\n\n        descriptor = {\n          get () {\n            let current = getter.call(this)\n            if (!current) {\n              this._set(path, [])\n            }\n            return getter.call(this)\n          },\n          // e.g. post.comments = someComments\n          // or user.groups = someGroups\n          // or group.users = someUsers\n          set (records) {\n            if (records && !utils.isArray(records)) {\n              records = [records]\n            }\n            const id = utils.get(this, idAttribute)\n            const relatedIdAttribute = def.getRelation().idAttribute\n            const inverseDef = def.getInverse(mapper)\n            const inverseLocalField = inverseDef.localField\n            const current = this._get(path) || []\n            const toLink = []\n            const toLinkIds = {}\n\n            if (records) {\n              records.forEach((record) => {\n                // e.g. comment.id\n                const relatedId = utils.get(record, relatedIdAttribute)\n                const currentParent = utils.get(record, inverseLocalField)\n                if (currentParent && currentParent !== this) {\n                  const currentChildrenOfParent = utils.get(currentParent, localField)\n                  // e.g. somePost.comments.remove(comment)\n                  if (relatedId === undefined) {\n                    utils.remove(currentChildrenOfParent, (child) => child === record)\n                  } else {\n                    utils.remove(currentChildrenOfParent, (child) => child === record || relatedId === utils.get(child, relatedIdAttribute))\n                  }\n                }\n                if (relatedId !== undefined) {\n                  if (this._get('$')) {\n                    // Prefer store record\n                    record = self.get(relation, relatedId) || record\n                  }\n                  // e.g. toLinkIds[comment.id] = comment\n                  toLinkIds[relatedId] = record\n                }\n                toLink.push(record)\n              })\n            }\n\n            // e.g. post.comments = someComments\n            if (foreignKey) {\n              current.forEach((record) => {\n                // e.g. comment.id\n                const relatedId = utils.get(record, relatedIdAttribute)\n                if ((relatedId === undefined && toLink.indexOf(record) === -1) || (relatedId !== undefined && !(relatedId in toLinkIds))) {\n                  // Update (unset) inverse relation\n                  if (records) {\n                    // e.g. comment.post_id = undefined\n                    safeSetProp(record, foreignKey, undefined)\n                    // e.g. CommentCollection.updateIndex(comment, { index: 'post_id' })\n                    self.getCollection(relation).updateIndex(record, updateOpts)\n                  }\n                  // e.g. comment.post = undefined\n                  safeSetLink(record, inverseLocalField, undefined)\n                }\n              })\n              toLink.forEach((record) => {\n                // Update (set) inverse relation\n                // e.g. comment.post_id = post.id\n                safeSetProp(record, foreignKey, id)\n                // e.g. CommentCollection.updateIndex(comment, { index: 'post_id' })\n                self.getCollection(relation).updateIndex(record, updateOpts)\n                // e.g. comment.post = post\n                safeSetLink(record, inverseLocalField, this)\n              })\n            } else if (localKeys) {\n              // Update locals\n              // e.g. group.users = someUsers\n              // Update (set) inverse relation\n              const ids = toLink.map((child) => utils.get(child, relatedIdAttribute)).filter((id) => id !== undefined)\n              // e.g. group.user_ids = [1,2,3,...]\n              utils.set(this, localKeys, ids)\n              // Update (unset) inverse relation\n              if (inverseDef.foreignKeys) {\n                current.forEach((child) => {\n                  const relatedId = utils.get(child, relatedIdAttribute)\n                  if ((relatedId === undefined && toLink.indexOf(child) === -1) || (relatedId !== undefined && !(relatedId in toLinkIds))) {\n                    // Update inverse relation\n                    // safeSetLink(child, inverseLocalField, undefined)\n                    const parents = utils.get(child, inverseLocalField) || []\n                    // e.g. someUser.groups.remove(group)\n                    if (id === undefined) {\n                      utils.remove(parents, (parent) => parent === this)\n                    } else {\n                      utils.remove(parents, (parent) => parent === this || id === utils.get(parent, idAttribute))\n                    }\n                  }\n                })\n                toLink.forEach((child) => {\n                  // Update (set) inverse relation\n                  const parents = utils.get(child, inverseLocalField)\n                  // e.g. someUser.groups.push(group)\n                  if (id === undefined) {\n                    utils.noDupeAdd(parents, this, (parent) => parent === this)\n                  } else {\n                    utils.noDupeAdd(parents, this, (parent) => parent === this || id === utils.get(parent, idAttribute))\n                  }\n                })\n              }\n            } else if (foreignKeys) {\n              // e.g. user.groups = someGroups\n              // Update (unset) inverse relation\n              current.forEach((parent) => {\n                const ids = utils.get(parent, foreignKeys) || []\n                // e.g. someGroup.user_ids.remove(user.id)\n                utils.remove(ids, (_key) => id === _key)\n                const children = utils.get(parent, inverseLocalField)\n                // e.g. someGroup.users.remove(user)\n                if (id === undefined) {\n                  utils.remove(children, (child) => child === this)\n                } else {\n                  utils.remove(children, (child) => child === this || id === utils.get(child, idAttribute))\n                }\n              })\n              // Update (set) inverse relation\n              toLink.forEach((parent) => {\n                const ids = utils.get(parent, foreignKeys) || []\n                utils.noDupeAdd(ids, id, (_key) => id === _key)\n                const children = utils.get(parent, inverseLocalField)\n                if (id === undefined) {\n                  utils.noDupeAdd(children, this, (child) => child === this)\n                } else {\n                  utils.noDupeAdd(children, this, (child) => child === this || id === utils.get(child, idAttribute))\n                }\n              })\n            }\n\n            this._set(path, toLink)\n            return toLink\n          }\n        }\n      } else if (type === hasOneType) {\n        // TODO: Handle case when belongsTo relation isn't ever defined\n        if (self._collections[relation] && foreignKey && !self.getCollection(relation).indexes[foreignKey]) {\n          self.getCollection(relation).createIndex(foreignKey)\n        }\n        descriptor = {\n          get: getter,\n          // e.g. user.profile = someProfile\n          set (record) {\n            const current = this._get(path)\n            if (record === current) {\n              return current\n            }\n            const inverseLocalField = def.getInverse(mapper).localField\n            if (record) {\n              // Update (unset) inverse relation\n              if (current) {\n                safeSetProp(current, foreignKey, undefined)\n                self.getCollection(relation).updateIndex(current, updateOpts)\n                safeSetLink(current, inverseLocalField, undefined)\n              }\n              const relatedId = utils.get(record, def.getRelation().idAttribute)\n              // Prefer store record\n              if (relatedId !== undefined) {\n                record = self.get(relation, relatedId) || record\n              }\n\n              // Set locals\n              safeSetLink(this, localField, record)\n\n              // Update (set) inverse relation\n              safeSetProp(record, foreignKey, utils.get(this, idAttribute))\n              self.getCollection(relation).updateIndex(record, updateOpts)\n              safeSetLink(record, inverseLocalField, this)\n            } else {\n              // Unset locals\n              safeSetLink(this, localField, undefined)\n            }\n            return record\n          }\n        }\n      }\n\n      if (descriptor) {\n        descriptor.enumerable = def.enumerable === undefined ? false : def.enumerable\n        if (def.get) {\n          let origGet = descriptor.get\n          descriptor.get = function () {\n            return def.get(def, this, (...args) => origGet.apply(this, args))\n          }\n        }\n        if (def.set) {\n          let origSet = descriptor.set\n          descriptor.set = function (related) {\n            return def.set(def, this, related, (value) => origSet.call(this, value === undefined ? related : value))\n          }\n        }\n        Object.defineProperty(mapper.recordClass.prototype, localField, descriptor)\n      }\n    })\n\n    return mapper\n  },\n\n  /**\n   * Fired during {@link DataStore#destroy}. See\n   * {@link DataStore~beforeDestroyListener} for how to listen for this event.\n   *\n   * @event DataStore#beforeDestroy\n   * @see DataStore~beforeDestroyListener\n   * @see DataStore#destroy\n   */\n  /**\n   * Callback signature for the {@link DataStore#event:beforeDestroy} event.\n   *\n   * @example\n   * function onBeforeDestroy (mapperName, id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroy', onBeforeDestroy)\n   *\n   * @callback DataStore~beforeDestroyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeDestroy}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeDestroy}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeDestroy}.\n   * @see DataStore#event:beforeDestroy\n   * @see DataStore#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link DataStore#destroy}. See\n   * {@link DataStore~afterDestroyListener} for how to listen for this event.\n   *\n   * @event DataStore#afterDestroy\n   * @see DataStore~afterDestroyListener\n   * @see DataStore#destroy\n   */\n  /**\n   * Callback signature for the {@link DataStore#event:afterDestroy} event.\n   *\n   * @example\n   * function onAfterDestroy (mapperName, id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroy', onAfterDestroy)\n   *\n   * @callback DataStore~afterDestroyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterDestroy}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterDestroy}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterDestroy}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterDestroy}.\n   * @see DataStore#event:afterDestroy\n   * @see DataStore#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#destroy}. Removes any destroyed record from the\n   * in-memory store. Clears out any {@link DataStore#_completedQueries} entries\n   * associated with the provided `id`.\n   *\n   * @example\n   * import {DataStore} from 'js-data'\n   * import {HttpAdapter} from 'js-data-http'\n   *\n   * const store = new DataStore()\n   * store.registerAdapter('http', new HttpAdapter(), { default: true })\n   *\n   * store.defineMapper('book')\n   *\n   * store.add('book', { id: 1234, title: 'Data Management is Hard' })\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   DELETE /book/1234\n   * store.destroy('book', 1234).then(() => {\n   *   // The book record is no longer in the in-memory store\n   *   console.log(store.get('book', 1234)) // undefined\n   *\n   *   return store.find('book', 1234)\n   * }).then((book) {\n   *   // The book was deleted from the database too\n   *   console.log(book) // undefined\n   * })\n   *\n   * @fires DataStore#beforeDestroy\n   * @fires DataStore#afterDestroy\n   * @fires DataStore#remove\n   * @method DataStore#destroy\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id Passed to {@link Mapper#destroy}.\n   * @param {Object} [opts] Passed to {@link Mapper#destroy}. See\n   * {@link Mapper#destroy} for more configuration options.\n   * @returns {Promise} Resolves when the destroy operation completes.\n   * @since 3.0.0\n   */\n  destroy (name, id, opts) {\n    opts || (opts = {})\n    return this._callSuper('destroy', name, id, opts).then((result) => {\n      const record = this.getCollection(name).remove(id, opts)\n\n      if (record && this.unlinkOnDestroy) {\n        const _opts = utils.plainCopy(opts)\n        _opts.withAll = true\n        utils.forEachRelation(this.getMapper(name), _opts, (def) => {\n          utils.set(record, def.localField, undefined)\n        })\n      }\n\n      if (opts.raw) {\n        result.data = record\n      } else {\n        result = record\n      }\n      delete this._pendingQueries[name][id]\n      delete this._completedQueries[name][id]\n      return result\n    })\n  },\n\n  /**\n   * Fired during {@link DataStore#destroyAll}. See\n   * {@link DataStore~beforeDestroyAllListener} for how to listen for this event.\n   *\n   * @event DataStore#beforeDestroyAll\n   * @see DataStore~beforeDestroyAllListener\n   * @see DataStore#destroyAll\n   */\n  /**\n   * Callback signature for the {@link DataStore#event:beforeDestroyAll} event.\n   *\n   * @example\n   * function onBeforeDestroyAll (mapperName, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroyAll', onBeforeDestroyAll)\n   *\n   * @callback DataStore~beforeDestroyAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeDestroyAll}.\n   * @param {Object} query The `query` argument received by {@link Mapper#beforeDestroyAll}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeDestroyAll}.\n   * @see DataStore#event:beforeDestroyAll\n   * @see DataStore#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link DataStore#destroyAll}. See\n   * {@link DataStore~afterDestroyAllListener} for how to listen for this event.\n   *\n   * @event DataStore#afterDestroyAll\n   * @see DataStore~afterDestroyAllListener\n   * @see DataStore#destroyAll\n   */\n  /**\n   * Callback signature for the {@link DataStore#event:afterDestroyAll} event.\n   *\n   * @example\n   * function onAfterDestroyAll (mapperName, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroyAll', onAfterDestroyAll)\n   *\n   * @callback DataStore~afterDestroyAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {Object} query The `query` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterDestroyAll}.\n   * @see DataStore#event:afterDestroyAll\n   * @see DataStore#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#destroyAll}. Removes any destroyed records from\n   * the in-memory store.\n   *\n   * @example\n   * import {DataStore} from 'js-data'\n   * import {HttpAdapter} from 'js-data-http'\n   *\n   * const store = new DataStore()\n   * store.registerAdapter('http', new HttpAdapter(), { default: true })\n   *\n   * store.defineMapper('book')\n   *\n   * store.add('book', { id: 1234, title: 'Data Management is Hard' })\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   DELETE /book/1234\n   * store.destroy('book', 1234).then(() => {\n   *   // The book record is gone from the in-memory store\n   *   console.log(store.get('book', 1234)) // undefined\n   *   return store.find('book', 1234)\n   * }).then((book) {\n   *   // The book was deleted from the database too\n   *   console.log(book) // undefined\n   * })\n   *\n   * @fires DataStore#beforeDestroyAll\n   * @fires DataStore#afterDestroyAll\n   * @fires DataStore#remove\n   * @method DataStore#destroyAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Object} [query] Passed to {@link Mapper#destroyAll}.\n   * @param {Object} [opts] Passed to {@link Mapper#destroyAll}. See\n   * {@link Mapper#destroyAll} for more configuration options.\n   * @returns {Promise} Resolves when the delete completes.\n   * @since 3.0.0\n   */\n  destroyAll (name, query, opts) {\n    opts || (opts = {})\n    return this._callSuper('destroyAll', name, query, opts).then((result) => {\n      const records = this.getCollection(name).removeAll(query, opts)\n\n      if (records && records.length && this.unlinkOnDestroy) {\n        const _opts = utils.plainCopy(opts)\n        _opts.withAll = true\n        utils.forEachRelation(this.getMapper(name), _opts, (def) => {\n          records.forEach((record) => {\n            utils.set(record, def.localField, undefined)\n          })\n        })\n      }\n\n      if (opts.raw) {\n        result.data = records\n      } else {\n        result = records\n      }\n      const hash = this.hashQuery(name, query, opts)\n      delete this._pendingQueries[name][hash]\n      delete this._completedQueries[name][hash]\n      return result\n    })\n  },\n\n  eject (name, id, opts) {\n    console.warn('DEPRECATED: \"eject\" is deprecated, use \"remove\" instead')\n    return this.remove(name, id, opts)\n  },\n\n  ejectAll (name, query, opts) {\n    console.warn('DEPRECATED: \"ejectAll\" is deprecated, use \"removeAll\" instead')\n    return this.removeAll(name, query, opts)\n  },\n\n  /**\n   * Fired during {@link DataStore#find}. See\n   * {@link DataStore~beforeFindListener} for how to listen for this event.\n   *\n   * @event DataStore#beforeFind\n   * @see DataStore~beforeFindListener\n   * @see DataStore#find\n   */\n  /**\n   * Callback signature for the {@link DataStore#event:beforeFind} event.\n   *\n   * @example\n   * function onBeforeFind (mapperName, id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFind', onBeforeFind)\n   *\n   * @callback DataStore~beforeFindListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeFind}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeFind}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeFind}.\n   * @see DataStore#event:beforeFind\n   * @see DataStore#find\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link DataStore#find}. See\n   * {@link DataStore~afterFindListener} for how to listen for this event.\n   *\n   * @event DataStore#afterFind\n   * @see DataStore~afterFindListener\n   * @see DataStore#find\n   */\n  /**\n   * Callback signature for the {@link DataStore#event:afterFind} event.\n   *\n   * @example\n   * function onAfterFind (mapperName, id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFind', onAfterFind)\n   *\n   * @callback DataStore~afterFindListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterFind}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterFind}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterFind}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterFind}.\n   * @see DataStore#event:afterFind\n   * @see DataStore#find\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#find}. Adds any found record to the store.\n   *\n   * @example\n   * import {DataStore} from 'js-data'\n   * import {HttpAdapter} from 'js-data-http'\n   *\n   * const store = new DataStore()\n   * store.registerAdapter('http', new HttpAdapter(), { default: true })\n   *\n   * store.defineMapper('book')\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   GET /book/1234\n   * store.find('book', 1234).then((book) => {\n   *   // The book record is now in the in-memory store\n   *   console.log(store.get('book', 1234) === book) // true\n   * })\n   *\n   * @fires DataStore#beforeFind\n   * @fires DataStore#afterFind\n   * @fires DataStore#add\n   * @method DataStore#find\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id Passed to {@link Mapper#find}.\n   * @param {Object} [opts] Passed to {@link Mapper#find}.\n   * @param {boolean|Function} [opts.usePendingFind] See {@link DataStore#usePendingFind}\n   * @returns {Promise} Resolves with the result, if any.\n   * @since 3.0.0\n   */\n  find (name, id, opts) {\n    opts || (opts = {})\n    const mapper = this.getMapper(name)\n    const pendingQuery = this._pendingQueries[name][id]\n    const usePendingFind = opts.usePendingFind === undefined ? this.usePendingFind : opts.usePendingFind\n    utils._(opts, mapper)\n\n    if (pendingQuery && (utils.isFunction(usePendingFind) ? usePendingFind.call(this, name, id, opts) : usePendingFind)) {\n      return pendingQuery\n    }\n    const item = this.cachedFind(name, id, opts)\n    let promise\n\n    if (opts.force || !item) {\n      promise = this._pendingQueries[name][id] = this._callSuper('find', name, id, opts).then((result) => {\n        delete this._pendingQueries[name][id]\n        result = this._end(name, result, opts)\n        this.cacheFind(name, result, id, opts)\n        return result\n      }, (err) => {\n        delete this._pendingQueries[name][id]\n        return utils.reject(err)\n      })\n    } else {\n      promise = utils.resolve(item)\n    }\n    return promise\n  },\n\n  /**\n   * Fired during {@link DataStore#findAll}. See\n   * {@link DataStore~beforeFindAllListener} for how to listen for this event.\n   *\n   * @event DataStore#beforeFindAll\n   * @see DataStore~beforeFindAllListener\n   * @see DataStore#findAll\n   */\n  /**\n   * Callback signature for the {@link DataStore#event:beforeFindAll} event.\n   *\n   * @example\n   * function onBeforeFindAll (mapperName, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFindAll', onBeforeFindAll)\n   *\n   * @callback DataStore~beforeFindAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeFindAll}.\n   * @param {Object} query The `query` argument received by {@link Mapper#beforeFindAll}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeFindAll}.\n   * @see DataStore#event:beforeFindAll\n   * @see DataStore#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link DataStore#findAll}. See\n   * {@link DataStore~afterFindAllListener} for how to listen for this event.\n   *\n   * @event DataStore#afterFindAll\n   * @see DataStore~afterFindAllListener\n   * @see DataStore#findAll\n   */\n  /**\n   * Callback signature for the {@link DataStore#event:afterFindAll} event.\n   *\n   * @example\n   * function onAfterFindAll (mapperName, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFindAll', onAfterFindAll)\n   *\n   * @callback DataStore~afterFindAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterFindAll}.\n   * @param {Object} query The `query` argument received by {@link Mapper#afterFindAll}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterFindAll}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterFindAll}.\n   * @see DataStore#event:afterFindAll\n   * @see DataStore#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#findAll}. Adds any found records to the store.\n   *\n   * @example\n   * import {DataStore} from 'js-data'\n   * import {HttpAdapter} from 'js-data-http'\n   *\n   * const store = new DataStore()\n   * store.registerAdapter('http', new HttpAdapter(), { default: true })\n   *\n   * store.defineMapper('movie')\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   GET /movie?rating=PG\n   * store.find('movie', { rating: 'PG' }).then((movies) => {\n   *   // The movie records are now in the in-memory store\n   *   console.log(store.filter('movie'))\n   * })\n   *\n   * @fires DataStore#beforeFindAll\n   * @fires DataStore#afterFindAll\n   * @fires DataStore#add\n   * @method DataStore#findAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Object} [query] Passed to {@link Mapper.findAll}.\n   * @param {Object} [opts] Passed to {@link Mapper.findAll}.\n   * @param {boolean|Function} [opts.usePendingFindAll] See {@link DataStore#usePendingFindAll}\n   * @returns {Promise} Resolves with the result, if any.\n   * @since 3.0.0\n   */\n  findAll (name, query, opts) {\n    opts || (opts = {})\n    const mapper = this.getMapper(name)\n    const hash = this.hashQuery(name, query, opts)\n    const pendingQuery = this._pendingQueries[name][hash]\n    const usePendingFindAll = opts.usePendingFindAll === undefined ? this.usePendingFindAll : opts.usePendingFindAll\n    utils._(opts, mapper)\n\n    if (pendingQuery && (utils.isFunction(usePendingFindAll) ? usePendingFindAll.call(this, name, query, opts) : usePendingFindAll)) {\n      return pendingQuery\n    }\n\n    const items = this.cachedFindAll(name, hash, opts)\n    let promise\n\n    if (opts.force || !items) {\n      promise = this._pendingQueries[name][hash] = this._callSuper('findAll', name, query, opts).then((result) => {\n        delete this._pendingQueries[name][hash]\n        result = this._end(name, result, opts)\n        this.cacheFindAll(name, result, hash, opts)\n        return result\n      }, (err) => {\n        delete this._pendingQueries[name][hash]\n        return utils.reject(err)\n      })\n    } else {\n      promise = utils.resolve(items)\n    }\n    return promise\n  },\n\n  /**\n   * Return the {@link LinkedCollection} with the given name, if for some\n   * reason you need a direct reference to the collection.\n   *\n   * @method DataStore#getCollection\n   * @param {string} name Name of the {@link LinkedCollection} to retrieve.\n   * @returns {LinkedCollection}\n   * @since 3.0.0\n   * @throws {Error} Thrown if the specified {@link LinkedCollection} does not\n   * exist.\n   */\n  getCollection (name) {\n    const collection = this._collections[name]\n    if (!collection) {\n      throw utils.err(`${DOMAIN}#getCollection`, name)(404, 'collection')\n    }\n    return collection\n  },\n\n  /**\n   * Hashing function used to cache {@link DataStore#find} and\n   * {@link DataStore#findAll} requests. This method simply JSONifies the\n   * `query` argument passed to {@link DataStore#find} or\n   * {@link DataStore#findAll}.\n   *\n   * Override this method for custom hashing behavior.\n   * @method DataStore#hashQuery\n   * @param {string} name The `name` argument passed to {@link DataStore#find}\n   * or {@link DataStore#findAll}.\n   * @param {Object} query The `query` argument passed to {@link DataStore#find}\n   * or {@link DataStore#findAll}.\n   * @returns {string} The JSONified `query`.\n   * @since 3.0.0\n   */\n  hashQuery (name, query, opts) {\n    return utils.toJson(query)\n  },\n\n  inject (name, records, opts) {\n    console.warn('DEPRECATED: \"inject\" is deprecated, use \"add\" instead')\n    return this.add(name, records, opts)\n  },\n\n  /**\n   * Wrapper for {@link LinkedCollection#remove}. Removes the specified\n   * {@link Record} from the store.\n   *\n   * @example <caption>DataStore#remove</caption>\n   * // Normally you would do: import {DataStore} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {DataStore} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   *\n   * const store = new DataStore()\n   * store.defineMapper('book')\n   * console.log(store.getAll('book').length)\n   * store.add('book', { id: 1234 })\n   * console.log(store.getAll('book').length)\n   * store.remove('book', 1234)\n   * console.log(store.getAll('book').length)\n   *\n   * @fires DataStore#remove\n   * @method DataStore#remove\n   * @param {string} name The name of the {@link LinkedCollection} to target.\n   * @param {string|number} id The primary key of the {@link Record} to remove.\n   * @param {Object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Relations of the {@link Record} to also\n   * remove from the store.\n   * @returns {Record} The removed {@link Record}, if any.\n   * @see LinkedCollection#add\n   * @see Collection#add\n   * @since 3.0.0\n   */\n  remove (name, id, opts) {\n    const record = this.getCollection(name).remove(id, opts)\n    if (record) {\n      this.removeRelated(name, [record], opts)\n    }\n    return record\n  },\n\n  /**\n   * Wrapper for {@link LinkedCollection#removeAll}. Removes the selected\n   * {@link Record}s from the store.\n   *\n   * @example <caption>DataStore#removeAll</caption>\n   * // Normally you would do: import {DataStore} from 'js-data'\n   * const JSData = require('js-data@3.0.0-beta.7')\n   * const {DataStore} = JSData\n   * console.log('Using JSData v' + JSData.version.full)\n   *\n   * const store = new DataStore()\n   * store.defineMapper('movie')\n   * console.log(store.getAll('movie').length)\n   * store.add('movie', [{ id: 3, rating: 'R' }, { id: 4, rating: 'PG-13' })\n   * console.log(store.getAll('movie').length)\n   * store.removeAll('movie', { rating: 'R' })\n   * console.log(store.getAll('movie').length)\n   *\n   * @fires DataStore#remove\n   * @method DataStore#removeAll\n   * @param {string} name The name of the {@link LinkedCollection} to target.\n   * @param {Object} [query={}] Selection query. See {@link query}.\n   * @param {Object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {Object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Relations of the {@link Record} to also\n   * remove from the store.\n   * @returns {Record} The removed {@link Record}s, if any.\n   * @see LinkedCollection#add\n   * @see Collection#add\n   * @since 3.0.0\n   */\n  removeAll (name, query, opts) {\n    const records = this.getCollection(name).removeAll(query, opts)\n    if (records.length) {\n      this.removeRelated(name, records, opts)\n    }\n    return records\n  },\n\n  /**\n   * Remove from the store {@link Record}s that are related to the provided\n   * {@link Record}(s).\n   *\n   * @fires DataStore#remove\n   * @method DataStore#removeRelated\n   * @param {string} name The name of the {@link LinkedCollection} to target.\n   * @param {Record|Record[]} records {@link Record}s whose relations are to be\n   * removed.\n   * @param {Object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Relations of the {@link Record}(s) to remove\n   * from the store.\n   * @since 3.0.0\n   */\n  removeRelated (name, records, opts) {\n    if (!utils.isArray(records)) {\n      records = [records]\n    }\n    utils.forEachRelation(this.getMapper(name), opts, (def, optsCopy) => {\n      records.forEach((record) => {\n        let relatedData\n        let query\n        if (def.foreignKey && (def.type === hasOneType || def.type === hasManyType)) {\n          query = { [def.foreignKey]: def.getForeignKey(record) }\n        } else if (def.type === hasManyType && def.localKeys) {\n          query = {\n            where: {\n              [def.getRelation().idAttribute]: {\n                'in': utils.get(record, def.localKeys)\n              }\n            }\n          }\n        } else if (def.type === hasManyType && def.foreignKeys) {\n          query = {\n            where: {\n              [def.foreignKeys]: {\n                'contains': def.getForeignKey(record)\n              }\n            }\n          }\n        } else if (def.type === belongsToType) {\n          relatedData = this.remove(def.relation, def.getForeignKey(record), optsCopy)\n        }\n        if (query) {\n          relatedData = this.removeAll(def.relation, query, optsCopy)\n        }\n        if (relatedData) {\n          if (utils.isArray(relatedData) && !relatedData.length) {\n            return\n          }\n          if (def.type === hasOneType) {\n            relatedData = relatedData[0]\n          }\n          def.setLocalField(record, relatedData)\n        }\n      })\n    })\n  },\n\n  /**\n   * Fired during {@link DataStore#update}. See\n   * {@link DataStore~beforeUpdateListener} for how to listen for this event.\n   *\n   * @event DataStore#beforeUpdate\n   * @see DataStore~beforeUpdateListener\n   * @see DataStore#update\n   */\n  /**\n   * Callback signature for the {@link DataStore#event:beforeUpdate} event.\n   *\n   * @example\n   * function onBeforeUpdate (mapperName, id, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdate', onBeforeUpdate)\n   *\n   * @callback DataStore~beforeUpdateListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdate}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeUpdate}.\n   * @param {Object} props The `props` argument received by {@link Mapper#beforeUpdate}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeUpdate}.\n   * @see DataStore#event:beforeUpdate\n   * @see DataStore#update\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link DataStore#update}. See\n   * {@link DataStore~afterUpdateListener} for how to listen for this event.\n   *\n   * @event DataStore#afterUpdate\n   * @see DataStore~afterUpdateListener\n   * @see DataStore#update\n   */\n  /**\n   * Callback signature for the {@link DataStore#event:afterUpdate} event.\n   *\n   * @example\n   * function onAfterUpdate (mapperName, id, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdate', onAfterUpdate)\n   *\n   * @callback DataStore~afterUpdateListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdate}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterUpdate}.\n   * @param {Object} props The `props` argument received by {@link Mapper#afterUpdate}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterUpdate}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterUpdate}.\n   * @see DataStore#event:afterUpdate\n   * @see DataStore#update\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#update}. Adds the updated {@link Record} to the\n   * store.\n   *\n   * @example\n   * import {DataStore} from 'js-data'\n   * import {HttpAdapter} from 'js-data-http'\n   *\n   * const store = new DataStore()\n   * store.registerAdapter('http', new HttpAdapter(), { default: true })\n   *\n   * store.defineMapper('post')\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   PUT /post/1234 {\"status\":\"published\"}\n   * store.update('post', 1, { status: 'published' }).then((post) => {\n   *   // The post record has also been updated in the in-memory store\n   *   console.log(store.get('post', 1234))\n   * })\n   *\n   * @fires DataStore#beforeUpdate\n   * @fires DataStore#afterUpdate\n   * @fires DataStore#add\n   * @method DataStore#update\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id Passed to {@link Mapper#update}.\n   * @param {Object} record Passed to {@link Mapper#update}.\n   * @param {Object} [opts] Passed to {@link Mapper#update}. See\n   * {@link Mapper#update} for more configuration options.\n   * @returns {Promise} Resolves with the result of the update.\n   * @since 3.0.0\n   */\n  update (name, id, record, opts) {\n    opts || (opts = {})\n    return this._callSuper('update', name, id, record, opts)\n      .then((result) => this._end(name, result, opts))\n  },\n\n  /**\n   * Fired during {@link DataStore#updateAll}. See\n   * {@link DataStore~beforeUpdateAllListener} for how to listen for this event.\n   *\n   * @event DataStore#beforeUpdateAll\n   * @see DataStore~beforeUpdateAllListener\n   * @see DataStore#updateAll\n   */\n  /**\n   * Callback signature for the {@link DataStore#event:beforeUpdateAll} event.\n   *\n   * @example\n   * function onBeforeUpdateAll (mapperName, props, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateAll', onBeforeUpdateAll)\n   *\n   * @callback DataStore~beforeUpdateAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {Object} props The `props` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {Object} query The `query` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeUpdateAll}.\n   * @see DataStore#event:beforeUpdateAll\n   * @see DataStore#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link DataStore#updateAll}. See\n   * {@link DataStore~afterUpdateAllListener} for how to listen for this event.\n   *\n   * @event DataStore#afterUpdateAll\n   * @see DataStore~afterUpdateAllListener\n   * @see DataStore#updateAll\n   */\n  /**\n   * Callback signature for the {@link DataStore#event:afterUpdateAll} event.\n   *\n   * @example\n   * function onAfterUpdateAll (mapperName, props, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateAll', onAfterUpdateAll)\n   *\n   * @callback DataStore~afterUpdateAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {Object} props The `props` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {Object} query The `query` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterUpdateAll}.\n   * @see DataStore#event:afterUpdateAll\n   * @see DataStore#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#updateAll}. Adds the updated {@link Record}s to\n   * the store.\n   *\n   * @example\n   * import {DataStore} from 'js-data'\n   * import {HttpAdapter} from 'js-data-http'\n   *\n   * const store = new DataStore()\n   * store.registerAdapter('http', new HttpAdapter(), { default: true })\n   *\n   * store.defineMapper('post')\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   PUT /post?author_id=1234 {\"status\":\"published\"}\n   * store.updateAll('post', { author_id: 1234 }, { status: 'published' }).then((posts) => {\n   *   // The post records have also been updated in the in-memory store\n   *   console.log(store.filter('posts', { author_id: 1234 }))\n   * })\n   *\n   * @fires DataStore#beforeUpdateAll\n   * @fires DataStore#afterUpdateAll\n   * @fires DataStore#add\n   * @method DataStore#updateAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Object} props Passed to {@link Mapper#updateAll}.\n   * @param {Object} [query] Passed to {@link Mapper#updateAll}.\n   * @param {Object} [opts] Passed to {@link Mapper#updateAll}. See\n   * {@link Mapper#updateAll} for more configuration options.\n   * @returns {Promise} Resolves with the result of the update.\n   * @since 3.0.0\n   */\n  updateAll (name, props, query, opts) {\n    opts || (opts = {})\n    return this._callSuper('updateAll', name, query, props, opts)\n      .then((result) => this._end(name, result, opts))\n  },\n\n  /**\n   * Fired during {@link DataStore#updateMany}. See\n   * {@link DataStore~beforeUpdateManyListener} for how to listen for this event.\n   *\n   * @event DataStore#beforeUpdateMany\n   * @see DataStore~beforeUpdateManyListener\n   * @see DataStore#updateMany\n   */\n  /**\n   * Callback signature for the {@link DataStore#event:beforeUpdateMany} event.\n   *\n   * @example\n   * function onBeforeUpdateMany (mapperName, records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateMany', onBeforeUpdateMany)\n   *\n   * @callback DataStore~beforeUpdateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {Object} records The `records` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#beforeUpdateMany}.\n   * @see DataStore#event:beforeUpdateMany\n   * @see DataStore#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link DataStore#updateMany}. See\n   * {@link DataStore~afterUpdateManyListener} for how to listen for this event.\n   *\n   * @event DataStore#afterUpdateMany\n   * @see DataStore~afterUpdateManyListener\n   * @see DataStore#updateMany\n   */\n  /**\n   * Callback signature for the {@link DataStore#event:afterUpdateMany} event.\n   *\n   * @example\n   * function onAfterUpdateMany (mapperName, records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateMany', onAfterUpdateMany)\n   *\n   * @callback DataStore~afterUpdateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {Object} records The `records` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {Object} opts The `opts` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {Object} result The `result` argument received by {@link Mapper#afterUpdateMany}.\n   * @see DataStore#event:afterUpdateMany\n   * @see DataStore#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#updateMany}. Adds the updated {@link Record}s to\n   * the store.\n   *\n   * @example\n   * import {DataStore} from 'js-data'\n   * import {HttpAdapter} from 'js-data-http'\n   *\n   * const store = new DataStore()\n   * store.registerAdapter('http', new HttpAdapter(), { default: true })\n   *\n   * store.defineMapper('post')\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   PUT /post [{\"id\":3,status\":\"published\"},{\"id\":4,status\":\"published\"}]\n   * store.updateMany('post', [\n   *   { id: 3, status: 'published' },\n   *   { id: 4, status: 'published' }\n   * ]).then((posts) => {\n   *   // The post records have also been updated in the in-memory store\n   *   console.log(store.getAll('post', 3, 4))\n   * })\n   *\n   * @fires DataStore#beforeUpdateMany\n   * @fires DataStore#afterUpdateMany\n   * @fires DataStore#add\n   * @method DataStore#updateMany\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(Object[]|Record[])} records Passed to {@link Mapper#updateMany}.\n   * @param {Object} [opts] Passed to {@link Mapper#updateMany}. See\n   * {@link Mapper#updateMany} for more configuration options.\n   * @returns {Promise} Resolves with the result of the update.\n   * @since 3.0.0\n   */\n  updateMany (name, records, opts) {\n    opts || (opts = {})\n    return this._callSuper('updateMany', name, records, opts)\n      .then((result) => this._end(name, result, opts))\n  }\n}\n\nproxiedCollectionMethods.forEach(function (method) {\n  props[method] = function (name, ...args) {\n    return this.getCollection(name)[method](...args)\n  }\n})\n\nexport default Container.extend(props)\n\n/**\n * Fired when a record changes. Only works for records that have tracked fields.\n * See {@link DataStore~changeListener} on how to listen for this event.\n *\n * @event DataStore#change\n * @see DataStore~changeListener\n */\n\n/**\n * Callback signature for the {@link DataStore#event:change} event.\n *\n * @example\n * function onChange (mapperName, record, changes) {\n *   // do something\n * }\n * store.on('change', onChange)\n *\n * @callback DataStore~changeListener\n * @param {string} name The name of the associated {@link Mapper}.\n * @param {Record} The Record that changed.\n * @param {Object} The changes.\n * @see DataStore#event:change\n * @since 3.0.0\n */\n\n/**\n * Fired when one or more records are added to the in-memory store. See\n * {@link DataStore~addListener} on how to listen for this event.\n *\n * @event DataStore#add\n * @see DataStore~addListener\n * @see DataStore#event:add\n * @see DataStore#add\n * @see DataStore#create\n * @see DataStore#createMany\n * @see DataStore#find\n * @see DataStore#findAll\n * @see DataStore#update\n * @see DataStore#updateAll\n * @see DataStore#updateMany\n */\n\n/**\n * Callback signature for the {@link DataStore#event:add} event.\n *\n * @example\n * function onAdd (mapperName, recordOrRecords) {\n *   // do something\n * }\n * store.on('add', onAdd)\n *\n * @callback DataStore~addListener\n * @param {string} name The name of the associated {@link Mapper}.\n * @param {Record|Record[]} The Record or Records that were added.\n * @see DataStore#event:add\n * @see DataStore#add\n * @see DataStore#create\n * @see DataStore#createMany\n * @see DataStore#find\n * @see DataStore#findAll\n * @see DataStore#update\n * @see DataStore#updateAll\n * @see DataStore#updateMany\n * @since 3.0.0\n */\n\n/**\n * Fired when one or more records are removed from the in-memory store. See\n * {@link DataStore~removeListener} for how to listen for this event.\n *\n * @event DataStore#remove\n * @see DataStore~removeListener\n * @see DataStore#event:remove\n * @see DataStore#clear\n * @see DataStore#destroy\n * @see DataStore#destroyAll\n * @see DataStore#remove\n * @see DataStore#removeAll\n */\n\n/**\n * Callback signature for the {@link DataStore#event:remove} event.\n *\n * @example\n * function onRemove (mapperName, recordsOrRecords) {\n *   // do something\n * }\n * store.on('remove', onRemove)\n *\n * @callback DataStore~removeListener\n * @param {string} name The name of the associated {@link Mapper}.\n * @param {Record|Record[]} Record or Records that were removed.\n * @see DataStore#event:remove\n * @see DataStore#clear\n * @see DataStore#destroy\n * @see DataStore#destroyAll\n * @see DataStore#remove\n * @see DataStore#removeAll\n * @since 3.0.0\n */\n\n/**\n * Create a subclass of this DataStore:\n * @example <caption>DataStore.extend</caption>\n * // Normally you would do: import {DataStore} from 'js-data'\n * const JSData = require('js-data@3.0.0-beta.7')\n * const {DataStore} = JSData\n * console.log('Using JSData v' + JSData.version.full)\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomDataStoreClass extends DataStore {\n *   foo () { return 'bar' }\n *   static beep () { return 'boop' }\n * }\n * const customDataStore = new CustomDataStoreClass()\n * console.log(customDataStore.foo())\n * console.log(CustomDataStoreClass.beep())\n *\n * // Extend the class using alternate method.\n * const OtherDataStoreClass = DataStore.extend({\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const otherDataStore = new OtherDataStoreClass()\n * console.log(otherDataStore.foo())\n * console.log(OtherDataStoreClass.beep())\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherDataStoreClass () {\n *   DataStore.call(this)\n *   this.created_at = new Date().getTime()\n * }\n * DataStore.extend({\n *   constructor: AnotherDataStoreClass,\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const anotherDataStore = new AnotherDataStoreClass()\n * console.log(anotherDataStore.created_at)\n * console.log(anotherDataStore.foo())\n * console.log(AnotherDataStoreClass.beep())\n *\n * @method DataStore.extend\n * @param {Object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {Object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {Object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this DataStore class.\n * @since 3.0.0\n */\n","/**\n * Registered as `js-data` in NPM and Bower.\n *\n * Also available from CDN.JS and JSDelivr.\n *\n * @module js-data\n *\n * @example <caption>Install from NPM</caption>\n * npm i --save js-data@beta\n * @example <caption>Install from Bower</caption>\n * bower i --save js-data@3.0.0-beta.1\n * @example <caption>Install from CDN.JS</caption>\n * <script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-data/3.0.0-beta.1/js-data.min.js\"></script>\n * @example <caption>Install from JSDelivr</caption>\n * <script src=\"https://cdn.jsdelivr.net/js-data/3.0.0-beta.1/js-data.min.js\"></script>\n * @example <caption>Load into your app via script tag</caption>\n * <script src=\"/path/to/js-data.min.js\"></script>\n * <script>\n *   console.log(JSData.version.full); // \"3.0.0-beta.1\"\n * </script>\n * @example <caption>Load into your app via CommonJS</caption>\n * var JSData = require('js-data');\n * @example <caption>Load into your app via ES2015 Modules</caption>\n * import * as JSData from 'js-data';\n * @example <caption>Load into your app via AMD</caption>\n * define('myApp', ['js-data'], function (JSData) { ... })\n */\n\n/**\n * Describes the version of this `JSData` object.\n *\n * @example\n * console.log(JSData.version.full) // \"3.0.0-beta.1\"\n *\n * @name version\n * @memberof module:js-data\n * @property {string} full The full semver value.\n * @property {number} major The major version number.\n * @property {number} minor The minor version number.\n * @property {number} patch The patch version number.\n * @property {(string|boolean)} alpha The alpha version value, otherwise `false`\n * if the current version is not alpha.\n * @property {(string|boolean)} beta The beta version value, otherwise `false`\n * if the current version is not beta.\n * @since 2.0.0\n * @type {Object}\n */\nexport const version = '<%= version %>'\n\n/**\n * JSData's utility methods.\n *\n * @example\n * import {utils} from 'js-data'\n * console.log(utils.isString('foo')) // true\n *\n * @name module:js-data.utils\n * @property {Function} Promise See {@link utils.Promise}.\n * @see utils\n * @since 3.0.0\n * @type {Object}\n */\nimport utils from './utils'\n\n/**\n * JSData's {@link Collection} class.\n *\n * @example\n * import {Collection} from 'js-data'\n * const collection = new Collection()\n *\n * @name module:js-data.Collection\n * @see Collection\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#collection\",\"Components of JSData: Collection\"]\n * @type {Constructor}\n */\nimport Collection from './Collection'\n\n/**\n * JSData's {@link Component} class. Most components in JSData extend this\n * class.\n *\n * @example\n * import {Component} from 'js-data'\n * // Make a custom component.\n * const MyComponent = Component.extend({\n *   myMethod (someArg) { ... }\n * })\n *\n * @name module:js-data.Component\n * @see Component\n * @since 3.0.0\n * @type {Constructor}\n */\nimport Component from './Component'\n\n/**\n * JSData's {@link Container} class. Defines and manages {@link Mapper}s. Used\n * in Node.js and in the browser, though in the browser you may want to use\n * {@link DataStore} instead.\n *\n * @example\n * import {Container} from 'js-data'\n * const store = new Container()\n *\n * @name module:js-data.Container\n * @see Container\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#container\",\"Components of JSData: Container\"]\n * @type {Constructor}\n */\nimport {Container} from './Container'\n\n/**\n * JSData's {@link DataStore} class. Primarily for use in the browser. In\n * Node.js you probably want to use {@link Container} instead.\n *\n * @example\n * import {DataStore} from 'js-data'\n * const store = new DataStore()\n *\n * @name module:js-data.DataStore\n * @see DataStore\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#datastore\",\"Components of JSData: DataStore\"]\n * @type {Constructor}\n */\nimport DataStore from './DataStore'\n\n/**\n * JSData's {@link Index} class, based on [mindex]{@link https://github.com/internalfx/mindex}.\n *\n * @name module:js-data.Index\n * @see Index\n * @since 3.0.0\n * @type {Constructor}\n */\nimport Index from '../lib/mindex/index'\n\n/**\n * JSData's {@link LinkedCollection} class. Used by the {@link DataStore}\n * component. If you need to create a collection manually, you should probably\n * use the {@link Collection} class.\n *\n * @name module:js-data.LinkedCollection\n * @see DataStore\n * @see LinkedCollection\n * @since 3.0.0\n * @type {Constructor}\n */\nimport LinkedCollection from './LinkedCollection'\n\n/**\n * JSData's {@link Mapper} class. The core of the ORM.\n *\n * @example <caption>Recommended use</caption>\n * import {Container} from 'js-data'\n * const store = new Container()\n * store.defineMapper('user')\n *\n * @example <caption>Create Mapper manually</caption>\n * import {Mapper} from 'js-data'\n * const UserMapper = new Mapper({ name: 'user' })\n *\n * @name module:js-data.Mapper\n * @see Container\n * @see Mapper\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/modeling-your-data\",\"Modeling your data\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#mapper\",\"Components of JSData: Mapper\"]\n * @type {Constructor}\n */\nimport Mapper from './Mapper'\n\n/**\n * JSData's {@link Query} class. Used by the {@link Collection} component.\n *\n * @name module:js-data.Query\n * @see Query\n * @since 3.0.0\n * @type {Constructor}\n */\nimport Query from './Query'\n\n/**\n * JSData's {@link Record} class.\n *\n * @example\n * import {Container} from 'js-data'\n * const store = new Container()\n * store.defineMapper('user')\n * const user = store.createRecord('user')\n *\n * @name module:js-data.Record\n * @see Record\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#record\",\"Components of JSData: Record\"]\n * @type {Constructor}\n */\nimport Record from './Record'\n\n/**\n * JSData's {@link Schema} class. Implements http://json-schema.org/draft-04.\n *\n * @example\n * import {Container, Schema} from 'js-data'\n * const userSchema = new Schema({\n *   properties: {\n *     id: { type: 'string' },\n *     name: { type: 'string' }\n *   }\n * })\n * const store = new Container()\n * store.defineMapper('user', {\n *   schema: userSchema\n * })\n *\n * @name module:js-data.Schema\n * @see Schema\n * @see http://json-schema.org/\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#schema\",\"Components of JSData: schema\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/schemas\",\"JSData's Schema Syntax\"]\n * @type {Constructor}\n */\nimport Schema from './Schema'\n\n/**\n * JSData's {@link Settable} class.\n *\n * @example\n * import {Settable} from 'js-data'\n * const obj = new Settable()\n * obj.set('secret', 'value')\n * console.log(JSON.stringify(obj)) // {}\n *\n * @name module:js-data.Settable\n * @see Settable\n * @since 3.0.0\n * @type {Constructor}\n */\nimport Settable from './Settable'\n\nexport * from './decorators'\n\nexport {\n  Collection,\n  Component,\n  Container,\n  DataStore,\n  Index,\n  LinkedCollection,\n  Mapper,\n  Query,\n  Record,\n  Schema,\n  Settable,\n  utils\n}\n"],"names":["DOMAIN","Component","Query","Schema","Record","_belongsTo","_hasMany","_hasOne","Mapper","Collection","LinkedCollection","props"],"mappings":"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"}