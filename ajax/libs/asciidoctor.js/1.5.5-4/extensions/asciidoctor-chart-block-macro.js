/* Generated by Opal 0.10.1 */
Opal.modules["chart-block-macro/extension"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$==', '$include', '$use_dsl', '$named', '$name_positional_attributes', '$normalize_asset_path', '$read_asset', '$nil?', '$empty?', '$resolve_engine', '$document', '$parse', '$process', '$create_pass_block', '$on_context', '$parse_content_as', '$source', '$at_location', '$key?', '$downcase', '$[]', '$attributes', '$===', '$prepare_data', '$bar', '$line', '$step', '$spline', '$get_chart_id', '$create_chart_div', '$chart_bar_script', '$to_html', '$chart_line_script', '$chart_step_script', '$chart_spline_script', '$+', '$uuid', '$shift', '$with_index', '$unshift', '$map', '$get_chart_height', '$get_chart_width', '$to_s', '$join', '$%', '$index', '$gsub', '$each_line', '$chomp', '$push', '$split', '$each', '$open', '$chr', '$rand']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {};
  self.$include(Opal.get('Asciidoctor'));
  (function($base, $super) {
    function $ChartBlockMacro(){};
    var self = $ChartBlockMacro = $klass($base, $super, 'ChartBlockMacro', $ChartBlockMacro);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    self.$use_dsl();

    self.$named("chart");

    self.$name_positional_attributes("type", "width", "height");

    return (Opal.defn(self, '$process', TMP_1 = function ːprocess(parent, target, attrs) {
      var $a, $b, self = this, data_path = nil, read_data = nil, engine = nil, raw_data = nil, html = nil;

      data_path = parent.$normalize_asset_path(target, "target");
      read_data = parent.$read_asset(data_path, $hash2(["warn_on_failure", "normalize"], {"warn_on_failure": true, "normalize": true}));
      if ((($a = ((($b = read_data['$nil?']()) !== false && $b !== nil && $b != null) ? $b : read_data['$empty?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        engine = $scope.get('ChartBackend').$resolve_engine(attrs, parent.$document());
        raw_data = $scope.get('PlainRubyCSV').$parse(read_data);
        html = $scope.get('ChartBackend').$process(engine, attrs, raw_data);
        return self.$create_pass_block(parent, html, attrs, $hash2(["subs"], {"subs": nil}));
      };
    }, TMP_1.$$arity = 3), nil) && 'process';
  })($scope.base, (($scope.get('Extensions')).$$scope.get('BlockMacroProcessor')));
  (function($base, $super) {
    function $ChartBlockProcessor(){};
    var self = $ChartBlockProcessor = $klass($base, $super, 'ChartBlockProcessor', $ChartBlockProcessor);

    var def = self.$$proto, $scope = self.$$scope, TMP_2;

    self.$use_dsl();

    self.$named("chart");

    self.$on_context("literal");

    self.$name_positional_attributes("type", "width", "height");

    self.$parse_content_as("raw");

    return (Opal.defn(self, '$process', TMP_2 = function ːprocess(parent, reader, attrs) {
      var self = this, engine = nil, raw_data = nil, html = nil;

      engine = $scope.get('ChartBackend').$resolve_engine(attrs, parent.$document());
      raw_data = $scope.get('PlainRubyCSV').$parse(reader.$source());
      html = $scope.get('ChartBackend').$process(engine, attrs, raw_data);
      return self.$create_pass_block(parent, html, attrs, $hash2(["subs"], {"subs": nil}));
    }, TMP_2.$$arity = 3), nil) && 'process';
  })($scope.base, (($scope.get('Extensions')).$$scope.get('BlockProcessor')));
  (function($base, $super) {
    function $ChartAssetsDocinfoProcessor(){};
    var self = $ChartAssetsDocinfoProcessor = $klass($base, $super, 'ChartAssetsDocinfoProcessor', $ChartAssetsDocinfoProcessor);

    var def = self.$$proto, $scope = self.$$scope, TMP_3;

    self.$use_dsl();

    self.$at_location("header");

    Opal.cdecl($scope, 'C3JS_STYLESHEET', "<link rel=\"stylesheet\" href=\"http://cdnjs.cloudflare.com/ajax/libs/c3/0.3.0/c3.min.css\">");

    Opal.cdecl($scope, 'D3JS_SCRIPT', "<script src=\"http://cdnjs.cloudflare.com/ajax/libs/d3/3.4.11/d3.min.js\" charset=\"utf-8\"></script>");

    Opal.cdecl($scope, 'C3JS_SCRIPT', "<script src=\"http://cdnjs.cloudflare.com/ajax/libs/c3/0.3.0/c3.min.js\"></script>");

    Opal.cdecl($scope, 'CHARTIST_STYLESHEET', "<link rel=\"stylesheet\" href=\"http://cdn.jsdelivr.net/chartist.js/latest/chartist.min.css\">");

    Opal.cdecl($scope, 'CHARTIST_SCRIPT', "<script src=\"http://cdn.jsdelivr.net/chartist.js/latest/chartist.min.js\"></script>");

    Opal.cdecl($scope, 'CHARTJS_SCRIPT', "<script src=\"http://cdnjs.cloudflare.com/ajax/libs/Chart.js/1.0.2/Chart.min.js\"></script>");

    return (Opal.defn(self, '$process', TMP_3 = function ːprocess(doc) {
      var self = this;

      return "\n" + ($scope.get('C3JS_STYLESHEET')) + "\n" + ($scope.get('D3JS_SCRIPT')) + "\n" + ($scope.get('C3JS_SCRIPT')) + "\n" + ($scope.get('CHARTIST_STYLESHEET')) + "\n" + ($scope.get('CHARTIST_SCRIPT')) + "\n" + ($scope.get('CHARTJS_SCRIPT'));
    }, TMP_3.$$arity = 1), nil) && 'process';
  })($scope.base, (($scope.get('Extensions')).$$scope.get('DocinfoProcessor')));
  (function($base, $super) {
    function $ChartBackend(){};
    var self = $ChartBackend = $klass($base, $super, 'ChartBackend', $ChartBackend);

    var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5;

    Opal.defs(self, '$resolve_engine', TMP_4 = function ːresolve_engine(attrs, document) {
      var $a, self = this;

      if ((($a = attrs['$key?']("engine")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return attrs['$[]']("engine").$downcase()
      } else if ((($a = document.$attributes()['$key?']("chart-engine")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return document.$attributes()['$[]']("chart-engine").$downcase()
        } else {
        return "c3js"
      };
    }, TMP_4.$$arity = 2);

    return (Opal.defs(self, '$process', TMP_5 = function ːprocess(engine, attrs, raw_data) {
      var $a, $b, self = this, type = nil, $case = nil, data = nil, labels = nil;

      type = attrs['$[]']("type");
      return (function() {$case = engine;if ("c3js"['$===']($case)) {$b = $scope.get('C3jsChartBuilder').$prepare_data(raw_data), $a = Opal.to_ary($b), data = ($a[0] == null ? nil : $a[0]), labels = ($a[1] == null ? nil : $a[1]), $b;
      return ((function() {$case = type;if ("bar"['$===']($case)) {return $scope.get('C3jsChartBuilder').$bar(data, labels, attrs)}else if ("line"['$===']($case)) {return $scope.get('C3jsChartBuilder').$line(data, labels, attrs)}else if ("step"['$===']($case)) {return $scope.get('C3jsChartBuilder').$step(data, labels, attrs)}else if ("spline"['$===']($case)) {return $scope.get('C3jsChartBuilder').$spline(data, labels, attrs)}else {return $scope.get('C3jsChartBuilder').$line(data, labels, attrs)}})());}else if ("chartist"['$===']($case)) {$b = $scope.get('ChartistChartBuilder').$prepare_data(raw_data), $a = Opal.to_ary($b), data = ($a[0] == null ? nil : $a[0]), labels = ($a[1] == null ? nil : $a[1]), $b;
      return ((function() {$case = type;if ("bar"['$===']($case)) {return $scope.get('ChartistChartBuilder').$bar(data, labels, attrs)}else if ("line"['$===']($case)) {return $scope.get('ChartistChartBuilder').$line(data, labels, attrs)}else {return $scope.get('ChartistChartBuilder').$line(data, labels, attrs)}})());}else if ("chartjs"['$===']($case)) {$b = $scope.get('ChartjsChartBuilder').$prepare_data(raw_data), $a = Opal.to_ary($b), data = ($a[0] == null ? nil : $a[0]), labels = ($a[1] == null ? nil : $a[1]), $b;
      return ((function() {$case = type;if ("line"['$===']($case)) {return $scope.get('ChartjsChartBuilder').$line(data, labels, attrs)}else {return $scope.get('ChartjsChartBuilder').$line(data, labels, attrs)}})());}else { return nil }})();
    }, TMP_5.$$arity = 3), nil) && 'process';
  })($scope.base, null);
  (function($base, $super) {
    function $C3jsChartBuilder(){};
    var self = $C3jsChartBuilder = $klass($base, $super, 'C3jsChartBuilder', $C3jsChartBuilder);

    var def = self.$$proto, $scope = self.$$scope, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20;

    Opal.defs(self, '$bar', TMP_6 = function ːbar(data, labels, attrs) {
      var self = this, chart_id = nil, chart_div = nil, chart_generate_script = nil;

      chart_id = self.$get_chart_id();
      chart_div = self.$create_chart_div(chart_id);
      chart_generate_script = self.$chart_bar_script(chart_id, data, labels, attrs);
      return self.$to_html(chart_div, chart_generate_script);
    }, TMP_6.$$arity = 3);

    Opal.defs(self, '$line', TMP_7 = function ːline(data, labels, attrs) {
      var self = this, chart_id = nil, chart_div = nil, chart_generate_script = nil;

      chart_id = self.$get_chart_id();
      chart_div = self.$create_chart_div(chart_id);
      chart_generate_script = self.$chart_line_script(chart_id, data, labels, attrs);
      return self.$to_html(chart_div, chart_generate_script);
    }, TMP_7.$$arity = 3);

    Opal.defs(self, '$step', TMP_8 = function ːstep(data, labels, attrs) {
      var self = this, chart_id = nil, chart_div = nil, chart_generate_script = nil;

      chart_id = self.$get_chart_id();
      chart_div = self.$create_chart_div(chart_id);
      chart_generate_script = self.$chart_step_script(chart_id, data, labels, attrs);
      return self.$to_html(chart_div, chart_generate_script);
    }, TMP_8.$$arity = 3);

    Opal.defs(self, '$spline', TMP_9 = function ːspline(data, labels, attrs) {
      var self = this, chart_id = nil, chart_div = nil, chart_generate_script = nil;

      chart_id = self.$get_chart_id();
      chart_div = self.$create_chart_div(chart_id);
      chart_generate_script = self.$chart_spline_script(chart_id, data, labels, attrs);
      return self.$to_html(chart_div, chart_generate_script);
    }, TMP_9.$$arity = 3);

    Opal.defs(self, '$create_chart_div', TMP_10 = function ːcreate_chart_div(chart_id) {
      var self = this;

      return "<div id=\"" + (chart_id) + "\"></div>";
    }, TMP_10.$$arity = 1);

    Opal.defs(self, '$get_chart_id', TMP_11 = function ːget_chart_id() {
      var self = this;

      return $rb_plus("chart", $scope.get('PlainRubyRandom').$uuid());
    }, TMP_11.$$arity = 0);

    Opal.defs(self, '$prepare_data', TMP_13 = function ːprepare_data(raw_data) {
      var $a, $b, TMP_12, self = this, labels = nil;

      labels = raw_data['$[]'](0);
      raw_data.$shift();
      ($a = ($b = raw_data.$map()).$with_index, $a.$$p = (TMP_12 = function(row, index){var self = TMP_12.$$s || this;
if (row == null) row = nil;if (index == null) index = nil;
      return row.$unshift("" + (index))}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $a).call($b);
      return [raw_data, labels];
    }, TMP_13.$$arity = 1);

    Opal.defs(self, '$chart_bar_script', TMP_14 = function ːchart_bar_script(chart_id, data, labels, attrs) {
      var self = this, chart_height = nil, chart_width = nil;

      chart_height = self.$get_chart_height(attrs);
      chart_width = self.$get_chart_width(attrs);
      return "\n<script type=\"text/javascript\">\nc3.generate({\n  bindto: '#" + (chart_id) + "',\n  size: { height: " + (chart_height) + ", width: " + (chart_width) + " },\n  data: {\n    columns: " + (data.$to_s()) + ",\n    type: 'bar'\n  },\n  axis: {\n    x: {\n      type: 'category',\n      categories: " + (labels.$to_s()) + "\n    }\n  }\n});\n</script>";
    }, TMP_14.$$arity = 4);

    Opal.defs(self, '$chart_line_script', TMP_15 = function ːchart_line_script(chart_id, data, labels, attrs) {
      var self = this, chart_height = nil, chart_width = nil;

      chart_height = self.$get_chart_height(attrs);
      chart_width = self.$get_chart_width(attrs);
      return "\n<script type=\"text/javascript\">\nc3.generate({\n  bindto: '#" + (chart_id) + "',\n  size: { height: " + (chart_height) + ", width: " + (chart_width) + " },\n  data: {\n    columns: " + (data.$to_s()) + "\n  },\n  axis: {\n    x: {\n      type: 'category',\n      categories: " + (labels.$to_s()) + "\n    }\n  }\n});\n</script>";
    }, TMP_15.$$arity = 4);

    Opal.defs(self, '$chart_step_script', TMP_16 = function ːchart_step_script(chart_id, data, labels, attrs) {
      var self = this, chart_height = nil, chart_width = nil;

      chart_height = self.$get_chart_height(attrs);
      chart_width = self.$get_chart_width(attrs);
      return "\n<script type=\"text/javascript\">\nc3.generate({\n  bindto: '#" + (chart_id) + "',\n  size: { height: " + (chart_height) + ", width: " + (chart_width) + " },\n  data: {\n    columns: " + (data.$to_s()) + ",\n    type: 'step'\n  },\n  axis: {\n    x: {\n      type: 'category',\n      categories: " + (labels.$to_s()) + "\n    }\n  }\n});\n</script>";
    }, TMP_16.$$arity = 4);

    Opal.defs(self, '$chart_spline_script', TMP_17 = function ːchart_spline_script(chart_id, data, labels, attrs) {
      var self = this, chart_height = nil, chart_width = nil;

      chart_height = self.$get_chart_height(attrs);
      chart_width = self.$get_chart_width(attrs);
      return "\n<script type=\"text/javascript\">\nc3.generate({\n  bindto: '#" + (chart_id) + "',\n  size: { height: " + (chart_height) + ", width: " + (chart_width) + " },\n  data: {\n    columns: " + (data.$to_s()) + ",\n    type: 'spline'\n  },\n  axis: {\n    x: {\n      type: 'category',\n      categories: " + (labels.$to_s()) + "\n    }\n  }\n});\n</script>";
    }, TMP_17.$$arity = 4);

    Opal.defs(self, '$to_html', TMP_18 = function ːto_html(chart_div, chart_script) {
      var self = this;

      return "\n    " + (chart_div) + "\n    " + (chart_script) + "\n    ";
    }, TMP_18.$$arity = 2);

    Opal.defs(self, '$get_chart_height', TMP_19 = function ːget_chart_height(attrs) {
      var $a, self = this;

      if ((($a = (attrs['$key?']("height"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return attrs['$[]']("height")
        } else {
        return "400"
      };
    }, TMP_19.$$arity = 1);

    return (Opal.defs(self, '$get_chart_width', TMP_20 = function ːget_chart_width(attrs) {
      var $a, self = this;

      if ((($a = (attrs['$key?']("width"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return attrs['$[]']("width")
        } else {
        return "600"
      };
    }, TMP_20.$$arity = 1), nil) && 'get_chart_width';
  })($scope.base, null);
  (function($base, $super) {
    function $ChartjsChartBuilder(){};
    var self = $ChartjsChartBuilder = $klass($base, $super, 'ChartjsChartBuilder', $ChartjsChartBuilder);

    var def = self.$$proto, $scope = self.$$scope, TMP_22, TMP_23, TMP_24, TMP_25;

    Opal.defs(self, '$line', TMP_22 = function ːline(data, labels, attrs) {
      var $a, $b, TMP_21, self = this, default_colors = nil, datasets = nil, chart_id = nil, chart_height = nil, chart_width = nil, chart_canvas = nil, chart_init_ctx_script = nil, chart_init_data_script = nil, chart_init_script = nil;

      default_colors = [$hash2(["r", "g", "b"], {"r": 220, "g": 220, "b": 220}), $hash2(["r", "g", "b"], {"r": 151, "g": 187, "b": 205})];
      datasets = ($a = ($b = data).$map, $a.$$p = (TMP_21 = function(set){var self = TMP_21.$$s || this, color = nil, color_rgba = nil;
if (set == null) set = nil;
      color = default_colors['$[]'](data.$index(set)['$%'](2));
        color_rgba = "rgba(" + (color['$[]']("r")) + "," + (color['$[]']("g")) + "," + (color['$[]']("b")) + ",1.0)";
        return "\n{\n  fillColor: \"" + (color_rgba.$gsub("1.0", "0.2")) + "\",\n  strokeColor: \"" + (color_rgba) + "\",\n  pointColor: \"" + (color_rgba) + "\",\n  pointHighlightStroke: \"" + (color_rgba) + "\",\n  pointStrokeColor: \"#fff\",\n  pointHighlightFill: \"#fff\",\n  data: " + (set.$to_s()) + "\n}\n      ";}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $a).call($b).$join(",");
      chart_id = $rb_plus("chart", $scope.get('PlainRubyRandom').$uuid());
      chart_height = self.$get_chart_height(attrs);
      chart_width = self.$get_chart_width(attrs);
      chart_canvas = "<div style=\"width:" + (chart_width) + "px; height:" + (chart_height) + "px\"><canvas id=\"" + (chart_id) + "\"></canvas></div>";
      chart_init_ctx_script = "var ctx = document.getElementById(\"" + (chart_id) + "\").getContext(\"2d\");";
      chart_init_data_script = "var data = {\n  labels: " + (labels.$to_s()) + ",\n  datasets: [\n    " + (datasets) + "\n  ]\n};";
      chart_init_script = "var chart = new Chart(ctx).Line(data, {responsive : true});";
      return "\n    " + (chart_canvas) + "<script type=\"text/javascript\">window.onload = function() {\n    " + (chart_init_ctx_script) + "\n    " + (chart_init_data_script) + "\n    " + (chart_init_script) + "\n}\n</script>";
    }, TMP_22.$$arity = 3);

    Opal.defs(self, '$prepare_data', TMP_23 = function ːprepare_data(raw_data) {
      var self = this, labels = nil;

      labels = raw_data['$[]'](0);
      raw_data.$shift();
      return [raw_data, labels];
    }, TMP_23.$$arity = 1);

    Opal.defs(self, '$get_chart_height', TMP_24 = function ːget_chart_height(attrs) {
      var $a, self = this;

      if ((($a = (attrs['$key?']("height"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return attrs['$[]']("height")
        } else {
        return "400"
      };
    }, TMP_24.$$arity = 1);

    return (Opal.defs(self, '$get_chart_width', TMP_25 = function ːget_chart_width(attrs) {
      var $a, self = this;

      if ((($a = (attrs['$key?']("width"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return attrs['$[]']("width")
        } else {
        return "600"
      };
    }, TMP_25.$$arity = 1), nil) && 'get_chart_width';
  })($scope.base, null);
  (function($base, $super) {
    function $ChartistChartBuilder(){};
    var self = $ChartistChartBuilder = $klass($base, $super, 'ChartistChartBuilder', $ChartistChartBuilder);

    var def = self.$$proto, $scope = self.$$scope, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35;

    Opal.defs(self, '$bar', TMP_26 = function ːbar(data, labels, attrs) {
      var self = this, chart_id = nil, chart_div = nil, chart_generate_script = nil;

      chart_id = self.$get_chart_id();
      chart_div = self.$create_chart_div(chart_id);
      chart_generate_script = self.$chart_bar_script(chart_id, data, labels, attrs);
      return self.$to_html(chart_div, chart_generate_script);
    }, TMP_26.$$arity = 3);

    Opal.defs(self, '$line', TMP_27 = function ːline(data, labels, attrs) {
      var self = this, chart_id = nil, chart_div = nil, chart_generate_script = nil;

      chart_id = self.$get_chart_id();
      chart_div = self.$create_chart_div(chart_id);
      chart_generate_script = self.$chart_line_script(chart_id, data, labels, attrs);
      return self.$to_html(chart_div, chart_generate_script);
    }, TMP_27.$$arity = 3);

    Opal.defs(self, '$create_chart_div', TMP_28 = function ːcreate_chart_div(chart_id) {
      var self = this;

      return "<div id=\"" + (chart_id) + "\"class=\"ct-chart\"></div>";
    }, TMP_28.$$arity = 1);

    Opal.defs(self, '$get_chart_id', TMP_29 = function ːget_chart_id() {
      var self = this;

      return $rb_plus("chart", $scope.get('PlainRubyRandom').$uuid());
    }, TMP_29.$$arity = 0);

    Opal.defs(self, '$prepare_data', TMP_30 = function ːprepare_data(raw_data) {
      var self = this, labels = nil;

      labels = raw_data['$[]'](0);
      raw_data.$shift();
      return [raw_data, labels];
    }, TMP_30.$$arity = 1);

    Opal.defs(self, '$chart_bar_script', TMP_31 = function ːchart_bar_script(chart_id, data, labels, attrs) {
      var self = this, chart_height = nil, chart_width = nil;

      chart_height = self.$get_chart_height(attrs);
      chart_width = self.$get_chart_width(attrs);
      return "\n<script type=\"text/javascript\">\nvar options = {\n  height: '" + (chart_height) + "',\n  colors:[\"#72B3CC\", \"#8EB33B\"]\n};\nvar data = {\n  labels: " + (labels.$to_s()) + ",\n  series: " + (data.$to_s()) + "\n};\nnew Chartist.Bar('#" + (chart_id) + "', data, options);\n</script>";
    }, TMP_31.$$arity = 4);

    Opal.defs(self, '$chart_line_script', TMP_32 = function ːchart_line_script(chart_id, data, labels, attrs) {
      var self = this, chart_height = nil, chart_width = nil;

      chart_height = self.$get_chart_height(attrs);
      chart_width = self.$get_chart_width(attrs);
      return "\n<script type=\"text/javascript\">\nvar options = {\n  height: '" + (chart_height) + "',\n  width: '" + (chart_width) + "',\n  colors:[\"#72B3CC\", \"#8EB33B\"]\n};\nvar data = {\n  labels: " + (labels.$to_s()) + ",\n  series: " + (data.$to_s()) + "\n};\nnew Chartist.Line('#" + (chart_id) + "', data, options);\n</script>";
    }, TMP_32.$$arity = 4);

    Opal.defs(self, '$to_html', TMP_33 = function ːto_html(chart_div, chart_script) {
      var self = this;

      return "\n    " + (chart_div) + "\n    " + (chart_script) + "\n    ";
    }, TMP_33.$$arity = 2);

    Opal.defs(self, '$get_chart_height', TMP_34 = function ːget_chart_height(attrs) {
      var $a, self = this;

      if ((($a = (attrs['$key?']("height"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return attrs['$[]']("height")
        } else {
        return "400"
      };
    }, TMP_34.$$arity = 1);

    return (Opal.defs(self, '$get_chart_width', TMP_35 = function ːget_chart_width(attrs) {
      var $a, self = this;

      if ((($a = (attrs['$key?']("width"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return attrs['$[]']("width")
        } else {
        return "600"
      };
    }, TMP_35.$$arity = 1), nil) && 'get_chart_width';
  })($scope.base, null);
  (function($base, $super) {
    function $PlainRubyCSV(){};
    var self = $PlainRubyCSV = $klass($base, $super, 'PlainRubyCSV', $PlainRubyCSV);

    var def = self.$$proto, $scope = self.$$scope, TMP_37, TMP_39;

    Opal.defs(self, '$parse', TMP_37 = function ːparse(data) {
      var $a, $b, TMP_36, self = this, result = nil;

      result = [];
      ($a = ($b = data).$each_line, $a.$$p = (TMP_36 = function(line){var self = TMP_36.$$s || this, line_chomp = nil;
if (line == null) line = nil;
      line_chomp = line.$chomp();
        return result.$push(line_chomp.$split(","));}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36), $a).call($b);
      return result;
    }, TMP_37.$$arity = 1);

    return (Opal.defs(self, '$read', TMP_39 = function ːread(filename) {
      var $a, $b, TMP_38, self = this, result = nil;

      result = [];
      ($a = ($b = $scope.get('File').$open(filename)).$each, $a.$$p = (TMP_38 = function(line){var self = TMP_38.$$s || this, line_chomp = nil;
if (line == null) line = nil;
      line_chomp = line.$chomp();
        return result.$push(line_chomp.$split(","));}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38), $a).call($b);
      return result;
    }, TMP_39.$$arity = 1), nil) && 'read';
  })($scope.base, null);
  return (function($base, $super) {
    function $PlainRubyRandom(){};
    var self = $PlainRubyRandom = $klass($base, $super, 'PlainRubyRandom', $PlainRubyRandom);

    var def = self.$$proto, $scope = self.$$scope, TMP_41;

    return (Opal.defs(self, '$uuid', TMP_41 = function ːuuid() {
      var $a, $b, TMP_40, self = this;

      return ($a = ($b = ($range(0, 8, true))).$map, $a.$$p = (TMP_40 = function(){var self = TMP_40.$$s || this;

      return ($rb_plus(65, self.$rand(26))).$chr()}, TMP_40.$$s = self, TMP_40.$$arity = 0, TMP_40), $a).call($b).$join();
    }, TMP_41.$$arity = 0), nil) && 'uuid'
  })($scope.base, null);
};

/* Generated by Opal 0.10.1 */
(function(Opal) {
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require', '$register', '$basebackend?', '$document', '$block_macro', '$block', '$docinfo_processor']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    self.$require("chart-block-macro/extension")};
  return ($a = ($b = $scope.get('Extensions')).$register, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $c;

  if ((($c = self.$document()['$basebackend?']("html")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
      self.$block_macro($scope.get('ChartBlockMacro'));
      self.$block($scope.get('ChartBlockProcessor'));
      return self.$docinfo_processor($scope.get('ChartAssetsDocinfoProcessor'));
      } else {
      return nil
    }}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);
})(Opal);
