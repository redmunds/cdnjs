module.exports = function(opalParam) {
  var Opal = opalParam || require('opal-runtime').Opal;

/* Generated by Opal 0.10.1 */
(function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range, $hash = Opal.hash;

  Opal.add_stubs(['$[]=', '$config', '$nil_or_empty?', '$name', '$grep', '$constants', '$include', '$const_get', '$extend', '$attr_reader', '$merge', '$class', '$update', '$raise', '$new', '$create_block', '$===', '$has_more_lines?', '$next_block', '$dup', '$<<', '$each', '$define_method', '$send', '$insert', '$call', '$attr_accessor', '$[]', '$option', '$to_set', '$flatten', '$resolve_regexp', '$==', '$attr', '$method', '$register', '$arity', '$instance_exec', '$to_proc', '$activate', '$+', '$values', '$groups', '$add_document_processor', '$!', '$any?', '$select', '$add_syntax_processor', '$to_sym', '$include?', '$private', '$tr', '$to_s', '$join', '$map', '$upcase', '$chr', '$split', '$instance_variable_get', '$instance_variable_set', '$resolve_args', '$freeze', '$process_block_given?', '$source_location', '$class_for_name', '$<', '$update_config', '$unshift', '$as_symbol', '$name=', '$pop', '$size', '$>', '$-', '$fill', '$-@', '$next_auto_id', '$generate_name', '$length', '$empty?', '$const_defined?']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Extensions, self = $Extensions = $module($base, 'Extensions');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Processor(){};
        var self = $Processor = $klass($base, $super, 'Processor', $Processor);

        var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, $a, $b, TMP_11;

        def.config = nil;
        (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2, TMP_3;

          Opal.defn(self, '$config', TMP_1 = function ːconfig() {
            var $a, self = this;
            if (self.config == null) self.config = nil;

            return ((($a = self.config) !== false && $a !== nil && $a != null) ? $a : self.config = $hash2([], {}));
          }, TMP_1.$$arity = 0);
          Opal.defn(self, '$option', TMP_2 = function ːoption(key, default_value) {
            var self = this;

            return self.$config()['$[]='](key, default_value);
          }, TMP_2.$$arity = 2);
          Opal.defn(self, '$use_dsl', TMP_3 = function ːuse_dsl() {
            var $a, self = this;

            if ((($a = self.$name()['$nil_or_empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if ((($a = self.$constants().$grep("DSL")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return self.$include(self.$const_get("DSL"))
                } else {
                return nil
              }
            } else if ((($a = self.$constants().$grep("DSL")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$extend(self.$const_get("DSL"))
              } else {
              return nil
            };
          }, TMP_3.$$arity = 0);
          Opal.alias(self, 'extend_dsl', 'use_dsl');
          return Opal.alias(self, 'include_dsl', 'use_dsl');
        })(Opal.get_singleton_class(self));

        self.$attr_reader("config");

        Opal.defn(self, '$initialize', TMP_4 = function ːinitialize(config) {
          var self = this;

          if (config == null) {
            config = $hash2([], {});
          }
          return self.config = self.$class().$config().$merge(config);
        }, TMP_4.$$arity = -1);

        Opal.defn(self, '$update_config', TMP_5 = function ːupdate_config(config) {
          var self = this;

          return self.config.$update(config);
        }, TMP_5.$$arity = 1);

        Opal.defn(self, '$process', TMP_6 = function ːprocess($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return self.$raise(Opal.get('NotImplementedError'));
        }, TMP_6.$$arity = -1);

        Opal.defn(self, '$create_block', TMP_7 = function ːcreate_block(parent, context, source, attrs, opts) {
          var self = this;

          if (opts == null) {
            opts = $hash2([], {});
          }
          return $scope.get('Block').$new(parent, context, $hash2(["source", "attributes"], {"source": source, "attributes": attrs}).$merge(opts));
        }, TMP_7.$$arity = -5);

        Opal.defn(self, '$create_image_block', TMP_8 = function ːcreate_image_block(parent, attrs, opts) {
          var self = this;

          if (opts == null) {
            opts = $hash2([], {});
          }
          return self.$create_block(parent, "image", nil, attrs, opts);
        }, TMP_8.$$arity = -3);

        Opal.defn(self, '$create_inline', TMP_9 = function ːcreate_inline(parent, context, text, opts) {
          var self = this;

          if (opts == null) {
            opts = $hash2([], {});
          }
          return $scope.get('Inline').$new(parent, context, text, opts);
        }, TMP_9.$$arity = -4);

        Opal.defn(self, '$parse_content', TMP_10 = function ːparse_content(parent, content, attributes) {
          var $a, $b, self = this, reader = nil, block = nil;

          if (attributes == null) {
            attributes = nil;
          }
          reader = (function() {if ((($a = $scope.get('Reader')['$==='](content)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return content
            } else {
            return ($scope.get('Reader').$new(content))
          }; return nil; })();
          while ((($b = reader['$has_more_lines?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          block = $scope.get('Parser').$next_block(reader, parent, ((function() {if (attributes !== false && attributes !== nil && attributes != null) {
            return attributes.$dup()
            } else {
            return $hash2([], {})
          }; return nil; })()));
          if (block !== false && block !== nil && block != null) {
            parent['$<<'](block)};};
          return parent;
        }, TMP_10.$$arity = -3);

        return ($a = ($b = [["create_paragraph", "create_block", "paragraph"], ["create_open_block", "create_block", "open"], ["create_example_block", "create_block", "example"], ["create_pass_block", "create_block", "pass"], ["create_listing_block", "create_block", "listing"], ["create_literal_block", "create_block", "literal"], ["create_anchor", "create_inline", "anchor"]]).$each, $a.$$p = (TMP_11 = function(method_name, delegate_method_name, context){var self = TMP_11.$$s || this, $c, $d, TMP_12;
if (method_name == null) method_name = nil;if (delegate_method_name == null) delegate_method_name = nil;if (context == null) context = nil;
        return ($c = ($d = self).$define_method, $c.$$p = (TMP_12 = function($e_rest){var self = TMP_12.$$s || this, args, $f;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return ($f = self).$send.apply($f, [delegate_method_name].concat(Opal.to_a(args.$dup().$insert(1, context))))}, TMP_12.$$s = self, TMP_12.$$arity = -1, TMP_12), $c).call($d, method_name)}, TMP_11.$$s = self, TMP_11.$$arity = 3, TMP_11), $a).call($b);
      })($scope.base, null);

      (function($base) {
        var $ProcessorDsl, self = $ProcessorDsl = $module($base, 'ProcessorDsl');

        var def = self.$$proto, $scope = self.$$scope, TMP_13, TMP_14, TMP_15;

        Opal.defn(self, '$option', TMP_13 = function ːoption(key, value) {
          var self = this;

          return self.$config()['$[]='](key, value);
        }, TMP_13.$$arity = 2);

        Opal.defn(self, '$process', TMP_14 = function ːprocess($a_rest) {
          var $b, self = this, args, $iter = TMP_14.$$p, block = $iter || nil;
          if (self.process_block == null) self.process_block = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_14.$$p = null;
          if ((block !== nil)) {
            return self.process_block = block
          } else if ((($b = self.process_block) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return ($b = self.process_block).$call.apply($b, Opal.to_a(args))
            } else {
            return self.$raise(Opal.get('NotImplementedError'))
          };
        }, TMP_14.$$arity = -1);

        Opal.defn(self, '$process_block_given?', TMP_15 = function() {
          var $a, self = this;

          return (($a = self['process_block'], $a != null && $a !== nil) ? 'instance-variable' : nil);
        }, TMP_15.$$arity = 0);
      })($scope.base);

      (function($base, $super) {
        function $Preprocessor(){};
        var self = $Preprocessor = $klass($base, $super, 'Preprocessor', $Preprocessor);

        var def = self.$$proto, $scope = self.$$scope, TMP_16;

        return (Opal.defn(self, '$process', TMP_16 = function ːprocess(document, reader) {
          var self = this;

          return self.$raise(Opal.get('NotImplementedError'));
        }, TMP_16.$$arity = 2), nil) && 'process'
      })($scope.base, $scope.get('Processor'));

      Opal.casgn($scope.get('Preprocessor'), 'DSL', $scope.get('ProcessorDsl'));

      (function($base, $super) {
        function $Treeprocessor(){};
        var self = $Treeprocessor = $klass($base, $super, 'Treeprocessor', $Treeprocessor);

        var def = self.$$proto, $scope = self.$$scope, TMP_17;

        return (Opal.defn(self, '$process', TMP_17 = function ːprocess(document) {
          var self = this;

          return self.$raise(Opal.get('NotImplementedError'));
        }, TMP_17.$$arity = 1), nil) && 'process'
      })($scope.base, $scope.get('Processor'));

      Opal.casgn($scope.get('Treeprocessor'), 'DSL', $scope.get('ProcessorDsl'));

      (function($base, $super) {
        function $Postprocessor(){};
        var self = $Postprocessor = $klass($base, $super, 'Postprocessor', $Postprocessor);

        var def = self.$$proto, $scope = self.$$scope, TMP_18;

        return (Opal.defn(self, '$process', TMP_18 = function ːprocess(document, output) {
          var self = this;

          return self.$raise(Opal.get('NotImplementedError'));
        }, TMP_18.$$arity = 2), nil) && 'process'
      })($scope.base, $scope.get('Processor'));

      Opal.casgn($scope.get('Postprocessor'), 'DSL', $scope.get('ProcessorDsl'));

      (function($base, $super) {
        function $IncludeProcessor(){};
        var self = $IncludeProcessor = $klass($base, $super, 'IncludeProcessor', $IncludeProcessor);

        var def = self.$$proto, $scope = self.$$scope, TMP_19, TMP_20;

        Opal.defn(self, '$process', TMP_19 = function ːprocess(document, reader, target, attributes) {
          var self = this;

          return self.$raise(Opal.get('NotImplementedError'));
        }, TMP_19.$$arity = 4);

        return (Opal.defn(self, '$handles?', TMP_20 = function(target) {
          var self = this;

          return true;
        }, TMP_20.$$arity = 1), nil) && 'handles?';
      })($scope.base, $scope.get('Processor'));

      Opal.casgn($scope.get('IncludeProcessor'), 'DSL', $scope.get('ProcessorDsl'));

      (function($base, $super) {
        function $DocinfoProcessor(){};
        var self = $DocinfoProcessor = $klass($base, $super, 'DocinfoProcessor', $DocinfoProcessor);

        var def = self.$$proto, $scope = self.$$scope, TMP_21, TMP_22;

        def.config = nil;
        self.$attr_accessor("location");

        Opal.defn(self, '$initialize', TMP_21 = function ːinitialize(config) {
          var $a, $b, $c, $d, self = this, $iter = TMP_21.$$p, $yield = $iter || nil;

          if (config == null) {
            config = $hash2([], {});
          }
          TMP_21.$$p = null;
          ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_21, false)), $a.$$p = null, $a).call($b, config);
          return ($a = "location", $c = self.config, ((($d = $c['$[]']($a)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($a, "head")));
        }, TMP_21.$$arity = -1);

        return (Opal.defn(self, '$process', TMP_22 = function ːprocess(document) {
          var self = this;

          return self.$raise(Opal.get('NotImplementedError'));
        }, TMP_22.$$arity = 1), nil) && 'process';
      })($scope.base, $scope.get('Processor'));

      (function($base) {
        var $DocinfoProcessorDsl, self = $DocinfoProcessorDsl = $module($base, 'DocinfoProcessorDsl');

        var def = self.$$proto, $scope = self.$$scope, TMP_23;

        self.$include($scope.get('ProcessorDsl'));

        Opal.defn(self, '$at_location', TMP_23 = function ːat_location(value) {
          var self = this;

          return self.$option("location", value);
        }, TMP_23.$$arity = 1);
      })($scope.base);

      Opal.casgn($scope.get('DocinfoProcessor'), 'DSL', $scope.get('DocinfoProcessorDsl'));

      (function($base, $super) {
        function $BlockProcessor(){};
        var self = $BlockProcessor = $klass($base, $super, 'BlockProcessor', $BlockProcessor);

        var def = self.$$proto, $scope = self.$$scope, TMP_24, TMP_25;

        def.config = nil;
        self.$attr_accessor("name");

        Opal.defn(self, '$initialize', TMP_24 = function ːinitialize(name, config) {
          var $a, $b, $c, $d, self = this, $iter = TMP_24.$$p, $yield = $iter || nil, $case = nil;

          if (name == null) {
            name = nil;
          }
          if (config == null) {
            config = $hash2([], {});
          }
          TMP_24.$$p = null;
          ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_24, false)), $a.$$p = null, $a).call($b, config);
          self.name = ((($a = name) !== false && $a !== nil && $a != null) ? $a : self.config['$[]']("name"));
          $case = self.config['$[]']("contexts");if (Opal.get('NilClass')['$===']($case)) {($a = "contexts", $c = self.config, ((($d = $c['$[]']($a)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($a, ["open", "paragraph"].$to_set())))}else if (Opal.get('Symbol')['$===']($case)) {self.config['$[]=']("contexts", [self.config['$[]']("contexts")].$to_set())}else {self.config['$[]=']("contexts", self.config['$[]']("contexts").$to_set())};
          return ($a = "content_model", $c = self.config, ((($d = $c['$[]']($a)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($a, "compound")));
        }, TMP_24.$$arity = -1);

        return (Opal.defn(self, '$process', TMP_25 = function ːprocess(parent, reader, attributes) {
          var self = this;

          return self.$raise(Opal.get('NotImplementedError'));
        }, TMP_25.$$arity = 3), nil) && 'process';
      })($scope.base, $scope.get('Processor'));

      (function($base) {
        var $BlockProcessorDsl, self = $BlockProcessorDsl = $module($base, 'BlockProcessorDsl');

        var def = self.$$proto, $scope = self.$$scope, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30;

        self.$include($scope.get('ProcessorDsl'));

        Opal.defn(self, '$named', TMP_26 = function ːnamed(value) {
          var $a, self = this;

          if ((($a = $scope.get('Processor')['$==='](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.name = value
            } else {
            return self.$option("name", value)
          };
        }, TMP_26.$$arity = 1);

        Opal.alias(self, 'match_name', 'named');

        Opal.alias(self, 'bind_to', 'named');

        Opal.defn(self, '$contexts', TMP_27 = function ːcontexts($a_rest) {
          var self = this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
          return self.$option("contexts", value.$flatten());
        }, TMP_27.$$arity = -1);

        Opal.alias(self, 'on_contexts', 'contexts');

        Opal.alias(self, 'on_context', 'contexts');

        Opal.defn(self, '$content_model', TMP_28 = function ːcontent_model(value) {
          var self = this;

          return self.$option("content_model", value);
        }, TMP_28.$$arity = 1);

        Opal.alias(self, 'parse_content_as', 'content_model');

        Opal.defn(self, '$positional_attributes', TMP_29 = function ːpositional_attributes($a_rest) {
          var self = this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
          return self.$option("pos_attrs", value.$flatten());
        }, TMP_29.$$arity = -1);

        Opal.alias(self, 'pos_attrs', 'positional_attributes');

        Opal.alias(self, 'name_attributes', 'positional_attributes');

        Opal.alias(self, 'name_positional_attributes', 'positional_attributes');

        Opal.defn(self, '$default_attrs', TMP_30 = function ːdefault_attrs(value) {
          var self = this;

          return self.$option("default_attrs", value);
        }, TMP_30.$$arity = 1);

        Opal.alias(self, 'seed_attributes_with', 'default_attrs');
      })($scope.base);

      Opal.casgn($scope.get('BlockProcessor'), 'DSL', $scope.get('BlockProcessorDsl'));

      (function($base, $super) {
        function $MacroProcessor(){};
        var self = $MacroProcessor = $klass($base, $super, 'MacroProcessor', $MacroProcessor);

        var def = self.$$proto, $scope = self.$$scope, TMP_31, TMP_32;

        def.config = nil;
        self.$attr_accessor("name");

        Opal.defn(self, '$initialize', TMP_31 = function ːinitialize(name, config) {
          var $a, $b, $c, $d, self = this, $iter = TMP_31.$$p, $yield = $iter || nil;

          if (name == null) {
            name = nil;
          }
          if (config == null) {
            config = $hash2([], {});
          }
          TMP_31.$$p = null;
          ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_31, false)), $a.$$p = null, $a).call($b, config);
          self.name = ((($a = name) !== false && $a !== nil && $a != null) ? $a : self.config['$[]']("name"));
          return ($a = "content_model", $c = self.config, ((($d = $c['$[]']($a)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($a, "attributes")));
        }, TMP_31.$$arity = -1);

        return (Opal.defn(self, '$process', TMP_32 = function ːprocess(parent, target, attributes) {
          var self = this;

          return self.$raise(Opal.get('NotImplementedError'));
        }, TMP_32.$$arity = 3), nil) && 'process';
      })($scope.base, $scope.get('Processor'));

      (function($base) {
        var $MacroProcessorDsl, self = $MacroProcessorDsl = $module($base, 'MacroProcessorDsl');

        var def = self.$$proto, $scope = self.$$scope, TMP_33, TMP_34, TMP_35, TMP_36;

        self.$include($scope.get('ProcessorDsl'));

        Opal.defn(self, '$named', TMP_33 = function ːnamed(value) {
          var $a, self = this;

          if ((($a = $scope.get('Processor')['$==='](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.name = value
            } else {
            return self.$option("name", value)
          };
        }, TMP_33.$$arity = 1);

        Opal.alias(self, 'match_name', 'named');

        Opal.alias(self, 'bind_to', 'named');

        Opal.defn(self, '$content_model', TMP_34 = function ːcontent_model(value) {
          var self = this;

          return self.$option("content_model", value);
        }, TMP_34.$$arity = 1);

        Opal.alias(self, 'parse_content_as', 'content_model');

        Opal.defn(self, '$positional_attributes', TMP_35 = function ːpositional_attributes($a_rest) {
          var self = this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
          return self.$option("pos_attrs", value.$flatten());
        }, TMP_35.$$arity = -1);

        Opal.alias(self, 'pos_attrs', 'positional_attributes');

        Opal.alias(self, 'name_attributes', 'positional_attributes');

        Opal.alias(self, 'name_positional_attributes', 'positional_attributes');

        Opal.defn(self, '$default_attrs', TMP_36 = function ːdefault_attrs(value) {
          var self = this;

          return self.$option("default_attrs", value);
        }, TMP_36.$$arity = 1);

        Opal.alias(self, 'seed_attributes_with', 'default_attrs');
      })($scope.base);

      (function($base, $super) {
        function $BlockMacroProcessor(){};
        var self = $BlockMacroProcessor = $klass($base, $super, 'BlockMacroProcessor', $BlockMacroProcessor);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })($scope.base, $scope.get('MacroProcessor'));

      Opal.casgn($scope.get('BlockMacroProcessor'), 'DSL', $scope.get('MacroProcessorDsl'));

      (function($base, $super) {
        function $InlineMacroProcessor(){};
        var self = $InlineMacroProcessor = $klass($base, $super, 'InlineMacroProcessor', $InlineMacroProcessor);

        var def = self.$$proto, $scope = self.$$scope, TMP_37, TMP_38;

        def.config = def.name = nil;
        Opal.defn(self, '$regexp', TMP_37 = function ːregexp() {
          var $a, $b, $c, self = this;

          return ($a = "regexp", $b = self.config, ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, (self.$resolve_regexp(self.name, self.config['$[]']("format"))))));
        }, TMP_37.$$arity = 0);

        return (Opal.defn(self, '$resolve_regexp', TMP_38 = function ːresolve_regexp(name, format) {
          var self = this;

          if (format['$==']("short")) {
            return (new RegExp("\\\\?" + name + ":\\[((?:\\\\\\]|[^\\]])*?)\\]"))
            } else {
            return (new RegExp("\\\\?" + name + ":(\\S+?)\\[((?:\\\\\\]|[^\\]])*?)\\]"))
          };
        }, TMP_38.$$arity = 2), nil) && 'resolve_regexp';
      })($scope.base, $scope.get('MacroProcessor'));

      (function($base) {
        var $InlineMacroProcessorDsl, self = $InlineMacroProcessorDsl = $module($base, 'InlineMacroProcessorDsl');

        var def = self.$$proto, $scope = self.$$scope, TMP_39, TMP_40;

        self.$include($scope.get('MacroProcessorDsl'));

        Opal.defn(self, '$using_format', TMP_39 = function ːusing_format(value) {
          var self = this;

          return self.$option("format", value);
        }, TMP_39.$$arity = 1);

        Opal.defn(self, '$match', TMP_40 = function ːmatch(value) {
          var self = this;

          return self.$option("regexp", value);
        }, TMP_40.$$arity = 1);
      })($scope.base);

      Opal.casgn($scope.get('InlineMacroProcessor'), 'DSL', $scope.get('InlineMacroProcessorDsl'));

      (function($base, $super) {
        function $Extension(){};
        var self = $Extension = $klass($base, $super, 'Extension', $Extension);

        var def = self.$$proto, $scope = self.$$scope, TMP_41;

        self.$attr("kind");

        self.$attr("config");

        self.$attr("instance");

        return (Opal.defn(self, '$initialize', TMP_41 = function ːinitialize(kind, instance, config) {
          var self = this;

          self.kind = kind;
          self.instance = instance;
          return self.config = config;
        }, TMP_41.$$arity = 3), nil) && 'initialize';
      })($scope.base, null);

      (function($base, $super) {
        function $ProcessorExtension(){};
        var self = $ProcessorExtension = $klass($base, $super, 'ProcessorExtension', $ProcessorExtension);

        var def = self.$$proto, $scope = self.$$scope, TMP_42;

        self.$attr("process_method");

        return (Opal.defn(self, '$initialize', TMP_42 = function ːinitialize(kind, instance, process_method) {
          var $a, $b, self = this, $iter = TMP_42.$$p, $yield = $iter || nil;

          if (process_method == null) {
            process_method = nil;
          }
          TMP_42.$$p = null;
          ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_42, false)), $a.$$p = null, $a).call($b, kind, instance, instance.$config());
          return self.process_method = ((($a = process_method) !== false && $a !== nil && $a != null) ? $a : (instance.$method("process")));
        }, TMP_42.$$arity = -3), nil) && 'initialize';
      })($scope.base, $scope.get('Extension'));

      (function($base, $super) {
        function $Group(){};
        var self = $Group = $klass($base, $super, 'Group', $Group);

        var def = self.$$proto, $scope = self.$$scope, TMP_44;

        (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_43;

          return (Opal.defn(self, '$register', TMP_43 = function ːregister(name) {
            var self = this;

            if (name == null) {
              name = nil;
            }
            return $scope.get('Extensions').$register(name, self);
          }, TMP_43.$$arity = -1), nil) && 'register'
        })(Opal.get_singleton_class(self));

        return (Opal.defn(self, '$activate', TMP_44 = function ːactivate(registry) {
          var self = this;

          return self.$raise(Opal.get('NotImplementedError'));
        }, TMP_44.$$arity = 1), nil) && 'activate';
      })($scope.base, null);

      (function($base, $super) {
        function $Registry(){};
        var self = $Registry = $klass($base, $super, 'Registry', $Registry);

        var def = self.$$proto, $scope = self.$$scope, TMP_45, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55, TMP_56, TMP_57, TMP_58, TMP_59, TMP_60, TMP_62, TMP_64, TMP_65, TMP_66, TMP_67, TMP_68, TMP_69, TMP_70, TMP_71, TMP_72, TMP_73, TMP_74, TMP_75, TMP_76, TMP_77, TMP_78, TMP_80, TMP_82, TMP_83;

        def.groups = def.preprocessor_extensions = def.treeprocessor_extensions = def.postprocessor_extensions = def.include_processor_extensions = def.docinfo_processor_extensions = def.block_extensions = def.block_macro_extensions = def.inline_macro_extensions = nil;
        self.$attr_reader("document");

        self.$attr_reader("groups");

        Opal.defn(self, '$initialize', TMP_45 = function ːinitialize(groups) {
          var self = this;

          if (groups == null) {
            groups = $hash2([], {});
          }
          self.groups = groups;
          self.preprocessor_extensions = self.treeprocessor_extensions = self.postprocessor_extensions = self.include_processor_extensions = self.docinfo_processor_extensions = nil;
          self.block_extensions = self.block_macro_extensions = self.inline_macro_extensions = nil;
          return self.document = nil;
        }, TMP_45.$$arity = -1);

        Opal.defn(self, '$activate', TMP_47 = function ːactivate(document) {
          var $a, $b, TMP_46, self = this;

          self.document = document;
          ($a = ($b = ($rb_plus($scope.get('Extensions').$groups().$values(), self.groups.$values()))).$each, $a.$$p = (TMP_46 = function(group){var self = TMP_46.$$s || this, $c, $d, $case = nil;
if (group == null) group = nil;
          return (function() {$case = group;if (Opal.get('Proc')['$===']($case)) {return (function() {$case = group.$arity();if ((0)['$===']($case) || (-1)['$===']($case)) {return ($c = ($d = self).$instance_exec, $c.$$p = group.$to_proc(), $c).call($d)}else if ((1)['$===']($case)) {return group.$call(self)}else { return nil }})()}else if (Opal.get('Class')['$===']($case)) {return group.$new().$activate(self)}else {return group.$activate(self)}})()}, TMP_46.$$s = self, TMP_46.$$arity = 1, TMP_46), $a).call($b);
          return self;
        }, TMP_47.$$arity = 1);

        Opal.defn(self, '$preprocessor', TMP_48 = function ːpreprocessor($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_48.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_48.$$p = null;
          return ($b = ($c = self).$add_document_processor, $b.$$p = block.$to_proc(), $b).call($c, "preprocessor", args);
        }, TMP_48.$$arity = -1);

        Opal.defn(self, '$preprocessors?', TMP_49 = function() {
          var self = this;

          return self.preprocessor_extensions['$!']()['$!']();
        }, TMP_49.$$arity = 0);

        Opal.defn(self, '$preprocessors', TMP_50 = function ːpreprocessors() {
          var self = this;

          return self.preprocessor_extensions;
        }, TMP_50.$$arity = 0);

        Opal.defn(self, '$treeprocessor', TMP_51 = function ːtreeprocessor($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_51.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_51.$$p = null;
          return ($b = ($c = self).$add_document_processor, $b.$$p = block.$to_proc(), $b).call($c, "treeprocessor", args);
        }, TMP_51.$$arity = -1);

        Opal.defn(self, '$treeprocessors?', TMP_52 = function() {
          var self = this;

          return self.treeprocessor_extensions['$!']()['$!']();
        }, TMP_52.$$arity = 0);

        Opal.defn(self, '$treeprocessors', TMP_53 = function ːtreeprocessors() {
          var self = this;

          return self.treeprocessor_extensions;
        }, TMP_53.$$arity = 0);

        Opal.defn(self, '$postprocessor', TMP_54 = function ːpostprocessor($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_54.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_54.$$p = null;
          return ($b = ($c = self).$add_document_processor, $b.$$p = block.$to_proc(), $b).call($c, "postprocessor", args);
        }, TMP_54.$$arity = -1);

        Opal.defn(self, '$postprocessors?', TMP_55 = function() {
          var self = this;

          return self.postprocessor_extensions['$!']()['$!']();
        }, TMP_55.$$arity = 0);

        Opal.defn(self, '$postprocessors', TMP_56 = function ːpostprocessors() {
          var self = this;

          return self.postprocessor_extensions;
        }, TMP_56.$$arity = 0);

        Opal.defn(self, '$include_processor', TMP_57 = function ːinclude_processor($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_57.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_57.$$p = null;
          return ($b = ($c = self).$add_document_processor, $b.$$p = block.$to_proc(), $b).call($c, "include_processor", args);
        }, TMP_57.$$arity = -1);

        Opal.defn(self, '$include_processors?', TMP_58 = function() {
          var self = this;

          return self.include_processor_extensions['$!']()['$!']();
        }, TMP_58.$$arity = 0);

        Opal.defn(self, '$include_processors', TMP_59 = function ːinclude_processors() {
          var self = this;

          return self.include_processor_extensions;
        }, TMP_59.$$arity = 0);

        Opal.defn(self, '$docinfo_processor', TMP_60 = function ːdocinfo_processor($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_60.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_60.$$p = null;
          return ($b = ($c = self).$add_document_processor, $b.$$p = block.$to_proc(), $b).call($c, "docinfo_processor", args);
        }, TMP_60.$$arity = -1);

        Opal.defn(self, '$docinfo_processors?', TMP_62 = function(location) {
          var $a, $b, TMP_61, self = this;

          if (location == null) {
            location = nil;
          }
          if ((($a = self.docinfo_processor_extensions) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if (location !== false && location !== nil && location != null) {
              return ($a = ($b = self.docinfo_processor_extensions)['$any?'], $a.$$p = (TMP_61 = function(ext){var self = TMP_61.$$s || this;
if (ext == null) ext = nil;
              return ext.$config()['$[]']("location")['$=='](location)}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61), $a).call($b)
              } else {
              return true
            }
            } else {
            return false
          };
        }, TMP_62.$$arity = -1);

        Opal.defn(self, '$docinfo_processors', TMP_64 = function ːdocinfo_processors(location) {
          var $a, $b, TMP_63, self = this;

          if (location == null) {
            location = nil;
          }
          if ((($a = self.docinfo_processor_extensions) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if (location !== false && location !== nil && location != null) {
              return ($a = ($b = self.docinfo_processor_extensions).$select, $a.$$p = (TMP_63 = function(ext){var self = TMP_63.$$s || this;
if (ext == null) ext = nil;
              return ext.$config()['$[]']("location")['$=='](location)}, TMP_63.$$s = self, TMP_63.$$arity = 1, TMP_63), $a).call($b)
              } else {
              return self.docinfo_processor_extensions
            }
            } else {
            return nil
          };
        }, TMP_64.$$arity = -1);

        Opal.defn(self, '$block', TMP_65 = function ːblock($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_65.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_65.$$p = null;
          return ($b = ($c = self).$add_syntax_processor, $b.$$p = block.$to_proc(), $b).call($c, "block", args);
        }, TMP_65.$$arity = -1);

        Opal.defn(self, '$blocks?', TMP_66 = function() {
          var self = this;

          return self.block_extensions['$!']()['$!']();
        }, TMP_66.$$arity = 0);

        Opal.defn(self, '$registered_for_block?', TMP_67 = function(name, context) {
          var $a, self = this, ext = nil;

          if ((($a = (ext = self.block_extensions['$[]'](name.$to_sym()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = (ext.$config()['$[]']("contexts")['$include?'](context))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ext
              } else {
              return false
            }
            } else {
            return false
          };
        }, TMP_67.$$arity = 2);

        Opal.defn(self, '$find_block_extension', TMP_68 = function ːfind_block_extension(name) {
          var self = this;

          return self.block_extensions['$[]'](name.$to_sym());
        }, TMP_68.$$arity = 1);

        Opal.defn(self, '$block_macro', TMP_69 = function ːblock_macro($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_69.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_69.$$p = null;
          return ($b = ($c = self).$add_syntax_processor, $b.$$p = block.$to_proc(), $b).call($c, "block_macro", args);
        }, TMP_69.$$arity = -1);

        Opal.defn(self, '$block_macros?', TMP_70 = function() {
          var self = this;

          return self.block_macro_extensions['$!']()['$!']();
        }, TMP_70.$$arity = 0);

        Opal.defn(self, '$registered_for_block_macro?', TMP_71 = function(name) {
          var $a, self = this, ext = nil;

          if ((($a = (ext = self.block_macro_extensions['$[]'](name.$to_sym()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ext
            } else {
            return false
          };
        }, TMP_71.$$arity = 1);

        Opal.defn(self, '$find_block_macro_extension', TMP_72 = function ːfind_block_macro_extension(name) {
          var self = this;

          return self.block_macro_extensions['$[]'](name.$to_sym());
        }, TMP_72.$$arity = 1);

        Opal.defn(self, '$inline_macro', TMP_73 = function ːinline_macro($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_73.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_73.$$p = null;
          return ($b = ($c = self).$add_syntax_processor, $b.$$p = block.$to_proc(), $b).call($c, "inline_macro", args);
        }, TMP_73.$$arity = -1);

        Opal.defn(self, '$inline_macros?', TMP_74 = function() {
          var self = this;

          return self.inline_macro_extensions['$!']()['$!']();
        }, TMP_74.$$arity = 0);

        Opal.defn(self, '$registered_for_inline_macro?', TMP_75 = function(name) {
          var $a, self = this, ext = nil;

          if ((($a = (ext = self.inline_macro_extensions['$[]'](name.$to_sym()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ext
            } else {
            return false
          };
        }, TMP_75.$$arity = 1);

        Opal.defn(self, '$find_inline_macro_extension', TMP_76 = function ːfind_inline_macro_extension(name) {
          var self = this;

          return self.inline_macro_extensions['$[]'](name.$to_sym());
        }, TMP_76.$$arity = 1);

        Opal.defn(self, '$inline_macros', TMP_77 = function ːinline_macros() {
          var self = this;

          return self.inline_macro_extensions.$values();
        }, TMP_77.$$arity = 0);

        self.$private();

        Opal.defn(self, '$add_document_processor', TMP_78 = function ːadd_document_processor(kind, args) {
          var $a, $b, TMP_79, $c, $d, $e, self = this, $iter = TMP_78.$$p, block = $iter || nil, kind_name = nil, kind_class_symbol = nil, kind_class = nil, kind_java_class = nil, kind_store = nil, extension = nil, config = nil, processor = nil, processor_instance = nil;

          TMP_78.$$p = null;
          kind_name = kind.$to_s().$tr("_", " ");
          kind_class_symbol = ($a = ($b = kind_name.$split(" ")).$map, $a.$$p = (TMP_79 = function(word){var self = TMP_79.$$s || this;
if (word == null) word = nil;
          return "" + (word.$chr().$upcase()) + (word['$[]']($range(1, -1, false)))}, TMP_79.$$s = self, TMP_79.$$arity = 1, TMP_79), $a).call($b).$join().$to_sym();
          kind_class = $scope.get('Extensions').$const_get(kind_class_symbol);
          kind_java_class = (function() {if ((($a = ((Opal.Object.$$scope.AsciidoctorJ == null ? nil : 'constant'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return (((Opal.get('AsciidoctorJ')).$$scope.get('Extensions')).$const_get(kind_class_symbol))
            } else {
            return nil
          }; return nil; })();
          kind_store = ((($a = self.$instance_variable_get(((("@") + (kind)) + "_extensions").$to_sym())) !== false && $a !== nil && $a != null) ? $a : self.$instance_variable_set(((("@") + (kind)) + "_extensions").$to_sym(), []));
          extension = (function() {if ((block !== nil)) {
            config = self.$resolve_args(args, 1);
            processor = kind_class.$new(config);
            if ((($a = kind_class.$constants().$grep("DSL")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              processor.$extend(kind_class.$const_get("DSL"))};
            ($a = ($c = processor).$instance_exec, $a.$$p = block.$to_proc(), $a).call($c);
            processor.$freeze();
            if ((($a = processor['$process_block_given?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$raise(Opal.get('ArgumentError').$new("No block specified to process " + (kind_name) + " extension at " + (block.$source_location())))
            };
            return $scope.get('ProcessorExtension').$new(kind, processor);
            } else {
            $d = self.$resolve_args(args, 2), $a = Opal.to_ary($d), processor = ($a[0] == null ? nil : $a[0]), config = ($a[1] == null ? nil : $a[1]), $d;
            if ((($a = ((($d = Opal.get('Class')['$==='](processor)) !== false && $d !== nil && $d != null) ? $d : (($e = Opal.get('String')['$==='](processor), $e !== false && $e !== nil && $e != null ?(processor = $scope.get('Extensions').$class_for_name(processor)) : $e)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if ((($a = ((($d = $rb_lt(processor, kind_class)) !== false && $d !== nil && $d != null) ? $d : ((($e = kind_java_class !== false && kind_java_class !== nil && kind_java_class != null) ? $rb_lt(processor, kind_java_class) : kind_java_class)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                } else {
                self.$raise(Opal.get('ArgumentError').$new("Invalid type for " + (kind_name) + " extension: " + (processor)))
              };
              processor_instance = processor.$new(config);
              processor_instance.$freeze();
              return $scope.get('ProcessorExtension').$new(kind, processor_instance);
            } else if ((($a = ((($d = kind_class['$==='](processor)) !== false && $d !== nil && $d != null) ? $d : ((($e = kind_java_class !== false && kind_java_class !== nil && kind_java_class != null) ? kind_java_class['$==='](processor) : kind_java_class)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              processor.$update_config(config);
              processor.$freeze();
              return $scope.get('ProcessorExtension').$new(kind, processor);
              } else {
              return self.$raise(Opal.get('ArgumentError').$new("Invalid arguments specified for registering " + (kind_name) + " extension: " + (args)))
            };
          }; return nil; })();
          if (extension.$config()['$[]']("position")['$=='](">>")) {
            return kind_store.$unshift(extension)
            } else {
            return kind_store['$<<'](extension)
          };
        }, TMP_78.$$arity = 2);

        Opal.defn(self, '$add_syntax_processor', TMP_80 = function ːadd_syntax_processor(kind, args) {
          var $a, $b, TMP_81, $c, $d, $e, self = this, $iter = TMP_80.$$p, block = $iter || nil, kind_name = nil, kind_class_basename = nil, kind_class_symbol = nil, kind_class = nil, kind_java_class = nil, kind_store = nil, name = nil, config = nil, processor = nil, processor_instance = nil;

          TMP_80.$$p = null;
          kind_name = kind.$to_s().$tr("_", " ");
          kind_class_basename = ($a = ($b = kind_name.$split(" ")).$map, $a.$$p = (TMP_81 = function(word){var self = TMP_81.$$s || this;
if (word == null) word = nil;
          return "" + (word.$chr().$upcase()) + (word['$[]']($range(1, -1, false)))}, TMP_81.$$s = self, TMP_81.$$arity = 1, TMP_81), $a).call($b).$join();
          kind_class_symbol = ((("") + (kind_class_basename)) + "Processor").$to_sym();
          kind_class = $scope.get('Extensions').$const_get(kind_class_symbol);
          kind_java_class = (function() {if ((($a = ((Opal.Object.$$scope.AsciidoctorJ == null ? nil : 'constant'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return (((Opal.get('AsciidoctorJ')).$$scope.get('Extensions')).$const_get(kind_class_symbol))
            } else {
            return nil
          }; return nil; })();
          kind_store = ((($a = self.$instance_variable_get(((("@") + (kind)) + "_extensions").$to_sym())) !== false && $a !== nil && $a != null) ? $a : self.$instance_variable_set(((("@") + (kind)) + "_extensions").$to_sym(), $hash2([], {})));
          if ((block !== nil)) {
            $c = self.$resolve_args(args, 2), $a = Opal.to_ary($c), name = ($a[0] == null ? nil : $a[0]), config = ($a[1] == null ? nil : $a[1]), $c;
            processor = kind_class.$new(self.$as_symbol(name), config);
            if ((($a = kind_class.$constants().$grep("DSL")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              processor.$extend(kind_class.$const_get("DSL"))};
            if (block.$arity()['$=='](1)) {
              Opal.yield1(block, processor)
              } else {
              ($a = ($c = processor).$instance_exec, $a.$$p = block.$to_proc(), $a).call($c)
            };
            if ((($a = (name = self.$as_symbol(processor.$name()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$raise(Opal.get('ArgumentError').$new("No name specified for " + (kind_name) + " extension at " + (block.$source_location())))
            };
            if ((($a = processor['$process_block_given?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$raise(Opal.get('NoMethodError').$new("No block specified to process " + (kind_name) + " extension at " + (block.$source_location())))
            };
            processor.$freeze();
            return kind_store['$[]='](name, $scope.get('ProcessorExtension').$new(kind, processor));
            } else {
            $d = self.$resolve_args(args, 3), $a = Opal.to_ary($d), processor = ($a[0] == null ? nil : $a[0]), name = ($a[1] == null ? nil : $a[1]), config = ($a[2] == null ? nil : $a[2]), $d;
            if ((($a = ((($d = Opal.get('Class')['$==='](processor)) !== false && $d !== nil && $d != null) ? $d : (($e = Opal.get('String')['$==='](processor), $e !== false && $e !== nil && $e != null ?(processor = $scope.get('Extensions').$class_for_name(processor)) : $e)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if ((($a = ((($d = $rb_lt(processor, kind_class)) !== false && $d !== nil && $d != null) ? $d : ((($e = kind_java_class !== false && kind_java_class !== nil && kind_java_class != null) ? $rb_lt(processor, kind_java_class) : kind_java_class)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                } else {
                self.$raise(Opal.get('ArgumentError').$new("Class specified for " + (kind_name) + " extension does not inherit from " + (kind_class) + ": " + (processor)))
              };
              processor_instance = processor.$new(self.$as_symbol(name), config);
              if ((($a = (name = self.$as_symbol(processor_instance.$name()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                } else {
                self.$raise(Opal.get('ArgumentError').$new("No name specified for " + (kind_name) + " extension: " + (processor)))
              };
              processor.$freeze();
              return kind_store['$[]='](name, $scope.get('ProcessorExtension').$new(kind, processor_instance));
            } else if ((($a = ((($d = kind_class['$==='](processor)) !== false && $d !== nil && $d != null) ? $d : ((($e = kind_java_class !== false && kind_java_class !== nil && kind_java_class != null) ? kind_java_class['$==='](processor) : kind_java_class)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              processor.$update_config(config);
              if ((($a = (name = (function() {if (name !== false && name !== nil && name != null) {
                return ((($d = [self.$as_symbol(name)]), $e = processor, $e['$name='].apply($e, $d), $d[$d.length-1]))
                } else {
                return (self.$as_symbol(processor.$name()))
              }; return nil; })())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                } else {
                self.$raise(Opal.get('ArgumentError').$new("No name specified for " + (kind_name) + " extension: " + (processor)))
              };
              processor.$freeze();
              return kind_store['$[]='](name, $scope.get('ProcessorExtension').$new(kind, processor));
              } else {
              return self.$raise(Opal.get('ArgumentError').$new("Invalid arguments specified for registering " + (kind_name) + " extension: " + (args)))
            };
          };
        }, TMP_80.$$arity = 2);

        Opal.defn(self, '$resolve_args', TMP_82 = function ːresolve_args(args, expect) {
          var $a, self = this, opts = nil, num_args = nil, missing = nil;

          opts = (function() {if ((($a = Opal.get('Hash')['$==='](args['$[]'](-1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return args.$pop()
            } else {
            return $hash2([], {})
          }; return nil; })();
          if (expect['$=='](1)) {
            return opts};
          num_args = args.$size();
          if ((($a = $rb_gt((missing = $rb_minus($rb_minus(expect, 1), num_args)), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            args.$fill(nil, num_args, missing)
          } else if ((($a = $rb_lt(missing, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            args.$pop(missing['$-@']())};
          args['$<<'](opts);
          return args;
        }, TMP_82.$$arity = 2);

        return (Opal.defn(self, '$as_symbol', TMP_83 = function ːas_symbol(name) {
          var self = this;

          if (name !== false && name !== nil && name != null) {
            return name.$to_sym()
            } else {
            return nil
          };
        }, TMP_83.$$arity = 1), nil) && 'as_symbol';
      })($scope.base, null);

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_84, TMP_85, TMP_86, TMP_87, TMP_88, TMP_89, TMP_90, TMP_92;

        Opal.defn(self, '$generate_name', TMP_84 = function ːgenerate_name() {
          var self = this;

          return "extgrp" + (self.$next_auto_id());
        }, TMP_84.$$arity = 0);
        Opal.defn(self, '$next_auto_id', TMP_85 = function ːnext_auto_id() {
          var $a, self = this;
          if (self.auto_id == null) self.auto_id = nil;

          ((($a = self.auto_id) !== false && $a !== nil && $a != null) ? $a : self.auto_id = -1);
          return self.auto_id = $rb_plus(self.auto_id, 1);
        }, TMP_85.$$arity = 0);
        Opal.defn(self, '$groups', TMP_86 = function ːgroups() {
          var $a, self = this;
          if (self.groups == null) self.groups = nil;

          return ((($a = self.groups) !== false && $a !== nil && $a != null) ? $a : self.groups = $hash2([], {}));
        }, TMP_86.$$arity = 0);
        Opal.defn(self, '$build_registry', TMP_87 = function ːbuild_registry(name) {
          var $a, self = this, $iter = TMP_87.$$p, block = $iter || nil;

          if (name == null) {
            name = nil;
          }
          TMP_87.$$p = null;
          if ((block !== nil)) {
            ((($a = name) !== false && $a !== nil && $a != null) ? $a : name = self.$generate_name());
            return $scope.get('Registry').$new($hash(name, block));
            } else {
            return $scope.get('Registry').$new()
          };
        }, TMP_87.$$arity = -1);
        Opal.defn(self, '$register', TMP_88 = function ːregister($a_rest) {
          var $b, self = this, args, $iter = TMP_88.$$p, block = $iter || nil, argc = nil, resolved_group = nil, group = nil, $case = nil, name = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_88.$$p = null;
          argc = args.$length();
          resolved_group = (function() {if ((block !== nil)) {
            return block
          } else if ((($b = ((group = args.$pop()))['$!']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return self.$raise(Opal.get('ArgumentError').$new("Extension group to register not specified"))
            } else {
            return (function() {$case = group;if (Opal.get('Class')['$===']($case)) {return group}else if (Opal.get('String')['$===']($case)) {return self.$class_for_name(group)}else if (Opal.get('Symbol')['$===']($case)) {return self.$class_for_name(group.$to_s())}else {return group}})()
          }; return nil; })();
          name = ((($b = args.$pop()) !== false && $b !== nil && $b != null) ? $b : self.$generate_name());
          if ((($b = args['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            } else {
            self.$raise(Opal.get('ArgumentError').$new("Wrong number of arguments (" + (argc) + " for 1..2)"))
          };
          return self.$groups()['$[]='](name, resolved_group);
        }, TMP_88.$$arity = -1);
        Opal.defn(self, '$unregister_all', TMP_89 = function ːunregister_all() {
          var self = this;

          return self.groups = $hash2([], {});
        }, TMP_89.$$arity = 0);
        Opal.defn(self, '$resolve_class', TMP_90 = function ːresolve_class(object) {
          var $a, self = this;

          if ((($a = Opal.get('Class')['$==='](object)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return object
            } else {
            return (self.$class_for_name(object.$to_s()))
          };
        }, TMP_90.$$arity = 1);
        return (Opal.defn(self, '$class_for_name', TMP_92 = function ːclass_for_name(qualified_name) {
          var $a, $b, TMP_91, self = this, resolved_class = nil;

          resolved_class = Opal.get('Object');
          ($a = ($b = qualified_name.$split("::")).$each, $a.$$p = (TMP_91 = function(name){var self = TMP_91.$$s || this, $c;
if (name == null) name = nil;
          if ((($c = name['$empty?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return nil
            } else if ((($c = resolved_class['$const_defined?'](name)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return resolved_class = resolved_class.$const_get(name)
              } else {
              return self.$raise("Could not resolve class for name: " + (qualified_name))
            }}, TMP_91.$$s = self, TMP_91.$$arity = 1, TMP_91), $a).call($b);
          return resolved_class;
        }, TMP_92.$$arity = 1), nil) && 'class_for_name';
      })(Opal.get_singleton_class(self));
    })($scope.base)
  })($scope.base)
})(Opal);

// Extensions API

var Extensions = Opal.Asciidoctor.$$scope.Extensions;

Extensions.register = function (block, name) {
  Opal.block_send(Opal.Asciidoctor.Extensions, 'register', block, name);
};

Extensions.Registry.$$proto.inlineMacro = function (block, name) {
  return Opal.block_send(this, 'inline_macro', block, name);
};

Extensions.InlineMacroProcessor.$$proto.process = function (block) {
  return Opal.block_send(this, 'process', block);
};

};
