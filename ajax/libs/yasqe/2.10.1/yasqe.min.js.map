{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/deparam.js","yasqe.min.js","lib/grammar/_tokenizer-table.js","lib/grammar/tokenizer.js","lib/trie.js","node_modules/codemirror/addon/display/fullscreen.js","node_modules/codemirror/addon/edit/matchbrackets.js","node_modules/codemirror/addon/fold/brace-fold.js","node_modules/codemirror/addon/fold/foldcode.js","node_modules/codemirror/addon/fold/foldgutter.js","node_modules/codemirror/addon/fold/xml-fold.js","node_modules/codemirror/addon/hint/show-hint.js","node_modules/codemirror/addon/runmode/runmode.js","node_modules/codemirror/addon/search/searchcursor.js","node_modules/store/store.js","node_modules/yasgui-utils/package.json","node_modules/yasgui-utils/src/main.js","node_modules/yasgui-utils/src/storage.js","node_modules/yasgui-utils/src/svg.js","package.json","src/autocompleters/autocompleterBase.js","src/autocompleters/classes.js","src/autocompleters/prefixes.js","src/autocompleters/properties.js","src/autocompleters/utils.js","src/autocompleters/variables.js","src/curl.js","src/defaults.js","src/entry.js","src/imgs.js","src/main.js","src/prefixFold.js","src/prefixUtils.js","src/sparql.js","src/tokenUtils.js","src/tooltip.js","src/utils.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","YASQE","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","$","jQuery","deparam","params","coerce","obj","coerce_types","true","false","null","each","replace","split","j","v","val","param","key","decodeURIComponent","cur","keys","keys_last","test","shift","concat","isNaN","undefined","isArray","push","jquery","2","table","*[&&,valueLogical]","&&","AS",")",",","||",";","*[,,expression]","*[,,objectPath]",".","]","{","OPTIONAL","MINUS","GRAPH","SERVICE","FILTER","BIND","VALUES","}","*[,,object]","*[/,pathEltOrInverse]","/","|","(","[","VAR1","VAR2","NIL","IRI_REF","TRUE","FALSE","BLANK_NODE_LABEL","ANON","PNAME_LN","PNAME_NS","STRING_LITERAL1","STRING_LITERAL2","STRING_LITERAL_LONG1","STRING_LITERAL_LONG2","INTEGER","DECIMAL","DOUBLE","INTEGER_POSITIVE","DECIMAL_POSITIVE","DOUBLE_POSITIVE","INTEGER_NEGATIVE","DECIMAL_NEGATIVE","DOUBLE_NEGATIVE","*[;,?[or([verbPath,verbSimple]),objectList]]","*[;,?[verb,objectList]]","*[UNION,groupGraphPattern]","UNION","*[graphPatternNotTriples,?.,?triplesBlock]","*[quadsNotTriples,?.,?triplesTemplate]","*[|,pathOneInPropertySet]","*[|,pathSequence]","*[||,conditionalAndExpression]","*dataBlockValue","UNDEF","*datasetClause","FROM","WHERE","*describeDatasetClause","ORDER","HAVING","GROUP","LIMIT","OFFSET","*graphNode","*graphNodePath","*groupCondition","STR","LANG","LANGMATCHES","DATATYPE","BOUND","IRI","URI","BNODE","RAND","ABS","CEIL","FLOOR","ROUND","CONCAT","STRLEN","UCASE","LCASE","ENCODE_FOR_URI","CONTAINS","STRSTARTS","STRENDS","STRBEFORE","STRAFTER","YEAR","MONTH","DAY","HOURS","MINUTES","SECONDS","TIMEZONE","TZ","NOW","UUID","STRUUID","MD5","SHA1","SHA256","SHA384","SHA512","COALESCE","IF","STRLANG","STRDT","SAMETERM","ISIRI","ISURI","ISBLANK","ISLITERAL","ISNUMERIC","SUBSTR","REPLACE","REGEX","EXISTS","NOT","*havingCondition","*or([[ (,*dataBlockValue,)],NIL])","*or([[*,unaryExpression],[/,unaryExpression]])","*","=","!=","<",">","<=",">=","IN","+","-","*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])","*or([baseDecl,prefixDecl])","BASE","PREFIX","CONSTRUCT","DESCRIBE","ASK","INSERT","DELETE","SELECT","LOAD","CLEAR","DROP","ADD","MOVE","COPY","CREATE","WITH","*or([var,[ (,expression,AS,var,)]])","*orderCondition","ASC","DESC","*usingClause","USING","*var","*varOrIRIref","+graphNode","+graphNodePath","+groupCondition","+havingCondition","+or([var,[ (,expression,AS,var,)]])","+orderCondition","+varOrIRIref","?.","?DISTINCT","DISTINCT","!","COUNT","SUM","MIN","MAX","AVG","SAMPLE","GROUP_CONCAT","?GRAPH","?SILENT","SILENT","?SILENT_1","?SILENT_2","DEFAULT","NAMED","ALL","?SILENT_3","?SILENT_4","?WHERE","?[,,expression]","?[.,?constructTriples]","?[.,?triplesBlock]","?[.,?triplesTemplate]","?[;,SEPARATOR,=,string]","?[;,update]","?[AS,var]","?[INTO,graphRef]","INTO","?[or([verbPath,verbSimple]),objectList]","^","?[pathOneInPropertySet,*[|,pathOneInPropertySet]]","?[update1,?[;,update]]","?[verb,objectList]","?argList","?constructTriples","?groupClause","?havingClause","?insertClause","?limitClause","?limitOffsetClauses","?offsetClause","?or([DISTINCT,REDUCED])","REDUCED","?or([LANGTAG,[^^,iriRef]])","LANGTAG","^^","?or([[*,unaryExpression],[/,unaryExpression]])","?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])","?orderClause","?pathMod","?","?triplesBlock","?triplesTemplate","?whereClause","[ (,*dataBlockValue,)]","[ (,*var,)]","[ (,expression,)]","[ (,expression,AS,var,)]","[!=,numericExpression]","[&&,valueLogical]","[*,unaryExpression]","[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]","[+,multiplicativeExpression]","[,,expression]","[,,integer,}]","[,,objectPath]","[,,object]","[,,or([},[integer,}]])]","[-,multiplicativeExpression]","[.,?constructTriples]","[.,?triplesBlock]","[.,?triplesTemplate]","[/,pathEltOrInverse]","[/,unaryExpression]","[;,?[or([verbPath,verbSimple]),objectList]]","[;,?[verb,objectList]]","[;,SEPARATOR,=,string]","[;,update]","[<,numericExpression]","[<=,numericExpression]","[=,numericExpression]","[>,numericExpression]","[>=,numericExpression]","[AS,var]","[IN,expressionList]","[INTO,graphRef]","[NAMED,iriRef]","[NOT,IN,expressionList]","[UNION,groupGraphPattern]","[^^,iriRef]","[constructTemplate,*datasetClause,whereClause,solutionModifier]","[deleteClause,?insertClause]","[graphPatternNotTriples,?.,?triplesBlock]","[integer,or([[,,or([},[integer,}]])],}])]","[integer,}]","[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]","[or([verbPath,verbSimple]),objectList]","[pathOneInPropertySet,*[|,pathOneInPropertySet]]","[quadsNotTriples,?.,?triplesTemplate]","[update1,?[;,update]]","[verb,objectList]","[|,pathOneInPropertySet]","[|,pathSequence]","[||,conditionalAndExpression]","add","additiveExpression","aggregate","allowBnodes","allowVars","argList","askQuery","baseDecl","bind","blankNode","blankNodePropertyList","blankNodePropertyListPath","booleanLiteral","brackettedExpression","builtInCall","clear","collection","collectionPath","conditionalAndExpression","conditionalOrExpression","constraint","constructQuery","constructTemplate","constructTriples","copy","create","dataBlock","dataBlockValue","datasetClause","defaultGraphClause","delete1","DATA","deleteClause","describeDatasetClause","describeQuery","disallowBnodes","disallowVars","drop","existsFunc","expression","expressionList","filter","functionCall","graphGraphPattern","graphNode","graphNodePath","graphOrDefault","graphPatternNotTriples","graphRef","graphRefAll","graphTerm","groupClause","groupCondition","groupGraphPattern","groupGraphPatternSub","groupOrUnionGraphPattern","havingClause","havingCondition","inlineData","inlineDataFull","inlineDataOneVar","insert1","insertClause","integer","iriRef","iriRefOrFunction","limitClause","limitOffsetClauses","load","minusGraphPattern","modify","move","multiplicativeExpression","namedGraphClause","notExistsFunc","numericExpression","numericLiteral","numericLiteralNegative","numericLiteralPositive","numericLiteralUnsigned","object","objectList","objectListPath","objectPath","offsetClause","optionalGraphPattern","or([*,expression])","or([+or([var,[ (,expression,AS,var,)]]),*])","or([+varOrIRIref,*])","or([ASC,DESC])","or([DISTINCT,REDUCED])","or([LANGTAG,[^^,iriRef]])","or([NIL,[ (,*var,)]])","or([[ (,*dataBlockValue,)],NIL])","or([[ (,expression,)],NIL])","or([[*,unaryExpression],[/,unaryExpression]])","or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])","or([[,,or([},[integer,}]])],}])","or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])","or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])","or([[deleteClause,?insertClause],insertClause])","or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])","or([baseDecl,prefixDecl])","or([defaultGraphClause,namedGraphClause])","or([inlineDataOneVar,inlineDataFull])","or([iriRef,[NAMED,iriRef]])","or([iriRef,a])","or([numericLiteralPositive,numericLiteralNegative])","or([queryAll,updateAll])","or([selectQuery,constructQuery,describeQuery,askQuery])","or([subSelect,groupGraphPatternSub])","or([var,[ (,expression,AS,var,)]])","or([verbPath,verbSimple])","or([},[integer,}]])","orderClause","orderCondition","path","pathAlternative","pathElt","pathEltOrInverse","pathMod","pathNegatedPropertySet","pathOneInPropertySet","pathPrimary","pathSequence","prefixDecl","prefixedName","primaryExpression","prologue","propertyList","propertyListNotEmpty","propertyListPath","propertyListPathNotEmpty","quadData","quadDataNoBnodes","quadPattern","quadPatternNoBnodes","quads","quadsNotTriples","queryAll","rdfLiteral","regexExpression","relationalExpression","selectClause","selectQuery","serviceGraphPattern","solutionModifier","sourceSelector","sparql11","storeProperty","strReplaceExpression","string","subSelect","substringExpression","triplesBlock","triplesNode","triplesNodePath","triplesSameSubject","triplesSameSubjectPath","triplesTemplate","unaryExpression","update","update1","updateAll","usingClause","valueLogical","valuesClause","var","varOrIRIref","varOrTerm","verb","verbPath","verbSimple","whereClause","keywords","punct","startSymbol","acceptEmpty","3","CodeMirror","defineMode","config","parserConfig","getPossibles","symbol","possibles","possiblesOb","ll1_table","property","toString","tokenBase","stream","state","nextToken","consumed","inLiteral","closingQuotes","match","stringLiteralLongRegex","contents","regex","closing","returnObj","quotePos","cat","STRING_LITERAL_LONG","CAT","style","complete","text","start","quoteType","quotes","terminals","name","grammar","current","toUpperCase","recordFailurePos","col","column","errorStartPos","errorEndPos","tokenOb","setQueryType","queryType","setSideConditions","topSymbol","checkSideConditions","pos","possibleCurrent","possibleNext","OK","finished","token","stack","pop","nextSymbols","allNillable","sp","item","lastProperty","indexOf","lastPredicateOffset","indent","textAfter","closeBracket","substr","dn","indentTop","indentTable","indentUnit","PN_CHARS_BASE","PN_CHARS_U","PN_CHARS","VARNAME","PN_PREFIX","HEX","PERCENT","PN_LOCAL_ESC","PLX","PN_LOCAL","EXPONENT","ECHAR","hex4","unicode","SINGLE","QUOTES","CONTENTS","COMPLETE","RegExp","WS","COMMENT","WS_OR_COMMENT_STAR","*[,, object]","*[(,),object]","*[(,),objectPath]","startState","base","tokenize","electricChars","defineMIME","./_tokenizer-table.js","codemirror","4","Trie","words","prefixes","children","prototype","insert","str","k","child","T","remove","strOld","strNew","countWord","ret","countPrefix","find","getAllWords","autoComplete","5","mod","setFullscreen","cm","wrap","getWrapperElement","fullScreenRestore","scrollTop","pageYOffset","scrollLeft","pageXOffset","width","height","className","document","documentElement","overflow","refresh","setNormal","info","scrollTo","defineOption","old","Init","6","findMatchingBracket","where","strict","line","getLineHandle","ch","matching","charAt","dir","getTokenTypeAt","Pos","found","scanForBracket","from","to","forward","maxScanLen","maxScanLineLength","maxScanLines","re","bracketRegex","lineEnd","Math","min","lastLine","max","firstLine","lineNo","getLine","end","matchBrackets","autoclear","maxHighlightLen","maxHighlightLineLength","marks","ranges","listSelections","empty","head","markText","ie_lt8","focused","focus","operation","setTimeout","doMatchBrackets","currentlyHighlighted","navigator","userAgent","documentMode","off","on","defineExtension","7","registerHelper","findOpening","openCh","at","pass","lineText","lastIndexOf","tokenType","startToken","endToken","startCh","endCh","count","outer","nextOpen","nextClose","hasImport","getTokenAt","type","semi","prev","startLine","has","next","clipPos","hasInclude","slice","8","doFold","options","force","getRange","allowFolded","range","finder","minSize","findMarksAt","__isFold","cleared","getOption","myWidget","makeWidget","myRange","e_preventDefault","replacedWith","clearOnEnter","signal","widget","createTextNode","createElement","appendChild","editorOptions","foldOptions","defaultOptions","newFoldFunction","rangeFinder","commands","toggleFold","foldCode","getCursor","fold","unfold","foldAll","unfoldAll","funcs","Array","arguments","helpers","getHelpers","auto","minFoldSize","scanUp","9","State","parseOptions","opts","gutter","indicatorOpen","indicatorFolded","isFolded","findMarks","marker","spec","elt","cloneNode","updateFoldInfo","foldGutter","foldOption","func","eachLine","mark","setGutterMarker","updateInViewport","vp","getViewport","onGutterClick","folded","onChange","clearTimeout","changeUpdate","foldOnChangeTimeSpan","onViewportChange","updateViewportTimeSpan","onFold","clearGutter","./foldcode","10","cmp","b","Iter","tagAt","iter","nextLine","prevLine","toTagEnd","gt","lastSlash","selfClose","toTagStart","lt","xmlTagStart","lastIndex","exec","index","toNextTag","toPrevTag","findMatchingClose","tag","findMatchingOpen","endLine","nameStartChar","nameChar","openTag","startPos","endPos","findMatchingTag","here","open","close","findEnclosingTag","scanForClosingTag","11","Completion","debounce","tick","startLen","getSelection","activityFunc","cursorActivity","isNewCompletion","nw","moved","cmpPos","editor","hintOptions","out","prop","hint","resolve","getText","completion","buildKeyMap","handle","addBinding","bound","baseMap","hasOwnProperty","ourMap","Up","moveFocus","Down","PageUp","menuSize","PageDown","Home","setFocus","End","Enter","pick","Tab","Esc","custom","customKeys","extra","extraKeys","getHintElement","hintsElement","el","nodeName","parentNode","Widget","data","picked","hints","selectedHint","completions","list","HINT_ELEMENT_CLASS","ACTIVE_HINT_ELEMENT_CLASS","render","displayText","hintId","cursorCoords","alignWithWord","left","top","bottom","below","winW","innerWidth","body","offsetWidth","winH","innerHeight","offsetHeight","container","box","getBoundingClientRect","overlapY","scrolls","scrollHeight","clientHeight","startScroll","getScrollInfo","curTop","cursor","overlapX","right","node","firstChild","nextSibling","paddingRight","display","nativeBarWidth","addKeyMap","keyMap","avoidWrap","changeActive","screenAmount","closeOnUnfocus","closingOnBlur","onBlur","onFocus","onScroll","curScroll","newTop","point","target","srcElement","completeOnSingleClick","applicableHelpers","somethingSelected","result","supportsSelection","fetchHints","callback","async","then","resolveAutoHints","resolved","run","app","getHelper","fromList","anyword","showHint","getHints","newOpts","selections","anchor","completionActive","requestAnimationFrame","fn","cancelAnimationFrame","active","replaceRange","closeCharacters","disable","first","myTick","finishUpdate","completeSingle","removeChild","removeKeyMap","childNodes","offsetTop","floor","term","word","autocomplete","12","runMode","modespec","mode","getMode","defaults","ie","ie_lt9","tabSize","innerHTML","content","idx","size","lines","splitLines","StringStream","blankLine","eol","13","SearchCursor","doc","query","caseFold","atOccurrence","source","ignoreCase","matches","reverse","cutOff","newMatch","matchLen","origQuery","toLowerCase","orig","adjustPos","origTarget","last","ln","cut","pos1","len1","findNext","findPrevious","savePosAndFail","maxLine","lineCount","newText","origin","defineDocExtension","getSearchCursor","setSelections","14","root","factory","store","isLocalStorageNameSupported","localStorageName","win","err","storage","scriptTag","disabled","version","set","value","get","defaultVal","transact","transactionFn","getAll","forEach","serialize","JSON","stringify","deserialize","parse","setItem","getItem","removeItem","addBehavior","storageOwner","storageContainer","ActiveXObject","write","w","frames","withIEStorage","storeFunction","args","unshift","apply","forbiddenCharsRegex","ieKeyFix","setAttribute","save","getAttribute","removeAttribute","attributes","XMLDocument","attr","testKey","enabled","15","_args","_from","_id","_inCache","_installable","_location","_npmUser","email","_npmVersion","_phantomChildren","_requested","raw","rawSpec","scope","_requiredBy","_shrinkwrap","_spec","_where","author","bugs","url","dependencies","description","devDependencies","directories","dist","shasum","tarball","homepage","licenses","main","maintainers","optionalDependencies","readme","repository","16","console","log","svg","yasgui-utils","nestedExists","../package.json","./storage.js","./svg.js","17","times","day","month","year","exp","XMLSerializer","serializeToString","time","Date","getTime","removeAll","18","draw","parent","svgString","getElement","append","parser","DOMParser","dom","parseFromString","svgContainer","19","license","scripts","install","dev","build","patch","minor","major","gulp-bump","gulp-connect","gulp-embedlr","gulp-git","gulp-livereload","gulp-tag-version","watchify","web","bootstrap-sass","browserify","browserify-transform-tools","exorcist","gulp-autoprefixer","gulp-concat","gulp-cssimport","gulp-cssnano","gulp-filter","gulp-jsvalidate","gulp-minify-css","gulp-notify","gulp-rename","gulp-sass","gulp-sourcemaps","gulp-streamify","gulp-uglify","node-sass","require-dir","run-sequence","vinyl-buffer","vinyl-source-stream","vinyl-transform","gulp","optionalShim","../../lib/codemirror","20","utils","yutils","yasqe","completionNotifications","completers","tries","eventInfo","needPossibleAdjustment","notificationName","is","scrollBar","offset","outerWidth","notification","css","storeBulkCompletions","completer","storageId","getPersistencyId","persistent","initCompleter","completionInit","bulk","storeArrayAsBulk","suggestions","completionsFromStorage","persistencyIdentifier","Function","fromAutoShow","tryHintType","autoShow","hintConfig","wrappedHintCallback","getCompletionHintsObject","completerName","inArray","autocompleters","isValidCompletionPosition","callbacks","validPosition","success","invalidPosition","getSuggestionsFromToken","partialToken","stringToAutocomplete","autocompletionString","partialTokenLength","getSuggestionsAsHintObject","getCompleteToken","preProcessToken","wrappedCallback","hintList","suggestedString","postProcessToken","selectHint","completionToken","callbackName","init","notifications","getEl","show","autoshow","appendTo","hide","getTrie","../../lib/trie.js","../main.js","../utils.js","21","fetchFromLov","previousToken","getPreviousNonWsToken","preprocessResourceTokenForCompletion","postprocessResourceTokenForCompletion","./utils","./utils.js","22","tokenTypes","string-2","atom","appendPrefixIfNeeded","fetchFrom","prefixArray","prefix","completeString","sort","preprocessPrefixTokenForCompletion","collapsePrefixes","colonIndex","lastNonWsTokenString","currentPrefix","substring","queryPrefixes","getPrefixesFromQuery","addPrefixes","location","protocol","23","24","tokenPrefix","tokenPrefixUri","trim","reqProtocol","maxResults","q","page","results","updateUrl","increasePage","doRequests","uri","total_results","fail","jqXHR","textStatus","errorThrown","loader","addClass","../imgs.js","25","distinctVars","variable","nextEl","nextElClass","variables","26","sparql","quote","createCurlString","ajaxConfig","getAjaxConfig","host","pathname","cmds","requestMethod","header","headers","join","./sparql.js","27","extend","highlightSelectionMatches","showToken","tabMode","lineNumbers","lineWrapping","backdrop","combine","brace","collapsePrefixesOnLoad","gutters","fixedGutter","syntaxErrorCheck","Ctrl-Space","Cmd-Space","Ctrl-D","deleteLine","Ctrl-K","Cmd-D","Cmd-K","Ctrl-/","commentLines","Cmd-/","Ctrl-Alt-Down","copyLineDown","Ctrl-Alt-Up","copyLineUp","Cmd-Alt-Down","Cmd-Alt-Up","Shift-Ctrl-F","doAutoFormat","Shift-Cmd-F","Ctrl-]","indentMore","Cmd-]","Ctrl-[","indentLess","Cmd-[","Ctrl-S","storeQuery","Cmd-S","Ctrl-Enter","executeQuery","Cmd-Enter","F11","setOption","cursorHeight","createShareLink","createShortLink","consumeShareLink","closest","queryName","getQueryMode","showQueryButton","endpoint","acceptHeaderGraph","acceptHeaderSelect","acceptHeaderUpdate","namedGraphs","defaultGraphs","getQueryForAjax","beforeSend","error","handlers","./main.js","28","29","queryInvalid","download","share","warning","fullscreen","smallscreen","30","imgs","rootEl","class","extendConfig","extendCmInstance","postProcessCmElement","extendedConfig","Autocompleters","lastQueryDuration","getNextNonWsToken","lineNumber","charNumber","collapse","findFirstPrefixLine","animateSpeed","setBackdrop","click","insertAfter","callbackOrConfig","getUrlArguments","removePrefixes","getValueWithoutComments","cleanedQuery","getValue","stringVal","getQueryType","setCheckSyntaxErrors","isEnabled","checkSyntax","enableCompleter","addCompleterToSettings","disableCompleter","removeCompleterFromSettings","settings","splice","valueFromStorage","setValue","drawButtons","updateQueryButton","positionButtons","updateButtonsTransparency","prevQueryValid","matchText","removeClass","getUrlParams","addEventListener","urlParams","hash","href","search","buttons","elementsOverlap","deepcheck","queryValid","precise","warningEl","expectedEncoded","expected","html","marginTop","marginLeft","len","registerAutocompleter","constructor","getAsCurl","curl","svgShare","event","stopPropagation","popup","$input","$this","select","mouseup","unbind","errString","shortLink","positions","position","outerHeight","parseInt","toggleFullscreen","hasClass","xhr","abort","queryButtonIds","busy","valid","status","queryButton","queryStatus","classNames","c","fromTextArea","textAreaEl","insertBefore","linesAreCommented","setCursor","autoFormatRange","totalLines","totalChars","getTextArea","absStart","indexFromPos","absEnd","res","autoFormatLineBreaks","posFromIndex","indentLine","breakAfterArray","breakAfterCharacters","breakBeforeCharacters","getBreakType","stackTrace","valueOf","currentLine","formattedQuery","breakType","../lib/deparam.js","../lib/grammar/tokenizer.js","./autocompleters/autocompleterBase.js","./autocompleters/classes.js","./autocompleters/prefixes.js","./autocompleters/properties.js","./autocompleters/variables.js","./curl.js","./defaults.js","./imgs.js","./prefixFold.js","./prefixUtils.js","./tokenUtils.js","./tooltip","codemirror/addon/display/fullscreen.js","codemirror/addon/edit/matchbrackets.js","codemirror/addon/fold/brace-fold.js","codemirror/addon/fold/foldcode.js","codemirror/addon/fold/foldgutter.js","codemirror/addon/fold/xml-fold.js","codemirror/addon/hint/show-hint.js","codemirror/addon/runmode/runmode.js","codemirror/addon/search/searchcursor.js","31","findFirstPrefix","lookFor","tokenUtils","hasPreviousPrefix","getLastPrefixPos","prefixKeywordToken","prefixShortname","prefixUri","prefixStart","stopAt","stopAtNextLine","prefixEndChar","prefixEndLine","nextPrefixDeclaration","32","existingPrefixes","addPrefixAsString","pref","prefixString","lastPrefix","lastPrefixLine","numLines","firstToken","previousIndent","getIndentFromLine","escapeRegex","shouldContinue","getPrefixesFromLine","lineOffset","colOffset","uriString","33","Accept","getAcceptHeader","xhrFields","handlerDefined","handler","encodeURIComponent","isEmptyObject","queryStart","updateYasqe","completeCallbacks","ajax","queryMode","getString","argName","merge","acceptHeader","qType","34","prevToken","35","tooltip","hover","repositionTooltip","36","keyExists","objectToTest","exists","persistentIdCreator","persistencyId","getPositions","elem","comparePositions","p1","p2","r1","r2","pos2"],"mappings":"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8CAAA,gDACAG,OACAC,OACAC,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QACA+B,2BACA5C,KAAA,yBAAA,2BACAG,OACAC,OACAS,OACAL,SACAH,OACAC,YACAC,SACAE,WACAC,UACAC,QACAC,WACAiC,8BACAC,OAAA,4BAAA,8BACA1B,QACAC,QACAC,OACAJ,OACAC,OACAI,WACAC,QACAC,SACAC,oBACAC,QACAC,YACAC,YACAC,mBACAC,mBACAC,wBACAC,wBACAC,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAvC,OACAE,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QACAkC,8CACA1C,KAAA,4CAAA,8CACAC,UAAA,4CAAA,8CACAC,OAAA,4CAAA,8CACAC,OAAA,4CAAA,8CACAC,SAAA,4CAAA,8CACAC,QAAA,4CAAA,8CACAC,MAAA,4CAAA,8CACAC,QAAA,4CAAA,8CACAC,QACAmC,0CACAxC,OAAA,wCAAA,0CACAK,QACAoC,6BACAhC,KAAA,2BAAA,6BACApB,QACAqD,qBACAjC,KAAA,mBAAA,qBACApB,OACAqB,OACAC,OACAC,QACAC,QACAC,OACAC,WACAC,QACAC,SACAC,oBACAC,QACAC,YACAC,YACAC,mBACAC,mBACAC,wBACAC,wBACAC,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,oBACAS,kCACApD,MAAA,gCAAA,kCACAH,MACAC,OACAC,OACAE,QACAoD,mBACAC,OAAA,iBAAA,mBACA9B,SAAA,iBAAA,mBACAC,MAAA,iBAAA,mBACAC,OAAA,iBAAA,mBACAG,UAAA,iBAAA,mBACAC,UAAA,iBAAA,mBACAC,iBAAA,iBAAA,mBACAC,iBAAA,iBAAA,mBACAC,sBAAA,iBAAA,mBACAC,sBAAA,iBAAA,mBACAC,SAAA,iBAAA,mBACAC,SAAA,iBAAA,mBACAC,QAAA,iBAAA,mBACAC,kBAAA,iBAAA,mBACAC,kBAAA,iBAAA,mBACAC,iBAAA,iBAAA,mBACAC,kBA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BACAhG,SAAA,iBAAA,mBACAK,UAAA,iBAAA,mBACAC,UAAA,iBAAA,oBACAwI,gBACAjJ,MAAA,cAAA,gBACAC,MAAA,cAAA,gBACAE,SAAA,cAAA;AACAK,UAAA,cAAA,gBACAC,UAAA,cAAA,iBACAyI,MACAnK,KAAA,KACAiB,QACAC,QACAC,OACAJ,OACAC,OACAI,WACAC,QACAC,SACAC,oBACAC,QACAC,YACAC,YACAC,mBACAC,mBACAC,wBACAC,wBACAC,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAlC,SACAH,OACAC,YACAC,SACAE,WACAC,UACAC,QACAC,UACAC,QACA0J,aACAC,UAAA,YACAC,OACAtC,OACAC,OACAhH,QACAC,QACAH,OACAgD,OACAC,QACAC,eACAC,YACAC,SACAC,OACAC,OACAC,SACAC,QACAC,OACAC,QACAC,SACAC,SACAC,UACAC,UACAC,SACAC,SACAC,kBACAC,YACAC,aACAC,WACAC,aACAC,YACAC,QACAC,SACAC,OACAC,SACAC,WACAC,WACAC,YACAC,MACAC,OACAC,QACAC,WACAC,OACAC,QACAC,UACAC,UACAC,UACAC,YACAC,MACAC,WACAC,SACAC,YACAC,SACAC,SACAC,WACAC,aACAC,aACA1F,QACAC,SACAiJ,SACAC,OACAC,OACAC,OACAC,OACAC,UACAC,gBACA7D,UACAC,WACAC,SACAC,UACAC,OACAhG,WACAO,mBACAC,mBACAC,wBACAC,wBACAC,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAd,YACAC,YACA8F,QACAsD,UACAzK,OAAA,SACAe,WACAK,YACAC,aACAqJ,WACAC,QAAA,UACA/J,QACAC,QACAE,WACAK,YACAC,aACAuJ,aACAD,QAAA,UACA5J,WACAK,YACAC,aACAwJ,aACAF,QAAA,UACA3K,SACA8K,WACAC,SACAC,QACAC,aACAN,QAAA,UACA3K,UACAkL,aACAP,QAAA,UACAG,WACA9K,SACAe,WACAK,YACAC,aACA8J,UACAnI,OAAA,SACAnD,QACAuL,mBACA9L,KAAA,kBACAD,QACAgM,0BACA1L,KAAA,yBACAU,QACAiL,sBACA3L,KAAA,qBACAE,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QACAkL,yBACA5L,KAAA,wBACAU,OACAL,UACAwL,2BACAhM,KAAA,0BACAH,QACAoM,eACAjM,KAAA,cACAtC,MACAwO,aACAtM,IAAA,YACAC,QACAsM,oBACAC,MAAA,mBACApM,OACAtC,MACA2O,2CACAjL,MAAA,0CACAC,MAAA,0CACAiL,KAAA,0CACArP,GAAA,0CACAwN,KAAA,0CACAvJ,KAAA,0CACAK,SAAA,0CACAK,UAAA,0CACAC,UAAA,0CACA7B,OACAG,OACAC,OACAC,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QACA0L,qDACAtP,GAAA,oDACAqP,KAAA,oDACA/K,SAAA,oDACAK,UAAA,oDACAC,UAAA,oDACAhC,QACA2M,0BACA5D,QAAA,yBACAC,QAAA,yBACAE,MAAA,yBACAC,OAAA,yBACAC,MAAA,yBACAC,KAAA,yBACAC,MAAA,yBACAC,MAAA,yBACAC,QAAA,yBACAC,MAAA,yBACA5L,MACA+O,sBACAxP,GAAA,qBACAmE,MAAA,qBACAC,MAAA,qBACAE,SAAA,qBACAK,UAAA,qBACAC,UAAA,qBACA7B,OACAG,OACAC,OACAS,OACAL,SACAH,OACAC,YACAC,SACAE,WACAC,UACAC,QACAC,WACA8L,YACApL,KAAA,WACAJ,KAAA,WACAtB,MACAC,OACAC,OACAC,QACAJ,QACAiI,OACAC,QACAC,OACAC,OACAC,QACAC,QACAC,MACAX,OACAY,OACAC,OACA/F,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAiF,OACA3G,OACAhB,QACA2M,qBACAvL,MAAA,oBACAC,MAAA,oBACAC,KAAA,oBACAJ,KAAA,oBACAC,KAAA,oBACAI,SAAA,oBACAC,MAAA,oBACAC,OAAA,oBACAC,kBAAA,oBACAC,MAAA,oBACAC,UAAA,oBACAC,UAAA,oBACAC,iBAAA,oBACAC,iBAAA,oBACAC,sBAAA,oBACAC,sBAAA,oBACAC,SAAA,oBACAC,SAAA,oBACAC,QAAA,oBACAC,kBAAA,oBACAC,kBAAA,oBACAC,iBAAA,oBACAC,kBAAA,oBACAC,kBAAA,oBACAC,iBAAA,oBACA7B,QACA+L,gBACAhJ,OAAA,eACAhD,UACAiD,SACAC,UACAJ,SACAC,UACAjG,KACAmD,QACAgM,iBACAlJ,QAAA,gBACA/C,UACAiD,SACAC,UACAJ,SACAhG,KACAmD,QACAiM,iBACAlE,QAAA,gBACApF,SACAoG,UACAmD,gBACAlJ,OAAA,eACAjD,UACAlD,KACAmD,QACAmM,uBACAnJ,OAAA,sBACAC,QAAA,sBACAlD,UACAlD,KACAmD,QACAoM,iBACAnJ,QAAA,gBACAlD,UACAlD,KACAmD,QACAqM,2BACA1C,UAAA,0BACA2C,SAAA,0BACAxF,OACAzG,OACAE,QACAC,SACA+L,8BACAC,SAAA,6BACAC,MAAA,6BACAjK,SACA9B,WACAC,QACAC,SACAG,YACAC,YACAC,mBACAC,mBACAC,wBACAC,wBACAC,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAzF,KACAmE,QACAC,QACAiL,OACA7B,OACAvJ,OACAf,OACAH,OACAF,OACAF,MACAC,OACAE,QACAJ,QACAiI,OACAC,QACAC,OACAC,OACAC,QACAC,QACAC,MACAX,OACAY,OACAC,OACAT,OACA3G,OACAH,OACAM,OACAG,OACAI,oBACAC,QACAvB,OACAI,SACAH,OACAC,YACAC,SACAE,WACAC,UACAC,QACAC,WACA2M,kDACA5F,KAAA,iDACA3G,KAAA,iDACAmH,OACAC,OACA/F,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACA9C,MACAC,OACAC,OACAC,QACAJ,QACAiI,OACAC,QACAC,OACAC,OACAC,QACAC,QACAC,MACAX,OACAvH,QACAwN,6LACA5F,KAAA,4LACAC,MAAA,4LACAC,KAAA,4LACAC,KAAA,4LACAC,MAAA,4LACAC,MAAA,4LACAC,IAAA,4LACAX,KAAA,4LACA3H,MACAC,OACAC,OACAC,QACAJ,QACAK,QACAyN,gBACA/J,OAAA,eACA9C,UACAiD,SACAC,UACApG,KACAmD,QACA6M,YACA/F,KAAA,WACAgG,KAAA,WACAxF,KAAA,WACA9H,KAAA,WACAY,OACAD,OACAnB,OACAqB,OACAC,OACAC,QACAC,QACAC,OACAC,WACAC,QACAC,SACAC,oBACAC,QACAC,YACAC,YACAC,mBACAC,mBACAC,wBACAC,wBACAC,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,oBACAkL,iBACAxM,MAAA,gBACAC,MAAA,gBACAC,KAAA,gBACAJ,KAAA,gBACAC,KAAA,gBACAI,SAAA,gBACAC,MAAA,gBACAC,OAAA,gBACAC,kBAAA,gBACAC,MAAA,gBACAC,UAAA,gBACAC,UAAA,gBACAC,iBAAA,gBACAC,iBAAA,gBACAC,sBAAA,gBACAC,sBAAA,gBACAC,SAAA,gBACAC,SAAA,gBACAC,QAAA,gBACAC,kBAAA,gBACAC,kBAAA,gBACAC,iBAAA,gBACAC,kBAAA,gBACAC,kBAAA,gBACAC,iBAAA,gBACArC,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QACAgN,oBACAzM,MAAA,mBACAC,MAAA,mBACAC,KAAA,mBACAJ,KAAA,mBACAC,KAAA,mBACAI,SAAA,mBACAC,MAAA,mBACAC,OAAA,mBACAC,kBAAA,mBACAC,MAAA,mBACAC,UAAA,mBACAC,UAAA,mBACAC,iBAAA,mBACAC,iBAAA,mBACAC,sBAAA,mBACAC,sBAAA,mBACAC,SAAA,mBACAC,SAAA,mBACAC,QAAA,mBACAC,kBAAA,mBACAC,kBAAA,mBACAC,iBAAA,mBACAC,kBAAA,mBACAC,kBAAA,mBACAC,iBAAA,mBACA7B,OACAL,UACAsN,gBACAtK,OAAA,eACAnD,KAAA,eACAqD,SACAC,UACAC,SACAC,SACAC,UACAlD,UACAlD,MACAqQ,0BACA7M,KAAA,IAAA,kBAAA,MACA8M,eACA9M,KAAA,IAAA,OAAA,MACA+M,qBACA/M,KAAA,IAAA,aAAA,MACAgN,4BACAhN,KAAA,IAAA,aAAA,KAAA,MAAA,MACAiN,0BACAtG,MAAA,KAAA,sBACAuG,qBACAzO,MAAA,KAAA,iBACA0O,uBACA1G,KAAA,IAAA,oBACA2G,gEACA9K,OAAA,iBAAA,QAAA,IAAA,mBAAA,IAAA,oBACAD,MAAA,iBAAA,QAAA,IAAA,mBAAA,IAAA,qBACAgL,gCACApG,KAAA,IAAA,6BACAqG,kBACA1O,KAAA,IAAA,eACA2O,iBACA3O,KAAA,IAAA,UAAA,MACA4O,kBACA5O,KAAA,IAAA,eACA6O,cACA7O,KAAA,IAAA,WACA8O,2BACA9O,KAAA,IAAA,wBACA+O,gCACAzG,KAAA,IAAA,6BACA0G,yBACA3O,KAAA,IAAA,sBACA4O,qBACA5O,KAAA,IAAA,kBACA6O,wBACA7O,KAAA,IAAA,qBACA8O,wBACAjO,KAAA,IAAA,qBACAkO,uBACAlO,KAAA,IAAA,oBACAmO,+CACAnP,KAAA,IAAA,4CACAoP,0BACApP,KAAA,IAAA,uBACAqP,0BACArP,KAAA,IAAA,YAAA,IAAA,WACAsP,cACAtP,KAAA,IAAA,WACAuP,yBACAzH,KAAA,IAAA,sBACA0H,0BACAxH,MAAA,KAAA,sBACAyH,yBACA7H,KAAA,IAAA,sBACA8H,yBACA3H,KAAA,IAAA,sBACA4H,0BACA1H,MAAA,KAAA,sBACA2H,YACAhQ,IAAA,KAAA,QACAiQ,uBACA3H,IAAA,KAAA,mBACA4H,mBACA1D,MAAA,OAAA,aACA2D,kBACAxE,OAAA,QAAA,WACAyE,2BACAzI,KAAA,MAAA,KAAA,mBACA0I,6BACAnN,OAAA,QAAA,sBACAoN,eACA5C,MAAA,KAAA,WACA6C,mEACA9P,KAAA,oBAAA,iBAAA,cAAA,qBACA+P,gCACAvH,QAAA,eAAA,kBACAwH,6CACAhQ,KAAA,yBAAA,KAAA,iBACAC,UAAA,yBAAA,KAAA,iBACAC,OAAA,yBAAA,KAAA,iBACAC,OAAA,yBAAA,KAAA,iBACAC,SAAA,yBAAA,KAAA,iBACAC,QAAA,yBAAA,KAAA,iBACAC,MAAA,yBAAA,KAAA,iBACAC,QAAA,yBAAA,KAAA,kBACA0P,6CACApO,SAAA,UAAA,oCACAqO,eACArO,SAAA,UAAA,MACAsO,wGACAnO,kBAAA,sDAAA,kDACAC,kBAAA,sDAAA,kDACAC,iBAAA,sDAAA,kDACAC,kBAAA,sDAAA,kDACAC,kBAAA,sDAAA,kDACAC,iBAAA,sDAAA,mDACA+N,0CACArP,MAAA,4BAAA,cACAC,MAAA,4BAAA,cACAiL,KAAA,4BAAA,cACArP,GAAA,4BAAA,cACAwN,KAAA,4BAAA,cACAvJ,KAAA,4BAAA,cACAK,SAAA,4BAAA,cACAK,UAAA,4BAAA,cACAC,UAAA,4BAAA,eACA6O,oDACAzT,GAAA,uBAAA,6BACAqP,KAAA,uBAAA,6BACA/K,SAAA,uBAAA,6BACAK,UAAA,uBAAA,6BACAC,UAAA,uBAAA,8BACA8O,yCACAnQ,OAAA,kBAAA,KAAA,qBACAoQ,yBACAhI,QAAA,UAAA,eACAC,QAAA,UAAA,eACAE,MAAA,UAAA,eACAC,OAAA,UAAA,eACAC,MAAA,UAAA,eACAC,KAAA,UAAA,eACAC,MAAA,UAAA,eACAC,MAAA,UAAA,eACAC,QAAA,UAAA,eACAC,MAAA,UAAA,gBACAuH,qBACA5T,GAAA,OAAA,cACAmE,MAAA,OAAA,cACAC,MAAA,OAAA,cACAE,SAAA,OAAA,cACAK,UAAA,OAAA,cACAC,UAAA,OAAA,eACAiP,4BACA7P,KAAA,IAAA,yBACA8P,oBACA9P,KAAA,IAAA,iBACA+P,iCACAjR,MAAA,KAAA,6BACAkR,KACA/H,KAAA,MAAA,YAAA,iBAAA,KAAA,mBACAgI,oBACAzG,KAAA,2BAAA,yKACAtC,KAAA,2BAAA,yKACAC,KAAA,2BAAA,yKACAhH,MAAA,2BAAA,yKACAC,MAAA,2BAAA,yKACAH,KAAA,2BAAA,yKACAgD,KAAA,2BAAA,yKACAC,MAAA,2BAAA,yKACAC,aAAA,2BAAA,yKACAC,UAAA,2BAAA,yKACAC,OAAA,2BAAA,yKACAC,KAAA,2BAAA,yKACAC,KAAA,2BAAA,yKACAC,OAAA,2BAAA,yKACAC,MAAA,2BAAA,yKACAC,KAAA,2BAAA,yKACAC,MAAA,2BAAA,yKACAC,OAAA,2BAAA,yKACAC,OAAA,2BAAA,yKACAC,QAAA,2BAAA,yKACAC,QAAA,2BAAA,yKACAC,OAAA,2BAAA,yKACAC,OAAA,2BAAA,yKACAC,gBAAA,2BAAA,yKACAC,UAAA,2BAAA,yKACAC,WAAA,2BAAA,yKACAC,SAAA,2BAAA,yKACAC,WAAA,2BAAA,yKACAC,UAAA,2BAAA,yKACAC,MAAA,2BAAA,yKACAC,OAAA,2BAAA,yKACAC,KAAA,2BAAA,yKACAC,OAAA,2BAAA,yKACAC,SAAA,2BAAA,yKACAC,SAAA,2BAAA,yKACAC,UAAA,2BAAA,yKACAC,IAAA,2BAAA,yKACAC,KAAA,2BAAA,yKACAC,MAAA,2BAAA,yKACAC,SAAA,2BAAA,yKACAC,KAAA,2BAAA,yKACAC,MAAA,2BAAA,yKACAC,QAAA,2BAAA,yKACAC,QAAA,2BAAA,yKACAC,QAAA,2BAAA,yKACAC,UAAA,2BAAA,yKACAC,IAAA,2BAAA,yKACAC,SAAA,2BAAA,yKACAC,OAAA,2BAAA,yKACAC,UAAA,2BAAA,yKACAC,OAAA,2BAAA,yKACAC,OAAA,2BAAA,yKACAC,SAAA,2BAAA,yKACAC,WAAA,2BAAA,yKACAC,WAAA,2BAAA,yKACA1F,MAAA,2BAAA,yKACAC,OAAA,2BAAA,yKACAiJ,OAAA,2BAAA,yKACAC,KAAA,2BAAA,yKACAC,KAAA,2BAAA,yKACAC,KAAA,2BAAA,yKACAC,KAAA,2BAAA,yKACAC,QAAA,2BAAA,yKACAC,cAAA,2BAAA,yKACA7D,QAAA,2BAAA,yKACAC,SAAA,2BAAA,yKACAC,OAAA,2BAAA,yKACAC,QAAA,2BAAA,yKACAC,KAAA,2BAAA,yKACAhG,SAAA,2BAAA,yKACAO,iBAAA,2BAAA,yKACAC,iBAAA,2BAAA,yKACAC,sBAAA,2BAAA,yKACAC,sBAAA,2BAAA,yKACAC,SAAA,2BAAA,yKACAC,SAAA,2BAAA,yKACAC,QAAA,2BAAA;AACAC,kBAAA,2BAAA,yKACAC,kBAAA,2BAAA,yKACAC,iBAAA,2BAAA,yKACAC,kBAAA,2BAAA,yKACAC,kBAAA,2BAAA,yKACAC,iBAAA,2BAAA,yKACAd,UAAA,2BAAA,yKACAC,UAAA,2BAAA,0KACAsP,WACAzG,OAAA,QAAA,IAAA,YAAA,qBAAA,KACAC,KAAA,MAAA,IAAA,YAAA,aAAA,KACAC,KAAA,MAAA,IAAA,YAAA,aAAA,KACAC,KAAA,MAAA,IAAA,YAAA,aAAA,KACAC,KAAA,MAAA,IAAA,YAAA,aAAA,KACAC,QAAA,SAAA,IAAA,YAAA,aAAA,KACAC,cAAA,eAAA,IAAA,YAAA,aAAA,0BAAA,MACAoG,aACAvQ,QACAwQ,WACAxQ,QACAyQ,SACAhQ,KAAA,OACAJ,KAAA,IAAA,YAAA,aAAA,kBAAA,MACAqQ,UACA5I,KAAA,MAAA,iBAAA,cAAA,qBACA6I,UACAjJ,MAAA,OAAA,YACAkJ,MACA9Q,MAAA,OAAA,IAAA,aAAA,KAAA,MAAA,MACA+Q,WACAhQ,kBAAA,oBACAC,MAAA,SACAgQ,uBACAxQ,KAAA,IAAA,uBAAA,MACAyQ,2BACAzQ,KAAA,IAAA,2BAAA,MACA0Q,gBACArQ,MAAA,QACAC,OAAA,UACAqQ,sBACA5Q,KAAA,IAAA,aAAA,MACA6Q,aACA7N,KAAA,MAAA,IAAA,aAAA,KACAC,MAAA,OAAA,IAAA,aAAA,KACAC,aAAA,cAAA,IAAA,aAAA,IAAA,aAAA,KACAC,UAAA,WAAA,IAAA,aAAA,KACAC,OAAA,QAAA,IAAA,MAAA,KACAC,KAAA,MAAA,IAAA,aAAA,KACAC,KAAA,MAAA,IAAA,aAAA,KACAC,OAAA,QAAA,+BACAC,MAAA,OAAA,OACAC,KAAA,MAAA,IAAA,aAAA,KACAC,MAAA,OAAA,IAAA,aAAA,KACAC,OAAA,QAAA,IAAA,aAAA,KACAC,OAAA,QAAA,IAAA,aAAA,KACAC,QAAA,SAAA,kBACAoC,QAAA,uBACAnC,QAAA,SAAA,IAAA,aAAA,KACAoC,SAAA,wBACAnC,OAAA,QAAA,IAAA,aAAA,KACAC,OAAA,QAAA,IAAA,aAAA,KACAC,gBAAA,iBAAA,IAAA,aAAA,KACAC,UAAA,WAAA,IAAA,aAAA,IAAA,aAAA,KACAC,WAAA,YAAA,IAAA,aAAA,IAAA,aAAA,KACAC,SAAA,UAAA,IAAA,aAAA,IAAA,aAAA,KACAC,WAAA,YAAA,IAAA,aAAA,IAAA,aAAA,KACAC,UAAA,WAAA,IAAA,aAAA,IAAA,aAAA,KACAC,MAAA,OAAA,IAAA,aAAA,KACAC,OAAA,QAAA,IAAA,aAAA,KACAC,KAAA,MAAA,IAAA,aAAA,KACAC,OAAA,QAAA,IAAA,aAAA,KACAC,SAAA,UAAA,IAAA,aAAA,KACAC,SAAA,UAAA,IAAA,aAAA,KACAC,UAAA,WAAA,IAAA,aAAA,KACAC,IAAA,KAAA,IAAA,aAAA,KACAC,KAAA,MAAA,OACAC,MAAA,OAAA,OACAC,SAAA,UAAA,OACAC,KAAA,MAAA,IAAA,aAAA,KACAC,MAAA,OAAA,IAAA,aAAA,KACAC,QAAA,SAAA,IAAA,aAAA,KACAC,QAAA,SAAA,IAAA,aAAA,KACAC,QAAA,SAAA,IAAA,aAAA,KACAC,UAAA,WAAA,kBACAC,IAAA,KAAA,IAAA,aAAA,IAAA,aAAA,IAAA,aAAA,KACAC,SAAA,UAAA,IAAA,aAAA,IAAA,aAAA,KACAC,OAAA,QAAA,IAAA,aAAA,IAAA,aAAA,KACAC,UAAA,WAAA,IAAA,aAAA,IAAA,aAAA,KACAC,OAAA,QAAA,IAAA,aAAA,KACAC,OAAA,QAAA,IAAA,aAAA,KACAC,SAAA,UAAA,IAAA,aAAA,KACAC,WAAA,YAAA,IAAA,aAAA,KACAC,WAAA,YAAA,IAAA,aAAA,KACAG,OAAA,mBACAC,QAAA,cACAC,KAAA,kBACAyK,OACAhJ,OAAA,QAAA,YAAA,gBACAiJ,YACA/Q,KAAA,IAAA,aAAA,MACAgR,gBACAhR,KAAA,IAAA,iBAAA,MACAiR,0BACA1H,KAAA,eAAA,sBACAtC,KAAA,eAAA,sBACAC,KAAA,eAAA,sBACAhH,MAAA,eAAA,sBACAC,MAAA,eAAA,sBACAH,KAAA,eAAA,sBACAgD,KAAA,eAAA,sBACAC,MAAA,eAAA,sBACAC,aAAA,eAAA,sBACAC,UAAA,eAAA,sBACAC,OAAA,eAAA,sBACAC,KAAA,eAAA,sBACAC,KAAA,eAAA,sBACAC,OAAA,eAAA,sBACAC,MAAA,eAAA,sBACAC,KAAA,eAAA,sBACAC,MAAA,eAAA,sBACAC,OAAA,eAAA,sBACAC,OAAA,eAAA,sBACAC,QAAA,eAAA,sBACAC,QAAA,eAAA,sBACAC,OAAA,eAAA,sBACAC,OAAA,eAAA,sBACAC,gBAAA,eAAA,sBACAC,UAAA,eAAA,sBACAC,WAAA,eAAA,sBACAC,SAAA,eAAA,sBACAC,WAAA,eAAA,sBACAC,UAAA,eAAA,sBACAC,MAAA,eAAA,sBACAC,OAAA,eAAA,sBACAC,KAAA,eAAA,sBACAC,OAAA,eAAA,sBACAC,SAAA,eAAA,sBACAC,SAAA,eAAA,sBACAC,UAAA,eAAA,sBACAC,IAAA,eAAA,sBACAC,KAAA,eAAA,sBACAC,MAAA,eAAA,sBACAC,SAAA,eAAA,sBACAC,KAAA,eAAA,sBACAC,MAAA,eAAA,sBACAC,QAAA,eAAA,sBACAC,QAAA,eAAA,sBACAC,QAAA,eAAA,sBACAC,UAAA,eAAA,sBACAC,IAAA,eAAA,sBACAC,SAAA,eAAA,sBACAC,OAAA,eAAA,sBACAC,UAAA,eAAA,sBACAC,OAAA,eAAA,sBACAC,OAAA,eAAA,sBACAC,SAAA,eAAA,sBACAC,WAAA,eAAA,sBACAC,WAAA,eAAA,sBACA1F,MAAA,eAAA,sBACAC,OAAA,eAAA,sBACAiJ,OAAA,eAAA,sBACAC,KAAA,eAAA,sBACAC,KAAA,eAAA,sBACAC,KAAA,eAAA,sBACAC,KAAA,eAAA,sBACAC,QAAA,eAAA,sBACAC,cAAA,eAAA,sBACA7D,QAAA,eAAA,sBACAC,SAAA,eAAA,sBACAC,OAAA,eAAA,sBACAC,QAAA,eAAA,sBACAC,KAAA,eAAA,sBACAhG,SAAA,eAAA,sBACAO,iBAAA,eAAA,sBACAC,iBAAA,eAAA,sBACAC,sBAAA,eAAA,sBACAC,sBAAA,eAAA,sBACAC,SAAA,eAAA,sBACAC,SAAA,eAAA,sBACAC,QAAA,eAAA,sBACAC,kBAAA,eAAA,sBACAC,kBAAA,eAAA,sBACAC,iBAAA,eAAA,sBACAC,kBAAA,eAAA,sBACAC,kBAAA,eAAA,sBACAC,iBAAA,eAAA,sBACAd,UAAA,eAAA,sBACAC,UAAA,eAAA,uBACAuQ,yBACA3H,KAAA,2BAAA,kCACAtC,KAAA,2BAAA,kCACAC,KAAA,2BAAA,kCACAhH,MAAA,2BAAA,kCACAC,MAAA,2BAAA,kCACAH,KAAA,2BAAA,kCACAgD,KAAA,2BAAA,kCACAC,MAAA,2BAAA,kCACAC,aAAA,2BAAA,kCACAC,UAAA,2BAAA,kCACAC,OAAA,2BAAA,kCACAC,KAAA,2BAAA,kCACAC,KAAA,2BAAA,kCACAC,OAAA,2BAAA,kCACAC,MAAA,2BAAA,kCACAC,KAAA,2BAAA,kCACAC,MAAA,2BAAA,kCACAC,OAAA,2BAAA,kCACAC,OAAA,2BAAA,kCACAC,QAAA,2BAAA,kCACAC,QAAA,2BAAA,kCACAC,OAAA,2BAAA,kCACAC,OAAA,2BAAA,kCACAC,gBAAA,2BAAA,kCACAC,UAAA,2BAAA,kCACAC,WAAA,2BAAA,kCACAC,SAAA,2BAAA,kCACAC,WAAA,2BAAA,kCACAC,UAAA,2BAAA,kCACAC,MAAA,2BAAA,kCACAC,OAAA,2BAAA,kCACAC,KAAA,2BAAA,kCACAC,OAAA,2BAAA,kCACAC,SAAA,2BAAA,kCACAC,SAAA,2BAAA,kCACAC,UAAA,2BAAA,kCACAC,IAAA,2BAAA,kCACAC,KAAA,2BAAA,kCACAC,MAAA,2BAAA,kCACAC,SAAA,2BAAA,kCACAC,KAAA,2BAAA,kCACAC,MAAA,2BAAA,kCACAC,QAAA,2BAAA,kCACAC,QAAA,2BAAA,kCACAC,QAAA,2BAAA,kCACAC,UAAA,2BAAA,kCACAC,IAAA,2BAAA,kCACAC,SAAA,2BAAA,kCACAC,OAAA,2BAAA,kCACAC,UAAA,2BAAA,kCACAC,OAAA,2BAAA,kCACAC,OAAA,2BAAA,kCACAC,SAAA,2BAAA,kCACAC,WAAA,2BAAA,kCACAC,WAAA,2BAAA,kCACA1F,MAAA,2BAAA,kCACAC,OAAA,2BAAA,kCACAiJ,OAAA,2BAAA,kCACAC,KAAA,2BAAA,kCACAC,KAAA,2BAAA,kCACAC,KAAA,2BAAA,kCACAC,KAAA,2BAAA,kCACAC,QAAA,2BAAA,kCACAC,cAAA,2BAAA,kCACA7D,QAAA,2BAAA,kCACAC,SAAA,2BAAA,kCACAC,OAAA,2BAAA,kCACAC,QAAA,2BAAA,kCACAC,KAAA,2BAAA,kCACAhG,SAAA,2BAAA,kCACAO,iBAAA,2BAAA,kCACAC,iBAAA,2BAAA,kCACAC,sBAAA,2BAAA,kCACAC,sBAAA,2BAAA,kCACAC,SAAA,2BAAA,kCACAC,SAAA,2BAAA,kCACAC,QAAA,2BAAA,kCACAC,kBAAA,2BAAA,kCACAC,kBAAA,2BAAA,kCACAC,iBAAA,2BAAA,kCACAC,kBAAA,2BAAA,kCACAC,kBAAA,2BAAA,kCACAC,iBAAA,2BAAA,kCACAd,UAAA,2BAAA,kCACAC,UAAA,2BAAA,mCACAwQ,YACAnR,KAAA,wBACAgD,KAAA,eACAC,MAAA,eACAC,aAAA,eACAC,UAAA,eACAC,OAAA,eACAC,KAAA,eACAC,KAAA,eACAC,OAAA,eACAC,MAAA,eACAC,KAAA,eACAC,MAAA,eACAC,OAAA,eACAC,OAAA,eACAC,QAAA,eACAC,QAAA,eACAC,OAAA,eACAC,OAAA,eACAC,gBAAA,eACAC,UAAA,eACAC,WAAA,eACAC,SAAA,eACAC,WAAA,eACAC,UAAA,eACAC,MAAA,eACAC,OAAA,eACAC,KAAA,eACAC,OAAA,eACAC,SAAA,eACAC,SAAA,eACAC,UAAA,eACAC,IAAA,eACAC,KAAA,eACAC,MAAA,eACAC,SAAA,eACAC,KAAA,eACAC,MAAA,eACAC,QAAA,eACAC,QAAA,eACAC,QAAA,eACAC,UAAA,eACAC,IAAA,eACAC,SAAA,eACAC,OAAA,eACAC,UAAA,eACAC,OAAA,eACAC,OAAA,eACAC,SAAA,eACAC,WAAA,eACAC,WAAA,eACAC,QAAA,eACAC,SAAA,eACAC,OAAA,eACAC,QAAA,eACAC,KAAA,eACAhG,SAAA,gBACAK,UAAA,gBACAC,UAAA,iBACAyQ,gBACA7J,WAAA,YAAA,uIACA8J,mBACAlS,KAAA,IAAA,oBAAA,MACAmS,kBACApR,MAAA,qBAAA,0BACAC,MAAA,qBAAA,0BACAC,KAAA,qBAAA,0BACAJ,KAAA,qBAAA,0BACAC,KAAA,qBAAA,0BACAI,SAAA,qBAAA,0BACAC,MAAA,qBAAA,0BACAC,OAAA,qBAAA,0BACAC,kBAAA,qBAAA,0BACAC,MAAA,qBAAA,0BACAC,UAAA,qBAAA,0BACAC,UAAA,qBAAA,0BACAC,iBAAA,qBAAA,0BACAC,iBAAA,qBAAA,0BACAC,sBAAA,qBAAA,0BACAC,sBAAA,qBAAA,0BACAC,SAAA,qBAAA,0BACAC,SAAA,qBAAA,0BACAC,QAAA,qBAAA,0BACAC,kBAAA,qBAAA,0BACAC,kBAAA,qBAAA,0BACAC,iBAAA,qBAAA,0BACAC,kBAAA,qBAAA,0BACAC,kBAAA,qBAAA,0BACAC,iBAAA,qBAAA,2BACA+P,MACArJ,MAAA,OAAA,YAAA,iBAAA,KAAA,mBACAsJ,QACArJ,QAAA,SAAA,YAAA,aACAsJ,WACArR,KAAA,yCACAJ,KAAA,yCACAE,MAAA,yCACAC,MAAA,0CACAuR,gBACArR,SAAA,UACAK,UAAA,UACAC,UAAA,UACAC,iBAAA,cACAC,iBAAA,cACAC,sBAAA,cACAC,sBAAA,cACAC,SAAA,kBACAC,SAAA,kBACAC,QAAA,kBACAC,kBAAA,kBACAC,kBAAA,kBACAC,iBAAA,kBACAC,kBAAA,kBACAC,kBAAA,kBACAC,iBAAA,kBACAlB,MAAA,kBACAC,OAAA,kBACA4B,OAAA,UACAwP,eACAtP,MAAA,OAAA,8CACAuP,oBACAvR,SAAA,kBACAK,UAAA,kBACAC,UAAA,mBACAkR,SACAC,MAAA,OAAA,oBACAxP,OAAA,QAAA,uBACAnD,KAAA,sBAAA,gBAAA,eAAA,QAAA,sBACA4S,cACApK,QAAA,SAAA,gBACAqK,uBACA3P,MAAA,OAAA,8CACA4P,eACAzK,UAAA,WAAA,uBAAA,yBAAA,eAAA,qBACA0K,gBACAvS,OACAL,SACAY,QACAC,QACAC,OACAJ,OACAC,OACAI,WACAC,QACAC,SACAC,oBACAC,QACAC,YACAC,YACAC,mBACAC,mBACAC,wBACAC,wBACAC,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,oBACA2Q,cACAxS,OACAL,SACAY,QACAC,QACAC,OACAJ,OACAC,OACAI,WACAC,QACAC,SACAC,oBACAC,QACAC,YACAC,YACAC,mBACAC,mBACAC,wBACAC,wBACAC,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,oBACA4Q,MACArK,MAAA,OAAA,YAAA,gBACAsK,YACAjM,QAAA,SAAA,sBACAkM,YACA/I,KAAA,2BACAtC,KAAA,2BACAC,KAAA,2BACAhH,MAAA,2BACAC,MAAA,2BACAH,KAAA,2BACAgD,KAAA,2BACAC,MAAA,2BACAC,aAAA,2BACAC,UAAA,2BACAC,OAAA,2BACAC,KAAA,2BACAC,KAAA,2BACAC,OAAA,2BACAC,MAAA,2BACAC,KAAA,2BACAC,MAAA,2BACAC,OAAA,2BACAC,OAAA,2BACAC,QAAA,2BACAC,QAAA,2BACAC,OAAA,2BACAC,OAAA,2BACAC,gBAAA,2BACAC,UAAA,2BACAC,WAAA,2BACAC,SAAA,2BACAC,WAAA,2BACAC,UAAA,2BACAC,MAAA,2BACAC,OAAA,2BACAC,KAAA,2BACAC,OAAA,2BACAC,SAAA,2BACAC,SAAA,2BACAC,UAAA,2BACAC,IAAA,2BACAC,KAAA,2BACAC,MAAA,2BACAC,SAAA,2BACAC,KAAA,2BACAC,MAAA,2BACAC,QAAA,2BACAC,QAAA,2BACAC,QAAA,2BACAC,UAAA,2BACAC,IAAA,2BACAC,SAAA,2BACAC,OAAA,2BACAC,UAAA,2BACAC,OAAA,2BACAC,OAAA,2BACAC,SAAA,2BACAC,WAAA,2BACAC,WAAA,2BACA1F,MAAA,2BACAC,OAAA,2BACAiJ,OAAA,2BACAC,KAAA,2BACAC,KAAA,2BACAC,KAAA,2BACAC,KAAA,2BACAC,QAAA,2BACAC,cAAA,2BACA7D,QAAA,2BACAC,SAAA,2BACAC,OAAA,2BACAC,QAAA,2BACAC,KAAA,2BACAhG,SAAA,2BACAO,iBAAA,2BACAC,iBAAA,2BACAC,sBAAA,2BACAC,sBAAA,2BACAC,SAAA,2BACAC,SAAA,2BACAC,QAAA,2BACAC,kBAAA,2BACAC,kBAAA,2BACAC,iBAAA,2BACAC,kBAAA,2BACAC,kBAAA,2BACAC,iBAAA,2BACAd,UAAA,2BACAC,UAAA,4BACA4R,gBACAnS,KAAA,OACAJ,KAAA,IAAA,aAAA,kBAAA,MACAwS,QACAhT,QAAA,SAAA,eACAiT,cACApS,SAAA,SAAA,WACAK,UAAA,SAAA,WACAC,UAAA,SAAA,YACA+R,mBACApT,OAAA,QAAA,cAAA,sBACAqT,WACAzS,MAAA,aACAC,MAAA,aACAC,KAAA,aACAC,SAAA,aACAC,MAAA,aACAC,OAAA,aACAC,kBAAA,aACAC,MAAA,aACAC,UAAA,aACAC,UAAA,aACAC,iBAAA,aACAC,iBAAA,aACAC,sBAAA,aACAC,sBAAA,aACAC,SAAA,aACAC,SAAA,aACAC,QAAA,aACAC,kBAAA,aACAC,kBAAA,aACAC,iBAAA,aACAC,kBAAA,aACAC,kBAAA,aACAC,iBAAA,aACAxB,KAAA,eACAC,KAAA,gBACA2S,eACA1S,MAAA,aACAC,MAAA,aACAC,KAAA,aACAC,SAAA,aACAC,MAAA,aACAC,OAAA,aACAC,kBAAA,aACAC,MAAA,aACAC,UAAA,aACAC,UAAA,aACAC,iBAAA,aACAC,iBAAA,aACAC,sBAAA,aACAC,sBAAA,aACAC,SAAA,aACAC,SAAA,aACAC,QAAA,aACAC,kBAAA,aACAC,kBAAA,aACAC,iBAAA,aACAC,kBAAA,aACAC,kBAAA,aACAC,iBAAA,aACAxB,KAAA,mBACAC,KAAA,oBACA4S,gBACAzI,SAAA,WACA/J,SAAA,SAAA,UACAK,UAAA,SAAA,UACAC,UAAA,SAAA,UACArB,OAAA,SAAA,WACAwT,wBACA3T,KAAA,4BACAC,UAAA,wBACAC,OAAA,qBACAC,OAAA,qBACAC,SAAA,uBACAC,QAAA,UACAC,MAAA,QACAC,QAAA,eACAqT,UACAzT,OAAA,QAAA,WACA0T,aACA1T,OAAA,YACA8K,SAAA,WACAC,OAAA,SACAC,KAAA,QACA2I,WACA5S,SAAA,UACAK,UAAA,UACAC,UAAA,UACAC,iBAAA,cACAC,iBAAA,cACAC,sBAAA,cACAC,sBAAA,cACAC,SAAA,kBACAC,SAAA,kBACAC,QAAA,kBACAC,kBAAA,kBACAC,kBAAA,kBACAC,iBAAA,kBACAC,kBAAA,kBACAC,kBAAA,kBACAC,iBAAA,kBACAlB,MAAA,kBACAC,OAAA,kBACAC,kBAAA,aACAC,MAAA,aACAL,KAAA,QACA8S,aACAxQ,OAAA,QAAA,KAAA,oBACAyQ,gBACAnQ,KAAA,eACAC,MAAA,eACAC,aAAA,eACAC,UAAA,eACAC,OAAA,eACAC,KAAA,eACAC,KAAA,eACAC,OAAA,eACAC,MAAA,eACAC,KAAA,eACAC,MAAA,eACAC,OAAA,eACAC,OAAA,eACAC,QAAA,eACAC,QAAA,eACAC,OAAA,eACAC,OAAA,eACAC,gBAAA,eACAC,UAAA,eACAC,WAAA,eACAC,SAAA,eACAC,WAAA,eACAC,UAAA,eACAC,MAAA,eACAC,OAAA,eACAC,KAAA,eACAC,OAAA,eACAC,SAAA,eACAC,SAAA,eACAC,UAAA,eACAC,IAAA,eACAC,KAAA,eACAC,MAAA,eACAC,SAAA,eACAC,KAAA,eACAC,MAAA,eACAC,QAAA,eACAC,QAAA,eACAC,QAAA,eACAC,UAAA,eACAC,IAAA,eACAC,SAAA,eACAC,OAAA,eACAC,UAAA,eACAC,OAAA,eACAC,OAAA,eACAC,SAAA,eACAC,WAAA,eACAC,WAAA,eACAC,QAAA,eACAC,SAAA,eACAC,OAAA,eACAC,QAAA,eACAC,KAAA,eACAhG,SAAA,gBACAK,UAAA,gBACAC,UAAA,gBACAX,KAAA,IAAA,aAAA,YAAA,KACAE,MAAA,OACAC,MAAA,QACAiT,mBACAjU,KAAA,IAAA,uCAAA,MACAkU,sBACAlU,KAAA,gBAAA,8CACAC,UAAA,gBAAA,8CACAC,OAAA,gBAAA,8CACAC,OAAA,gBAAA,8CACAC,SAAA,gBAAA,8CACAC,QAAA,gBAAA,8CACAC,MAAA,gBAAA,8CACAC,QAAA,gBAAA,8CACAQ,MAAA,gBAAA,8CACAC,MAAA,gBAAA,8CACAC,KAAA,gBAAA,8CACAJ,KAAA,gBAAA,8CACAC,KAAA,gBAAA,8CACAI,SAAA,gBAAA,8CACAC,MAAA,gBAAA,8CACAC,OAAA,gBAAA,8CACAC,kBAAA,gBAAA,8CACAC,MAAA,gBAAA,8CACAC,UAAA,gBAAA,8CACAC,UAAA,gBAAA,8CACAC,iBAAA,gBAAA,8CACAC,iBAAA,gBAAA,8CACAC,sBAAA,gBAAA,8CACAC,sBAAA,gBAAA,8CACAC,SAAA,gBAAA,8CACAC,SAAA,gBAAA,8CACAC,QAAA,gBAAA,8CACAC,kBAAA,gBAAA,8CACAC,kBAAA,gBAAA,8CACAC,iBAAA,gBAAA,8CACAC,kBAAA,gBAAA,8CACAC,kBAAA,gBAAA,8CACAC,iBAAA,gBAAA,8CACA7B,KAAA,gBAAA,+CACA2T,0BACAnU,KAAA,oBAAA,+BACAoU,cACA9Q,QAAA,SAAA,qBACA+Q,iBACAxT,KAAA,cACAgD,KAAA,cACAC,MAAA,cACAC,aAAA,cACAC,UAAA,cACAC,OAAA,cACAC,KAAA,cACAC,KAAA,cACAC,OAAA,cACAC,MAAA,cACAC,KAAA,cACAC,MAAA,cACAC,OAAA,cACAC,OAAA,cACAC,QAAA,cACAC,QAAA,cACAC,OAAA,cACAC,OAAA,cACAC,gBAAA,cACAC,UAAA,cACAC,WAAA,cACAC,SAAA,cACAC,WAAA,cACAC,UAAA,cACAC,MAAA,cACAC,OAAA,cACAC,KAAA,cACAC,OAAA,cACAC,SAAA,cACAC,SAAA,cACAC,UAAA,cACAC,IAAA,cACAC,KAAA,cACAC,MAAA,cACAC,SAAA,cACAC,KAAA,cACAC,MAAA,cACAC,QAAA,cACAC,QAAA,cACAC,QAAA,cACAC,UAAA,cACAC,IAAA,cACAC,SAAA,cACAC,OAAA,cACAC,UAAA,cACAC,OAAA,cACAC,OAAA,cACAC,SAAA,cACAC,WAAA,cACAC,WAAA,cACAC,QAAA,cACAC,SAAA,cACAC,OAAA,cACAC,QAAA,cACAC,KAAA,cACAhG,SAAA,cACAK,UAAA,cACAC,UAAA,eACA8S,YACA/T,QAAA,SAAA,cACAgU,gBACAtT,KAAA,wBAAA,IAAA,oCAAA,KACAJ,KAAA,wBAAA,IAAA,oCAAA,MACA2T,kBACAzT,MAAA,MAAA,IAAA,kBAAA,KACAC,MAAA,MAAA,IAAA,kBAAA,MACAyT,SACA9B,MAAA,OAAA,YACA3S,KAAA,cAAA,eAAA,QAAA,sBACA0U,cACAnM,QAAA,SAAA,gBACAoM,SACA9S,SAAA,YACA+S,QACA1T,SAAA,WACAK,UAAA,gBACAC,UAAA;EACAqT,kBACA3T,SAAA,SAAA,YACAK,UAAA,SAAA,YACAC,UAAA,SAAA,aACAsT,aACAtR,OAAA,QAAA,YACAuR,oBACAvR,OAAA,cAAA,iBACAC,QAAA,eAAA,iBACAuR,MACAtM,MAAA,OAAA,YAAA,SAAA,qBACAuM,mBACA/U,OAAA,QAAA,sBACAgV,QACAjM,MAAA,OAAA,SAAA,kDAAA,eAAA,QAAA,sBACAkM,MACArM,MAAA,OAAA,YAAA,iBAAA,KAAA,mBACAsM,0BACAhL,KAAA,kBAAA,kDACAtC,KAAA,kBAAA,kDACAC,KAAA,kBAAA,kDACAhH,MAAA,kBAAA,kDACAC,MAAA,kBAAA,kDACAH,KAAA,kBAAA,kDACAgD,KAAA,kBAAA,kDACAC,MAAA,kBAAA,kDACAC,aAAA,kBAAA,kDACAC,UAAA,kBAAA,kDACAC,OAAA,kBAAA,kDACAC,KAAA,kBAAA,kDACAC,KAAA,kBAAA,kDACAC,OAAA,kBAAA,kDACAC,MAAA,kBAAA,kDACAC,KAAA,kBAAA,kDACAC,MAAA,kBAAA,kDACAC,OAAA,kBAAA,kDACAC,OAAA,kBAAA,kDACAC,QAAA,kBAAA,kDACAC,QAAA,kBAAA,kDACAC,OAAA,kBAAA,kDACAC,OAAA,kBAAA,kDACAC,gBAAA,kBAAA,kDACAC,UAAA,kBAAA,kDACAC,WAAA,kBAAA,kDACAC,SAAA,kBAAA,kDACAC,WAAA,kBAAA,kDACAC,UAAA,kBAAA,kDACAC,MAAA,kBAAA,kDACAC,OAAA,kBAAA,kDACAC,KAAA,kBAAA,kDACAC,OAAA,kBAAA,kDACAC,SAAA,kBAAA,kDACAC,SAAA,kBAAA,kDACAC,UAAA,kBAAA,kDACAC,IAAA,kBAAA,kDACAC,KAAA,kBAAA,kDACAC,MAAA,kBAAA,kDACAC,SAAA,kBAAA,kDACAC,KAAA,kBAAA,kDACAC,MAAA,kBAAA,kDACAC,QAAA,kBAAA,kDACAC,QAAA,kBAAA,kDACAC,QAAA,kBAAA,kDACAC,UAAA,kBAAA,kDACAC,IAAA,kBAAA,kDACAC,SAAA,kBAAA,kDACAC,OAAA,kBAAA,kDACAC,UAAA,kBAAA,kDACAC,OAAA,kBAAA,kDACAC,OAAA,kBAAA,kDACAC,SAAA,kBAAA,kDACAC,WAAA,kBAAA,kDACAC,WAAA,kBAAA,kDACA1F,MAAA,kBAAA,kDACAC,OAAA,kBAAA,kDACAiJ,OAAA,kBAAA,kDACAC,KAAA,kBAAA,kDACAC,KAAA,kBAAA,kDACAC,KAAA,kBAAA,kDACAC,KAAA,kBAAA,kDACAC,QAAA,kBAAA,kDACAC,cAAA,kBAAA,kDACA7D,QAAA,kBAAA,kDACAC,SAAA,kBAAA,kDACAC,OAAA,kBAAA,kDACAC,QAAA,kBAAA,kDACAC,KAAA,kBAAA,kDACAhG,SAAA,kBAAA,kDACAO,iBAAA,kBAAA,kDACAC,iBAAA,kBAAA,kDACAC,sBAAA,kBAAA,kDACAC,sBAAA,kBAAA,kDACAC,SAAA,kBAAA,kDACAC,SAAA,kBAAA,kDACAC,QAAA,kBAAA,kDACAC,kBAAA,kBAAA,kDACAC,kBAAA,kBAAA,kDACAC,iBAAA,kBAAA,kDACAC,kBAAA,kBAAA,kDACAC,kBAAA,kBAAA,kDACAC,iBAAA,kBAAA,kDACAd,UAAA,kBAAA,kDACAC,UAAA,kBAAA,mDACA6T,kBACAnK,OAAA,QAAA,mBACAoK,eACApO,KAAA,MAAA,SAAA,sBACAqO,mBACAnL,KAAA,sBACAtC,KAAA,sBACAC,KAAA,sBACAhH,MAAA,sBACAC,MAAA,sBACAH,KAAA,sBACAgD,KAAA,sBACAC,MAAA,sBACAC,aAAA,sBACAC,UAAA,sBACAC,OAAA,sBACAC,KAAA,sBACAC,KAAA,sBACAC,OAAA,sBACAC,MAAA,sBACAC,KAAA,sBACAC,MAAA,sBACAC,OAAA,sBACAC,OAAA,sBACAC,QAAA,sBACAC,QAAA,sBACAC,OAAA,sBACAC,OAAA,sBACAC,gBAAA,sBACAC,UAAA,sBACAC,WAAA,sBACAC,SAAA,sBACAC,WAAA,sBACAC,UAAA,sBACAC,MAAA,sBACAC,OAAA,sBACAC,KAAA,sBACAC,OAAA,sBACAC,SAAA,sBACAC,SAAA,sBACAC,UAAA,sBACAC,IAAA,sBACAC,KAAA,sBACAC,MAAA,sBACAC,SAAA,sBACAC,KAAA,sBACAC,MAAA,sBACAC,QAAA,sBACAC,QAAA,sBACAC,QAAA,sBACAC,UAAA,sBACAC,IAAA,sBACAC,SAAA,sBACAC,OAAA,sBACAC,UAAA,sBACAC,OAAA,sBACAC,OAAA,sBACAC,SAAA,sBACAC,WAAA,sBACAC,WAAA,sBACA1F,MAAA,sBACAC,OAAA,sBACAiJ,OAAA,sBACAC,KAAA,sBACAC,KAAA,sBACAC,KAAA,sBACAC,KAAA,sBACAC,QAAA,sBACAC,cAAA,sBACA7D,QAAA,sBACAC,SAAA,sBACAC,OAAA,sBACAC,QAAA,sBACAC,KAAA,sBACAhG,SAAA,sBACAO,iBAAA,sBACAC,iBAAA,sBACAC,sBAAA,sBACAC,sBAAA,sBACAC,SAAA,sBACAC,SAAA,sBACAC,QAAA,sBACAC,kBAAA,sBACAC,kBAAA,sBACAC,iBAAA,sBACAC,kBAAA,sBACAC,kBAAA,sBACAC,iBAAA,sBACAd,UAAA,sBACAC,UAAA,uBACAgU,gBACA3T,SAAA,0BACAC,SAAA,0BACAC,QAAA,0BACAC,kBAAA,0BACAC,kBAAA,0BACAC,iBAAA,0BACAC,kBAAA,0BACAC,kBAAA,0BACAC,iBAAA,2BACAoT,wBACAtT,kBAAA,oBACAC,kBAAA,oBACAC,iBAAA,oBACAqT,wBACA1T,kBAAA,oBACAC,kBAAA,oBACAC,iBAAA,oBACAyT,wBACA9T,SAAA,WACAC,SAAA,WACAC,QAAA,WACA6T,QACA/U,KAAA,aACAC,KAAA,aACAC,MAAA,aACAC,MAAA,aACAC,KAAA,aACAC,SAAA,aACAC,MAAA,aACAC,OAAA,aACAC,kBAAA,aACAC,MAAA,aACAC,UAAA,aACAC,UAAA,aACAC,iBAAA,aACAC,iBAAA,aACAC,sBAAA,aACAC,sBAAA,aACAC,SAAA,aACAC,SAAA,aACAC,QAAA,aACAC,kBAAA,aACAC,kBAAA,aACAC,iBAAA,aACAC,kBAAA,aACAC,kBAAA,aACAC,iBAAA,cACAwT,YACAhV,KAAA,SAAA,eACAC,KAAA,SAAA,eACAC,MAAA,SAAA,eACAC,MAAA,SAAA,eACAC,KAAA,SAAA,eACAC,SAAA,SAAA,eACAC,MAAA,SAAA,eACAC,OAAA,SAAA,eACAC,kBAAA,SAAA,eACAC,MAAA,SAAA,eACAC,UAAA,SAAA,eACAC,UAAA,SAAA,eACAC,iBAAA,SAAA,eACAC,iBAAA,SAAA,eACAC,sBAAA,SAAA,eACAC,sBAAA,SAAA,eACAC,SAAA,SAAA,eACAC,SAAA,SAAA,eACAC,QAAA,SAAA,eACAC,kBAAA,SAAA,eACAC,kBAAA,SAAA,eACAC,iBAAA,SAAA,eACAC,kBAAA,SAAA,eACAC,kBAAA,SAAA,eACAC,iBAAA,SAAA,gBACAyT,gBACAjV,KAAA,aAAA,mBACAC,KAAA,aAAA,mBACAC,MAAA,aAAA,mBACAC,MAAA,aAAA,mBACAC,KAAA,aAAA,mBACAC,SAAA,aAAA,mBACAC,MAAA,aAAA,mBACAC,OAAA,aAAA,mBACAC,kBAAA,aAAA,mBACAC,MAAA,aAAA,mBACAC,UAAA,aAAA,mBACAC,UAAA,aAAA,mBACAC,iBAAA,aAAA,mBACAC,iBAAA,aAAA,mBACAC,sBAAA,aAAA,mBACAC,sBAAA,aAAA,mBACAC,SAAA,aAAA,mBACAC,SAAA,aAAA,mBACAC,QAAA,aAAA,mBACAC,kBAAA,aAAA,mBACAC,kBAAA,aAAA,mBACAC,iBAAA,aAAA,mBACAC,kBAAA,aAAA,mBACAC,kBAAA,aAAA,mBACAC,iBAAA,aAAA,oBACA0T,YACAlV,KAAA,iBACAC,KAAA,iBACAC,MAAA,iBACAC,MAAA,iBACAC,KAAA,iBACAC,SAAA,iBACAC,MAAA,iBACAC,OAAA,iBACAC,kBAAA,iBACAC,MAAA,iBACAC,UAAA,iBACAC,UAAA,iBACAC,iBAAA,iBACAC,iBAAA,iBACAC,sBAAA,iBACAC,sBAAA,iBACAC,SAAA,iBACAC,SAAA,iBACAC,QAAA,iBACAC,kBAAA,iBACAC,kBAAA,iBACAC,iBAAA,iBACAC,kBAAA,iBACAC,kBAAA,iBACAC,iBAAA,kBACA2T,cACAvS,QAAA,SAAA,YACAwS,sBACAhW,UAAA,WAAA,sBACAiW,sBACA5O,KAAA,KACA8C,KAAA,cACAtC,KAAA,cACAC,KAAA,cACAhH,MAAA,cACAC,MAAA,cACAH,KAAA,cACAgD,KAAA,cACAC,MAAA,cACAC,aAAA,cACAC,UAAA,cACAC,OAAA,cACAC,KAAA,cACAC,KAAA,cACAC,OAAA,cACAC,MAAA,cACAC,KAAA,cACAC,MAAA,cACAC,OAAA,cACAC,OAAA,cACAC,QAAA,cACAC,QAAA,cACAC,OAAA,cACAC,OAAA,cACAC,gBAAA,cACAC,UAAA,cACAC,WAAA,cACAC,SAAA,cACAC,WAAA,cACAC,UAAA,cACAC,MAAA,cACAC,OAAA,cACAC,KAAA,cACAC,OAAA,cACAC,SAAA,cACAC,SAAA,cACAC,UAAA,cACAC,IAAA,cACAC,KAAA,cACAC,MAAA,cACAC,SAAA,cACAC,KAAA,cACAC,MAAA,cACAC,QAAA,cACAC,QAAA,cACAC,QAAA,cACAC,UAAA,cACAC,IAAA,cACAC,SAAA,cACAC,OAAA,cACAC,UAAA,cACAC,OAAA,cACAC,OAAA,cACAC,SAAA,cACAC,WAAA,cACAC,WAAA,cACA1F,MAAA,cACAC,OAAA,cACAiJ,OAAA,cACAC,KAAA,cACAC,KAAA,cACAC,KAAA,cACAC,KAAA,cACAC,QAAA,cACAC,cAAA,cACA7D,QAAA,cACAC,SAAA,cACAC,OAAA,cACAC,QAAA,cACAC,KAAA,cACAhG,SAAA,cACAO,iBAAA,cACAC,iBAAA,cACAC,sBAAA,cACAC,sBAAA,cACAC,SAAA,cACAC,SAAA,cACAC,QAAA,cACAC,kBAAA,cACAC,kBAAA,cACAC,iBAAA,cACAC,kBAAA,cACAC,kBAAA,cACAC,iBAAA,cACAd,UAAA,cACAC,UAAA,eACA2U,+CACAtV,KAAA,uCACAE,MAAA,uCACAC,MAAA,uCACAsG,KAAA,MACA8O,wBACArV,MAAA,gBACAC,MAAA,gBACAE,SAAA,gBACAK,UAAA,gBACAC,UAAA,gBACA8F,KAAA,MACA+O,kBACAjN,KAAA,OACAC,MAAA,SACAiN,0BACAnM,UAAA,YACA2C,SAAA,YACAyJ,6BACAvJ,SAAA,WACAC,MAAA,gBACAuJ,yBACAvV,KAAA,OACAJ,KAAA,gBACA4V,oCACA5V,KAAA,0BACAI,KAAA,QACAyV,+BACA7V,KAAA,qBACAI,KAAA,QACA0V,iDACArP,KAAA,uBACA3G,KAAA,wBACAiW,wKACA9O,KAAA,gCACAC,KAAA,gCACA/F,kBAAA,wGACAC,kBAAA,wGACAC,iBAAA,wGACAC,kBAAA,wGACAC,kBAAA,wGACAC,iBAAA,yGACAwU,mCACApX,KAAA,2BACAe,KAAA,MACAsW,4LACAvP,KAAA,yBACAC,MAAA,0BACAC,KAAA,yBACAC,KAAA,yBACAC,MAAA,0BACAC,MAAA,0BACAC,IAAA,uBACAX,KAAA,4BACA6P,sIACA/W,KAAA,mEACAmD,OAAA,gEACAD,MAAA,iEACA8T,mDACAxO,QAAA,gCACAD,QAAA,iBACA0O,iEACApV,SAAA,6CACApC,KAAA,kBACAyX,6BACAhP,MAAA,YACAC,QAAA,eACAgP,6CACAjW,SAAA,sBACAK,UAAA,sBACAC,UAAA,sBACA0J,OAAA,qBACAkM,yCACArW,MAAA,oBACAC,MAAA,oBACAC,KAAA,kBACAJ,KAAA,mBACAwW,+BACAnW,SAAA,UACAK,UAAA,UACAC,UAAA,UACA0J,OAAA,mBACAoM,kBACApW,SAAA,UACAK,UAAA,UACAC,UAAA,UACA5E,GAAA,MACA2a,uDACAvV,kBAAA,0BACAC,kBAAA,0BACAC,iBAAA,0BACAC,kBAAA,0BACAC,kBAAA,0BACAC,iBAAA,2BACAmV,4BACApP,WAAA,YACAC,UAAA,YACAC,KAAA,YACAG,QAAA,YACAF,QAAA,aACAC,QAAA,aACAE,MAAA,aACAC,OAAA,aACAC,MAAA,aACAC,KAAA,aACAC,MAAA,aACAC,MAAA,aACAC,QAAA,aACAC,MAAA,aACA5L,GAAA,cACAoa,2DACAhP,QAAA,eACAL,WAAA,kBACAC,UAAA,iBACAC,KAAA,aACAoP,wCACAjP,QAAA,aACAzI,KAAA,wBACAC,UAAA,wBACAC,OAAA,wBACAC,OAAA,wBACAC,SAAA,wBACAC,QAAA,wBACAC,MAAA,wBACAC,QAAA,wBACAQ,MAAA,wBACAC,MAAA,wBACAC,KAAA,wBACAJ,KAAA,wBACAC,KAAA,wBACAI,SAAA,wBACAC,MAAA,wBACAC,OAAA,wBACAC,kBAAA,wBACAC,MAAA,wBACAC,UAAA,wBACAC,UAAA,wBACAC,iBAAA,wBACAC,iBAAA,wBACAC,sBAAA,wBACAC,sBAAA,wBACAC,SAAA,wBACAC,SAAA,wBACAC,QAAA,wBACAC,kBAAA,wBACAC,kBAAA,wBACAC,iBAAA,wBACAC,kBAAA,wBACAC,kBAAA,wBACAC,iBAAA,wBACA7B,KAAA,yBACAmX,sCACA5W,MAAA,OACAC,MAAA,OACAH,KAAA,6BACA+W,6BACA3L,KAAA,YACArP,GAAA,YACAwN,KAAA,YACAvJ,KAAA,YACAK,SAAA,YACAK,UAAA,YACAC,UAAA,YACAT,MAAA,cACAC,MAAA,eACA6W,uBACArX,KAAA,KACAqB,SAAA,gBACAiW,aACAzU,OAAA,QAAA,KAAA,oBACA0U,gBACA3O,KAAA,iBAAA,wBACAC,MAAA,iBAAA,wBACAxI,KAAA,cACAgD,KAAA,cACAC,MAAA,cACAC,aAAA,cACAC,UAAA,cACAC,OAAA,cACAC,KAAA,cACAC,KAAA,cACAC,OAAA,cACAC,MAAA,cACAC,KAAA,cACAC,MAAA,cACAC,OAAA,cACAC,OAAA,cACAC,QAAA,cACAC,QAAA,cACAC,OAAA,cACAC,OAAA,cACAC,gBAAA,cACAC,UAAA,cACAC,WAAA,cACAC,SAAA,cACAC,WAAA,cACAC,UAAA,cACAC,MAAA,cACAC,OAAA,cACAC,KAAA,cACAC,OAAA,cACAC,SAAA,cACAC,SAAA,cACAC,UAAA,cACAC,IAAA,cACAC,KAAA,cACAC,MAAA,cACAC,SAAA,cACAC,KAAA,cACAC,MAAA,cACAC,QAAA,cACAC,QAAA,cACAC,QAAA,cACAC,UAAA,cACAC,IAAA,cACAC,SAAA,cACAC,OAAA,cACAC,UAAA,cACAC,OAAA,cACAC,OAAA,cACAC,SAAA,cACAC,WAAA,cACAC,WAAA,cACAC,QAAA,cACAC,SAAA,cACAC,OAAA,cACAC,QAAA,cACAC,KAAA,cACAhG,SAAA,cACAK,UAAA,cACAC,UAAA,cACAT,MAAA,OACAC,MAAA,QACAgX,MACA/L,KAAA,mBACArP,GAAA,mBACAwN,KAAA,mBACAvJ,KAAA,mBACAK,SAAA,mBACAK,UAAA,mBACAC,UAAA,oBACAyW,iBACAhM,KAAA,eAAA,qBACArP,GAAA,eAAA,qBACAwN,KAAA,eAAA,qBACAvJ,KAAA,eAAA,qBACAK,SAAA,eAAA,qBACAK,UAAA,eAAA,qBACAC,UAAA,eAAA,sBACA0W,SACAtb,GAAA,cAAA,YACAwN,KAAA,cAAA,YACAvJ,KAAA,cAAA,YACAK,SAAA,cAAA,YACAK,UAAA,cAAA,YACAC,UAAA,cAAA,aACA2W,kBACAvb,GAAA,WACAwN,KAAA,WACAvJ,KAAA,WACAK,SAAA,WACAK,UAAA,WACAC,UAAA,WACAyK,KAAA,IAAA,YACAmM,SACA9Q,KAAA,KACAgG,KAAA,KACAxF,KAAA,KACA9H,KAAA,IAAA,kEACAqY,wBACAzb,GAAA,wBACAqP,KAAA,wBACA/K,SAAA,wBACAK,UAAA,wBACAC,UAAA,wBACAX,KAAA,IAAA,oDAAA,MACAyX,sBACApX,SAAA,UACAK,UAAA,UACAC,UAAA,UACA5E,GAAA,KACAqP,KAAA,IAAA,mBACAsM,aACArX,SAAA,gBAAA,UACAK,UAAA,gBAAA,UACAC,UAAA,gBAAA,UACA5E,GAAA,gBAAA,KACAwN,KAAA,IAAA,0BACAvJ,KAAA,IAAA,OAAA,MACA2X,cACAvM,KAAA,mBAAA,yBACArP,GAAA,mBAAA,yBACAwN,KAAA,mBAAA,yBACAvJ,KAAA,mBAAA,yBACAK,SAAA,mBAAA,yBACAK,UAAA,mBAAA,yBACAC,UAAA,mBAAA,0BACAiX,YACAtQ,QAAA,SAAA,WAAA,YACAuQ,cACAnX,UAAA,YACAC,UAAA,aACAmX,mBACA9X,KAAA,wBACAgD,KAAA,eACAC,MAAA,eACAC,aAAA,eACAC,UAAA,eACAC,OAAA,eACAC,KAAA,eACAC,KAAA,eACAC,OAAA,eACAC,MAAA,eACAC,KAAA,eACAC,MAAA,eACAC,OAAA,eACAC,OAAA,eACAC,QAAA,eACAC,QAAA,eACAC,OAAA,eACAC,OAAA,eACAC,gBAAA,eACAC,UAAA,eACAC,WAAA,eACAC,SAAA,eACAC,WAAA,eACAC,UAAA,eACAC,MAAA,eACAC,OAAA,eACAC,KAAA,eACAC,OAAA,eACAC,SAAA,eACAC,SAAA,eACAC,UAAA,eACAC,IAAA,eACAC,KAAA,eACAC,MAAA,eACAC,SAAA,eACAC,KAAA,eACAC,MAAA,eACAC,QAAA,eACAC,QAAA,eACAC,QAAA,eACAC,UAAA,eACAC,IAAA,eACAC,SAAA,eACAC,OAAA,eACAC,UAAA,eACAC,OAAA,eACAC,OAAA,eACAC,SAAA,eACAC,WAAA,eACAC,WAAA,eACAC,QAAA,eACAC,SAAA,eACAC,OAAA,eACAC,QAAA,eACAC,KAAA,eACAhG,SAAA,oBACAK,UAAA,oBACAC,UAAA,oBACAC,iBAAA,cACAC,iBAAA,cACAC,sBAAA,cACAC,sBAAA,cACAC,SAAA,kBACAC,SAAA,kBACAC,QAAA,kBACAC,kBAAA,kBACAC,kBAAA,kBACAC,iBAAA,kBACAC,kBAAA,kBACAC,kBAAA,kBACAC,iBAAA,kBACAlB,MAAA,kBACAC,OAAA,kBACAL,MAAA,OACAC,MAAA,OACAqJ,OAAA,aACAC,KAAA,aACAC,KAAA,aACAC,KAAA,aACAC,KAAA,aACAC,QAAA,aACAC,cAAA,cACAiO,UACA1Q,MAAA,8BACAC,QAAA,8BACA9K,GAAA,8BACA+K,WAAA,8BACAC,UAAA,8BACAC,KAAA,8BACAC,QAAA,8BACAC,QAAA,8BACAC,QAAA,8BACAC,MAAA,8BACAC,OAAA,8BACAC,MAAA,8BACAC,KAAA,8BACAC,MAAA,8BACAC,MAAA,8BACAC,QAAA,8BACAC,MAAA,+BACA4P,cACAjc,GAAA,wBACAmE,MAAA,wBACAC,MAAA,wBACAE,SAAA,wBACAK,UAAA,wBACAC,UAAA,wBACA1B,OACAU,OACAL,UACA2Y,sBACAlc,GAAA,OAAA,aAAA,2BACAmE,MAAA,OAAA,aAAA,2BACAC,MAAA,OAAA,aAAA,2BACAE,SAAA,OAAA,aAAA,2BACAK,UAAA,OAAA,aAAA,2BACAC,UAAA,OAAA,aAAA,4BACAuX,kBACAnc,GAAA,wBACAmE,MAAA,wBACAC,MAAA,wBACAE,SAAA,wBACAK,UAAA,wBACAC,UAAA,wBACA1B,OACAE,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QACAwY,0BACAjY,MAAA,4BAAA,iBAAA,gDACAC,MAAA,4BAAA,iBAAA,gDACAiL,KAAA,4BAAA,iBAAA,gDACArP,GAAA,4BAAA,iBAAA,gDACAwN,KAAA,4BAAA,iBAAA,gDACAvJ,KAAA,4BAAA,iBAAA,gDACAK,SAAA,4BAAA,iBAAA,gDACAK,UAAA,4BAAA,iBAAA,gDACAC,UAAA,4BAAA,iBAAA,iDACAyX,UACAjZ,KAAA,IAAA,eAAA,QAAA,YAAA,MACAkZ,kBACAlZ,KAAA,IAAA,iBAAA,eAAA,QAAA,YAAA,cAAA,MACAmZ,aACAnZ,KAAA,IAAA,QAAA,MACAoZ,qBACApZ,KAAA,IAAA,iBAAA,QAAA,cAAA,MACAqZ,OACAlZ,OAAA,mBAAA,0CACAY,MAAA,mBAAA,0CACAC,MAAA,mBAAA,0CACAC,KAAA,mBAAA,0CACAJ,KAAA,mBAAA,0CACAC,KAAA,mBAAA,0CACAI,SAAA,mBAAA,0CACAC,MAAA,mBAAA,0CACAC,OAAA,mBAAA,0CACAC,kBAAA,mBAAA,0CACAC,MAAA,mBAAA,0CACAC,UAAA,mBAAA,0CACAC,UAAA,mBAAA,0CACAC,iBAAA,mBAAA,0CACAC,iBAAA,mBAAA,0CACAC,sBAAA,mBAAA,0CACAC,sBAAA,mBAAA,0CACAC,SAAA,mBAAA,0CACAC,SAAA,mBAAA,0CACAC,QAAA,mBAAA,0CACAC,kBAAA,mBAAA,0CACAC,kBAAA,mBAAA,0CACAC,iBAAA,mBAAA,0CACAC,kBAAA,mBAAA,0CACAC,kBAAA,mBAAA;AACAC,iBAAA,mBAAA,0CACA7B,KAAA,mBAAA,2CACA8Y,iBACAnZ,OAAA,QAAA,cAAA,IAAA,mBAAA,MACAoZ,UACAnR,WAAA,0DAAA,gBACAC,UAAA,0DAAA,gBACAC,KAAA,0DAAA,gBACAG,QAAA,0DAAA,iBACA+Q,YACA/X,iBAAA,SAAA,8BACAC,iBAAA,SAAA,8BACAC,sBAAA,SAAA,8BACAC,sBAAA,SAAA,+BACA6X,iBACAzS,OAAA,QAAA,IAAA,aAAA,IAAA,aAAA,kBAAA,MACA0S,sBACAtP,KAAA,oBAAA,6LACAtC,KAAA,oBAAA,6LACAC,KAAA,oBAAA,6LACAhH,MAAA,oBAAA,6LACAC,MAAA,oBAAA,6LACAH,KAAA,oBAAA,6LACAgD,KAAA,oBAAA,6LACAC,MAAA,oBAAA,6LACAC,aAAA,oBAAA,6LACAC,UAAA,oBAAA,6LACAC,OAAA,oBAAA,6LACAC,KAAA,oBAAA,6LACAC,KAAA,oBAAA,6LACAC,OAAA,oBAAA,6LACAC,MAAA,oBAAA,6LACAC,KAAA,oBAAA,6LACAC,MAAA,oBAAA,6LACAC,OAAA,oBAAA,6LACAC,OAAA,oBAAA,6LACAC,QAAA,oBAAA,6LACAC,QAAA,oBAAA,6LACAC,OAAA,oBAAA,6LACAC,OAAA,oBAAA,6LACAC,gBAAA,oBAAA,6LACAC,UAAA,oBAAA,6LACAC,WAAA,oBAAA,6LACAC,SAAA,oBAAA,6LACAC,WAAA,oBAAA,6LACAC,UAAA,oBAAA,6LACAC,MAAA,oBAAA,6LACAC,OAAA,oBAAA,6LACAC,KAAA,oBAAA,6LACAC,OAAA,oBAAA,6LACAC,SAAA,oBAAA,6LACAC,SAAA,oBAAA,6LACAC,UAAA,oBAAA,6LACAC,IAAA,oBAAA,6LACAC,KAAA,oBAAA,6LACAC,MAAA,oBAAA,6LACAC,SAAA,oBAAA,6LACAC,KAAA,oBAAA,6LACAC,MAAA,oBAAA,6LACAC,QAAA,oBAAA,6LACAC,QAAA,oBAAA,6LACAC,QAAA,oBAAA,6LACAC,UAAA,oBAAA,6LACAC,IAAA,oBAAA,6LACAC,SAAA,oBAAA,6LACAC,OAAA,oBAAA,6LACAC,UAAA,oBAAA,6LACAC,OAAA,oBAAA,6LACAC,OAAA,oBAAA,6LACAC,SAAA,oBAAA,6LACAC,WAAA,oBAAA,6LACAC,WAAA,oBAAA,6LACA1F,MAAA,oBAAA,6LACAC,OAAA,oBAAA,6LACAiJ,OAAA,oBAAA,6LACAC,KAAA,oBAAA,6LACAC,KAAA,oBAAA,6LACAC,KAAA,oBAAA,6LACAC,KAAA,oBAAA,6LACAC,QAAA,oBAAA,6LACAC,cAAA,oBAAA,6LACA7D,QAAA,oBAAA,6LACAC,SAAA,oBAAA,6LACAC,OAAA,oBAAA,6LACAC,QAAA,oBAAA,6LACAC,KAAA,oBAAA,6LACAhG,SAAA,oBAAA,6LACAO,iBAAA,oBAAA,6LACAC,iBAAA,oBAAA,6LACAC,sBAAA,oBAAA,6LACAC,sBAAA,oBAAA,6LACAC,SAAA,oBAAA,6LACAC,SAAA,oBAAA,6LACAC,QAAA,oBAAA,6LACAC,kBAAA,oBAAA,6LACAC,kBAAA,oBAAA,6LACAC,iBAAA,oBAAA,6LACAC,kBAAA,oBAAA,6LACAC,kBAAA,oBAAA,6LACAC,iBAAA,oBAAA,6LACAd,UAAA,oBAAA,6LACAC,UAAA,oBAAA,8LACAmY,cACAlR,QAAA,SAAA,0BAAA,gDACAmR,aACAnR,QAAA,eAAA,iBAAA,cAAA,qBACAoR,qBACAzZ,SAAA,UAAA,UAAA,cAAA,sBACA0Z,kBACAtW,OAAA,eAAA,gBAAA,eAAA,uBACAC,QAAA,eAAA,gBAAA,eAAA,uBACAJ,OAAA,eAAA,gBAAA,eAAA,uBACAC,QAAA,eAAA,gBAAA,eAAA,uBACAC,OAAA,eAAA,gBAAA,eAAA,uBACAhD,QAAA,eAAA,gBAAA,eAAA,uBACAlD,GAAA,eAAA,gBAAA,eAAA,uBACAmD,KAAA,eAAA,gBAAA,eAAA,wBACAuZ,gBACA7Y,SAAA,UACAK,UAAA,UACAC,UAAA,WACAwY,UACA3c,GAAA,WAAA,2BAAA,KACA+K,WAAA,WAAA,2BAAA,KACAC,UAAA,WAAA,2BAAA,KACAC,KAAA,WAAA,2BAAA,KACAC,QAAA,WAAA,2BAAA,KACAC,QAAA,WAAA,2BAAA,KACAC,QAAA,WAAA,2BAAA,KACAC,MAAA,WAAA,2BAAA,KACAC,OAAA,WAAA,2BAAA,KACAC,MAAA,WAAA,2BAAA,KACAC,KAAA,WAAA,2BAAA,KACAC,MAAA,WAAA,2BAAA,KACAC,MAAA,WAAA,2BAAA,KACAC,QAAA,WAAA,2BAAA,KACAC,MAAA,WAAA,2BAAA,KACAf,MAAA,WAAA,2BAAA,KACAC,QAAA,WAAA,2BAAA,MACA8R,eACAlZ,QACAC,QACAE,WACAK,YACAC,YACA5E,MACAsd,sBACAnT,SAAA,UAAA,IAAA,aAAA,IAAA,aAAA,IAAA,aAAA,kBAAA,MACAoT,QACA1Y,iBAAA,mBACAC,iBAAA,mBACAC,sBAAA,wBACAC,sBAAA,yBACAwY,WACA3R,QAAA,eAAA,cAAA,mBAAA,iBACA4R,qBACAvT,QAAA,SAAA,IAAA,aAAA,IAAA,aAAA,kBAAA,MACAwT,cACAvZ,MAAA,yBAAA,sBACAC,MAAA,yBAAA,sBACAC,KAAA,yBAAA,sBACAJ,KAAA,yBAAA,sBACAC,KAAA,yBAAA,sBACAI,SAAA,yBAAA,sBACAC,MAAA,yBAAA,sBACAC,OAAA,yBAAA,sBACAC,kBAAA,yBAAA,sBACAC,MAAA,yBAAA,sBACAC,UAAA,yBAAA,sBACAC,UAAA,yBAAA,sBACAC,iBAAA,yBAAA,sBACAC,iBAAA,yBAAA,sBACAC,sBAAA,yBAAA,sBACAC,sBAAA,yBAAA,sBACAC,SAAA,yBAAA,sBACAC,SAAA,yBAAA,sBACAC,QAAA,yBAAA,sBACAC,kBAAA,yBAAA,sBACAC,kBAAA,yBAAA,sBACAC,iBAAA,yBAAA,sBACAC,kBAAA,yBAAA,sBACAC,kBAAA,yBAAA,sBACAC,iBAAA,yBAAA,uBACAkY,aACA1Z,KAAA,cACAC,KAAA,0BACA0Z,iBACA3Z,KAAA,kBACAC,KAAA,8BACA2Z,oBACA1Z,MAAA,YAAA,wBACAC,MAAA,YAAA,wBACAC,KAAA,YAAA,wBACAC,SAAA,YAAA,wBACAC,MAAA,YAAA,wBACAC,OAAA,YAAA,wBACAC,kBAAA,YAAA,wBACAC,MAAA,YAAA,wBACAC,UAAA,YAAA,wBACAC,UAAA,YAAA,wBACAC,iBAAA,YAAA,wBACAC,iBAAA,YAAA,wBACAC,sBAAA,YAAA,wBACAC,sBAAA,YAAA,wBACAC,SAAA,YAAA,wBACAC,SAAA,YAAA,wBACAC,QAAA,YAAA,wBACAC,kBAAA,YAAA,wBACAC,kBAAA,YAAA,wBACAC,iBAAA,YAAA,wBACAC,kBAAA,YAAA,wBACAC,kBAAA,YAAA,wBACAC,iBAAA,YAAA,wBACAxB,KAAA,cAAA,gBACAC,KAAA,cAAA,iBACA4Z,wBACA3Z,MAAA,YAAA,4BACAC,MAAA,YAAA,4BACAC,KAAA,YAAA,4BACAC,SAAA,YAAA,4BACAC,MAAA,YAAA,4BACAC,OAAA,YAAA,4BACAC,kBAAA,YAAA,4BACAC,MAAA,YAAA,4BACAC,UAAA,YAAA,4BACAC,UAAA,YAAA,4BACAC,iBAAA,YAAA,4BACAC,iBAAA,YAAA,4BACAC,sBAAA,YAAA,4BACAC,sBAAA,YAAA,4BACAC,SAAA,YAAA,4BACAC,SAAA,YAAA,4BACAC,QAAA,YAAA,4BACAC,kBAAA,YAAA,4BACAC,kBAAA,YAAA,4BACAC,iBAAA,YAAA,4BACAC,kBAAA,YAAA,4BACAC,kBAAA,YAAA,4BACAC,iBAAA,YAAA,4BACAxB,KAAA,kBAAA,oBACAC,KAAA,kBAAA,qBACA6Z,iBACA5Z,MAAA,qBAAA,yBACAC,MAAA,qBAAA,yBACAC,KAAA,qBAAA,yBACAJ,KAAA,qBAAA,yBACAC,KAAA,qBAAA,yBACAI,SAAA,qBAAA,yBACAC,MAAA,qBAAA,yBACAC,OAAA,qBAAA,yBACAC,kBAAA,qBAAA,yBACAC,MAAA,qBAAA,yBACAC,UAAA,qBAAA,yBACAC,UAAA,qBAAA,yBACAC,iBAAA,qBAAA,yBACAC,iBAAA,qBAAA,yBACAC,sBAAA,qBAAA,yBACAC,sBAAA,qBAAA,yBACAC,SAAA,qBAAA,yBACAC,SAAA,qBAAA,yBACAC,QAAA,qBAAA,yBACAC,kBAAA,qBAAA,yBACAC,kBAAA,qBAAA,yBACAC,iBAAA,qBAAA,yBACAC,kBAAA,qBAAA,yBACAC,kBAAA,qBAAA,yBACAC,iBAAA,qBAAA,0BACAuY,iBACAxQ,KAAA,IAAA,qBACAtC,KAAA,IAAA,qBACAC,KAAA,IAAA,qBACAhH,MAAA,qBACAC,MAAA,qBACAH,KAAA,qBACAgD,KAAA,qBACAC,MAAA,qBACAC,aAAA,qBACAC,UAAA,qBACAC,OAAA,qBACAC,KAAA,qBACAC,KAAA,qBACAC,OAAA,qBACAC,MAAA,qBACAC,KAAA,qBACAC,MAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,QAAA,qBACAC,QAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,gBAAA,qBACAC,UAAA,qBACAC,WAAA,qBACAC,SAAA,qBACAC,WAAA,qBACAC,UAAA,qBACAC,MAAA,qBACAC,OAAA,qBACAC,KAAA,qBACAC,OAAA,qBACAC,SAAA,qBACAC,SAAA,qBACAC,UAAA,qBACAC,IAAA,qBACAC,KAAA,qBACAC,MAAA,qBACAC,SAAA,qBACAC,KAAA,qBACAC,MAAA,qBACAC,QAAA,qBACAC,QAAA,qBACAC,QAAA,qBACAC,UAAA,qBACAC,IAAA,qBACAC,SAAA,qBACAC,OAAA,qBACAC,UAAA,qBACAC,OAAA,qBACAC,OAAA,qBACAC,SAAA,qBACAC,WAAA,qBACAC,WAAA,qBACA1F,MAAA,qBACAC,OAAA,qBACAiJ,OAAA,qBACAC,KAAA,qBACAC,KAAA,qBACAC,KAAA,qBACAC,KAAA,qBACAC,QAAA,qBACAC,cAAA,qBACA7D,QAAA,qBACAC,SAAA,qBACAC,OAAA,qBACAC,QAAA,qBACAC,KAAA,qBACAhG,SAAA,qBACAO,iBAAA,qBACAC,iBAAA,qBACAC,sBAAA,qBACAC,sBAAA,qBACAC,SAAA,qBACAC,SAAA,qBACAC,QAAA,qBACAC,kBAAA,qBACAC,kBAAA,qBACAC,iBAAA,qBACAC,kBAAA,qBACAC,kBAAA,qBACAC,iBAAA,qBACAd,UAAA,qBACAC,UAAA,sBACAqZ,QACAtS,QAAA,WAAA,0BACAC,QAAA,WAAA,0BACAE,MAAA,WAAA,0BACAC,OAAA,WAAA,0BACAC,MAAA,WAAA,0BACAC,KAAA,WAAA,0BACAC,MAAA,WAAA,0BACAC,MAAA,WAAA,0BACAC,QAAA,WAAA,0BACAC,MAAA,WAAA,0BACAf,MAAA,WAAA,0BACAC,QAAA,WAAA,0BACA9K,GAAA,WAAA,2BACAyd,SACApS,MAAA,QACAC,OAAA,SACAC,MAAA,QACAC,KAAA,OACAC,MAAA,QACAC,MAAA,QACAC,QAAA,UACAT,QAAA,SAAA,WACAC,QAAA,SAAA,WACAS,MAAA,WACA8R,WACAxS,QAAA,0BACAC,QAAA,0BACAE,MAAA,0BACAC,OAAA,0BACAC,MAAA,0BACAC,KAAA,0BACAC,MAAA,0BACAC,MAAA,0BACAC,QAAA,0BACAC,MAAA,0BACA5L,GAAA,2BACA2d,aACAzR,OAAA,QAAA,gCACA0R,cACA7Q,KAAA,wBACAtC,KAAA,wBACAC,KAAA,wBACAhH,MAAA,wBACAC,MAAA,wBACAH,KAAA,wBACAgD,KAAA,wBACAC,MAAA,wBACAC,aAAA,wBACAC,UAAA,wBACAC,OAAA,wBACAC,KAAA,wBACAC,KAAA,wBACAC,OAAA,wBACAC,MAAA,wBACAC,KAAA,wBACAC,MAAA,wBACAC,OAAA,wBACAC,OAAA,wBACAC,QAAA,wBACAC,QAAA,wBACAC,OAAA,wBACAC,OAAA,wBACAC,gBAAA,wBACAC,UAAA,wBACAC,WAAA;AACAC,SAAA,wBACAC,WAAA,wBACAC,UAAA,wBACAC,MAAA,wBACAC,OAAA,wBACAC,KAAA,wBACAC,OAAA,wBACAC,SAAA,wBACAC,SAAA,wBACAC,UAAA,wBACAC,IAAA,wBACAC,KAAA,wBACAC,MAAA,wBACAC,SAAA,wBACAC,KAAA,wBACAC,MAAA,wBACAC,QAAA,wBACAC,QAAA,wBACAC,QAAA,wBACAC,UAAA,wBACAC,IAAA,wBACAC,SAAA,wBACAC,OAAA,wBACAC,UAAA,wBACAC,OAAA,wBACAC,OAAA,wBACAC,SAAA,wBACAC,WAAA,wBACAC,WAAA,wBACA1F,MAAA,wBACAC,OAAA,wBACAiJ,OAAA,wBACAC,KAAA,wBACAC,KAAA,wBACAC,KAAA,wBACAC,KAAA,wBACAC,QAAA,wBACAC,cAAA,wBACA7D,QAAA,wBACAC,SAAA,wBACAC,OAAA,wBACAC,QAAA,wBACAC,KAAA,wBACAhG,SAAA,wBACAO,iBAAA,wBACAC,iBAAA,wBACAC,sBAAA,wBACAC,sBAAA,wBACAC,SAAA,wBACAC,SAAA,wBACAC,QAAA,wBACAC,kBAAA,wBACAC,kBAAA,wBACAC,iBAAA,wBACAC,kBAAA,wBACAC,kBAAA,wBACAC,iBAAA,wBACAd,UAAA,wBACAC,UAAA,yBACA0Z,cACA3a,QAAA,SAAA,aACAlD,KACAmD,QACA2a,OACApa,MAAA,QACAC,MAAA,SACAoa,aACAra,MAAA,OACAC,MAAA,OACAE,SAAA,UACAK,UAAA,UACAC,UAAA,WACA6Z,WACAta,MAAA,OACAC,MAAA,OACAC,KAAA,aACAC,SAAA,aACAC,MAAA,aACAC,OAAA,aACAC,kBAAA,aACAC,MAAA,aACAC,UAAA,aACAC,UAAA,aACAC,iBAAA,aACAC,iBAAA,aACAC,sBAAA,aACAC,sBAAA,aACAC,SAAA,aACAC,SAAA,aACAC,QAAA,aACAC,kBAAA,aACAC,kBAAA,aACAC,iBAAA,aACAC,kBAAA,aACAC,kBAAA,aACAC,iBAAA,cACAiZ,MACAva,MAAA,gBAAA,eACAC,MAAA,gBAAA,eACAE,SAAA,gBAAA,eACAK,UAAA,gBAAA,eACAC,UAAA,gBAAA,eACA5E,GAAA,gBAAA,MACA2e,UACAtP,KAAA,QACArP,GAAA,QACAwN,KAAA,QACAvJ,KAAA,QACAK,SAAA,QACAK,UAAA,QACAC,UAAA,SACAga,YACAza,MAAA,OACAC,MAAA,QACAya,aACAzb,KAAA,SAAA,qBACAmD,OAAA,SAAA,uBAGAuY,SAAA,itBAEAC,MAAA,kFAEAC,YAAA,WACAC,aAAA,QDsGMC,GAAG,SAASjf,EAAQjB,EAAOD,GE/4HjC,YACA,IAAAogB,GAAA,WAAA,IAAA,MAAAlf,GAAA,cAAA,MAAAR,GAAA,MAAAL,QAAA+f,cACAA,GAAAC,WAAA,WAAA,SAAAC,EAAAC,GAsOA,QAAAC,GAAAC,GACA,GAAAC,MAAAC,EAAAC,EAAAH,EACA,IAAArd,QAAAud,EACA,IAAA,GAAAE,KAAAF,GACAD,EAAApd,KAAAud,EAAAC,gBAGAJ,GAAApd,KAAAmd,EAEA,OAAAC,GAIA,QAAAK,GAAAC,EAAAC,GAEA,QAAAC,KACA,GAAAC,GAAA,IACA,IAAAF,EAAAG,UAAA,CAEA,GAAAC,IAAA,CAEAF,GAAAH,EAAAM,MAAAC,EAAAN,EAAAG,WAAAI,SAAAC,OAAA,GAAA,EACA,IAAAN,GAAA,GAAAA,EAAA,GAAA3f,OAAA,CAEA2f,EAAAH,EAAAM,MAAAC,EAAAN,EAAAG,WAAAM,QAAAD,OAAA,GAAA,EACAJ,IAAA,EAGA,GAAAF,GAAAA,EAAA,GAAA3f,OAAA,EAAA,CAEA,GAAAmgB,IACAC,SAAAP,EAAA,MAAA,UACAQ,IAAAC,EAAAb,EAAAG,WAAAW,IACAC,MAAAT,EAAAN,EAAAG,WAAAa,SAAAD,MACAE,KAAAf,EAAA,GACAgB,MAAAnB,EAAAmB,MAEAd,KAAAJ,EAAAG,WAAA,EACA,OAAAO,IAKA,IAAA,GAAAS,KAAAb,GAAA,CACAJ,EAAAH,EAAAM,MAAAC,EAAAa,GAAAC,OAAAZ,OAAA,GAAA,EACA,IAAAN,EAAA,CACA,GAAAS,EACA,IAAAX,EAAAG,UAAA,CAEAH,EAAAG,WAAA,CACAQ,GAAA,UACA,CACAX,EAAAG,UAAAgB,CACAR,GAAA,QAEA,OACAC,IAAAC,EAAAM,GAAAL,IACAC,MAAAT,EAAAa,GAAAC,OAAAL,MACAE,KAAAf,EAAA,GACAS,SAAAA,EACAO,MAAAnB,EAAAmB,QAQA,IAAA,GAAAhhB,GAAA,EAAAA,EAAAmhB,EAAA9gB,SAAAL,EAAA,CACAggB,EAAAH,EAAAM,MAAAgB,EAAAnhB,GAAAsgB,OAAA,GAAA,EACA,IAAAN,EACA,OACAU,IAAAS,EAAAnhB,GAAAohB,KACAP,MAAAM,EAAAnhB,GAAA6gB,MACAE,KAAAf,EAAA,GACAgB,MAAAnB,EAAAmB,OAMAhB,EAAAH,EAAAM,MAAAkB,EAAAzC,UAAA,GAAA,EACA,IAAAoB,EACA,OAAAU,IAAAb,EAAAyB,UAAAC,cACAV,MAAA,UACAE,KAAAf,EAAA,GACAgB,MAAAnB,EAAAmB,MAIAhB,GAAAH,EAAAM,MAAAkB,EAAAxC,OAAA,GAAA,EACA,IAAAmB,EACA,OAAAU,IAAAb,EAAAyB,UACAT,MAAA,OACAE,KAAAf,EAAA,GACAgB,MAAAnB,EAAAmB,MAKAhB,GAAAH,EAAAM,MAAA,kBAAA,GAAA,EACA,QAAAO,IAAA,kBACAG,MAAA,QACAE,KAAAf,EAAA,GACAgB,MAAAnB,EAAAmB,OAIA,QAAAQ,KAEA,GAAAC,GAAA5B,EAAA6B,QACA5B,GAAA6B,cAAAF,CACA3B,GAAA8B,YAAAH,EAAAI,EAAAd,KAAA1gB,OAGA,QAAAyhB,GAAAniB,GACA,MAAAmgB,EAAAiC,YACA,UAAApiB,GAAA,aAAAA,GAAA,OAAAA,GAAA,YAAAA,GAAA,UAAAA,GAAA,UAAAA,GAAA,QAAAA,GAAA,SAAAA,GAAA,UAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,OAAAA,IACAmgB,EAAAiC,UAAApiB,IAOA,QAAAqiB,GAAAC,GACA,gBAAAA,EAAAnC,EAAA5L,WAAA,EACA,aAAA+N,EAAAnC,EAAA5L,WAAA,EACA,kBAAA+N,EAAAnC,EAAA7L,aAAA,EACA,eAAAgO,EAAAnC,EAAA7L,aAAA,EACA,iBAAAgO,IAAAnC,EAAA3C,eAAA,GAGA,QAAA+E,GAAAD,GACA,OACAnC,EAAA5L,WAAA,OAAA+N,KACAnC,EAAA7L,aACA,aAAAgO,GACA,yBAAAA,GACA,6BAAAA,GAMA,GAAApC,EAAAsC,MACArC,EAAAsC,gBAAAtC,EAAAuC,aAEA,IAAAR,GAAA9B,GAGA,IAAA,mBAAA8B,EAAAnB,IAAA,CAEA,GAAA,GAAAZ,EAAAwC,GAAA,CACAxC,EAAAwC,IAAA,CACAd,KAEA1B,EAAAgB,UAAA,CAEA,OAAAe,GAAAhB,MAGA,GAAA,MAAAgB,EAAAnB,KAAA,WAAAmB,EAAAnB,KAAAmB,EAAApB,UAAA,OAAAoB,EAAApB,SAAA,CACAX,EAAAsC,gBAAAtC,EAAAuC,YACA,OAAAR,GAAA,MAIA,GACAI,GADAM,GAAA,EAEAC,EAAAX,EAAAnB,GAEA,KAAAmB,EAAApB,UAAA,OAAAoB,EAAApB,SAEA,KAAAX,EAAA2C,MAAApiB,OAAA,GAAAmiB,GAAA1C,EAAAwC,KAAAC,GAAA,CACAN,EAAAnC,EAAA2C,MAAAC,KAEA,IAAAjD,EAAAwC,GAyBA,CAIA,GAAAU,GAAAlD,EAAAwC,GAAAO,EACA,IAAAvgB,QAAA0gB,GAAAT,EAAAD,GAAA,CAEA,IAAA,GAAAjiB,GAAA2iB,EAAAtiB,OAAA,EAAAL,GAAA,IAAAA,EACA8f,EAAA2C,MAAAtgB,KAAAwgB,EAAA3iB,GAGAgiB,GAAAC,OACA,CAEAnC,EAAAwC,IAAA,CACAxC,GAAAgB,UAAA,CACAU,IACA1B,GAAA2C,MAAAtgB,KAAA8f,QAxCA,IAAAA,GAAAO,EAAA,CAGAD,GAAA,CACAT,GAAAG,EAIA,KAAA,GADAW,IAAA,EACAC,EAAA/C,EAAA2C,MAAApiB,OAAAwiB,EAAA,IAAAA,EAAA,CACA,GAAAC,GAAArD,EAAAK,EAAA2C,MAAAI,EAAA,GACAC,IAAAA,EAAA,IACAF,GAAA,GAEA9C,EAAAgB,SAAA8B,CACA,IAAA9C,EAAA3C,eAAA,QAAAqF,EAAA9B,IAAA,CACAZ,EAAAiD,aAAAlB,EAAAd,IACAjB,GAAA3C,eAAA,OAEA,CACA2C,EAAAwC,IAAA,CACAxC,GAAAgB,UAAA,CACAU,MAwBA,IAAAe,GAAAzC,EAAAwC,GAAA,CACAxC,EAAAwC,IAAA,CAAAxC,GAAAgB,UAAA,CAAAU,KAGA1B,EAAAsC,gBAAAY,QAAA,MAAA,IACAlD,EAAAmD,oBAAApB,EAAAb,MAEAlB,GAAAsC,gBAAAtC,EAAAuC,YAEAvC,GAAAuC,aAAAhD,EAAAS,EAAA2C,MAAA3C,EAAA2C,MAAApiB,OAAA,GAEA,OAAAwhB,GAAAhB,MAiCA,QAAAqC,GAAApD,EAAAqD,GAEA,GAAArD,EAAAG,UAAA,MAAA,EACA,IAAAH,EAAA2C,MAAApiB,QAAA,2CAAAyf,EAAA2C,MAAA3C,EAAA2C,MAAApiB,OAAA,GAEA,MAAAyf,GAAAmD,mBAEA,IAAAxjB,GAAA,EACAO,EAAA8f,EAAA2C,MAAApiB,OAAA,CACA,IAAA,YAAAwB,KAAAshB,IAGA,IADA,GAAAC,GAAAD,EAAAE,OAAA,EAAA,GACArjB,GAAA,IAAAA,EACA,GAAA8f,EAAA2C,MAAAziB,IAAAojB,EAAA,GACApjB,CACA,YAGA,CAEA,GAAAsjB,GAAAC,EAAAzD,EAAA2C,MAAAziB,GACA,IAAAsjB,EAAA,CACA7jB,GAAA6jB,IACAtjB,GAGA,KAAAA,GAAA,IAAAA,EAAA,CACA,GAAAsjB,GAAAE,EAAA1D,EAAA2C,MAAAziB,GACAsjB,KACA7jB,GAAA6jB,GAGA,MAAA7jB,GAAA0f,EAAAsE,WAhhBA,GAEApC,IAFAlC,EAAAsE,WAEA1jB,EAAA,0BACA0f,EAAA4B,EAAA/e,MAEA8B,EAAA,wBAMAsf,EACA,gLACAC,EAAAD,EAAA,KAEAE,EAAA,IAAAD,EAAA,iDACAE,EAAA,IAAAF,EAAA,WACAA,EAAA,gDACA1f,EAAA,MAAA4f,EACA3f,EAAA,MAAA2f,EAEAC,EAAA,IAAAJ,EAAA,OAAAE,EAAA,WAAAA,EAAA,MAEAG,EAAA,cACAC,EAAA,KAAAD,EAAAA,EAAA,IACAE,EAAA,+CACAC,EAAA,IAAAF,EAAA,IAAAC,EAAA,IACAE,EAAA,IAAAR,EAAA,YAAAO,EAAA,MAAAN,EAAA,UAAAM,EAAA,MAAAN,EAAA,MAAAM,EAAA,MACA3f,EAAA,MAAAof,EAAA,YAAAC,EAAA,SAAAA,EAAA,KACAlf,EAAA,IAAAof,EAAA,MACArf,EAAAC,EAAAyf,EACAjU,EAAA,6BAEAkU,EAAA,oBACArf,EAAA,SACAC,EAAA,kCACAC,EACA,oBAAAmf,EAAA,eACAA,EAAA,YACAA,EAAA,KAEAlf,EAAA,MAAAH,EACAI,EAAA,MAAAH,EACAI,EAAA,MAAAH,EACAI,EAAA,IAAAN,EACAO,EAAA,IAAAN,EACAO,EAAA,IAAAN,EAEAof,EAAA,qBAQAC,EAAAP,EAAA,MACAQ,EAAA,SAAAD,EAAA,gBAAAP,EAAA,IAAAO,EAAA,IAEA3f,EAAA,+BAAA0f,EAAA,IAAAE,EAAA,MACA3f,EAAA,+BAAAyf,EAAA,IAAAE,EAAA,MAEA5D,GACA6D,QACA5D,IAAA,uBACA6D,OAAA,MACAC,SAAA,qBAAAL,EAAA,IAAAE,EAAA,OAGAtf,QACA2b,IAAA,uBACA6D,OAAA,MACAC,SAAA,qBAAAL,EAAA,IAAAE,EAAA,OAGA,KAAA,GAAA/iB,KAAAmf,GACAA,EAAAnf,GAAAmjB,SAAAhE,EAAAnf,GAAAijB,OAAA9D,EAAAnf,GAAAkjB,SAAA/D,EAAAnf,GAAAijB,MAsBA,IAAArE,KACA,KAAA,GAAA5e,KAAAmf,GACAP,EAAA5e,IACAsf,UACAM,KAAA,uBAAA5f,EACA8e,MAAA,GAAAsE,QAAA,IAAAjE,EAAAnf,GAAAmjB,UACA9D,MAAA,UAEAR,UACAe,KAAA,uBAAA5f,EACA8e,MAAA,GAAAsE,QAAA,IAAAjE,EAAAnf,GAAAkjB,UACA7D,MAAA,UAEAN,SACAa,KAAA,uBAAA5f,EACA8e,MAAA,GAAAsE,QAAA,IAAAjE,EAAAnf,GAAAkjB,SAAA/D,EAAAnf,GAAAijB,QACA5D,MAAA,UAEAK,QACAE,KAAA,8BAAA5f,EACA8e,MAAA,GAAAsE,QAAA,IAAAjE,EAAAnf,GAAAijB,QACA5D,MAAA,UAMA,IAAAgE,GAAA,yBAGAC,EAAA,oCACAC,EAAA,IAAAF,EAAA,KAAAC,EAAA,MACA3gB,EAAA,MAAA4gB,EAAA,MACAvgB,EAAA,MAAAugB,EAAA,MACA5D,IACAC,KAAA,KACAd,MAAA,GAAAsE,QAAA,IAAAC,EAAA,KACAhE,MAAA,OAEAO,KAAA,UACAd,MAAA,GAAAsE,QAAA,IAAAE,GACAjE,MAAA,YAEAO,KAAA,UACAd,MAAA,GAAAsE,QAAA,IAAAxgB,GACAyc,MAAA,eAEAO,KAAA,OACAd,MAAA,GAAAsE,QAAA,IAAA3gB,GACA4c,MAAA,SAEAO,KAAA,OACAd,MAAA,GAAAsE,QAAA,IAAA1gB,GACA2c,MAAA,SAEAO,KAAA,UACAd,MAAA,GAAAsE,QAAA,IAAA1U,GACA2Q,MAAA,SAEAO,KAAA,SACAd,MAAA,GAAAsE,QAAA,IAAA3f,GACA4b,MAAA,WAEAO,KAAA,UACAd,MAAA,GAAAsE,QAAA,IAAA5f,GACA6b,MAAA,WAEAO,KAAA,UACAd,MAAA,GAAAsE,QAAA,IAAA7f,GACA8b,MAAA,WAEAO,KAAA,kBACAd,MAAA,GAAAsE,QAAA,IAAAxf,GACAyb,MAAA,WAEAO,KAAA,mBACAd,MAAA,GAAAsE,QAAA,IAAAzf,GACA0b,MAAA,WAEAO,KAAA,mBACAd,MAAA,GAAAsE,QAAA,IAAA1f,GACA2b,MAAA,WAEAO,KAAA,kBACAd,MAAA,GAAAsE,QAAA,IAAArf,GACAsb,MAAA,WAEAO,KAAA,mBACAd,MAAA,GAAAsE,QAAA,IAAAtf,GACAub,MAAA,WAEAO,KAAA,mBACAd,MAAA,GAAAsE,QAAA,IAAAvf,GACAwb,MAAA,WAMAO,KAAA,kBACAd,MAAA,GAAAsE,QAAA,IAAAjgB,GACAkc,MAAA,WAEAO,KAAA,kBACAd,MAAA,GAAAsE,QAAA,IAAAhgB,GACAic,MAAA,WAGAO,KAAA,MACAd,MAAA,GAAAsE,QAAA,IAAAzgB,GACA0c,MAAA,SAGAO,KAAA,OACAd,MAAA,GAAAsE,QAAA,IAAApgB,GACAqc,MAAA,SAEAO,KAAA,WACAd,MAAA,GAAAsE,QAAA,IAAAngB,GACAoc,MAAA,aAEAO,KAAA,WACAd,MAAA,GAAAsE,QAAA,IAAAlgB,GACAmc,MAAA,aAEAO,KAAA,mBACAd,MAAA,GAAAsE,QAAA,IAAArgB,GACAsc,MAAA,aAiPA0C,GACAyB,eAAA,EACAC,gBAAA,EACAC,oBAAA,EACAthB,wBAAA,EACAkV,OAAA,EACAG,WAAA,EACAF,WAAA,EACAC,eAAA,EACAmE,cAAA,EACA7B,QAAA,EACA/K,WAAA,EACAyL,qBAAA,EACAD,aAAA,EACAE,iBAAA,EACAC,yBAAA,EACA5M,qBAAA,GAIAkU,GACA9f,IAAA,EACAT,IAAA,EACAP,IAAA,EACAQ,OACAa,OAyCA,QACAye,MAAA5C,EACAuF,WAAA,SAAAC,GACA,OACAC,SAAAzF,EACA0C,IAAA,EACAxB,SAAAO,EAAAtC,YACA4C,cAAA,KACAC,YAAA,KACAG,UAAA,KACAK,gBAAA/C,EAAAgC,EAAAvC,aACAuD,aAAAhD,EAAAgC,EAAAvC,aACA5K,WAAA,EACAD,aAAA,EACAkJ,eAAA,EACA4F,aAAA,GACA9C,WAAA,EACAwC,OAAApB,EAAAvC,aACAmE,oBAAA9D,EAAAsE,aAGAP,OAAAA,EACAoC,cAAA,QAIArG,GAAAsG,WAAA,6BAAA,cFk5HGC,wBAAwB,EAAEC,WAAaxjB,SAAYyjB,GAAG,SAAS3lB,EAAQjB,EAAOD,GGh6IjF,GAAA8mB,GAAA7mB,EAAAD,QAAA,WACAQ,KAAAumB,MAAA,CACAvmB,MAAAwmB,SAAA,CACAxmB,MAAAymB,YAGAH,GAAAI,WAWAC,OAAA,SAAAC,EAAA9D,GACA,GAAA,GAAA8D,EAAA5lB,OAAA,CAIA,GACA6lB,GACAC,EAFAC,EAAA/mB,IAIA4C,UAAAkgB,IACAA,EAAA,EAEA,IAAAA,IAAA8D,EAAA5lB,OAAA,CAIA+lB,EAAAP,UACAK,GAAAD,EAAA9D,EACAlgB,UAAAmkB,EAAAN,SAAAI,KACAE,EAAAN,SAAAI,GAAA,GAAAP,GAEAQ,GAAAC,EAAAN,SAAAI,EACAC,GAAAH,OAAAC,EAAA9D,EAAA,OATAiE,GAAAR,UAoBAS,OAAA,SAAAJ,EAAA9D,GACA,GAAA,GAAA8D,EAAA5lB,OAAA,CAIA,GACA6lB,GACAC,EAFAC,EAAA/mB,IAIA4C,UAAAkgB,IACAA,EAAA,EAEA,IAAAlgB,SAAAmkB,EAGA,GAAAjE,IAAA8D,EAAA5lB,OAAA,CAIA+lB,EAAAP,UACAK,GAAAD,EAAA9D,EACAgE,GAAAC,EAAAN,SAAAI,EACAC,GAAAE,OAAAJ,EAAA9D,EAAA,OANAiE,GAAAR,UAkBA7H,OAAA,SAAAuI,EAAAC,GACA,GAAA,GAAAD,EAAAjmB,QAAA,GAAAkmB,EAAAlmB,OAAA,CAGAhB,KAAAgnB,OAAAC,EACAjnB,MAAA2mB,OAAAO,KAWAC,UAAA,SAAAP,EAAA9D,GACA,GAAA,GAAA8D,EAAA5lB,OACA,MAAA,EAGA,IACA6lB,GACAC,EAFAC,EAAA/mB,KAGAonB,EAAA,CAEAxkB,UAAAkgB,IACAA,EAAA,EAEA,IAAAA,IAAA8D,EAAA5lB,OACA,MAAA+lB,GAAAR,KAEAM,GAAAD,EAAA9D,EACAgE,GAAAC,EAAAN,SAAAI,EACAjkB,UAAAkkB,IACAM,EAAAN,EAAAK,UAAAP,EAAA9D,EAAA,GAEA,OAAAsE,IAWAC,YAAA,SAAAT,EAAA9D,GACA,GAAA,GAAA8D,EAAA5lB,OACA,MAAA,EAGA,IACA6lB,GACAC,EAFAC,EAAA/mB,KAGAonB,EAAA,CAEAxkB,UAAAkgB,IACAA,EAAA,EAEA,IAAAA,IAAA8D,EAAA5lB,OACA,MAAA+lB,GAAAP,QAEA,IAAAK,GAAAD,EAAA9D,EACAgE,GAAAC,EAAAN,SAAAI,EACAjkB,UAAAkkB,IACAM,EAAAN,EAAAO,YAAAT,EAAA9D,EAAA,GAEA,OAAAsE,IAUAE,KAAA,SAAAV,GACA,MAAA,IAAAA,EAAA5lB,QAIAhB,KAAAmnB,UAAAP,GAAA,GAcAW,YAAA,SAAAX,GACA,GACAC,GACAC,EAFAC,EAAA/mB,KAGAonB,IACAxkB,UAAAgkB,IACAA,EAAA,GAEA,IAAAhkB,SAAAmkB,EACA,QAEAA,GAAAR,MAAA,GACAa,EAAAtkB,KAAA8jB,EAEA,KAAAC,IAAAE,GAAAN,SAAA,CACAK,EAAAC,EAAAN,SAAAI,EACAO,GAAAA,EAAA1kB,OAAAokB,EAAAS,YAAAX,EAAAC,IAEA,MAAAO,IAWAI,aAAA,SAAAZ,EAAA9D,GAGA,GACA+D,GACAC,EAFAC,EAAA/mB,IAGA,IAAA,GAAA4mB,EAAA5lB,OACA,MAAA4B,UAAAkgB,EACAiE,EAAAQ,YAAAX,KAKAhkB,UAAAkgB,IACAA,EAAA,EAEA+D,GAAAD,EAAA9D,EACAgE,GAAAC,EAAAN,SAAAI,EACA,OAAAjkB,UAAAkkB,KAGAhE,IAAA8D,EAAA5lB,OAAA,EACA8lB,EAAAS,YAAAX,GAEAE,EAAAU,aAAAZ,EAAA9D,EAAA,UHy8IM2E,GAAG,SAAS/mB,EAAQjB,EAAOD,IIrtJjC,SAAAkoB,GACA,gBAAAloB,IAAA,gBAAAC,GACAioB,EAAA,WAAA,IAAA,MAAAhnB,GAAA,cAAA,MAAAR,GAAA,MAAAL,QAAA+f,gBACA,kBAAAlgB,IAAAA,EAAAC,IACAD,GAAA,wBAAAgoB,GAEAA,EAAA9H,cACA,SAAAA,GACA,YASA,SAAA+H,GAAAC,GACA,GAAAC,GAAAD,EAAAE,mBACAF,GAAAnH,MAAAsH,mBAAAC,UAAAnoB,OAAAooB,YAAAC,WAAAroB,OAAAsoB,YACAC,MAAAP,EAAArG,MAAA4G,MAAAC,OAAAR,EAAArG,MAAA6G,OACAR,GAAArG,MAAA4G,MAAA,EACAP,GAAArG,MAAA6G,OAAA,MACAR,GAAAS,WAAA,wBACAC,UAAAC,gBAAAhH,MAAAiH,SAAA,QACAb,GAAAc,UAGA,QAAAC,GAAAf,GACA,GAAAC,GAAAD,EAAAE,mBACAD,GAAAS,UAAAT,EAAAS,UAAAzmB,QAAA,6BAAA,GACA0mB,UAAAC,gBAAAhH,MAAAiH,SAAA,EACA,IAAAG,GAAAhB,EAAAnH,MAAAsH,iBACAF,GAAArG,MAAA4G,MAAAQ,EAAAR,KAAAP,GAAArG,MAAA6G,OAAAO,EAAAP,MACAxoB,QAAAgpB,SAAAD,EAAAV,WAAAU,EAAAZ,UACAJ,GAAAc,UAzBA9I,EAAAkJ,aAAA,cAAA,EAAA,SAAAlB,EAAA3lB,EAAA8mB,GACAA,GAAAnJ,EAAAoJ,OAAAD,GAAA,IACAA,IAAA9mB,IACAA,EAAA0lB,EAAAC,GACAe,EAAAf,UJkvJGxB,WAAaxjB,SAAYqmB,GAAG,SAASvoB,EAAQjB,EAAOD,IKhwJvD,SAAAkoB,GACA,gBAAAloB,IAAA,gBAAAC,GACAioB,EAAA,WAAA,IAAA,MAAAhnB,GAAA,cAAA,MAAAR,GAAA,MAAAL,QAAA+f,gBACA,kBAAAlgB,IAAAA,EAAAC,IACAD,GAAA,wBAAAgoB,GAEAA,EAAA9H,cACA,SAAAA,GAQA,QAAAsJ,GAAAtB,EAAAuB,EAAAC,EAAAtJ,GACA,GAAAuJ,GAAAzB,EAAA0B,cAAAH,EAAAE,MAAAvG,EAAAqG,EAAAI,GAAA,EACAzI,EAAAgC,GAAA,GAAA0G,EAAAH,EAAA3H,KAAA+H,OAAA3G,KAAA0G,EAAAH,EAAA3H,KAAA+H,SAAA3G,GACA,KAAAhC,EAAA,MAAA,KACA,IAAA4I,GAAA,KAAA5I,EAAA2I,OAAA,GAAA,IACA,IAAAL,GAAAM,EAAA,IAAA5G,GAAAqG,EAAAI,IAAA,MAAA,KACA,IAAA/H,GAAAoG,EAAA+B,eAAAC,EAAAT,EAAAE,KAAAvG,EAAA,IAEA+G,EAAAC,EAAAlC,EAAAgC,EAAAT,EAAAE,KAAAvG,GAAA4G,EAAA,EAAA,EAAA,IAAAA,EAAAlI,GAAA,KAAA1B,EACA,OAAA,OAAA+J,EAAA,MACAE,KAAAH,EAAAT,EAAAE,KAAAvG,GAAAkH,GAAAH,GAAAA,EAAA/G,IACAhC,MAAA+I,GAAAA,EAAAN,IAAAzI,EAAA2I,OAAA,GAAAQ,QAAAP,EAAA,GAUA,QAAAI,GAAAlC,EAAAuB,EAAAO,EAAAlI,EAAA1B,GAQA,IAAA,GAPAoK,GAAApK,GAAAA,EAAAqK,mBAAA,IACAC,EAAAtK,GAAAA,EAAAsK,cAAA,IAEAhH,KACAiH,EAAAvK,GAAAA,EAAAwK,aAAAxK,EAAAwK,aAAA,YACAC,EAAAb,EAAA,EAAAc,KAAAC,IAAAtB,EAAAE,KAAAe,EAAAxC,EAAA8C,WAAA,GACAF,KAAAG,IAAA/C,EAAAgD,YAAA,EAAAzB,EAAAE,KAAAe,GACAS,EAAA1B,EAAAE,KAAAwB,GAAAN,EAAAM,GAAAnB,EAAA,CACA,GAAAL,GAAAzB,EAAAkD,QAAAD,EACA,IAAAxB,EAAA,CACA,GAAAvG,GAAA4G,EAAA,EAAA,EAAAL,EAAAroB,OAAA,EAAA+pB,EAAArB,EAAA,EAAAL,EAAAroB,SACA,MAAAqoB,EAAAroB,OAAAkpB,GAAA,CACAW,GAAA1B,EAAAE,OAAAvG,EAAAqG,EAAAI,IAAAG,EAAA,EAAA,EAAA,GACA,MAAA5G,GAAAiI,EAAAjI,GAAA4G,EAAA,CACA,GAAAH,GAAAF,EAAAI,OAAA3G,EACA,IAAAuH,EAAA7nB,KAAA+mB,KAAA3mB,SAAA4e,GAAAoG,EAAA+B,eAAAC,EAAAiB,EAAA/H,EAAA,KAAAtB,GAAA,CACA,GAAAV,GAAA0I,EAAAD,EACA,IAAA,KAAAzI,EAAA2I,OAAA,IAAAC,EAAA,EAAAtG,EAAAtgB,KAAAymB,OACA,CAAA,IAAAnG,EAAApiB,OAAA,OAAA8hB,IAAA8G,EAAAiB,EAAA/H,GAAAyG,GAAAA,EACAnG,GAAAC,WAIA,MAAAwH,GAAAnB,IAAAA,EAAA,EAAA9B,EAAA8C,WAAA9C,EAAAgD,cAAA,KAGA,QAAAI,GAAApD,EAAAqD,EAAAnL,GAIA,IAAA,GAFAoL,GAAAtD,EAAAnH,MAAAuK,cAAAG,wBAAA,IACAC,KAAAC,EAAAzD,EAAA0D,iBACA3qB,EAAA,EAAAA,EAAA0qB,EAAArqB,OAAAL,IAAA,CACA,GAAAmgB,GAAAuK,EAAA1qB,GAAA4qB,SAAArC,EAAAtB,EAAAyD,EAAA1qB,GAAA6qB,MAAA,EAAA1L,EACA,IAAAgB,GAAA8G,EAAAkD,QAAAhK,EAAAiJ,KAAAV,MAAAroB,QAAAkqB,EAAA,CACA,GAAA1J,GAAAV,EAAAA,MAAA,6BAAA,+BACAsK,GAAAtoB,KAAA8kB,EAAA6D,SAAA3K,EAAAiJ,KAAAH,EAAA9I,EAAAiJ,KAAAV,KAAAvI,EAAAiJ,KAAAR,GAAA,IAAAjB,UAAA9G,IACAV,GAAAkJ,IAAApC,EAAAkD,QAAAhK,EAAAkJ,GAAAX,MAAAroB,QAAAkqB,GACAE,EAAAtoB,KAAA8kB,EAAA6D,SAAA3K,EAAAkJ,GAAAJ,EAAA9I,EAAAkJ,GAAAX,KAAAvI,EAAAkJ,GAAAT,GAAA,IAAAjB,UAAA9G,MAIA,GAAA4J,EAAApqB,OAAA,CAGA0qB,GAAA9D,EAAAnH,MAAAkL,SAAA/D,EAAAgE,OAEA,IAAApW,GAAA,WACAoS,EAAAiE,UAAA,WACA,IAAA,GAAAlrB,GAAA,EAAAA,EAAAyqB,EAAApqB,OAAAL,IAAAyqB,EAAAzqB,GAAA6U,UAGA,KAAAyV,EACA,MAAAzV,EADAsW,YAAAtW,EAAA,MAMA,QAAAuW,GAAAnE,GACAA,EAAAiE,UAAA,WACA,GAAAG,EAAA,CAAAA,GAAAA,GAAA,KACAA,EAAAhB,EAAApD,GAAA,EAAAA,EAAAnH,MAAAuK,iBAxFA,GAAAU,GAAA,UAAAlpB,KAAAypB,UAAAC,aACA,MAAA3D,SAAA4D,cAAA5D,SAAA4D,aAAA,GAEAvC,EAAAhK,EAAAgK,IAEAJ,GAAA9kB,IAAA,KAAArB,IAAA,KAAAsB,IAAA,KAAAf,IAAA,KAAAC,IAAA,KAAAQ,IAAA,MA+EA2nB,EAAA,IAQApM,GAAAkJ,aAAA,iBAAA,EAAA,SAAAlB,EAAA3lB,EAAA8mB,GACAA,GAAAA,GAAAnJ,EAAAoJ,MACApB,EAAAwE,IAAA,iBAAAL,EACA,IAAA9pB,EAAA,CACA2lB,EAAAnH,MAAAuK,cAAA,gBAAA/oB,GAAAA,IACA2lB,GAAAyE,GAAA,iBAAAN,KAIAnM,GAAA0M,gBAAA,gBAAA,WAAAtB,EAAAhrB,MAAA,IACA4f,GAAA0M,gBAAA,sBAAA,SAAAxJ,EAAAsG,EAAAtJ,GACA,MAAAoJ,GAAAlpB,KAAA8iB,EAAAsG,EAAAtJ,IAEAF,GAAA0M,gBAAA,iBAAA,SAAAxJ,EAAA4G,EAAAlI,EAAA1B,GACA,MAAAgK,GAAA9pB,KAAA8iB,EAAA4G,EAAAlI,EAAA1B,SLwwJGsG,WAAaxjB,SAAY2pB,GAAG,SAAS7rB,EAAQjB,EAAOD,IM13JvD,SAAAkoB,GACA,gBAAAloB,IAAA,gBAAAC,GACAioB,EAAA,WAAA,IAAA,MAAAhnB,GAAA,cAAA,MAAAR,GAAA,MAAAL,QAAA+f,gBACA,kBAAAlgB,IAAAA,EAAAC,IACAD,GAAA,wBAAAgoB,GAEAA,EAAA9H,cACA,SAAAA,GACA,YAEAA,GAAA4M,eAAA,OAAA,QAAA,SAAA5E,EAAAjG,GAIA,QAAA8K,GAAAC,GACA,IAAA,GAAAC,GAAAhL,EAAA4H,GAAAqD,EAAA,IAAA,CACA,GAAA/C,GAAA8C,GAAA,KAAAE,EAAAC,YAAAJ,EAAAC,EAAA,EACA,IAAA9C,MAAA,CAMA,GAAA,GAAA+C,GAAA/C,EAAAlI,EAAA4H,GAAA,KACAwD,GAAAnF,EAAA+B,eAAA/J,EAAAgK,IAAAP,EAAAQ,EAAA,GACA,KAAA,oBAAArnB,KAAAuqB,GAAA,MAAAlD,GAAA,CACA8C,GAAA9C,EAAA,MATA,CACA,GAAA,GAAA+C,EAAA,KACAA,GAAA,CACAD,GAAAE,EAAA7rB,SATA,GACA+rB,GADA1D,EAAA1H,EAAA0H,KAAAwD,EAAAjF,EAAAkD,QAAAzB,GAmBA2D,EAAA,IAAAC,EAAA,IAAAC,EAAAT,EAAA,IACA,IAAA,MAAAS,EAAA,CACAF,EAAA,IAAAC,EAAA,GACAC,GAAAT,EAAA,KAGA,GAAA,MAAAS,EAAA,CACA,GAAAnC,GAAAoC,EAAAC,EAAA,EAAA1C,EAAA9C,EAAA8C,UACA2C,GAAA,IAAA,GAAA1sB,GAAA0oB,EAAA1oB,GAAA+pB,IAAA/pB,EAEA,IADA,GAAA+gB,GAAAkG,EAAAkD,QAAAnqB,GAAAmiB,EAAAniB,GAAA0oB,EAAA6D,EAAA,IACA,CACA,GAAAI,GAAA5L,EAAAiC,QAAAqJ,EAAAlK,GAAAyK,EAAA7L,EAAAiC,QAAAsJ,EAAAnK,EACAwK,GAAA,IAAAA,EAAA5L,EAAA1gB,OACAusB,GAAA,IAAAA,EAAA7L,EAAA1gB,OACA8hB,GAAA0H,KAAAC,IAAA6C,EAAAC,EACA,IAAAzK,GAAApB,EAAA1gB,OAAA,KACA,IAAA4mB,EAAA+B,eAAA/J,EAAAgK,IAAAjpB,EAAAmiB,EAAA,KAAAiK,EACA,GAAAjK,GAAAwK,IAAAF,MACA,OAAAA,EAAA,CAAArC,EAAApqB,CAAAwsB,GAAArK,CAAA,MAAAuK,KAEAvK,EAGA,GAAA,MAAAiI,IAAA1B,GAAA0B,GAAAoC,GAAAD,GACA,OAAAnD,KAAAnK,EAAAgK,IAAAP,EAAA6D,GACAlD,GAAApK,EAAAgK,IAAAmB,EAAAoC,MAGAvN,GAAA4M,eAAA,OAAA,SAAA,SAAA5E,EAAAjG,GACA,QAAA6L,GAAAnE,GACA,GAAAA,EAAAzB,EAAAgD,aAAAvB,EAAAzB,EAAA8C,WAAA,MAAA,KACA,IAAA/I,GAAAiG,EAAA6F,WAAA7N,EAAAgK,IAAAP,EAAA,GACA,MAAA7mB,KAAAmf,EAAA3D,UAAA2D,EAAAiG,EAAA6F,WAAA7N,EAAAgK,IAAAP,EAAA1H,EAAAoJ,IAAA,IACA,IAAA,WAAApJ,EAAA+L,MAAA,UAAA/L,EAAA3D,OAAA,MAAA,KAEA,KAAA,GAAArd,GAAA0oB,EAAAnpB,EAAAsqB,KAAAC,IAAA7C,EAAA8C,WAAArB,EAAA,IAAA1oB,GAAAT,IAAAS,EAAA,CACA,GAAA+gB,GAAAkG,EAAAkD,QAAAnqB,GAAAgtB,EAAAjM,EAAAiC,QAAA,IACA,IAAAgK,MAAA,OAAAT,QAAAvL,EAAAoJ,IAAAA,IAAAnL,EAAAgK,IAAAjpB,EAAAgtB,KAIA,GAAAC,GAAAC,EAAAlM,EAAA0H,KAAAyE,EAAAN,EAAAK,EACA,KAAAC,GAAAN,EAAAK,EAAA,KAAAD,EAAAJ,EAAAK,EAAA,KAAAD,EAAA7C,IAAA1B,MAAAwE,EAAA,EACA,MAAA,KACA,KAAA,GAAA9C,GAAA+C,EAAA/C,MAAA,CACA,GAAAgD,GAAAP,EAAAzC,EAAA1B,KAAA,EACA,IAAA,MAAA0E,EAAA,KACAhD,GAAAgD,EAAAhD,IAEA,OAAAhB,KAAAnC,EAAAoG,QAAApO,EAAAgK,IAAAiE,EAAAC,EAAAZ,QAAA,IAAAlD,GAAAe,IAGAnL,GAAA4M,eAAA,OAAA,UAAA,SAAA5E,EAAAjG,GACA,QAAAsM,GAAA5E,GACA,GAAAA,EAAAzB,EAAAgD,aAAAvB,EAAAzB,EAAA8C,WAAA,MAAA,KACA,IAAA/I,GAAAiG,EAAA6F,WAAA7N,EAAAgK,IAAAP,EAAA,GACA,MAAA7mB,KAAAmf,EAAA3D,UAAA2D,EAAAiG,EAAA6F,WAAA7N,EAAAgK,IAAAP,EAAA1H,EAAAoJ,IAAA,IACA,OAAA,QAAApJ,EAAA+L,MAAA,YAAA/L,EAAA3D,OAAAkQ,MAAA,EAAA,GAAAvM,EAAAA,MAAA,EAAA,OAGA,GAAAkM,GAAAlM,EAAA0H,KAAAyE,EAAAG,EAAAJ,EACA,IAAA,MAAAC,GAAA,MAAAG,EAAAJ,EAAA,GAAA,MAAA,KACA,KAAA,GAAA9C,GAAA8C,IAAA,CACA,GAAAE,GAAAE,EAAAlD,EAAA,EACA,IAAA,MAAAgD,EAAA,QACAhD,EAEA,OAAAhB,KAAAnK,EAAAgK,IAAAiE,EAAAC,EAAA,GACA9D,GAAApC,EAAAoG,QAAApO,EAAAgK,IAAAmB,WNm4JG3E,WAAaxjB,SAAYurB,GAAG,SAASztB,EAAQjB,EAAOD,IOr+JvD,SAAAkoB,GACA,gBAAAloB,IAAA,gBAAAC,GACAioB,EAAA,WAAA,IAAA,MAAAhnB,GAAA,cAAA,MAAAR,GAAA,MAAAL,QAAA+f,gBACA,kBAAAlgB,IAAAA,EAAAC,IACAD,GAAA,wBAAAgoB,GAEAA,EAAA9H,cACA,SAAAA,GACA,YAEA,SAAAwO,GAAAxG,EAAA9E,EAAAuL,EAAAC,GAUA,QAAAC,GAAAC,GACA,GAAAC,GAAAC,EAAA9G,EAAA9E,EACA,KAAA2L,GAAAA,EAAAzE,GAAAX,KAAAoF,EAAA1E,KAAAV,KAAAsF,EAAA,MAAA,KAEA,KAAA,GADAvD,GAAAxD,EAAAgH,YAAAH,EAAA1E,MACAppB,EAAA,EAAAA,EAAAyqB,EAAApqB,SAAAL,EACA,GAAAyqB,EAAAzqB,GAAAkuB,UAAA,SAAAP,EAAA,CACA,IAAAE,EAAA,MAAA,KACAC,GAAAK,SAAA,CACA1D,GAAAzqB,GAAA6U,QAGA,MAAAiZ,GApBA,GAAAJ,GAAAA,EAAAttB,KAAA,CACA,GAAA2tB,GAAAL,CACAA,GAAA,SAEA,IAAAK,GAAAK,EAAAnH,EAAAyG,EAAA,cAEA,iBAAAvL,KAAAA,EAAAlD,EAAAgK,IAAA9G,EAAA,GACA,IAAA6L,GAAAI,EAAAnH,EAAAyG,EAAA,eAgBAI,EAAAF,GAAA,EACA,IAAAQ,EAAAnH,EAAAyG,EAAA,UAAA,MAAAI,GAAA3L,EAAAuG,KAAAzB,EAAAgD,aAAA,CACA9H,EAAAlD,EAAAgK,IAAA9G,EAAAuG,KAAA,EAAA,EACAoF,GAAAF,GAAA,GAEA,GAAAE,IAAAA,EAAAK,SAAA,WAAAR,EAAA,CAEA,GAAAU,GAAAC,EAAArH,EAAAyG,EACAzO,GAAAyM,GAAA2C,EAAA,YAAA,SAAA9uB,GACAgvB,EAAA1Z,OACAoK,GAAAuP,iBAAAjvB,IAEA,IAAAgvB,GAAAtH,EAAA6D,SAAAgD,EAAA1E,KAAA0E,EAAAzE,IACAoF,aAAAJ,EACAK,aAAAN,EAAAnH,EAAAyG,EAAA,gBACAQ,UAAA,GAEAK,GAAA7C,GAAA,QAAA,SAAAtC,EAAAC,GACApK,EAAA0P,OAAA1H,EAAA,SAAAA,EAAAmC,EAAAC,IAEApK,GAAA0P,OAAA1H,EAAA,OAAAA,EAAA6G,EAAA1E,KAAA0E,EAAAzE,KAGA,QAAAiF,GAAArH,EAAAyG,GACA,GAAAkB,GAAAR,EAAAnH,EAAAyG,EAAA,SACA,IAAA,gBAAAkB,GAAA,CACA,GAAA7N,GAAA6G,SAAAiH,eAAAD,EACAA,GAAAhH,SAAAkH,cAAA,OACAF,GAAAG,YAAAhO,EACA6N,GAAAjH,UAAA,wBAEA,MAAAiH,GAqEA,QAAAR,GAAAnH,EAAAyG,EAAAtM,GACA,GAAAsM,GAAAzrB,SAAAyrB,EAAAtM,GACA,MAAAsM,GAAAtM,EACA,IAAA4N,GAAA/H,EAAAyG,QAAAuB,WACA,OAAAD,IAAA/sB,SAAA+sB,EAAA5N,GACA4N,EAAA5N,GACA8N,EAAA9N,GAvEAnC,EAAAkQ,gBAAA,SAAAC,EAAAR,GACA,MAAA,UAAA3H,EAAA9E,GAAAsL,EAAAxG,EAAA9E,GAAAiN,YAAAA,EAAAR,OAAAA,KAIA3P,GAAA0M,gBAAA,WAAA,SAAAxJ,EAAAuL,EAAAC,GACAF,EAAApuB,KAAA8iB,EAAAuL,EAAAC,IAGA1O,GAAA0M,gBAAA,WAAA,SAAAxJ,GAEA,IAAA,GADAsI,GAAAprB,KAAA4uB,YAAA9L,GACAniB,EAAA,EAAAA,EAAAyqB,EAAApqB,SAAAL,EACA,GAAAyqB,EAAAzqB,GAAAkuB,SAAA,OAAA,GAGAjP,GAAAoQ,SAAAC,WAAA,SAAArI,GACAA,EAAAsI,SAAAtI,EAAAuI,aAEAvQ,GAAAoQ,SAAAI,KAAA,SAAAxI,GACAA,EAAAsI,SAAAtI,EAAAuI,YAAA,KAAA,QAEAvQ,GAAAoQ,SAAAK,OAAA,SAAAzI,GACAA,EAAAsI,SAAAtI,EAAAuI,YAAA,KAAA,UAEAvQ,GAAAoQ,SAAAM,QAAA,SAAA1I,GACAA,EAAAiE,UAAA,WACA,IAAA,GAAAlrB,GAAAinB,EAAAgD,YAAA1qB,EAAA0nB,EAAA8C,WAAA/pB,GAAAT,EAAAS,IACAinB,EAAAsI,SAAAtQ,EAAAgK,IAAAjpB,EAAA,GAAA,KAAA,UAGAif,GAAAoQ,SAAAO,UAAA,SAAA3I,GACAA,EAAAiE,UAAA,WACA,IAAA,GAAAlrB,GAAAinB,EAAAgD,YAAA1qB,EAAA0nB,EAAA8C,WAAA/pB,GAAAT,EAAAS,IACAinB,EAAAsI,SAAAtQ,EAAAgK,IAAAjpB,EAAA,GAAA,KAAA,YAIAif,GAAA4M,eAAA,OAAA,UAAA,WACA,GAAAgE,GAAAC,MAAA/J,UAAAwH,MAAAntB,KAAA2vB,UAAA,EACA,OAAA,UAAA9I,EAAAjG,GACA,IAAA,GAAAhhB,GAAA,EAAAA,EAAA6vB,EAAAxvB,SAAAL,EAAA,CACA,GAAAkpB,GAAA2G,EAAA7vB,GAAAinB,EAAAjG,EACA,IAAAkI,EAAA,MAAAA,MAKAjK,GAAA4M,eAAA,OAAA,OAAA,SAAA5E,EAAAjG,GAEA,IAAA,GADAgP,GAAA/I,EAAAgJ,WAAAjP,EAAA,QACAhhB,EAAA,EAAAA,EAAAgwB,EAAA3vB,OAAAL,IAAA,CACA,GAAA0B,GAAAsuB,EAAAhwB,GAAAinB,EAAAjG,EACA,IAAAtf,EAAA,MAAAA,KAIA,IAAAwtB,IACAE,YAAAnQ,EAAAwQ,KAAAS,KACAtB,OAAA,IACAuB,YAAA,EACAC,QAAA,EACA1B,cAAA,EAGAzP,GAAAkJ,aAAA,cAAA,KAWAlJ,GAAA0M,gBAAA,aAAA,SAAA+B,EAAAtM,GACA,MAAAgN,GAAA/uB,KAAAquB,EAAAtM,SP6+JGqE,WAAaxjB,SAAYouB,GAAG,SAAStwB,EAAQjB,EAAOD,IQ7nKvD,SAAAkoB,GACA,gBAAAloB,IAAA,gBAAAC,GACAioB,EAAA,WAAA,IAAA,MAAAhnB,GAAA,cAAA,MAAAR,GAAA,MAAAL,QAAA+f,eAAAlf,EAAA,eACA,kBAAAhB,IAAAA,EAAAC,IACAD,GAAA,uBAAA,cAAAgoB,GAEAA,EAAA9H,cACA,SAAAA,GACA,YA2BA,SAAAqR,GAAA5C,GACAruB,KAAAquB,QAAAA,CACAruB,MAAA+pB,KAAA/pB,KAAAgqB,GAAA,EAGA,QAAAkH,GAAAC,GACAA,KAAA,IAAAA,KACA,OAAAA,EAAAC,SAAAD,EAAAC,OAAA,wBACA,OAAAD,EAAAE,gBAAAF,EAAAE,cAAA,6BACA,OAAAF,EAAAG,kBAAAH,EAAAG,gBAAA,+BACA,OAAAH,GAGA,QAAAI,GAAA3J,EAAAyB,GAEA,IAAA,GADA+B,GAAAxD,EAAA4J,UAAA5H,EAAAP,EAAA,GAAAO,EAAAP,EAAA,EAAA,IACA1oB,EAAA,EAAAA,EAAAyqB,EAAApqB,SAAAL,EACA,GAAAyqB,EAAAzqB,GAAAkuB,UAAAzD,EAAAzqB,GAAA2mB,OAAAyC,KAAAV,MAAAA,EAAA,MAAA+B,GAAAzqB,GAGA,QAAA8wB,GAAAC,GACA,GAAA,gBAAAA,GAAA,CACA,GAAAC,GAAApJ,SAAAkH,cAAA,MACAkC,GAAArJ,UAAAoJ,EAAA,iCACA,OAAAC,GAEA,MAAAD,GAAAE,WAAA,GAIA,QAAAC,GAAAjK,EAAAmC,EAAAC,GACA,GAAAmH,GAAAvJ,EAAAnH,MAAAqR,WAAAzD,QAAAhsB,EAAA0nB,EACA4E,EAAA/G,EAAAmK,WAAAZ,EAAA,eACAa,EAAApK,EAAAmK,WAAAZ,EAAA,cACAvJ,GAAAqK,SAAAlI,EAAAC,EAAA,SAAAX,GACA,GAAA6I,GAAA,IACA,IAAAX,EAAA3J,EAAAvlB,GACA6vB,EAAAT,EAAAN,EAAAG,qBACA,CACA,GAAAxO,GAAA8G,EAAAvnB,EAAA,GACAosB,EAAAuD,GAAAA,EAAApK,EAAA9E,EACA2L,IAAAA,EAAAzE,GAAAX,KAAAoF,EAAA1E,KAAAV,MAAAsF,IACAuD,EAAAT,EAAAN,EAAAE,gBAEAzJ,EAAAuK,gBAAA9I,EAAA8H,EAAAC,OAAAc,KACA7vB,IAIA,QAAA+vB,GAAAxK,GACA,GAAAyK,GAAAzK,EAAA0K,cAAA7R,EAAAmH,EAAAnH,MAAAqR,UACA,IAAArR,EAAA,CACAmH,EAAAiE,UAAA,WACAgG,EAAAjK,EAAAyK,EAAAtI,KAAAsI,EAAArI,KAEAvJ,GAAAsJ,KAAAsI,EAAAtI,IAAAtJ,GAAAuJ,GAAAqI,EAAArI,IAGA,QAAAuI,GAAA3K,EAAAyB,EAAA+H,GACA,GAAA3Q,GAAAmH,EAAAnH,MAAAqR,UACA,IAAArR,EAAA,CACA,GAAA0Q,GAAA1Q,EAAA4N,OACA,IAAA+C,GAAAD,EAAAC,OAAA,CACA,GAAAoB,GAAAjB,EAAA3J,EAAAyB,EACAmJ,GAAAA,EAAAhd,QACAoS,EAAAsI,SAAAtG,EAAAP,EAAA,GAAA8H,EAAApB,eAGA,QAAA0C,GAAA7K,GACA,GAAAnH,GAAAmH,EAAAnH,MAAAqR,UACA,IAAArR,EAAA,CACA,GAAA0Q,GAAA1Q,EAAA4N,OACA5N,GAAAsJ,KAAAtJ,EAAAuJ,GAAA,CACA0I,cAAAjS,EAAAkS,aACAlS,GAAAkS,aAAA7G,WAAA,WAAAsG,EAAAxK,IAAAuJ,EAAAyB,sBAAA,MAGA,QAAAC,GAAAjL,GACA,GAAAnH,GAAAmH,EAAAnH,MAAAqR,UACA,IAAArR,EAAA,CACA,GAAA0Q,GAAA1Q,EAAA4N,OACAqE,cAAAjS,EAAAkS,aACAlS,GAAAkS,aAAA7G,WAAA,WACA,GAAAuG,GAAAzK,EAAA0K,aACA7R,GAAAsJ,MAAAtJ,EAAAuJ,IAAAqI,EAAAtI,KAAAtJ,EAAAuJ,GAAA,IAAAvJ,EAAAsJ,KAAAsI,EAAArI,GAAA,GACAoI,EAAAxK,GAEAA,EAAAiE,UAAA,WACA,GAAAwG,EAAAtI,KAAAtJ,EAAAsJ,KAAA,CACA8H,EAAAjK,EAAAyK,EAAAtI,KAAAtJ,EAAAsJ,KACAtJ,GAAAsJ,KAAAsI,EAAAtI,KAEA,GAAAsI,EAAArI,GAAAvJ,EAAAuJ,GAAA,CACA6H,EAAAjK,EAAAnH,EAAAuJ,GAAAqI,EAAArI,GACAvJ,GAAAuJ,GAAAqI,EAAArI,OAIAmH,EAAA2B,wBAAA,MAGA,QAAAC,GAAAnL,EAAAmC,GACA,GAAAtJ,GAAAmH,EAAAnH,MAAAqR,UACA,IAAArR,EAAA,CACA,GAAA4I,GAAAU,EAAAV,IACAA,IAAA5I,EAAAsJ,MAAAV,EAAA5I,EAAAuJ,IACA6H,EAAAjK,EAAAyB,EAAAA,EAAA,IAlIAzJ,EAAAkJ,aAAA,cAAA,EAAA,SAAAlB,EAAA3lB,EAAA8mB,GACA,GAAAA,GAAAA,GAAAnJ,EAAAoJ,KAAA,CACApB,EAAAoL,YAAApL,EAAAnH,MAAAqR,WAAAzD,QAAA+C,OACAxJ,GAAAnH,MAAAqR,WAAA,IACAlK,GAAAwE,IAAA,cAAAmG,EACA3K,GAAAwE,IAAA,SAAAqG,EACA7K,GAAAwE,IAAA,iBAAAyG,EACAjL,GAAAwE,IAAA,OAAA2G,EACAnL,GAAAwE,IAAA,SAAA2G,EACAnL,GAAAwE,IAAA,UAAAqG,GAEA,GAAAxwB,EAAA,CACA2lB,EAAAnH,MAAAqR,WAAA,GAAAb,GAAAC,EAAAjvB,GACAmwB,GAAAxK,EACAA,GAAAyE,GAAA,cAAAkG,EACA3K,GAAAyE,GAAA,SAAAoG,EACA7K,GAAAyE,GAAA,iBAAAwG,EACAjL,GAAAyE,GAAA,OAAA0G,EACAnL,GAAAyE,GAAA,SAAA0G,EACAnL,GAAAyE,GAAA,UAAAoG,KAIA,IAAA7I,GAAAhK,EAAAgK,QRgvKGqJ,aAAa,EAAE7M,WAAaxjB,SAAYswB,IAAI,SAASxyB,EAAQjB,EAAOD,ISjxKvE,SAAAkoB,GACA,gBAAAloB,IAAA,gBAAAC,GACAioB,EAAA,WAAA,IAAA,MAAAhnB,GAAA,cAAA,MAAAR,GAAA,MAAAL,QAAA+f,gBACA,kBAAAlgB,IAAAA,EAAAC,IACAD,GAAA,wBAAAgoB,GAEAA,EAAA9H,cACA,SAAAA,GACA,YAGA,SAAAuT,GAAA1yB,EAAA2yB,GAAA,MAAA3yB,GAAA4oB,KAAA+J,EAAA/J,MAAA5oB,EAAA8oB,GAAA6J,EAAA7J,GAMA,QAAA8J,GAAAzL,EAAAyB,EAAAE,EAAAkF,GACAzuB,KAAAqpB,KAAAA,CAAArpB,MAAAupB,GAAAA,CACAvpB,MAAA4nB,GAAAA,CAAA5nB,MAAA0hB,KAAAkG,EAAAkD,QAAAzB,EACArpB,MAAAyqB,IAAAgE,EAAAA,EAAA1E,KAAAnC,EAAAgD,WACA5qB,MAAA2qB,IAAA8D,EAAAA,EAAAzE,GAAA,EAAApC,EAAA8C,WAGA,QAAA4I,GAAAC,EAAAhK,GACA,GAAAmE,GAAA6F,EAAA3L,GAAA+B,eAAAC,EAAA2J,EAAAlK,KAAAE,GACA,OAAAmE,IAAA,UAAAlrB,KAAAkrB,GAGA,QAAA8F,GAAAD,GACA,KAAAA,EAAAlK,MAAAkK,EAAA5I,KAAA,CACA4I,EAAAhK,GAAA,CACAgK,GAAA7R,KAAA6R,EAAA3L,GAAAkD,UAAAyI,EAAAlK,KACA,QAAA,GAEA,QAAAoK,GAAAF,GACA,KAAAA,EAAAlK,MAAAkK,EAAA9I,KAAA,CACA8I,EAAA7R,KAAA6R,EAAA3L,GAAAkD,UAAAyI,EAAAlK,KACAkK,GAAAhK,GAAAgK,EAAA7R,KAAA1gB,MACA,QAAA,GAGA,QAAA0yB,GAAAH,GACA,OAAA,CACA,GAAAI,GAAAJ,EAAA7R,KAAAiC,QAAA,IAAA4P,EAAAhK,GACA,IAAAoK,MAAA,CAAA,GAAAH,EAAAD,GAAA,QAAA,QACA,GAAAD,EAAAC,EAAAI,EAAA,GAAA,CACA,GAAAC,GAAAL,EAAA7R,KAAAoL,YAAA,IAAA6G,GACAE,EAAAD,OAAA,KAAApxB,KAAA+wB,EAAA7R,KAAAwM,MAAA0F,EAAA,EAAAD,GACAJ,GAAAhK,GAAAoK,EAAA,CACA,OAAAE,GAAA,YAAA,UAJAN,EAAAhK,GAAAoK,EAAA,GAOA,QAAAG,GAAAP,GACA,OAAA,CACA,GAAAQ,GAAAR,EAAAhK,GAAAgK,EAAA7R,KAAAoL,YAAA,IAAAyG,EAAAhK,GAAA,KACA,IAAAwK,MAAA,CAAA,GAAAN,EAAAF,GAAA,QAAA,QACA,GAAAD,EAAAC,EAAAQ,EAAA,GAAA,CACAC,EAAAC,UAAAF,CACAR,GAAAhK,GAAAwK,CACA,IAAAjT,GAAAkT,EAAAE,KAAAX,EAAA7R,KACA,IAAAZ,GAAAA,EAAAqT,OAAAJ,EAAA,MAAAjT,OAJAyS,GAAAhK,GAAAwK,GAQA,QAAAK,GAAAb,GACA,OAAA,CACAS,EAAAC,UAAAV,EAAAhK,EACA,IAAAM,GAAAmK,EAAAE,KAAAX,EAAA7R,KACA,KAAAmI,EAAA,CAAA,GAAA2J,EAAAD,GAAA,QAAA,QACA,GAAAD,EAAAC,EAAA1J,EAAAsK,MAAA,GAAA,CACAZ,EAAAhK,GAAAM,EAAAsK,MAAAtK,EAAA,GAAA7oB,MACA,OAAA6oB,GAFA0J,EAAAhK,GAAAM,EAAAsK,MAAA,GAKA,QAAAE,GAAAd,GACA,OAAA,CACA,GAAAI,GAAAJ,EAAAhK,GAAAgK,EAAA7R,KAAAoL,YAAA,IAAAyG,EAAAhK,GAAA,KACA,IAAAoK,MAAA,CAAA,GAAAF,EAAAF,GAAA,QAAA,QACA,GAAAD,EAAAC,EAAAI,EAAA,GAAA,CACA,GAAAC,GAAAL,EAAA7R,KAAAoL,YAAA,IAAA6G,GACAE,EAAAD,OAAA,KAAApxB,KAAA+wB,EAAA7R,KAAAwM,MAAA0F,EAAA,EAAAD,GACAJ,GAAAhK,GAAAoK,EAAA,CACA,OAAAE,GAAA,YAAA,UAJAN,EAAAhK,GAAAoK,GAQA,QAAAW,GAAAf,EAAAgB,GAEA,IADA,GAAAnR,QACA,CACA,GAAA2H,GAAAgD,EAAAqG,EAAAb,GAAA1F,EAAA0F,EAAAlK,KAAA6D,EAAAqG,EAAAhK,IAAAwE,EAAAA,EAAA,GAAA/sB,OAAA,EACA,KAAA+sB,KAAAhD,EAAA2I,EAAAH,IAAA,MACA,IAAA,aAAAxI,EACA,GAAAgD,EAAA,GAAA,CACA,IAAA,GAAAptB,GAAAyiB,EAAApiB,OAAA,EAAAL,GAAA,IAAAA,EAAA,GAAAyiB,EAAAziB,IAAAotB,EAAA,GAAA,CACA3K,EAAApiB,OAAAL,CACA,OAEA,GAAAA,EAAA,KAAA4zB,GAAAA,GAAAxG,EAAA,IAAA,OACAwG,IAAAxG,EAAA,GACAhE,KAAAH,EAAAiE,EAAAX,GACAlD,GAAAJ,EAAA2J,EAAAlK,KAAAkK,EAAAhK,SAGAnG,GAAAtgB,KAAAirB,EAAA,KAIA,QAAAyG,GAAAjB,EAAAgB,GAEA,IADA,GAAAnR,QACA,CACA,GAAAwK,GAAAyG,EAAAd,EACA,KAAA3F,EAAA,MACA,IAAA,aAAAA,EAAA,CACA,GAAA6G,GAAAlB,EAAAlK,KAAA8D,EAAAoG,EAAAhK,GACA5H,EAAAmS,EAAAP,EACA,KAAA5R,EAAA,MACA,IAAAA,EAAA,GACAyB,EAAAtgB,KAAA6e,EAAA,QACA,CACA,IAAA,GAAAhhB,GAAAyiB,EAAApiB,OAAA,EAAAL,GAAA,IAAAA,EAAA,GAAAyiB,EAAAziB,IAAAghB,EAAA,GAAA,CACAyB,EAAApiB,OAAAL,CACA,OAEA,GAAAA,EAAA,KAAA4zB,GAAAA,GAAA5S,EAAA,IAAA,OACA4S,IAAA5S,EAAA,GACAoI,KAAAH,EAAA2J,EAAAlK,KAAAkK,EAAAhK,IACAS,GAAAJ,EAAA6K,EAAAtH,SAdA2G,GAAAP,IAvGA,GAAA3J,GAAAhK,EAAAgK,IAGA8K,EAAA,+KACAC,EAAAD,EAAA,8CACAV,EAAA,GAAAzO,QAAA,UAAAmP,EAAA,KAAAC,EAAA,MAAA,IAsHA/U,GAAA4M,eAAA,OAAA,MAAA,SAAA5E,EAAAjG,GAEA,IADA,GAAA4R,GAAA,GAAAF,GAAAzL,EAAAjG,EAAA0H,KAAA,KACA,CACA,GAAA0B,GAAA6J,EAAAR,EAAAb,EACA,KAAAqB,GAAArB,EAAAlK,MAAA1H,EAAA0H,QAAA0B,EAAA2I,EAAAH,IAAA,MACA,KAAAqB,EAAA,IAAA,aAAA7J,EAAA,CACA,GAAA8J,GAAAjL,EAAA2J,EAAAlK,KAAAkK,EAAAhK,IACAuL,EAAAR,EAAAf,EAAAqB,EAAA,GACA,OAAAE,KAAA/K,KAAA8K,EAAA7K,GAAA8K,EAAA/K,SAIAnK,GAAAmV,gBAAA,SAAAnN,EAAA9E,EAAA2L,GACA,GAAA8E,GAAA,GAAAF,GAAAzL,EAAA9E,EAAAuG,KAAAvG,EAAAyG,GAAAkF,EACA,IAAA8E,EAAA7R,KAAAiC,QAAA,UAAA4P,EAAA7R,KAAAiC,QAAA,SAAA,CACA,GAAAoH,GAAA2I,EAAAH,GAAAvJ,EAAAe,GAAAnB,EAAA2J,EAAAlK,KAAAkK,EAAAhK,IACA5H,EAAAoJ,GAAA+I,EAAAP,EACA,IAAAxI,GAAApJ,KAAAwR,EAAAI,EAAAzQ,GAAA,GAAA,CACA,GAAAkS,IAAAjL,KAAAH,EAAA2J,EAAAlK,KAAAkK,EAAAhK,IAAAS,GAAAA,EAAAuK,IAAA5S,EAAA,GACA,IAAA,aAAAoJ,EAAA,OAAAkK,KAAAD,EAAAE,MAAA,KAAAvI,GAAA,OAEA,IAAAhL,EAAA,GACA,OAAAsT,KAAAT,EAAAjB,EAAA5R,EAAA,IAAAuT,MAAAF,EAAArI,GAAA,QAEA4G,GAAA,GAAAF,GAAAzL,EAAAoC,EAAAX,KAAAW,EAAAT,GAAAkF,EACA,QAAAwG,KAAAD,EAAAE,MAAAZ,EAAAf,EAAA5R,EAAA,IAAAgL,GAAA,UAIA/M,GAAAuV,iBAAA,SAAAvN,EAAA9E,EAAA2L,GAEA,IADA,GAAA8E,GAAA,GAAAF,GAAAzL,EAAA9E,EAAAuG,KAAAvG,EAAAyG,GAAAkF,KACA,CACA,GAAAwG,GAAAT,EAAAjB,EACA,KAAA0B,EAAA,KACA,IAAAhL,GAAA,GAAAoJ,GAAAzL,EAAA9E,EAAAuG,KAAAvG,EAAAyG,GAAAkF,GACAyG,EAAAZ,EAAArK,EAAAgL,EAAAV,IACA,IAAAW,EAAA,OAAAD,KAAAA,EAAAC,MAAAA,IAKAtV,GAAAwV,kBAAA,SAAAxN,EAAA9E,EAAAf,EAAAgJ,GACA,GAAAwI,GAAA,GAAAF,GAAAzL,EAAA9E,EAAAuG,KAAAvG,EAAAyG,GAAAwB,GAAAhB,KAAA,EAAAC,GAAAe,GAAA,KACA,OAAAuJ,GAAAf,EAAAxR,QTyxKGqE,WAAaxjB,SAAYyyB,IAAI,SAAS30B,EAAQjB,EAAOD,IUz8KxD,SAAAkoB,GACA,gBAAAloB,IAAA,gBAAAC,GACAioB,EAAA,WAAA,IAAA,MAAAhnB,GAAA,cAAA,MAAAR,GAAA,MAAAL,QAAA+f,gBACA,kBAAAlgB,IAAAA,EAAAC,IACAD,GAAA,wBAAAgoB,GAEAA,EAAA9H,cACA,SAAAA,GACA,YAqCA,SAAA0V,GAAA1N,EAAAyG,GACAruB,KAAA4nB,GAAAA,CACA5nB,MAAAquB,QAAAA,CACAruB,MAAAuvB,OAAA,IACAvvB,MAAAu1B,SAAA,CACAv1B,MAAAw1B,KAAA,CACAx1B,MAAA60B,SAAA70B,KAAA4nB,GAAAuI,UAAA,QACAnwB,MAAAy1B,SAAAz1B,KAAA4nB,GAAAkD,QAAA9qB,KAAA60B,SAAAxL,MAAAroB,OAAAhB,KAAA4nB,GAAA8N,eAAA10B,MAEA,IAAAjB,GAAAC,IACA4nB,GAAAyE,GAAA,iBAAArsB,KAAA21B,aAAA,WAAA51B,EAAA61B,mBA+EA,QAAAC,GAAA9M,EAAA+M,GACA,GAAAC,GAAAnW,EAAAoW,OAAAF,EAAA/L,KAAAhB,EAAAgB,KACA,OAAAgM,GAAA,GAAAhN,EAAAiB,GAAAT,GAAAR,EAAAgB,KAAAR,IAAAuM,EAAA9L,GAAAT,GAAAuM,EAAA/L,KAAAR,GAGA,QAAA2H,GAAAtJ,EAAA9E,EAAAuL,GACA,GAAA4H,GAAArO,EAAAyG,QAAA6H,YACAC,IACA,KAAA,GAAAC,KAAAvG,GAAAsG,EAAAC,GAAAvG,EAAAuG,EACA,IAAAH,EAAA,IAAA,GAAAG,KAAAH,GACArzB,SAAAqzB,EAAAG,KAAAD,EAAAC,GAAAH,EAAAG,GACA,IAAA/H,EAAA,IAAA,GAAA+H,KAAA/H,GACAzrB,SAAAyrB,EAAA+H,KAAAD,EAAAC,GAAA/H,EAAA+H,GACAD,GAAAE,KAAAC,UAAAH,EAAAE,KAAAF,EAAAE,KAAAC,QAAA1O,EAAA9E,GACA,OAAAqT,GAGA,QAAAI,GAAAC,GACA,MAAA,gBAAAA,GAAAA,EACAA,EAAA9U,KAGA,QAAA+U,GAAAD,EAAAE,GAcA,QAAAC,GAAAx0B,EAAAF,GACA,GAAA20B,EAEAA,GADA,gBAAA30B,GACA,SAAA2lB,GAAA,MAAA3lB,GAAA2lB,EAAA8O,IAEAG,EAAAC,eAAA70B,GACA40B,EAAA50B,GAEAA,CACA80B,GAAA50B,GAAAy0B,EAtBA,GAAAC,IACAG,GAAA,WAAAN,EAAAO,eACAC,KAAA,WAAAR,EAAAO,UAAA,IACAE,OAAA,WAAAT,EAAAO,WAAAP,EAAAU,WAAA,GAAA,IACAC,SAAA,WAAAX,EAAAO,UAAAP,EAAAU,WAAA,GAAA,IACAE,KAAA,WAAAZ,EAAAa,SAAA,IACAC,IAAA,WAAAd,EAAAa,SAAAb,EAAA11B,OAAA,IACAy2B,MAAAf,EAAAgB,KACAC,IAAAjB,EAAAgB,KACAE,IAAAlB,EAAAxB,OAEA2C,EAAArB,EAAAnI,QAAAyJ,WACAf,EAAAc,KAAAhB,CAYA,IAAAgB,EACA,IAAA,GAAA11B,KAAA01B,GAAAA,EAAAf,eAAA30B,IACAw0B,EAAAx0B,EAAA01B,EAAA11B,GACA,IAAA41B,GAAAvB,EAAAnI,QAAA2J,SACA,IAAAD,EACA,IAAA,GAAA51B,KAAA41B,GAAAA,EAAAjB,eAAA30B,IACAw0B,EAAAx0B,EAAA41B,EAAA51B,GACA,OAAA40B,GAGA,QAAAkB,GAAAC,EAAAC,GACA,KAAAA,GAAAA,GAAAD,GAAA,CACA,GAAA,OAAAC,EAAAC,SAAAlW,eAAAiW,EAAAE,YAAAH,EAAA,MAAAC,EACAA,GAAAA,EAAAE,YAIA,QAAAC,GAAA9B,EAAA+B,GACAv4B,KAAAw2B,WAAAA,CACAx2B,MAAAu4B,KAAAA,CACAv4B,MAAAw4B,QAAA,CACA,IAAAjJ,GAAAvvB,KAAA4nB,EAAA4O,EAAA5O,GAEA6Q,EAAAz4B,KAAAy4B,MAAAlQ,SAAAkH,cAAA,KACAgJ,GAAAnQ,UAAA,kBACAtoB,MAAA04B,aAAAH,EAAAG,cAAA,CAGA,KAAA,GADAC,GAAAJ,EAAAK,KACAj4B,EAAA,EAAAA,EAAAg4B,EAAA33B,SAAAL,EAAA,CACA,GAAAgxB,GAAA8G,EAAA/I,YAAAnH,SAAAkH,cAAA,OAAAptB,EAAAs2B,EAAAh4B,GACA2nB,EAAAuQ,GAAAl4B,GAAAX,KAAA04B,aAAA,GAAA,IAAAI,EACA,OAAAz2B,EAAAimB,YAAAA,EAAAjmB,EAAAimB,UAAA,IAAAA,EACAqJ,GAAArJ,UAAAA,CACAjmB,GAAA02B,OAAA12B,EAAA02B,OAAApH,EAAA4G,EAAAl2B,GACAsvB,EAAAjC,YAAAnH,SAAAiH,eAAAntB,EAAA22B,aAAAzC,EAAAl0B,IACAsvB,GAAAsH,OAAAt4B,EAGA,GAAAmiB,GAAA8E,EAAAsR,aAAA1C,EAAAnI,QAAA8K,cAAAZ,EAAAxO,KAAA,MACAqP,EAAAtW,EAAAsW,KAAAC,EAAAvW,EAAAwW,OAAAC,GAAA,CACAd,GAAAjX,MAAA4X,KAAAA,EAAA,IACAX,GAAAjX,MAAA6X,IAAAA,EAAA,IAEA,IAAAG,GAAA35B,OAAA45B,YAAAjP,KAAAG,IAAApC,SAAAmR,KAAAC,YAAApR,SAAAC,gBAAAmR,aACAC,EAAA/5B,OAAAg6B,aAAArP,KAAAG,IAAApC,SAAAmR,KAAAI,aAAAvR,SAAAC,gBAAAsR,eACAtD,EAAAnI,QAAA0L,WAAAxR,SAAAmR,MAAAhK,YAAA+I,EACA,IAAAuB,GAAAvB,EAAAwB,wBAAAC,EAAAF,EAAAV,OAAAM,EACAO,EAAA1B,EAAA2B,aAAA3B,EAAA4B,aAAA,EACAC,EAAA1S,EAAA2S,eAEA,IAAAL,EAAA,EAAA,CACA,GAAA7R,GAAA2R,EAAAV,OAAAU,EAAAX,IAAAmB,EAAA1X,EAAAuW,KAAAvW,EAAAwW,OAAAU,EAAAX,IACA,IAAAmB,EAAAnS,EAAA,EAAA,CACAoQ,EAAAjX,MAAA6X,KAAAA,EAAAvW,EAAAuW,IAAAhR,GAAA,IACAkR,IAAA,MACA,IAAAlR,EAAAuR,EAAA,CACAnB,EAAAjX,MAAA6G,OAAAuR,EAAA,EAAA,IACAnB,GAAAjX,MAAA6X,KAAAA,EAAAvW,EAAAwW,OAAAU,EAAAX,KAAA,IACA,IAAAoB,GAAA7S,EAAAuI,WACA,IAAAoI,EAAAxO,KAAAR,IAAAkR,EAAAlR,GAAA,CACAzG,EAAA8E,EAAAsR,aAAAuB,EACAhC,GAAAjX,MAAA4X,MAAAA,EAAAtW,EAAAsW,MAAA,IACAY,GAAAvB,EAAAwB,0BAIA,GAAAS,GAAAV,EAAAW,MAAAnB,CACA,IAAAkB,EAAA,EAAA,CACA,GAAAV,EAAAW,MAAAX,EAAAZ,KAAAI,EAAA,CACAf,EAAAjX,MAAA4G,MAAAoR,EAAA,EAAA,IACAkB,IAAAV,EAAAW,MAAAX,EAAAZ,KAAAI,EAEAf,EAAAjX,MAAA4X,MAAAA,EAAAtW,EAAAsW,KAAAsB,GAAA,KAEA,GAAAP,EAAA,IAAA,GAAAS,GAAAnC,EAAAoC,WAAAD,EAAAA,EAAAA,EAAAE,YACAF,EAAApZ,MAAAuZ,aAAAnT,EAAAoT,QAAAC,eAAA,IAEArT,GAAAsT,UAAAl7B,KAAAm7B,OAAA1E,EAAAD,GACAS,UAAA,SAAA72B,EAAAg7B,GAAA7L,EAAA8L,aAAA9L,EAAAmJ,aAAAt4B,EAAAg7B,IACA7D,SAAA,SAAAn3B,GAAAmvB,EAAA8L,aAAAj7B,IACAg3B,SAAA,WAAA,MAAA7H,GAAA+L,gBACAt6B,OAAA23B,EAAA33B,OACAk0B,MAAA,WAAAsB,EAAAtB,SACAwC,KAAA,WAAAnI,EAAAmI,QACAa,KAAAA,IAGA,IAAA/B,EAAAnI,QAAAkN,eAAA,CACA,GAAAC,EACA5T,GAAAyE,GAAA,OAAArsB,KAAAy7B,OAAA,WAAAD,EAAA1P,WAAA,WAAA0K,EAAAtB,SAAA,MACAtN,GAAAyE,GAAA,QAAArsB,KAAA07B,QAAA,WAAAhJ,aAAA8I,KAGA5T,EAAAyE,GAAA,SAAArsB,KAAA27B,SAAA,WACA,GAAAC,GAAAhU,EAAA2S,gBAAAtE,EAAArO,EAAAE,oBAAAmS,wBACA4B,EAAAxC,EAAAiB,EAAAjB,IAAAuC,EAAAvC,IACAyC,EAAAD,GAAAh8B,OAAAooB,cAAAM,SAAAC,iBAAAD,SAAAmR,MAAA1R,UACAuR,KAAAuC,GAAArD,EAAAqB,aACA,IAAAgC,GAAA7F,EAAAoD,KAAAyC,GAAA7F,EAAAqD,OAAA,MAAA9C,GAAAtB,OACAuD,GAAAjX,MAAA6X,IAAAwC,EAAA,IACApD,GAAAjX,MAAA4X,KAAAA,EAAAkB,EAAAlB,KAAAwC,EAAAxC,KAAA,MAGAxZ,GAAAyM,GAAAoM,EAAA,WAAA,SAAAv4B,GACA,GAAAC,GAAA83B,EAAAQ,EAAAv4B,EAAA67B,QAAA77B,EAAA87B,WACA,IAAA77B,GAAA,MAAAA,EAAA84B,OAAA,CAAA1J,EAAA8L,aAAAl7B,EAAA84B,OAAA1J,GAAAmI,SAGA9X,GAAAyM,GAAAoM,EAAA,QAAA,SAAAv4B,GACA,GAAAC,GAAA83B,EAAAQ,EAAAv4B,EAAA67B,QAAA77B,EAAA87B,WACA,IAAA77B,GAAA,MAAAA,EAAA84B,OAAA,CACA1J,EAAA8L,aAAAl7B,EAAA84B,OACAzC,GAAAnI,QAAA4N,uBAAA1M,EAAAmI,SAIA9X,GAAAyM,GAAAoM,EAAA,YAAA,WACA3M,WAAA,WAAAlE,EAAAgE,SAAA,KAGAhM,GAAA0P,OAAAiJ,EAAA,SAAAI,EAAA,GAAAF,EAAAoC,WACA,QAAA,EAmDA,QAAAqB,GAAAtU,EAAA+I,GACA,IAAA/I,EAAAuU,oBAAA,MAAAxL,EAEA,KAAA,GADAyL,MACAz7B,EAAA,EAAAA,EAAAgwB,EAAA3vB,OAAAL,IACAgwB,EAAAhwB,GAAA07B,mBAAAD,EAAAt5B,KAAA6tB,EAAAhwB,GACA,OAAAy7B,GAGA,QAAAE,GAAAjG,EAAAzO,EAAAyG,EAAAkO,GACA,GAAAlG,EAAAmG,MACAnG,EAAAzO,EAAA2U,EAAAlO,OACA,CACA,GAAA+N,GAAA/F,EAAAzO,EAAAyG,EACA+N,IAAAA,EAAAK,KAAAL,EAAAK,KAAAF,GACAA,EAAAH,IAIA,QAAAM,GAAA9U,EAAA9E,GACA,GAAAyD,GAAAoK,EAAA/I,EAAAgJ,WAAA9N,EAAA,OACA,IAAA6N,EAAA3vB,OAAA,CACA,GAAA27B,GAAA,SAAA/U,EAAA2U,EAAAlO,GAEA,QAAAuO,GAAAj8B,GACA,GAAAA,GAAAk8B,EAAA77B,OAAA,MAAAu7B,GAAA,KACAD,GAAAO,EAAAl8B,GAAAinB,EAAAyG,EAAA,SAAA+N,GACAA,GAAAA,EAAAxD,KAAA53B,OAAA,EAAAu7B,EAAAH,GACAQ,EAAAj8B,EAAA,KALA,GAAAk8B,GAAAX,EAAAtU,EAAA+I,EAQAiM,GAAA,GAEAD,GAAAH,OAAA,CACAG,GAAAN,mBAAA,CACA,OAAAM,GACA,OAAApW,EAAAqB,EAAAkV,UAAAlV,EAAAuI,YAAA,cACA,SAAAvI,GAAA,MAAAhI,GAAAyW,KAAA0G,SAAAnV,GAAArB,MAAAA,KACA3G,EAAAyW,KAAA2G,QACA,SAAApV,EAAAyG,GAAA,MAAAzO,GAAAyW,KAAA2G,QAAApV,EAAAyG,IAEA,aA/XA,GAAAwK,GAAA,kBACAC,EAAA,wBAIAlZ,GAAAqd,SAAA,SAAArV,EAAAsV,EAAA7O,GACA,IAAA6O,EAAA,MAAAtV,GAAAqV,SAAA5O,EACAA,IAAAA,EAAAmO,QAAAU,EAAAV,OAAA,EACA,IAAAW,IAAA9G,KAAA6G,EACA,IAAA7O,EAAA,IAAA,GAAA+H,KAAA/H,GAAA8O,EAAA/G,GAAA/H,EAAA+H,EACA,OAAAxO,GAAAqV,SAAAE,GAGAvd,GAAA0M,gBAAA,WAAA,SAAA+B,GACAA,EAAA6C,EAAAlxB,KAAAA,KAAAmwB,UAAA,SAAA9B,EACA,IAAA+O,GAAAp9B,KAAAsrB,gBACA,MAAA8R,EAAAp8B,OAAA,GAAA,CAIA,GAAAhB,KAAAm8B,oBAAA,CACA,IAAA9N,EAAAgI,KAAAgG,kBAAA,MAEA,KAAA,GAAA17B,GAAA,EAAAA,EAAAy8B,EAAAp8B,OAAAL,IACA,GAAAy8B,EAAAz8B,GAAA6qB,KAAAnC,MAAA+T,EAAAz8B,GAAA08B,OAAAhU,KAAA,OAGArpB,KAAAygB,MAAA6c,kBAAAt9B,KAAAygB,MAAA6c,iBAAApI,OACA,IAAAsB,GAAAx2B,KAAAygB,MAAA6c,iBAAA,GAAAhI,GAAAt1B,KAAAquB,EACA,IAAAmI,EAAAnI,QAAAgI,KAAA,CAEAzW,EAAA0P,OAAAtvB,KAAA,kBAAAA,KACAw2B,GAAA9X,QAAA,MAgBA,IAAA6e,GAAA19B,OAAA09B,uBAAA,SAAAC,GACA,MAAA1R,YAAA0R,EAAA,IAAA,KAEAC,EAAA59B,OAAA49B,sBAAA/K,YAEA4C,GAAA5O,WACAwO,MAAA,WACA,GAAAl1B,KAAA09B,SAAA,CACA19B,KAAA4nB,GAAAnH,MAAA6c,iBAAA,IACAt9B,MAAAw1B,KAAA,IACAx1B,MAAA4nB,GAAAwE,IAAA,iBAAApsB,KAAA21B,aAEA31B,MAAAuvB,QAAAvvB,KAAAu4B,MAAA3Y,EAAA0P,OAAAtvB,KAAAu4B,KAAA;AACAv4B,KAAAuvB,QAAAvvB,KAAAuvB,OAAA2F,OACAtV,GAAA0P,OAAAtvB,KAAA4nB,GAAA,gBAAA5nB,KAAA4nB,MAGA8V,OAAA,WACA,MAAA19B,MAAA4nB,GAAAnH,MAAA6c,kBAAAt9B,MAGA03B,KAAA,SAAAa,EAAA53B,GACA,GAAA61B,GAAA+B,EAAAK,KAAAj4B,EACA61B,GAAAH,KAAAG,EAAAH,KAAAr2B,KAAA4nB,GAAA2Q,EAAA/B,GACAx2B,KAAA4nB,GAAA+V,aAAApH,EAAAC,GAAAA,EAAAzM,MAAAwO,EAAAxO,KACAyM,EAAAxM,IAAAuO,EAAAvO,GAAA,WACApK,GAAA0P,OAAAiJ,EAAA,OAAA/B,EACAx2B,MAAAk1B,SAGAU,eAAA,WACA,GAAA51B,KAAAu1B,SAAA,CACAkI,EAAAz9B,KAAAu1B,SACAv1B,MAAAu1B,SAAA,EAGA,GAAAzS,GAAA9iB,KAAA4nB,GAAAuI,YAAA9G,EAAArpB,KAAA4nB,GAAAkD,QAAAhI,EAAAuG,KACA,IAAAvG,EAAAuG,MAAArpB,KAAA60B,SAAAxL,MAAAA,EAAAroB,OAAA8hB,EAAAyG,IAAAvpB,KAAAy1B,SAAAz1B,KAAA60B,SAAAtL,IACAzG,EAAAyG,GAAAvpB,KAAA60B,SAAAtL,IAAAvpB,KAAA4nB,GAAAuU,qBACArZ,EAAAyG,IAAAvpB,KAAAquB,QAAAuP,gBAAAp7B,KAAA6mB,EAAAI,OAAA3G,EAAAyG,GAAA,IACAvpB,KAAAk1B,YACA,CACA,GAAAn1B,GAAAC,IACAA,MAAAu1B,SAAAgI,EAAA,WAAAx9B,EAAA2e,UACA1e,MAAAuvB,QAAAvvB,KAAAuvB,OAAAsO,YAIAnf,OAAA,SAAAof,GACA,GAAA,MAAA99B,KAAAw1B,KAAA,CACA,GAAAz1B,GAAAC,KAAA+9B,IAAA/9B,KAAAw1B,IACA8G,GAAAt8B,KAAAquB,QAAAgI,KAAAr2B,KAAA4nB,GAAA5nB,KAAAquB,QAAA,SAAAkK,GACAx4B,EAAAy1B,MAAAuI,GAAAh+B,EAAAi+B,aAAAzF,EAAAuF,OAIAE,aAAA,SAAAzF,EAAAuF,GACA99B,KAAAu4B,MAAA3Y,EAAA0P,OAAAtvB,KAAAu4B,KAAA,SAEA,IAAAC,GAAAx4B,KAAAuvB,QAAAvvB,KAAAuvB,OAAAiJ,QAAAsF,GAAA99B,KAAAquB,QAAA4P,cACAj+B,MAAAuvB,QAAAvvB,KAAAuvB,OAAA2F,OAEA,MAAAqD,GAAAv4B,KAAAu4B,MAAA1C,EAAA71B,KAAAu4B,KAAAA,IAAA,CACAv4B,KAAAu4B,KAAAA,CAEA,IAAAA,GAAAA,EAAAK,KAAA53B,OACA,GAAAw3B,GAAA,GAAAD,EAAAK,KAAA53B,OACAhB,KAAA03B,KAAAa,EAAA,OACA,CACAv4B,KAAAuvB,OAAA,GAAA+I,GAAAt4B,KAAAu4B,EACA3Y,GAAA0P,OAAAiJ,EAAA,YAiLAD,GAAA5R,WACAwO,MAAA,WACA,GAAAl1B,KAAAw2B,WAAAjH,QAAAvvB,KAAA,CACAA,KAAAw2B,WAAAjH,OAAA,IACAvvB,MAAAy4B,MAAAJ,WAAA6F,YAAAl+B,KAAAy4B,MACAz4B,MAAAw2B,WAAA5O,GAAAuW,aAAAn+B,KAAAm7B,OAEA,IAAAvT,GAAA5nB,KAAAw2B,WAAA5O,EACA,IAAA5nB,KAAAw2B,WAAAnI,QAAAkN,eAAA,CACA3T,EAAAwE,IAAA,OAAApsB,KAAAy7B,OACA7T,GAAAwE,IAAA,QAAApsB,KAAA07B,SAEA9T,EAAAwE,IAAA,SAAApsB,KAAA27B,YAGAkC,QAAA,WACA79B,KAAAw2B,WAAA5O,GAAAuW,aAAAn+B,KAAAm7B,OACA,IAAA5L,GAAAvvB,IACAA,MAAAm7B,QAAA1D,MAAA,WAAAlI,EAAAiJ,QAAA,GACAx4B,MAAAw2B,WAAA5O,GAAAsT,UAAAl7B,KAAAm7B,SAGAzD,KAAA,WACA13B,KAAAw2B,WAAAkB,KAAA13B,KAAAu4B,KAAAv4B,KAAA04B,eAGA2C,aAAA,SAAA16B,EAAAy6B,GACAz6B,GAAAX,KAAAu4B,KAAAK,KAAA53B,OACAL,EAAAy6B,EAAAp7B,KAAAu4B,KAAAK,KAAA53B,OAAA,EAAA,EACAL,EAAA,IACAA,EAAAy6B,EAAA,EAAAp7B,KAAAu4B,KAAAK,KAAA53B,OAAA,EACA,IAAAhB,KAAA04B,cAAA/3B,EAAA,CACA,GAAAi6B,GAAA56B,KAAAy4B,MAAA2F,WAAAp+B,KAAA04B,aACAkC,GAAAtS,UAAAsS,EAAAtS,UAAAzmB,QAAA,IAAAi3B,EAAA,GACA8B,GAAA56B,KAAAy4B,MAAA2F,WAAAp+B,KAAA04B,aAAA/3B,EACAi6B,GAAAtS,WAAA,IAAAwQ,CACA8B,GAAAyD,UAAAr+B,KAAAy4B,MAAAzQ,UACAhoB,KAAAy4B,MAAAzQ,UAAA4S,EAAAyD,UAAA,EACAzD,EAAAyD,UAAAzD,EAAAd,aAAA95B,KAAAy4B,MAAAzQ,UAAAhoB,KAAAy4B,MAAA4B,eACAr6B,KAAAy4B,MAAAzQ,UAAA4S,EAAAyD,UAAAzD,EAAAd,aAAA95B,KAAAy4B,MAAA4B,aAAA,EACAza,GAAA0P,OAAAtvB,KAAAu4B,KAAA,SAAAv4B,KAAAu4B,KAAAK,KAAA54B,KAAA04B,cAAAkC,KAGAU,aAAA,WACA,MAAA9Q,MAAA8T,MAAAt+B,KAAAy4B,MAAA4B,aAAAr6B,KAAAy4B,MAAAoC,WAAAf,eAAA,GAgDAla,GAAA4M,eAAA,OAAA,QACA8J,QAAAoG,GAGA9c,GAAA4M,eAAA,OAAA,WAAA,SAAA5E,EAAAyG,GACA,GAAAhsB,GAAAulB,EAAAuI,YAAAhN,EAAAyE,EAAA6F,WAAAprB,GACA2nB,EAAApK,EAAAgK,IAAAvnB,EAAAgnB,KAAAlG,EAAA4H,IACA,IAAA5H,EAAAnF,QAAA,KAAAxb,KAAA2gB,EAAAnF,OAAAmF,EAAAnF,OAAAhd,OAAA,IACA,GAAAu9B,GAAApb,EAAAnF,OAAA+L,EAAAnK,EAAAgK,IAAAvnB,EAAAgnB,KAAAlG,EAAAxB,WAEA,IAAA4c,GAAA,GAAAxU,EAAAC,CAGA,KAAA,GADAH,MACAlpB,EAAA,EAAAA,EAAA0tB,EAAA9H,MAAAvlB,OAAAL,IAAA,CACA,GAAA69B,GAAAnQ,EAAA9H,MAAA5lB,EACA69B,GAAAtQ,MAAA,EAAAqQ,EAAAv9B,SAAAu9B,GACA1U,EAAA/mB,KAAA07B,GAGA,GAAA3U,EAAA7oB,OAAA,OAAA43B,KAAA/O,EAAAE,KAAAA,EAAAC,GAAAA,IAGApK,GAAAoQ,SAAAyO,aAAA7e,EAAAqd,QAEA,IAAApN,IACAwG,KAAAzW,EAAAyW,KAAAxF,KACAoN,gBAAA,EACA9E,eAAA,EACAyE,gBAAA,mBACArC,gBAAA,EACAU,uBAAA,EACAlC,UAAA,KACAjC,WAAA,KACAE,UAAA,KAGApY,GAAAkJ,aAAA,cAAA,UVg9KG1C,WAAaxjB,SAAY87B,IAAI,SAASh+B,EAAQjB,EAAOD,IWj4LxD,SAAAkoB,GACA,gBAAAloB,IAAA,gBAAAC,GACAioB,EAAA,WAAA,IAAA,MAAAhnB,GAAA,cAAA,MAAAR,GAAA,MAAAL,QAAA+f,gBACA,kBAAAlgB,IAAAA,EAAAC,IACAD,GAAA,wBAAAgoB,GAEAA,EAAA9H,cACA,SAAAA,GACA,YAEAA,GAAA+e,QAAA,SAAA3gB,EAAA4gB,EAAArC,EAAAlO,GACA,GAAAwQ,GAAAjf,EAAAkf,QAAAlf,EAAAmf,SAAAH,GACAI,EAAA,UAAAx8B,KAAAypB,UAAAC,WACA+S,EAAAD,IAAA,MAAAzW,SAAA4D,cAAA5D,SAAA4D,aAAA,EAEA,IAAAoQ,EAAA7M,YAAA,CACA,GAAAwP,GAAA7Q,GAAAA,EAAA6Q,SAAAtf,EAAAmf,SAAAG,QACAtE,EAAA2B,EAAAna,EAAA,CACAwY,GAAAuE,UAAA,EACA5C,GAAA,SAAA7a,EAAAF,GACA,GAAA,MAAAE,EAAA,CASA,IAAA,GAFA0d,GAAA,GAEAtc,EAAA,IAAA,CACA,GAAAuc,GAAA3d,EAAAiC,QAAA,KAAAb,EACA,IAAAuc,MAAA,CACAD,GAAA1d,EAAAwM,MAAApL,EACAV,IAAAV,EAAA1gB,OAAA8hB,CACA,OAEAV,GAAAid,EAAAvc,CACAsc,IAAA1d,EAAAwM,MAAApL,EAAAuc,EACA,IAAAC,GAAAJ,EAAA9c,EAAA8c,CACA9c,IAAAkd,CACA,KAAA,GAAA3+B,GAAA,EAAAA,EAAA2+B,IAAA3+B,EAAAy+B,GAAA,GACAtc,GAAAuc,EAAA,EAIA,GAAA7d,EAAA,CACA,GAAAgC,GAAAoX,EAAAlL,YAAAnH,SAAAkH,cAAA,QACAjM,GAAA8E,UAAA,MAAA9G,EAAA3f,QAAA,MAAA,OACA2hB,GAAAkM,YAAAnH,SAAAiH,eAAA4P,QAEAxE,GAAAlL,YAAAnH,SAAAiH,eAAA4P,QA9BA,CAGAxE,EAAAlL,YAAAnH,SAAAiH,eAAAyP,EAAA,KAAAvd,GACAU,GAAA,IAgCA,IAAA,GADAmd,GAAA3f,EAAA4f,WAAAxhB,GAAAyC,EAAA4N,GAAAA,EAAA5N,OAAAb,EAAAkG,WAAA+Y,GACAl+B,EAAA,EAAAT,EAAAq/B,EAAAv+B,OAAAL,EAAAT,IAAAS,EAAA,CACAA,GAAA47B,EAAA,KACA,IAAA/b,GAAA,GAAAZ,GAAA6f,aAAAF,EAAA5+B,KACA6f,EAAAxC,QAAA6gB,EAAAa,WAAAb,EAAAa,UAAAjf,EACA,OAAAD,EAAAmf,OAAA,CACA,GAAAne,GAAAqd,EAAA1b,MAAA3C,EAAAC,EACA8b,GAAA/b,EAAAyB,UAAAT,EAAA7gB,EAAA6f,EAAAmB,MAAAlB,EACAD,GAAAmB,MAAAnB,EAAAsC,WX44LGsD,WAAaxjB,SAAYg9B,IAAI,SAASl/B,EAAQjB,EAAOD,IY38LxD,SAAAkoB,GACA,gBAAAloB,IAAA,gBAAAC,GACAioB,EAAA,WAAA,IAAA,MAAAhnB,GAAA,cAAA,MAAAR,GAAA,MAAAL,QAAA+f,gBACA,kBAAAlgB,IAAAA,EAAAC,IACAD,GAAA,wBAAAgoB,GAEAA,EAAA9H,cACA,SAAAA,GACA,YAGA,SAAAigB,GAAAC,EAAAC,EAAAjd,EAAAkd,GACAhgC,KAAAigC,cAAA,CAAAjgC,MAAA8/B,IAAAA,CACA,OAAAE,GAAA,gBAAAD,KAAAC,GAAA,EAEAld,GAAAA,EAAAgd,EAAA9R,QAAAlL,GAAA8G,EAAA,EAAA,EACA5pB,MAAA8iB,KAAAiH,KAAAjH,EAAAkH,GAAAlH,EAMA,IAAA,gBAAAid,GAAA,CACAA,EAAAjgC,SAAAigC,EAAA,GAAAxa,QAAAwa,EAAAG,OAAAH,EAAAI,WAAA,KAAA,KACAngC,MAAAogC,QAAA,SAAAC,EAAAvd,GACA,GAAAud,EAAA,CACAN,EAAA9L,UAAA,CAEA,KADA,GAAAnT,GAAAa,EAAA0H,EAAAyW,EAAAhV,QAAAhI,EAAAuG,MAAA6E,MAAA,EAAApL,EAAAyG,IAAA+W,EAAA,IACA,CACAP,EAAA9L,UAAAqM,CACA,IAAAC,GAAAR,EAAA7L,KAAA7K,EACA,KAAAkX,EAAA,KACAzf,GAAAyf,CACA5e,GAAAb,EAAAqT,KACAmM,GAAAxf,EAAAqT,OAAArT,EAAA,GAAA9f,QAAA,EACA,IAAAs/B,GAAAjX,EAAAroB,OAAA,MAEA,GAAAw/B,GAAA1f,GAAAA,EAAA,GAAA9f,QAAA,CACAw/B,KACA,GAAA7e,GAAA,GAAA0H,EAAAroB,OAAA8f,EAAAle,OACA+e,GAAAme,EAAAhV,QAAAhI,EAAAuG,MAAAroB,QACAw/B,SAGA,CACAT,EAAA9L,UAAAnR,EAAAyG,EACA,IAAAF,GAAAyW,EAAAhV,QAAAhI,EAAAuG,MAAAvI,EAAAif,EAAA7L,KAAA7K,GACAmX,EAAA1f,GAAAA,EAAA,GAAA9f,QAAA,EACA2gB,EAAAb,GAAAA,EAAAqT,KACAxS,GAAA6e,GAAAnX,EAAAroB,QAAAw/B,IAAAA,EAAA,GAEA,GAAA1f,GAAA0f,EACA,OAAAzW,KAAAH,EAAA9G,EAAAuG,KAAA1H,GACAqI,GAAAJ,EAAA9G,EAAAuG,KAAA1H,EAAA6e,GACA1f,MAAAA,QAEA,CACA,GAAA2f,GAAAV,CACAC,KAAAD,EAAAA,EAAAW,cACA,IAAAtQ,GAAA4P,EAAA,SAAApZ,GAAA,MAAAA,GAAA8Z,eAAA,SAAA9Z,GAAA,MAAAA,IACAmV,EAAAgE,EAAAj+B,MAAA,KAEA,IAAA,GAAAi6B,EAAA/6B,OACA++B,EAAA/+B,OAKAhB,KAAAogC,QAAA,SAAAC,EAAAvd,GACA,GAAAud,EAAA,CACA,GAAAM,GAAAb,EAAAhV,QAAAhI,EAAAuG,MAAA6E,MAAA,EAAApL,EAAAyG,IAAAF,EAAA+G,EAAAuQ,GACA7f,EAAAuI,EAAAyD,YAAAiT,EACA,IAAAjf,KAAA,CACAA,EAAA8f,EAAAD,EAAAtX,EAAAvI,EACA,QAAAiJ,KAAAH,EAAA9G,EAAAuG,KAAAvI,GAAAkJ,GAAAJ,EAAA9G,EAAAuG,KAAAvI,EAAA2f,EAAAz/B,cAEA,CACA,GAAA2/B,GAAAb,EAAAhV,QAAAhI,EAAAuG,MAAA6E,MAAApL,EAAAyG,IAAAF,EAAA+G,EAAAuQ,GACA7f,EAAAuI,EAAA1F,QAAAoc,EACA,IAAAjf,KAAA,CACAA,EAAA8f,EAAAD,EAAAtX,EAAAvI,GAAAgC,EAAAyG,EACA,QAAAQ,KAAAH,EAAA9G,EAAAuG,KAAAvI,GAAAkJ,GAAAJ,EAAA9G,EAAAuG,KAAAvI,EAAA2f,EAAAz/B,YAfAhB,KAAAogC,QAAA,iBAoBA,CACA,GAAAS,GAAAJ,EAAA3+B,MAAA,KACA9B,MAAAogC,QAAA,SAAAC,EAAAvd,GACA,GAAAge,GAAA/E,EAAA/6B,OAAA,CACA,IAAAq/B,EAAA,CACA,GAAAvd,EAAAuG,MAAA0S,EAAA/6B,OAAA,GAAA8+B,EAAAlV,YAAA,MACA,IAAAwF,EAAA0P,EAAAhV,QAAAhI,EAAAuG,MAAA6E,MAAA,EAAA2S,EAAAC,GAAA9/B,UAAA+6B,EAAAA,EAAA/6B,OAAA,GAAA,MAEA,KAAA,GADAgpB,GAAAJ,EAAA9G,EAAAuG,KAAAwX,EAAAC,GAAA9/B,QACA+/B,EAAAje,EAAAuG,KAAA,EAAA1oB,EAAAmgC,EAAA,EAAAngC,GAAA,IAAAA,IAAAogC,EACA,GAAAhF,EAAAp7B,IAAAyvB,EAAA0P,EAAAhV,QAAAiW,IAAA,MACA,IAAA1X,GAAAyW,EAAAhV,QAAAiW,GAAAC,EAAA3X,EAAAroB,OAAA6/B,EAAA,GAAA7/B,MACA,IAAAovB,EAAA/G,EAAA6E,MAAA8S,KAAAjF,EAAA,GAAA,MACA,QAAAhS,KAAAH,EAAAmX,EAAAC,GAAAhX,GAAAA,GAEA,KAAAlH,EAAAuG,MAAA0S,EAAA/6B,OAAA,GAAA8+B,EAAApV,YAAA,CACA,GAAArB,GAAAyW,EAAAhV,QAAAhI,EAAAuG,MAAA2X,EAAA3X,EAAAroB,OAAA6/B,EAAA,GAAA7/B,MACA,IAAAovB,EAAA/G,EAAA6E,MAAA8S,KAAAjF,EAAA,GAAA,CAEA,IAAA,GADAhS,GAAAH,EAAA9G,EAAAuG,KAAA2X,GACAD,EAAAje,EAAAuG,KAAA,EAAA1oB,EAAA,EAAAA,EAAAmgC,IAAAngC,IAAAogC,EACA,GAAAhF,EAAAp7B,IAAAyvB,EAAA0P,EAAAhV,QAAAiW,IAAA,MACA,IAAA3Q,EAAA0P,EAAAhV,QAAAiW,GAAA7S,MAAA,EAAA2S,EAAAC,GAAA9/B,UAAA+6B,EAAA+E,GACA,OAAA/W,KAAAA,EAAAC,GAAAJ,EAAAmX,EAAAF,EAAAC,GAAA9/B,cAmDA,QAAA4/B,GAAAD,EAAAnO,EAAA1P,GACA,GAAA6d,EAAA3/B,QAAAwxB,EAAAxxB,OAAA,MAAA8hB,EACA,KAAA,GAAAme,GAAAzW,KAAAC,IAAA3H,EAAA6d,EAAA3/B,UAAA,CACA,GAAAkgC,GAAAP,EAAAzS,MAAA,EAAA+S,GAAAP,cAAA1/B,MACA,IAAAkgC,EAAApe,IAAAme,MACA,CAAA,KAAAC,EAAApe,GACA,MAAAme,KADAA,IA1JA,GAAArX,GAAAhK,EAAAgK,GAyGAiW,GAAAnZ,WACAya,SAAA,WAAA,MAAAnhC,MAAAsnB,MAAA,IACA8Z,aAAA,WAAA,MAAAphC,MAAAsnB,MAAA,IAEAA,KAAA,SAAA+Y,GAEA,QAAAgB,GAAAhY,GACA,GAAAvG,GAAA8G,EAAAP,EAAA,EACAtpB,GAAA+iB,KAAAiH,KAAAjH,EAAAkH,GAAAlH,EACA/iB,GAAAkgC,cAAA,CACA,QAAA,EAGA,IARA,GAAAlgC,GAAAC,KAAA8iB,EAAA9iB,KAAA8/B,IAAA9R,QAAAqS,EAAArgC,KAAA8iB,IAAAiH,KAAA/pB,KAAA8iB,IAAAkH,MAQA,CACA,GAAAhqB,KAAA8iB,IAAA9iB,KAAAogC,QAAAC,EAAAvd,GAAA,CACA9iB,KAAAigC,cAAA,CACA,OAAAjgC,MAAA8iB,IAAAhC,QAAA,EAEA,GAAAuf,EAAA,CACA,IAAAvd,EAAAuG,KAAA,MAAAgY,GAAA,EACAve,GAAA8G,EAAA9G,EAAAuG,KAAA,EAAArpB,KAAA8/B,IAAAhV,QAAAhI,EAAAuG,KAAA,GAAAroB,YAEA,CACA,GAAAsgC,GAAAthC,KAAA8/B,IAAAyB,WACA,IAAAze,EAAAuG,MAAAiY,EAAA,EAAA,MAAAD,GAAAC,EACAxe,GAAA8G,EAAA9G,EAAAuG,KAAA,EAAA,MAKAU,KAAA,WAAA,GAAA/pB,KAAAigC,aAAA,MAAAjgC,MAAA8iB,IAAAiH,MACAC,GAAA,WAAA,GAAAhqB,KAAAigC,aAAA,MAAAjgC,MAAA8iB,IAAAkH,IAEAnoB,QAAA,SAAA2/B,EAAAC,GACA,GAAAzhC,KAAAigC,aAAA,CACA,GAAAV,GAAA3f,EAAA4f,WAAAgC,EACAxhC,MAAA8/B,IAAAnC,aAAA4B,EAAAv/B,KAAA8iB,IAAAiH,KAAA/pB,KAAA8iB,IAAAkH,GAAAyX,EACAzhC,MAAA8iB,IAAAkH,GAAAJ,EAAA5pB,KAAA8iB,IAAAiH,KAAAV,KAAAkW,EAAAv+B,OAAA,EACAu+B,EAAAA,EAAAv+B,OAAA,GAAAA,QAAA,GAAAu+B,EAAAv+B,OAAAhB,KAAA8iB,IAAAiH,KAAAR,GAAA,MAgBA3J,GAAA0M,gBAAA,kBAAA,SAAAyT,EAAAjd,EAAAkd,GACA,MAAA,IAAAH,GAAA7/B,KAAA8/B,IAAAC,EAAAjd,EAAAkd,IAEApgB,GAAA8hB,mBAAA,kBAAA,SAAA3B,EAAAjd,EAAAkd,GACA,MAAA,IAAAH,GAAA7/B,KAAA+/B,EAAAjd,EAAAkd,IAGApgB,GAAA0M,gBAAA,gBAAA,SAAAyT,EAAAC,GAGA,IAFA,GAAA3U,MACAhpB,EAAArC,KAAA2hC,gBAAA5B,EAAA//B,KAAAmwB,UAAA,QAAA6P,GACA39B,EAAA8+B,cACAvhB,EAAAoW,OAAA3zB,EAAA2nB,KAAAhqB,KAAAmwB,UAAA,OAAA,IACA9E,EAAAvoB,MAAAu6B,OAAAh7B,EAAA0nB,OAAAyB,KAAAnpB,EAAA2nB,MAEAqB,GAAArqB,QACAhB,KAAA4hC,cAAAvW,EAAA,SZm9LGjF,WAAaxjB,SAAYi/B,IAAI,SAASnhC,EAAQjB,EAAOD,IACxD,SAAWM,Ga9oMX,cAGA,SAAAgiC,EAAAC,GACA,kBAAAriC,IAAAA,EAAAC,IAEAD,KAAAqiC,GACA,gBAAAviC,GAIAC,EAAAD,QAAAuiC,IAGAD,EAAAE,MAAAD,MAEA/hC,KAAA,WA4CA,QAAAiiC,KACA,IAAA,MAAAC,KAAAC,IAAAA,EAAAD,GACA,MAAAE,GAAA,OAAA,GA3CA,GAKAC,GALAL,KACAG,EAAA,mBAAAtiC,QAAAA,OAAAC,EACAggC,EAAAqC,EAAA5Z,SACA2Z,EAAA,eACAI,EAAA,QAGAN,GAAAO,UAAA,CACAP,GAAAQ,QAAA,QACAR,GAAAS,IAAA,SAAAtgC,EAAAugC,IACAV,GAAAW,IAAA,SAAAxgC,EAAAygC,IACAZ,GAAAlU,IAAA,SAAA3rB,GAAA,MAAAS,UAAAo/B,EAAAW,IAAAxgC,GACA6/B,GAAAhb,OAAA,SAAA7kB,IACA6/B,GAAAxsB,MAAA,YACAwsB,GAAAa,SAAA,SAAA1gC,EAAAygC,EAAAE,GACA,GAAA,MAAAA,EAAA,CACAA,EAAAF,CACAA,GAAA,KAEA,MAAAA,IACAA,KAEA,IAAA3gC,GAAA+/B,EAAAW,IAAAxgC,EAAAygC,EACAE,GAAA7gC,EACA+/B,GAAAS,IAAAtgC,EAAAF,GAEA+/B,GAAAe,OAAA,YACAf,GAAAgB,QAAA,YAEAhB,GAAAiB,UAAA,SAAAP,GACA,MAAAQ,MAAAC,UAAAT,GAEAV,GAAAoB,YAAA,SAAAV,GACA,GAAA,gBAAAA,GACA,IAAA,MAAAQ,MAAAG,MAAAX,GACA,MAAAxiC,GAAA,MAAAwiC,IAAA9/B,QAWA,IAAAq/B,IAAA,CACAI,EAAAF,EAAAD,EACAF,GAAAS,IAAA,SAAAtgC,EAAAF,GACA,GAAAW,SAAAX,EAAA,MAAA+/B,GAAAhb,OAAA7kB,EACAkgC,GAAAiB,QAAAnhC,EAAA6/B,EAAAiB,UAAAhhC,GACA,OAAAA,GAEA+/B,GAAAW,IAAA,SAAAxgC,EAAAygC,GACA,GAAA3gC,GAAA+/B,EAAAoB,YAAAf,EAAAkB,QAAAphC,GACA,OAAAS,UAAAX,EAAA2gC,EAAA3gC,EAEA+/B,GAAAhb,OAAA,SAAA7kB,GAAAkgC,EAAAmB,WAAArhC,GACA6/B,GAAAxsB,MAAA,WAAA6sB,EAAA7sB,QACAwsB,GAAAe,OAAA,WACA,GAAA3b,KACA4a,GAAAgB,QAAA,SAAA7gC,EAAAF,GACAmlB,EAAAjlB,GAAAF,GAEA,OAAAmlB,GAEA4a,GAAAgB,QAAA,SAAAzG,GACA,IAAA,GAAA57B,GAAA,EAAAA,EAAA0hC,EAAArhC,OAAAL,IAAA,CACA,GAAAwB,GAAAkgC,EAAAlgC,IAAAxB,EACA47B,GAAAp6B,EAAA6/B,EAAAW,IAAAxgC,UAGA,IAAA29B,GAAAA,EAAAtX,gBAAAib,YAAA,CACA,GAAAC,GACAC,CAWA,KACAA,EAAA,GAAAC,eAAA,WACAD,GAAA1O,MACA0O,GAAAE,MAAA,IAAAvB,EAAA,uBAAAA,EAAA,wCACAqB,GAAAzO,OACAwO,GAAAC,EAAAG,EAAAC,OAAA,GAAAxb,QACA8Z,GAAAqB,EAAAjU,cAAA,OACA,MAAAvvB,GAGAmiC,EAAAvC,EAAArQ,cAAA,MACAiU,GAAA5D,EAAApG,KAEA,GAAAsK,GAAA,SAAAC,GACA,MAAA,YACA,GAAAC,GAAAzT,MAAA/J,UAAAwH,MAAAntB,KAAA2vB,UAAA,EACAwT,GAAAC,QAAA9B,EAGAqB,GAAAhU,YAAA2S,EACAA,GAAAoB,YAAA,oBACApB,GAAAxpB,KAAAqpB,EACA,IAAA9F,GAAA6H,EAAAG,MAAApC,EAAAkC,EACAR,GAAAxF,YAAAmE,EACA,OAAAjG,KAOAiI,EAAA,GAAA9e,QAAA,wCAAA,KACA+e,EAAA,SAAAniC,GACA,MAAAA,GAAAN,QAAA,KAAA,SAAAA,QAAAwiC,EAAA,OAEArC,GAAAS,IAAAuB,EAAA,SAAA3B,EAAAlgC,EAAAF,GACAE,EAAAmiC,EAAAniC,EACA,IAAAS,SAAAX,EAAA,MAAA+/B,GAAAhb,OAAA7kB,EACAkgC,GAAAkC,aAAApiC,EAAA6/B,EAAAiB,UAAAhhC,GACAogC,GAAAmC,KAAAtC,EACA,OAAAjgC,IAEA+/B,GAAAW,IAAAqB,EAAA,SAAA3B,EAAAlgC,EAAAygC,GACAzgC,EAAAmiC,EAAAniC,EACA,IAAAF,GAAA+/B,EAAAoB,YAAAf,EAAAoC,aAAAtiC,GACA,OAAAS,UAAAX,EAAA2gC,EAAA3gC,GAEA+/B,GAAAhb,OAAAgd,EAAA,SAAA3B,EAAAlgC,GACAA,EAAAmiC,EAAAniC,EACAkgC,GAAAqC,gBAAAviC,EACAkgC,GAAAmC,KAAAtC,IAEAF,GAAAxsB,MAAAwuB,EAAA,SAAA3B,GACA,GAAAsC,GAAAtC,EAAAuC,YAAApc,gBAAAmc,UACAtC,GAAAxpB,KAAAqpB,EACA,KAAA,GAAAvhC,GAAAgkC,EAAA3jC,OAAA,EAAAL,GAAA,EAAAA,IACA0hC,EAAAqC,gBAAAC,EAAAhkC,GAAAohB,KAEAsgB,GAAAmC,KAAAtC,IAEAF,GAAAe,OAAA,SAAAV,GACA,GAAAjb,KACA4a,GAAAgB,QAAA,SAAA7gC,EAAAF,GACAmlB,EAAAjlB,GAAAF,GAEA,OAAAmlB,GAEA4a,GAAAgB,QAAAgB,EAAA,SAAA3B,EAAA9F,GAEA,IAAA,GAAAsI,GADAF,EAAAtC,EAAAuC,YAAApc,gBAAAmc,WACAhkC,EAAA,EAAAkkC,EAAAF,EAAAhkC,KAAAA,EACA47B,EAAAsI,EAAA9iB,KAAAigB,EAAAoB,YAAAf,EAAAoC,aAAAI,EAAA9iB,UAKA,IACA,GAAA+iB,GAAA,aACA9C,GAAAS,IAAAqC,EAAAA,EACA9C,GAAAW,IAAAmC,IAAAA,IAAA9C,EAAAO,UAAA,EACAP,GAAAhb,OAAA8d,GACA,MAAA5kC,GACA8hC,EAAAO,UAAA,EAEAP,EAAA+C,SAAA/C,EAAAO,QAEA,OAAAP,ObkpMGjhC,KAAKf,KAAuB,mBAAXF,QAAyBA,OAAyB,mBAATC,MAAuBA,KAAyB,mBAAXF,QAAyBA,gBAErHmlC,IAAI,SAAStkC,EAAQjB,EAAOD,Gcj1MlCC,EAAAD,SACAylC,QAEA,sBACA,8BAGAC,MAAA,8BACAC,IAAA,qBACAC,UAAA,EACAC,cAAA,EACAC,UAAA,gBACAC,UACAC,MAAA,6BACAzjB,KAAA,oBAEA0jB,YAAA,QACAC,oBACAC,YACA5jB,KAAA,eACA6jB,IAAA,sBACAC,QAAA,SACAC,MAAA,KACApU,KAAA,iBACAhE,KAAA,SAEAqY,aACA,KAEAC,YAAA,KACAC,MAAA,sBACAC,OAAA,4BACAC,QACApkB,KAAA,oBAEAqkB,MACAC,IAAA,0CAEAC,cACAtE,MAAA,WAEAuE,YAAA,wBACAC,mBACAC,eACAC,MACAC,OAAA,2CACAC,QAAA,mEAEAC,SAAA,kCACAC,WAEApZ,KAAA,MACA2Y,IAAA,wCAGAU,KAAA,cACAC,cAEAjlB,KAAA,mBACAyjB,MAAA,+BAGAzjB,KAAA,eACAklB,wBACAC,OAAA,+BACAC,YACAzZ,KAAA,MACA2Y,IAAA,qCAEA7D,QAAA,cdq1MM4E,IAAI,SAAS1mC,EAAQjB,EAAOD,Ge15MlCK,OAAAwnC,QAAAxnC,OAAAwnC,UAAAC,IAAA,aACA7nC,GAAAD,SACA6iC,QAAA3hC,EAAA,gBACA6mC,IAAA7mC,EAAA,YACA8hC,SACAgF,eAAA9mC,EAAA,mBAAA8hC,SAEAiF,aAAA,SAAAlmC,GAGA,IAAA,GAFA2iC,GAAAzT,MAAA/J,UAAAwH,MAAAntB,KAAA2vB,UAAA,GAEA/vB,EAAA,EAAAA,EAAAujC,EAAAljC,OAAAL,IAAA,CACA,IAAAY,IAAAA,EAAAu1B,eAAAoN,EAAAvjC,IACA,OAAA,CAEAY,GAAAA,EAAA2iC,EAAAvjC,IAEA,OAAA,Mf+5MG+mC,kBAAkB,GAAGC,eAAe,GAAGC,WAAW,KAAKC,IAAI,SAASnnC,EAAQjB,EAAOD,GgB/6MtF,GAAAwiC,GAAAthC,EAAA,SACAonC,GACAC,IAAA,WACA,MAAA,QAEAC,MAAA,WACA,GAAAF,EAAAC,OAEAE,KAAA,WACA,GAAAH,EAAAE,UAIAlG,EAAAriC,EAAAD,SACAijC,IAAA,SAAAtgC,EAAAF,EAAAimC,GACA,GAAAlG,EAAA+C,SACA5iC,GAAAS,SAAAX,EAAA,CACA,gBAAAimC,KACAA,EAAAJ,EAAAI,KAGAjmC,GAAAumB,kBAAAvmB,GAAA,GAAAkmC,gBAAAC,kBAAAnmC,EAAAumB,iBACAwZ,GAAAS,IAAAtgC,GACAF,IAAAA,EACAimC,IAAAA,EACAG,MAAA,GAAAC,OAAAC,cAIAvhB,OAAA,SAAA7kB,GACA6/B,EAAA+C,SACA5iC,GAAA6/B,EAAAhb,OAAA7kB,IAEAqmC,UAAA,SAAAtxB,GACA,GAAA8qB,EAAA+C,SACA,kBAAA7tB,GACA,IAAA,GAAA/U,KAAA6/B,GAAAe,SACA7rB,EAAA/U,EAAA2/B,EAAAa,IAAAxgC,KAAA2/B,EAAA9a,OAAA7kB,IAIAwgC,IAAA,SAAAxgC,GACA,IAAA6/B,EAAA+C,QAAA,MAAA,KACA,IAAA5iC,EAAA,CACA,GAAAymB,GAAAoZ,EAAAW,IAAAxgC,EACA,OAAAymB,GAGAA,EAAAsf,MAAA,GAAAI,OAAAC,UAAA3f,EAAAyf,KAAAzf,EAAAsf,IACA,KAEAtf,EAAA3mB,IALA,KAOA,MAAA,UhBs7MG+/B,MAAQ,KAAKyG,IAAI,SAAS/nC,EAAQjB,EAAOD,GiB3+M5CC,EAAAD,SACAkpC,KAAA,SAAAC,EAAAC,GACA,GAAAD,EAAA,CACA,GAAAxQ,GAAA14B,EAAAD,QAAAqpC,WAAAD,EACAzQ,KACAwQ,EAAAG,OACAH,EAAAG,OAAA3Q,GAGAwQ,EAAAjZ,YAAAyI,MAIA0Q,WAAA,SAAAD,GACA,GAAAA,GAAA,GAAAA,EAAAjlB,QAAA,QAAA,CAEA,GAAAolB,GAAA,GAAAC,WACAC,EAAAF,EAAAG,gBAAAN,EAAA,YACArB,EAAA0B,EAAAzgB,gBAEA2gB,EAAA5gB,SAAAkH,cAAA,MACA0Z,GAAA7gB,UAAA,QACA6gB,GAAAzZ,YAAA6X,EACA,OAAA4B,GAEA,OAAA,SjB++MMC,IAAI,SAAS1oC,EAAQjB,EAAOD,GkBxgNlCC,EAAAD,SACAuiB,KAAA,eACAwkB,YAAA,kCACA/D,QAAA,SACAuE,KAAA,cACAsC,QAAA,MACAlD,OAAA,mBACAU,SAAA,0BACAyC,SACAC,QAAA,OACAC,IAAA,aACAC,MAAA,OACAC,MAAA,aACAC,MAAA,aACAC,MAAA,cAEApD,iBACAqD,YAAA,SACAC,eAAA,SACAC,eAAA,SACAC,WAAA,UACAC,kBAAA,SACAC,mBAAA,SACAC,SAAA,UAEA/D,KAAA,0CACA7mB,UACA,aACA,SACA,SACA,eACA,eAEAynB,cAEAjlB,KAAA,mBACAyjB,MAAA,6BACA4E,IAAA,8BAGAjD,YACAzZ,KAAA,MACA2Y,IAAA,uCAEAC,cACA+D,iBAAA,SACAC,WAAA,UACAC,6BAAA,SACAC,SAAA,SACAC,oBAAA,SACAC,cAAA,SACAC,iBAAA,SACAC,eAAA,SACAC,cAAA,SACAC,kBAAA,SACAC,kBAAA,QACAC,cAAA,SACAC,cAAA,SACAC,YAAA,SACAC,kBAAA,SACAC,iBAAA,QACAC,cAAA,SACAC,YAAA,SACAC,cAAA,SACAC,eAAA,SACAC,eAAA,SACAC,sBAAA,SACAC,kBAAA,QACAvlB,WAAA,SACAwlB,KAAA,SACA7oC,OAAA,SACAykC,eAAA,UAEAqE,cACAzlB,YACA1lB,QAAA,aACAZ,OAAA,cAEAiD,QACArC,QAAA,SACAZ,OAAA,UAEAgsC,wBACAprC,QAAA,aACAZ,OAAA,qBlB8gNMisC,IAAI,SAASrrC,EAAQjB,EAAOD,GmBlmNlC,YACA,IAAA0B,GAAA,WAAA,IAAA,MAAAR,GAAA,UAAA,MAAAR,GAAA,MAAAL,QAAAsB,WACA6qC,EAAAtrC,EAAA,eACAurC,EAAAvrC,EAAA,gBACA4lB,EAAA5lB,EAAA,oBACAA,GAAA,aAEAjB,GAAAD,QAAA,SAAAS,EAAAisC,GACA,GAAAC,MACAC,KACAC,IAEAH,GAAA7f,GAAA,iBAAA,SAAA6f,EAAAI,GACA9kB,GAAA,IAEA0kB,GAAA7f,GAAA,SAAA,WACA,GAAAkgB,KACA,KAAA,GAAAC,KAAAL,GACAA,EAAAK,GAAAC,GAAA,aACAF,EAAAzpC,KAAAqpC,EAAAK,GAGA,IAAAD,EAAAvrC,OAAA,EAAA,CAEA,GAAA0rC,GAAAxrC,EAAAgrC,EAAApkB,qBAAAR,KAAA,0BACAqlB,EAAA,CACAD,GAAAD,GAAA,cACAE,EAAAD,EAAAE,aAEAL,GAAAvJ,QAAA,SAAA6J,GACAA,EAAAC,IAAA,QAAAH,OAaA,IAAAI,GAAA,SAAAC,EAAArU,GAEA0T,EAAAW,EAAAjrB,MAAA,GAAAuE,EACA,KAAA,GAAA3lB,GAAA,EAAAA,EAAAg4B,EAAA33B,OAAAL,IACA0rC,EAAAW,EAAAjrB,MAAA4E,OAAAgS,EAAAh4B,GAGA,IAAAssC,GAAAjB,EAAAkB,iBAAAhB,EAAAc,EAAAG,WACAF,IAAAhB,EAAA5J,QAAAI,IAAAwK,EAAAtU,EAAA,UAGAyU,EAAA,SAAArrB,EAAAsrB,GACA,GAAAL,GAAAZ,EAAArqB,GAAA,GAAAsrB,GAAAnB,EAAAnqB,EACAirB,GAAAjrB,KAAAA,CACA,IAAAirB,EAAAM,KAAA,CACA,GAAAC,GAAA,SAAAC,GACAA,GAAAA,YAAA/c,QAAA+c,EAAAxsC,OAAA,GACA+rC,EAAAC,EAAAQ,GAGA,IAAAR,EAAArK,cAAAlS,OAGA8c,EAAAP,EAAArK,SACA,CAGA,GAAA8K,GAAA,KACAC,EAAA1B,EAAAkB,iBAAAhB,EAAAc,EAAAG,WACAO,KACAD,EAAAxB,EAAA5J,QAAAM,IAAA+K,GACAD,IAAAA,EAAAzsC,OAAA,EACAusC,EAAAE,GAIAT,EAAArK,cAAAgL,YACAX,EAAAxQ,MACAwQ,EAAArK,IAAA,KAAA4K,GAEAA,EAAAP,EAAArK,WAQAnb,EAAA,SAAAomB,GACA,IAAA1B,EAAA/P,oBAAA,CAEA,GAAA0R,GAAA,SAAAb,GACA,GAAAY,KACAZ,EAAAc,WACAd,EAAAM,MAAAN,EAAAxQ,OAEA,OAAA,CAGA,IAAAuR,IACAnQ,gBAAA,SACAK,gBAAA,IAEA+O,EAAAM,MAAAN,EAAAxQ,QACAuR,EAAAvR,OAAA,EAEA,IAAAwR,GAAA,SAAA9B,EAAA3P,GACA,MAAA0R,GAAAjB,EAAAzQ,GAEAt8B,GAAAg9B,SAAAiP,EAAA8B,EAAAD,EACA,QAAA,EAEA,KAAA,GAAAG,KAAA9B,GACA,GAAAlrC,EAAAitC,QAAAD,EAAAhC,EAAA7d,QAAA+f,oBAAA,CACA,GAAApB,GAAAZ,EAAA8B,EACA,IAAAlB,EAAAqB,0BAEA,GAAArB,EAAAqB,6BASA,IAAArB,EAAAsB,YAAAtB,EAAAsB,UAAAC,eACAvB,EAAAsB,UAAAC,cAAArC,EAAAc,MAAA,EADA,CAIA,GAAAwB,GAAAX,EAAAb,EACA,IAAAwB,EACA,WAbAxB,GAAAsB,WAAAtB,EAAAsB,UAAAG,iBACAzB,EAAAsB,UAAAG,gBAAAvC,EAAAc,MAkBAiB,EAAA,SAAAjB,EAAAzQ,GACA,GAAAmS,GAAA,SAAAC,GACA,GAAAC,GAAAD,EAAAE,sBAAAF,EAAA3wB,OACAwvB,IACA,IAAAnB,EAAAW,EAAAjrB,MACAyrB,EAAAnB,EAAAW,EAAAjrB,MAAAyF,aAAAonB,OACA,IAAA,kBAAA5B,GAAArK,KAAA,GAAAqK,EAAAxQ,MACAgR,EAAAR,EAAArK,IAAAiM,OACA,IAAA,gBAAA5B,GAAArK,IAEA,IAAA,GADAmM,GAAAF,EAAA5tC,OACAL,EAAA,EAAAA,EAAAqsC,EAAArK,IAAA3hC,OAAAL,IAAA,CACA,GAAA61B,GAAAwW,EAAArK,IAAAhiC,EACA61B,GAAAtI,MAAA,EAAA4gB,IAAAF,GACApB,EAAA1qC,KAAA0zB,GAIA,MAAAuY,GAAAvB,EAAAR,EAAA2B,IAKAxrB,EAAA+oB,EAAA8C,kBACAhC,GAAAiC,kBACA9rB,EAAA6pB,EAAAiC,gBAAA9rB,GAGA,IAAAA,EAAA,CAKA,GAAA6pB,EAAAM,OAAAN,EAAAxQ,MAMA,MAAAkS,GAAAvrB,EALA,IAAA+rB,GAAA,SAAA1B,GACAjR,EAAAwS,EAAAvB,EAAAR,EAAA7pB,IAEA6pB,GAAArK,IAAAxf,EAAA+rB,KAYAH,EAAA,SAAAvB,EAAAR,EAAA7pB,GAEA,IAAA,GADAgsB,MACAxuC,EAAA,EAAAA,EAAA6sC,EAAAxsC,OAAAL,IAAA,CACA,GAAAyuC,GAAA5B,EAAA7sC,EACAqsC,GAAAqC,mBACAD,EAAApC,EAAAqC,iBAAAlsB,EAAAisB,GAEAD,GAAArsC,MACA4e,KAAA0tB,EACApW,YAAAoW,EACA/Y,KAAAiZ,IAIA,GAAAjtC,GAAA6pC,EAAA/b,YACAhP,GACAouB,gBAAApsB,EAAAnF,OACA4a,KAAAuW,EACAplB,MACAV,KAAAhnB,EAAAgnB,KACAE,GAAApG,EAAAxB,OAEAqI,IACAX,KAAAhnB,EAAAgnB,KACAE,GAAApG,EAAA4H,KAIA,IAAAiiB,EAAAsB,UACA,IAAA,GAAAkB,KAAAxC,GAAAsB,UACAtB,EAAAsB,UAAAkB,IACAvvC,EAAAosB,GAAAlL,EAAAquB,EAAAxC,EAAAsB,UAAAkB,GAIA,OAAAruB,GAGA,QACAsuB,KAAArC,EACAhB,WAAAA,EACAsD,eACAC,MAAA,SAAA3C,GACA,MAAA9rC,GAAAirC,EAAAa,EAAAjrB,QAEA6tB,KAAA,SAAA1D,EAAAc,GAEA,IAAAA,EAAA6C,SAAA,CACA1D,EAAAa,EAAAjrB,QAAAoqB,EAAAa,EAAAjrB,MAAA7gB,EAAA,8CACAirC,GAAAa,EAAAjrB,MACA6tB,OACAluB,KAAA,UAAAuK,UAAAC,UAAAvI,QAAA,gBAAA,MAAA,QAAA,iCACAmsB,SAAA5uC,EAAAgrC,EAAApkB,wBAGAioB,KAAA,SAAA7D,EAAAc,GACAb,EAAAa,EAAAjrB,OACAoqB,EAAAa,EAAAjrB,MAAAguB,SAKAvoB,aAAAA,EACAwoB,QAAA,SAAAhD,GACA,MAAA,gBAAAA,GAAAX,EAAAW,GAAAX,EAAAW,EAAAjrB,QAgBA,IAAAutB,GAAA,SAAApD,EAAA3T,EAAA/B,GACAA,EAAA9U,MAAAwqB,EAAAze,WAAAye,EAAA/b,aAAAnS,QACAkuB,EAAAvO,aAAAnH,EAAA9U,KAAA6W,EAAAxO,KAAAwO,EAAAvO,OnBynNGimB,oBAAoB,EAAEC,aAAa,GAAGC,cAAc,GAAGptC,OAASH,OAAU4kC,eAAe,KAAK4I,IAAI,SAAS1vC,EAAQjB,EAAOD,GoBx4N7H,cACA,WAAA,IAAA,MAAAkB,GAAA,UAAA,MAAAR,GAAA,MAAAL,QAAAsB,WACA1B,GAAAD,QAAA,SAAA0sC,EAAAnqB,GACA,OACAssB,0BAAA,WACA,MAAA5uC,GAAAD,QAAA6uC,0BAAAnC,IAEAvJ,IAAA,SAAAxf,EAAAoZ,GACA,MAAA77B,GAAA,WAAA2vC,aAAAnE,EAAAlsC,KAAAmjB,EAAAoZ,IAEA0S,gBAAA,SAAA9rB,GACA,MAAA1jB,GAAAD,QAAAyvC,gBAAA/C,EAAA/oB,IAEAksB,iBAAA,SAAAlsB,EAAAisB,GACA,MAAA3vC,GAAAD,QAAA6vC,iBAAAnD,EAAA/oB,EAAAisB,IAEA5S,OAAA,EACA8Q,MAAA,EACAQ,UAAA,EACAX,WAAAprB,EACAusB,WACAC,cAAArC,EAAAkC,eAAAsB,cAAAE,KACAnB,gBAAAvC,EAAAkC,eAAAsB,cAAAK,OAKAtwC,GAAAD,QAAA6uC,0BAAA,SAAAnC,GACA,GAAA/oB,GAAA+oB,EAAA8C,kBACA,IAAA,GAAA7rB,EAAAnF,OAAA2F,QAAA,KACA,OAAA,CACA,IAAAthB,GAAA6pC,EAAA/b,YACAmgB,EAAApE,EAAAqE,sBAAAluC,EAAAgnB,KAAAlG,EACA,OAAA,KAAAmtB,EAAAtyB,SAEA,YAAAsyB,EAAAtyB,SAEA,eAAAsyB,EAAAtyB,QAEA,cAAAsyB,EAAAtyB,SAIAve,GAAAD,QAAAyvC,gBAAA,SAAA/C,EAAA/oB,GACA,MAAAziB,GAAA,cAAA8vC,qCAAAtE,EAAA/oB,GAEA1jB,GAAAD,QAAA6vC,iBAAA,SAAAnD,EAAA/oB,EAAAisB,GACA,MAAA1uC,GAAA,cAAA+vC,sCAAAvE,EAAA/oB,EAAAisB,MpB24NGsB,UAAU,GAAGC,aAAa,GAAG5tC,OAASH,SAAYguC,IAAI,SAASlwC,EAAQjB,EAAOD,GqB17NjF,YACA,IAAA0B,GAAA,WAAA,IAAA,MAAAR,GAAA,UAAA,MAAAR,GAAA,MAAAL,QAAAsB,WAEA0vC,GACAC,WAAA,WACAC,KAAA,MAGAtxC,GAAAD,QAAA,SAAA0sC,EAAAgC,GAEAhC,EAAA7f,GAAA,SAAA,WACA5sB,EAAAD,QAAAwxC,qBAAA9E,EAAAgC,IAIA,QACAG,0BAAA,WACA,MAAA5uC,GAAAD,QAAA6uC,0BAAAnC,IAEAvJ,IAAA,SAAAxf,EAAAoZ,GACAr7B,EAAAyhC,IAAAljC,EAAAD,QAAAyxC,UAAA,SAAA1Y,GACA,GAAA2Y,KACA,KAAA,GAAAC,KAAA5Y,GACA,GAAA,OAAA4Y,EAAA,CAEA,GAAAC,GAAAD,EAAA,MAAA5Y,EAAA4Y,GAAA,GACAD,GAAApuC,KAAAsuC,GAGAF,EAAAG,MACA9U,GAAA2U,MAGAjC,gBAAA,SAAA9rB,GACA,MAAA1jB,GAAAD,QAAA8xC,mCAAApF,EAAA/oB,IAEAqZ,OAAA,EACA8Q,MAAA,EACAQ,UAAA,EACAX,WAAAe,EACAI,WACA5W,KAAA,WACAwU,EAAAqF,kBAAA,MAKA9xC,GAAAD,QAAA6uC,0BAAA,SAAAnC,GACA,GAAA7pC,GAAA6pC,EAAA/b,YACAhN,EAAA+oB,EAAAze,WAAAprB,EAGA,IAAA6pC,EAAAphB,QAAAzoB,EAAAgnB,MAAAroB,OAAAqB,EAAAknB,GACA,OAAA,CAEA,OAAApG,EAAAuK,OAKAvK,EAAA+oB,EAAA8C,mBAMA,IAAA,IAAA7rB,EAAAnF,OAAA2F,QAAA,MAAAziB,EAAAitC,QAAA,WAAAhrB,EAAA1C,MAAAsC,qBACA,OAAA,CAKA,IAAAutB,GAAApE,EAAAqE,sBAAAluC,EAAAgnB,KAAAlG,EACA,UAAAmtB,GAAA,UAAAA,EAAAtyB,OAAAkE,eAGAziB,GAAAD,QAAA8xC,mCAAA,SAAApF,EAAA/oB,GACA,GAAAmtB,GAAApE,EAAAqE,sBAAArE,EAAA/b,YAAA9G,KAAAlG,EACAmtB,IAAAA,EAAAtyB,QAAA,KAAAsyB,EAAAtyB,OAAAkQ,YAGA/K,GACAxB,MAAA2uB,EAAA3uB,MACAoJ,IAAA5H,EAAA4H,IACA/M,OAAAsyB,EAAAtyB,OAAA,IAAAmF,EAAAnF,OACAyC,MAAA0C,EAAA1C,OAGA,OAAA0C,GAQA1jB,GAAAD,QAAAwxC,qBAAA,SAAA9E,EAAAgC,GACA,GAAAhC,EAAAkC,eAAA4B,QAAA9B,IAEAhC,EAAA7d,QAAA+f,gBAAAlC,EAAA7d,QAAA+f,eAAAzqB,QAAAuqB,OAAA,CACA,GAAA7rC,GAAA6pC,EAAA/b,YAEAhN,EAAA+oB,EAAAze,WAAAprB,EACA,IAAA,YAAAwuC,EAAA1tB,EAAAuK,MAAA,CACA,GAAA8jB,GAAAruB,EAAAnF,OAAA2F,QAAA,IACA,IAAA6tB,OAAA,CAGA,GAAAC,GAAAvF,EAAAqE,sBAAAluC,EAAAgnB,KAAAlG,GAAAnF,OAAAkE,cACAouB,EAAApE,EAAAze,YACApE,KAAAhnB,EAAAgnB,KACAE,GAAApG,EAAAxB,OAEA,IAAA,UAAA8vB,IAAA,MAAAnB,EAAA5iB,MAAA,MAAA4iB,EAAA5iB,MAAA,CAGA,GAAAgkB,GAAAvuB,EAAAnF,OAAA2zB,UAAA,EAAAH,EAAA,GACAI,EAAA1F,EAAA2F,sBACA,IAAA,MAAAD,EAAAF,EAAAxjB,MAAA,OAAA,CAEA,GAAAyK,GAAAuT,EAAAkC,eAAA4B,QAAA9B,GAAA1mB,aAAAkqB,EACA/Y,GAAA33B,OAAA,GACAkrC,EAAA4F,YAAAnZ,EAAA,SAQAl5B,GAAAD,QAAAyxC,WAAA,IAAApxC,OAAAkyC,SAAAC,SAAAruB,QAAA,QAAA,KAAA,WAAA,oCrB67NG5gB,OAASH,SAAYqvC,IAAI,SAASvxC,EAAQjB,EAAOD,GsB/jOpD,YACA,IAAA0B,GAAA,WAAA,IAAA,MAAAR,GAAA,UAAA,MAAAR,GAAA,MAAAL,QAAAsB,UACA1B,GAAAD,QAAA,SAAA0sC,EAAAnqB,GACA,OACAssB,0BAAA,WACA,MAAA5uC,GAAAD,QAAA6uC,0BAAAnC,IAEAvJ,IAAA,SAAAxf,EAAAoZ,GACA,MAAA77B,GAAA,WAAA2vC,aAAAnE,EAAAlsC,KAAAmjB,EAAAoZ,IAEA0S,gBAAA,SAAA9rB,GACA,MAAA1jB,GAAAD,QAAAyvC,gBAAA/C,EAAA/oB,IAEAksB,iBAAA,SAAAlsB,EAAAisB,GACA,MAAA3vC,GAAAD,QAAA6vC,iBAAAnD,EAAA/oB,EAAAisB,IAEA5S,OAAA,EACA8Q,MAAA,EACAQ,UAAA,EACAX,WAAAprB,EACAusB,WACAC,cAAArC,EAAAkC,eAAAsB,cAAAE,KACAnB,gBAAAvC,EAAAkC,eAAAsB,cAAAK,OAKAtwC,GAAAD,QAAA6uC,0BAAA,SAAAnC,GACA,GAAA/oB,GAAA+oB,EAAA8C,kBACA,IAAA,GAAA7rB,EAAAnF,OAAAhd,OACA,OAAA,CACA,IAAA,GAAAmiB,EAAAnF,OAAA2F,QAAA,KACA,OAAA,CACA,IAAAziB,EAAAitC,QAAA,IAAAhrB,EAAA1C,MAAAsC,kBAAA,EACA,OAAA,CACA,IAAA1gB,GAAA6pC,EAAA/b,YACAmgB,EAAApE,EAAAqE,sBAAAluC,EAAAgnB,KAAAlG,EACA,OAAA,sBAAAmtB,EAAAtyB,OAUAve,GAAAD,QAAAyvC,gBAAA,SAAA/C,EAAA/oB,GACA,MAAAziB,GAAA,cAAA8vC,qCAAAtE,EAAA/oB,GAEA1jB,GAAAD,QAAA6vC,iBAAA,SAAAnD,EAAA/oB,EAAAisB,GACA,MAAA1uC,GAAA,cAAA+vC,sCAAAvE,EAAA/oB,EAAAisB,MtBkkOGsB,UAAU,GAAGC,aAAa,GAAG5tC,OAASH,SAAYsvC,IAAI,SAASxxC,EAAQjB,EAAOD,GuBrnOjF,YACA,IAAA0B,GAAA,WAAA,IAAA,MAAAR,GAAA,UAAA,MAAAR,GAAA,MAAAL,QAAAsB,WAEA8qC,GADAvrC,EAAA,cACAA,EAAA,iBAWA8vC,EAAA,SAAAtE,EAAA/oB,GACA,GAAAyuB,GAAA1F,EAAA2F,sBACA,IAAA,IAAA1uB,EAAAnF,OAAA2F,QAAA,KAAA,CACAR,EAAAgvB,YAAAhvB,EAAAnF,OAAA2zB,UAAA,EAAAxuB,EAAAnF,OAAA2F,QAAA,KAAA,EAEA,OAAAiuB,EAAAzuB,EAAAgvB,YAAAjkB,MAAA,SACA/K,EAAAivB,eAAAR,EAAAzuB,EAAAgvB,YAAAjkB,MAAA,QAIA/K,EAAA0rB,qBAAA1rB,EAAAnF,OAAAq0B,MACA,IAAA,IAAAlvB,EAAAnF,OAAA2F,QAAA,MAAAR,EAAAnF,OAAA2F,QAAA,QAEA,IAAA,GAAAwtB,KAAAS,GACA,GAAA,GAAAzuB,EAAAnF,OAAA2F,QAAAwtB,GAAA,CACAhuB,EAAA0rB,qBAAA+C,EAAAT,EACAhuB,GAAA0rB,sBAAA1rB,EAAAnF,OAAA2zB,UAAAR,EAAAnwC,OAAA,EACA,OAKA,GAAAmiB,EAAA0rB,qBAAAlrB,QAAA,OAAAR,EAAA0rB,qBAAA1rB,EAAA0rB,qBAAA8C,UAAA,GACAxuB,GAAA0rB,qBAAAlrB,QAAA,IAAAR,EAAAniB,OAAA,UAAAmiB,EAAA0rB,qBAAA1rB,EAAA0rB,qBAAA8C,UAAA,EAAAxuB,EAAA0rB,qBAAA7tC,OAAA,GACA,OAAAmiB,IAGAstB,EAAA,SAAAvE,EAAA/oB,EAAAisB,GAGAA,EAFAjsB,EAAAgvB,aAAAhvB,EAAA0rB,sBAAA1rB,EAAAivB,eAEAjvB,EAAAgvB,YAAA/C,EAAAuC,UAAAxuB,EAAAivB,eAAApxC,QAGA,IAAAouC,EAAA,GAEA,OAAAA,IAIAkD,EAAA,IAAAzyC,OAAAkyC,SAAAC,SAAAruB,QAAA,QAAA,KAAA,UACA0sB,EAAA,SAAAnE,EAAAc,EAAA7pB,EAAAoZ,GACA,IAAApZ,IAAAA,EAAAnF,QAAA,GAAAmF,EAAAnF,OAAAq0B,OAAArxC,OAAA,CACAkrC,EAAAkC,eAAAsB,cAAAC,MAAA3C,GACAzhB,QACAud,OAAA,+BACA,QAAA,EAEA,GAAAyJ,GAAA,GAEArO,GACAsO,EAAArvB,EAAA0rB,qBACA4D,KAAA,EAEA,YAAAzF,EAAAjrB,KACAmiB,EAAAxW,KAAA,QAEAwW,EAAAxW,KAAA,UAEA,IAAAglB,MACArM,EAAA,GACAsM,EAAA,WACAtM,EAAAiM,EAAA,sDAAApxC,EAAAgB,MAAAgiC,GAEAyO,IACA,IAAAC,GAAA,WACA1O,EAAAuO,MACAE,MAEAE,EAAA,WACA3xC,EAAAyhC,IACA0D,EACA,SAAA9N,GACA,IAAA,GAAA53B,GAAA,EAAAA,EAAA43B,EAAAma,QAAA1xC,OAAAL,IACAO,EAAA2B,QAAA01B,EAAAma,QAAA/xC,GAAAmyC,MAAAva,EAAAma,QAAA/xC,GAAAmyC,IAAA9xC,OAAA,EACA0xC,EAAA5vC,KAAAy1B,EAAAma,QAAA/xC,GAAAmyC,IAAA,IAEAJ,EAAA5vC,KAAAy1B,EAAAma,QAAA/xC,GAAAmyC,IAIA,IAAAJ,EAAA1xC,OAAAu3B,EAAAwa,eAAAL,EAAA1xC,OAAAuxC,EAAA,CACAK,GACAC,SACA,CAEAH,EAAA1xC,OAAA,EACAkrC,EAAAkC,eAAAsB,cAAAK,KAAA7D,EAAAc,GAEAd,EAAAkC,eAAAsB,cAAAC,MAAA3C,GAAAtrB,KAAA,qBAEA6a,GAAAmW,MAGAM,KAAA,SAAAC,EAAAC,EAAAC,GACAjH,EAAAkC,eAAAsB,cAAAC,MAAA3C,GACAzhB,QACAud,OAAA,mCAKAoD,GAAAkC,eAAAsB,cAAAC,MAAA3C,GACAzhB,QACAud,OAAA5nC,EAAA,kDACA4nC,OAAA5nC,EAAA+qC,EAAA1E,IAAAsB,WAAAnoC,EAAA,cAAA0yC,SAAAC,SAAA,sBACAR,KAKApzC,GAAAD,SACA6wC,aAAAA,EACAG,qCAAAA,EACAC,sCAAAA,KvBynOG6C,aAAa,GAAG3C,aAAa,GAAG5tC,OAASH,OAAU4kC,eAAe,KAAK+L,IAAI,SAAS7yC,EAAQjB,EAAOD,GwBxvOtG,YACA,IAAA0B,GAAA,WAAA,IAAA,MAAAR,GAAA,UAAA,MAAAR,GAAA,MAAAL,QAAAsB,UACA1B,GAAAD,QAAA,SAAA0sC,GACA,OACAmC,0BAAA,WACA,GAAAlrB,GAAA+oB,EAAAze,WAAAye,EAAA/b,YACA,IAAA,MAAAhN,EAAAuK,KAAA,CACAvK,EAAA+oB,EAAA8C,iBAAA7rB,EACA,IAAAA,GAAA,GAAAA,EAAAnF,OAAA2F,QAAA,KACA,OAAA,EAGA,OAAA,GAEAgf,IAAA,SAAAxf,GACA,GAAA,GAAAA,EAAAkvB,OAAArxC,OAAA,QACA,IAAAwyC,KAEAtyC,GAAAgrC,EAAApkB,qBAAAR,KAAA,YAAA1lB,KAAA,WACA,GAAA6xC,GAAAzzC,KAAAm/B,SACA,IAAA,GAAAsU,EAAA9vB,QAAA,KAAA,CAEA,GAAA+vB,GAAAxyC,EAAAlB,MAAA+tB,OACA4lB,EAAAD,EAAA7O,KAAA,QACA8O,IAAAD,EAAA7O,KAAA,SAAAlhB,QAAA,YAAA,IACA8vB,GAAAC,EAAAhyB,OAIA,IAAA+xB,EAAAzyC,QAAA,EAAA,MAGA,IAAA,IAAAyyC,EAAA9vB,QAAAR,GAAA,MAGA,IAAAswB,GAAAtwB,EAAA,MAGAqwB,GAAAC,IAAA,IAKA,IAAAG,KACA,KAAA,GAAAH,KAAAD,GACAI,EAAA9wC,KAAA2wC,EAEAG,GAAAvC,MACA,OAAAuC,IAEApX,OAAA,EACA8Q,MAAA,EACAQ,UAAA,MxB4vOG/qC,OAASH,SAAYixC,IAAI,SAASnzC,EAAQjB,EAAOD,GyBhzOpD,GAAAs0C,GAAApzC,EAAA,eACAQ,EAAA,WAAA,IAAA,MAAAR,GAAA,UAAA,MAAAR,GAAA,MAAAL,QAAAsB,WACA4yC,EAAA,SAAA/1B,GACA,MAAA,IAAAA,EAAA,IAEAve,GAAAD,SACAw0C,iBAAA,SAAA9H,EAAApsB,GACA,GAAAm0B,GAAAH,EAAAI,cAAAhI,EAAApsB,GACAumB,EAAA4N,EAAA5N,GACA,IAAA,IAAA4N,EAAA5N,IAAA1iB,QAAA,QAAA,CAGA,GAAA0iB,GAAAxmC,OAAAkyC,SAAAC,SAAA,KAAAnyC,OAAAkyC,SAAAoC,IAGA9N,IAFA,IAAA4N,EAAA5N,IAAA1iB,QAAA,KAEAswB,EAAA5N,IAGAxmC,OAAAkyC,SAAAqC,SAAAH,EAAA5N,IAGA,GAAAgO,IACA,OAAAhO,EACA,KAAA6F,EAAA7d,QAAAylB,OAAAQ,cAEA,SAAApI,EAAA7d,QAAAylB,OAAAQ,eACAD,EAAAvxC,KAAA,UAAAixC,EAAA7yC,EAAAgB,MAAA+xC,EAAA1b,OAEA,KAAA,GAAAgc,KAAAN,GAAAO,QACAH,EAAAvxC,KAAA,MAAAixC,EAAAQ,EAAA,KAAAN,EAAAO,QAAAD,IAEA,OAAAF,GAAAI,KAAA,SzBqzOGC,cAAc,GAAG3xC,OAASH,SAAY+xC,IAAI,SAASj0C,EAAQjB,EAAOD,G0B90OrE,GAAA0B,GAAA,WAAA,IAAA,MAAAR,GAAA,UAAA,MAAAR,GAAA,MAAAL,QAAAsB,WACAlB,EAAAS,EAAA,YACAT,GAAA8+B,SAAA79B,EAAA0zC,QAAA,KAAA30C,EAAA8+B,UACAF,KAAA,WAIA6D,MAAA,uKACAmS,2BACAC,UAAA,MAEAC,QAAA,SACAC,aAAA,EACAC,cAAA,EACAC,UAAA,EACApjB,YACA/B,YAAA,GAAA9vB,GAAAmwB,KAAA+kB,QAAAl1C,EAAAmwB,KAAAglB,MAAAn1C,EAAAmwB,KAAA+gB,SAEAkE,wBAAA,EACAC,SAAA,iBAAA,yBAAA,yBACAtqB,eAAA,EACAuqB,aAAA,EACAC,kBAAA,EAOAxd,WAIAyd,aAAAx1C,EAAAunB,aAEAkuB,YAAAz1C,EAAAunB,aACAmuB,SAAA11C,EAAA21C,WACAC,SAAA51C,EAAA21C,WACAE,QAAA71C,EAAA21C,WACAG,QAAA91C,EAAA21C,WACAI,SAAA/1C,EAAAg2C,aACAC,QAAAj2C,EAAAg2C,aACAE,gBAAAl2C,EAAAm2C,aACAC,cAAAp2C,EAAAq2C,WACAC,eAAAt2C,EAAAm2C,aACAI,aAAAv2C,EAAAq2C,WACAG,eAAAx2C,EAAAy2C,aACAC,cAAA12C,EAAAy2C,aACAE,SAAA32C,EAAA42C,WACAC,QAAA72C,EAAA42C,WACAE,SAAA92C,EAAA+2C,WACAC,QAAAh3C,EAAA+2C,WACAE,SAAAj3C,EAAAk3C,WACAC,QAAAn3C,EAAAk3C,WACAE,aAAAp3C,EAAAq3C,aACAC,YAAAt3C,EAAAq3C,aACAE,IAAA,SAAAtL,GACAA,EAAAuL,UAAA,cAAAvL,EAAAnd,UAAA,gBAEA6I,IAAA,SAAAsU,GACAA,EAAAnd,UAAA,eAAAmd,EAAAuL,UAAA,cAAA,KAGAC,aAAA,GAQAC,gBAAA13C,EAAA03C,gBAEAC,gBAAA,KAKAC,iBAAA53C,EAAA43C,iBAeA1K,WAAA,SAAAjB,GACA,MAAA,SAAAhrC,EAAAgrC,EAAApkB,qBAAAgwB,QAAA,QAAAjT,KAAA,MAAA,aAOAiP,QACAiE,UAAA,SAAA7L,GAAA,MAAAA,GAAA8L,gBACAC,iBAAA,EAQAC,SAAA,4BAOA5D,cAAA,OAKA6D,kBAAA,wBAIAC,mBAAA,4CAIAC,mBAAA,uBAKAC,eAIAC,iBAKArU,QAKAsQ,WAEAgE,gBAAA,KAIAlK,WACAmK,WAAA,KACAh3B,SAAA,KACAi3B,MAAA,KACAlK,QAAA,MAEAmK,iB1By1OGC,YAAY,GAAG71C,OAASH,SAAYi2C,IAAI,SAASn4C,EAAQjB,EAAOD,G2B9/OnEC,EAAAD,QAAAkB,EAAA,e3BmgPGk4C,YAAY,KAAKE,IAAI,SAASp4C,EAAQjB,EAAOD,G4BtgPhD,YACAC,GAAAD,SACAugC,MAAA,ucACAgZ,aAAA,wsFACAC,SAAA,4cACAC,MAAA;AACAC,QAAA,8mDACAC,WAAA,mqEACAC,YAAA,mrE5B0gPMC,IAAI,SAAS34C,EAAQjB,EAAOD,G6BlhPlC,YAEAK,QAAAwnC,QAAAxnC,OAAAwnC,UACAC,IAAA,aAMA,IAAApmC,GAAA,WAAA,IAAA,MAAAR,GAAA,UAAA,MAAAR,GAAA,MAAAL,QAAAsB,WACAye,EAAA,WAAA,IAAA,MAAAlf,GAAA,cAAA,MAAAR,GAAA,MAAAL,QAAA+f,eACAosB,EAAAtrC,EAAA,cACAurC,EAAAvrC,EAAA,gBACA44C,EAAA54C,EAAA,YAEAA,GAAA,oBACAA,GAAA,oCACAA,GAAA,sCACAA,GAAA,oCACAA,GAAA,sCACAA,GAAA,kBACAA,GAAA,qCACAA,GAAA,0CACAA,GAAA,yCACAA,GAAA,sCACAA,GAAA,yCACAA,GAAA,8BAaA,IAAAohC,GAAAriC,EAAAD,QAAA,SAAAmpC,EAAA7oB,GACA,GAAAy5B,GAAAr4C,EAAA,SACAs4C,QAAA,UACA1J,SAAA5uC,EAAAynC,GACA7oB,GAAA25B,EAAA35B,EACA,IAAAosB,GAAAwN,EAAA95B,EAAA25B,EAAA,GAAAz5B,GACA65B,GAAAzN,EACA,OAAAA,IAaAuN,EAAA,SAAA35B,GACA,GAAA85B,GAAA14C,EAAA0zC,QAAA,KAAA9S,EAAA/C,SAAAjf,EAMA,OAAA85B,IAQAF,EAAA,SAAAxN,GAEAA,EAAAkC,eAAA1tC,EAAA,yCAAAohC,EAAAoK,EACAA,GAAA7d,QAAA+f,gBACAlC,EAAA7d,QAAA+f,eAAApL,QAAA,SAAAjhB,GACA+f,EAAA+X,eAAA93B,IAAAmqB,EAAAkC,eAAAqB,KAAA1tB,EAAA+f,EAAA+X,eAAA93B,KAGAmqB,GAAA4N,kBAAA,IACA5N,GAAA8C,iBAAA,SAAA7rB,EAAA9gB,GACA,MAAA3B,GAAA,mBAAAsuC,iBAAA9C,EAAA/oB,EAAA9gB,GAEA6pC,GAAAqE,sBAAA,SAAAlnB,EAAAlG,GACA,MAAAziB,GAAA,mBAAA6vC,sBAAArE,EAAA7iB,EAAAlG,GAEA+oB,GAAA6N,kBAAA,SAAAC,EAAAC,GACA,MAAAv5C,GAAA,mBAAAq5C,kBAAA7N,EAAA8N,EAAAC,GAEA/N,GAAAqF,iBAAA,SAAA2I,GACAt3C,SAAAs3C,IAAAA,GAAA,EACAhO,GAAAhc,SAAAxvB,EAAA,mBAAAy5C,oBAAAjO,GAAApK,EAAA1R,KAAA+gB,OAAA+I,EAAA,OAAA,UAEA,IAAAhF,GAAA,KACAkF,EAAA,IACAlO,GAAAmO,YAAA,SAAAzK,GAGA,GAAA1D,EAAA7d,QAAA6mB,UAAA,IAAAhJ,EAAA7d,QAAA6mB,UAAA,MAAAhJ,EAAA7d,QAAA6mB,SAAA,CACA,GAAA,OAAAkF,EAAA,CACAA,GAAAlO,EAAA7d,QAAA6mB,QACA,KAAAkF,IAEAA,EAAA,KAKAlF,IACAA,EAAAh0C,EAAA,SACAs4C,QAAA,aAEAc,MAAA,WACAp5C,EAAAlB,MAAA+vC,SAEAwK,YAAAr5C,EAAAgrC,EAAApkB,sBAEA8nB,GACAsF,EAAAtF,KAAAwK,GAEAlF,EAAAnF,KAAAqK,IAaAlO,GAAAnM,MAAA,SAAAya,GACA1Y,EAAAwV,aAAApL,EAAAsO,GAGAtO,GAAAuO,gBAAA,SAAA36B,GACA,MAAAgiB,GAAA2Y,gBAAAvO,EAAApsB,GASAosB,GAAA2F,qBAAA,WACA,MAAAnxC,GAAA,oBAAAmxC,qBAAA3F,GAGAA,GAAA4F,YAAA,SAAAtrB,GACA,MAAA9lB,GAAA,oBAAAoxC,YAAA5F,EAAA1lB,GAEA0lB,GAAAwO,eAAA,SAAAl0B,GACA,MAAA9lB,GAAA,oBAAAg6C,eAAAxO,EAAA1lB,GAGA0lB,GAAAyO,wBAAA,WACA,GAAAC,GAAA,EACA9Y,GAAAnD,QAAAuN,EAAA2O,WAAA,WAAA,SAAAC,EAAAxyB,GACA,WAAAA,IACAsyB,GAAAE,IAGA,OAAAF,GASA1O,GAAA6O,aAAA,WACA,MAAA7O,GAAAxpB,UASAwpB,GAAA8L,aAAA,WACA,GAAAtqB,GAAAwe,EAAA6O,cACA,OAAA,UAAArtB,GAAA,UAAAA,GAAA,QAAAA,GAAA,SAAAA,GAAA,UAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,OAAAA,EACA,SAEA,QAKAwe,GAAA8O,qBAAA,SAAAC,GACA/O,EAAA7d,QAAAmnB,iBAAAyF,CACAC,GAAAhP,GAGAA,GAAAiP,gBAAA,SAAAp5B,GACAq5B,EAAAlP,EAAA7d,QAAAtM,EACA+f,GAAA+X,eAAA93B,IAAAmqB,EAAAkC,eAAAqB,KAAA1tB,EAAA+f,EAAA+X,eAAA93B,IAEAmqB,GAAAmP,iBAAA,SAAAt5B,GACAu5B,EAAApP,EAAA7d,QAAAtM,GAEA,OAAAmqB,IAGAkP,EAAA,SAAAG,EAAAx5B,GACAw5B,EAAAnN,iBAAAmN,EAAAnN,kBACAmN,GAAAnN,eAAAtrC,KAAAif,IAEAu5B,EAAA,SAAAC,EAAAx5B,GACA,GAAA,gBAAAw5B,GAAAnN,eAAA,CACA,GAAAja,GAAAjzB,EAAAitC,QAAApsB,EAAAw5B,EAAAnN,eACA,IAAAja,GAAA,EAAA,CACAonB,EAAAnN,eAAAoN,OAAArnB,EAAA,EACAmnB,GAAAC,EAAAx5B,MAIA43B,EAAA,SAAAzN,GAIA,GAAAe,GAAAjB,EAAAkB,iBAAAhB,EAAAA,EAAA7d,QAAA8e,WACA,IAAAF,EAAA,CACA,GAAAwO,GAAAxP,EAAA5J,QAAAM,IAAAsK,EACAwO,IACAvP,EAAAwP,SAAAD,GAGA3Z,EAAA6Z,YAAAzP,EAKAA,GAAA7f,GAAA,OAAA,SAAA6f,EAAAI,GACAxK,EAAAqV,WAAAjL,IAEAA,GAAA7f,GAAA,SAAA,SAAA6f,EAAAI,GACA4O,EAAAhP,EACApK,GAAA8Z,kBAAA1P,EACApK,GAAA+Z,gBAAA3P,IAEAA,GAAA7f,GAAA,UAAA,WAEA6uB,EAAAhP,EACApK,GAAA8Z,kBAAA1P,EACApK,GAAA+Z,gBAAA3P,IAGAA,GAAA7f,GAAA,iBAAA,SAAA6f,EAAAI,GACAwP,EAAA5P,IAEAA,GAAA6P,gBAAA,CACAb,GAAAhP,EACApK,GAAA+Z,gBAAA3P,EAEAhrC,GAAAgrC,EAAApkB,qBAAAuE,GAAA,aAAA,WAAA,WACA,GAAA2vB,GAAA96C,EAAAlB,MAAA0hB,MACAxgB,GAAAgrC,EAAApkB,qBAAAR,KAAA,YAAApQ,OAAA,WACA,MAAAhW,GAAAlB,MAAA0hB,SAAAs6B,IACA3I,SAAA,iBACAhnB,GAAA,aAAA,WAAA,WACAnrB,EAAAgrC,EAAApkB,qBAAAR,KAAA,gBAAA20B,YAAA,gBAKA,IAAA/P,EAAA7d,QAAAwpB,iBAAA,CACA3L,EAAA7d,QAAAwpB,iBAAA3L,EAAAgQ,IAEAr8C,QAAAs8C,iBAAA,aAAA,WACAjQ,EAAA7d,QAAAwpB,iBAAA3L,EAAAgQ,OAGAhQ,EAAA7d,QAAAgnB,wBAAAnJ,EAAAqF,kBAAA,IAMA2K,EAAA,WAEA,GAAAE,GAAA,IACAv8C,QAAAkyC,SAAAsK,KAAAr7C,OAAA,IAGAo7C,EAAAl7C,EAAAE,QAAA2wC,SAAAuK,KAAAx6C,MAAA,KAAA,IAEAs6C,IAAA,SAAAA,MAAAv8C,OAAAkyC,SAAAwK,OAAAv7C,OAAA,KAEAo7C,EAAAl7C,EAAAE,QAAAvB,OAAAkyC,SAAAwK,OAAA5K,UAAA,IAEA,OAAAyK,IASAN,EAAA,SAAA5P,GACAA,EAAAzR,OAAAv5B,EAAA,qBACAgrC,GAAAsQ,SAAAtQ,EAAAsQ,QAAA/P,GAAA,aAAAP,EAAAzR,OAAAz5B,OAAA,IACAgrC,EAAAyQ,gBAAAvQ,EAAAzR,OAAAyR,EAAAsQ,SACAtQ,EAAAsQ,QAAAl1B,KAAA,OAAAud,KAAA,UAAA,OAEAqH,EAAAsQ,QAAAl1B,KAAA,OAAAud,KAAA,UAAA,SAcAqW,EAAA,SAAAhP,EAAAwQ,GAEAxQ,EAAAyQ,YAAA,CAEAzQ,GAAAlZ,YAAA,iBAGA,KAAA,GADAvS,GAAA,KACA3f,EAAA,EAAAA,EAAAorC,EAAA3K,cAAAzgC,EAAA,CACA,GAAA87C,IAAA,CACA1Q,GAAA6P,iBAIAa,GAAA,EAGA,IAAAz5B,GAAA+oB,EAAAze,YACApE,KAAAvoB,EACAyoB,GAAA2iB,EAAAphB,QAAAhqB,GAAAE,QACA47C,GACAn8B,EAAA0C,EAAA1C,KACAyrB,GAAAxpB,UAAAjC,EAAAiC,SACA,IAAA,GAAAjC,EAAAwC,GAAA,CACA,IAAAipB,EAAA7d,QAAAmnB,iBAAA,CAEAt0C,EAAAgrC,EAAApkB,mBAAAR,KAAA,aAAAwlB,IAAA,QAAA,QAEA,QAGA,GAAA+P,GAAA5Q,EAAA1E,IAAAsB,WAAAyQ,EAAAJ,QACAz4B,GAAAsC,iBAAAtC,EAAAsC,gBAAA/hB,OAAA,GAEAN,EAAA,aAAAwrC,EAAA2Q,EAAA,WACA,GAAAC,KACAr8B,GAAAsC,gBAAAigB,QAAA,SAAA+Z,GACAD,EAAAh6C,KAAA,6CAAA5B,EAAA,UAAAwgB,KAAAq7B,GAAAC,OAAA,cAEA,OAAA,mCAAAF,EAAArI,KAAA,OAGAoI,GAAAr7B,MAAAy7B,UAAA,KACAJ,GAAAr7B,MAAA07B,WAAA,KACAL,GAAAv0B,UAAA,gBACA4jB,GAAA/Z,gBAAArxB,EAAA,iBAAA+7C,EAEA3Q,GAAAyQ,YAAA,CACA,QAGAzQ,EAAA6P,eAAA7P,EAAAyQ,UACA,IAAAD,GACA,MAAAj8B,GAAA7d,QAAA6d,EAAA2C,MAAA,CACA,GAAAA,GAAA3C,EAAA2C,MACA+5B,EAAA18B,EAAA2C,MAAApiB,MAIAm8C,GAAA,EACAjR,EAAAyQ,YAAA,EACA,GAAAQ,GACA,oBAAA/5B,EAAA,IAAA,uBAAAA,EAAA,IAAA,iBAAAA,EAAA,KACA8oB,EAAAyQ,YAAA,IASAz7C,GAAA0zC,OAAA9S,EAAAliB,EAIAkiB,GAAA+X,iBACA/X,GAAAsb,sBAAA,SAAAr7B,EAAAs7B,GACAvb,EAAA+X,eAAA93B,GAAAs7B,CACAjC,GAAAtZ,EAAA/C,SAAAhd,GAGA+f,GAAAta,aAAA,SAAA0kB,GAEAA,EAAAkC,eAAA5mB,cAAA,GAGAsa,GAAAsb,sBAAA,WAAA18C,EAAA,gCACAohC,GAAAsb,sBAAA,aAAA18C,EAAA,kCACAohC,GAAAsb,sBAAA,UAAA18C,EAAA,+BACAohC,GAAAsb,sBAAA,YAAA18C,EAAA,iCAGAohC,GAAA+Z,gBAAA,SAAA3P,GACA,GAAAQ,GAAAxrC,EAAAgrC,EAAApkB,qBAAAR,KAAA,0BACAqlB,EAAA,CACAD,GAAAD,GAAA,cACAE,EAAAD,EAAAE,aAEAV,GAAAsQ,QAAA/P,GAAA,aAAAP,EAAAsQ,QAAA1P,IAAA,QAAAH,EAAA,GAWA7K,GAAA6V,gBAAA,SAAAzL,GAEA,GAAAkQ,KACAv8C,QAAAkyC,SAAAsK,KAAAr7C,OAAA,IAAAo7C,EAAAl7C,EAAAE,QAAAvB,OAAAkyC,SAAAsK,KAAA1K,UAAA,IACAyK,GAAA,MAAAlQ,EAAA2O,UACA,OAAAuB,GAEAta,GAAAwb,UAAA,SAAApR,EAAA+H,GACA,GAAAsJ,GAAA78C,EAAA,YACA,OAAA68C,GAAAvJ,iBAAA9H,EAAA+H,GAQAnS,GAAA+V,iBAAA,SAAA3L,EAAAkQ,GACAA,GAAAA,EAAArc,OACAmM,EAAAwP,SAAAU,EAAArc,OAGA+B,GAAA6Z,YAAA,SAAAzP,GACAA,EAAAsQ,QAAAt7C,EAAA,qCAAA4uC,SAAA5uC,EAAAgrC,EAAApkB,qBAKA,IAAAokB,EAAA7d,QAAAspB,gBAAA,CAEA,GAAA6F,GAAAt8C,EAAA+qC,EAAA1E,IAAAsB,WAAAyQ,EAAAL,OACAuE,GAAAlD,MAAA,SAAAmD,GACAA,EAAAC,iBACA,IAAAC,GAAAz8C,EAAA,wCAAA4uC,SAAA5D,EAAAsQ,QACAt7C,GAAA,QAAAo5C,MAAA,WACAqD,GAAAA,EAAA32B,UAGA22B,GAAArD,MAAA,SAAAmD,GACAA,EAAAC,mBAEA,IAAAE,GAAA18C,EAAA,WAAAe,IAAA8vC,SAAAC,SAAA,KAAAD,SAAAoC,KAAApC,SAAAqC,SAAArC,SAAAwK,OAAA,IAAAr7C,EAAAgB,MAAAgqC,EAAA7d,QAAAspB,gBAAAzL,IAEA0R,GAAAhyB,MAAA,WACA,GAAAiyB,GAAA38C,EAAAlB,KACA69C,GAAAC,QAGAD,GAAAE,QAAA,WAEAF,EAAAG,OAAA,UACA,QAAA,KAIAL,GAAApyB,QAAAud,OAAA5nC,EAAA,SAAAs4C,QAAA,iBAAA1Q,OAAA8U,GACA,IAAA1R,EAAA7d,QAAAupB,gBAAA,CACA+F,EAAAtK,SAAA,cACAnyC,GAAA,4BACAmyC,SAAA,4CACAiH,MAAA,WACAp5C,EAAAlB,MAAA2oC,SAAArhB,KAAA,UAAAud,KAAA,WAAA,WACAqH,GAAA7d,QAAAupB,gBAAAgG,EAAA37C,MAAA,SAAAg8C,EAAAC,GACA,GAAAD,EAAA,CACAL,EAAA52B,QACA22B,GAAAr2B,KAAA,iBAAAwhB,OAAA5nC,EAAA,UAAAs4C,QAAA,iBAAA93B,KAAAu8B,QAEAL,GAAA37C,IAAAi8C,GAAAtyB,YAGAkkB,SAAA6N,GAEAz8C,EAAA,yBACAmyC,SAAA,4CACAiH,MAAA,WAEAp5C,EAAAlB,MAAA2oC,SAAArhB,KAAA,UAAAud,KAAA,WAAA,WACA+Y,GAAA37C,IAAA6/B,EAAAwb,UAAApR,IAAAtgB,UACAkkB,SAAA6N,EACA,IAAAQ,GAAAX,EAAAY,UACAT,GAAA7Q,IAAA,MAAAqR,EAAA9kB,IAAAmkB,EAAAa,cAAAC,SAAAX,EAAA7Q,IAAA,gBAAA,MAAAA,IAAA,OAAAqR,EAAA/kB,KAAAokB,EAAA5Q,aAAA+Q,EAAA/Q,aAAA,KACAgR,GAAAhyB,UAEAynB,SAAA,eACAxO,KAAA,QAAA,oBACAiL,SAAA5D,EAAAsQ,SASA,GAAA+B,GAAAr9C,EAAA,SACAs4C,QAAA,yBAEA1Q,OAAA5nC,EAAA+qC,EAAA1E,IAAAsB,WAAAyQ,EAAAH,aACA9F,SAAA,uBACAxO,KAAA,QAAA,0BACAyV,MAAA,WACApO,EAAAuL,UAAA,cAAA,MAEA3O,OAAA5nC,EAAA+qC,EAAA1E,IAAAsB,WAAAyQ,EAAAF,cACA/F,SAAA,wBACAxO,KAAA,QAAA,8BACAyV,MAAA,WACApO,EAAAuL,UAAA,cAAA,KAEAvL,GAAAsQ,QAAA1T,OAAAyV,EAGA,IAAArS,EAAA7d,QAAAylB,OAAAmE,gBAAA,CACA/2C,EAAA,SACAs4C,QAAA,sBAEAc,MAAA,WACA,GAAAp5C,EAAAlB,MAAAw+C,SAAA,cAAA,CACAtS,EAAAuS,KAAAvS,EAAAuS,IAAAC,OACA5c,GAAA8Z,kBAAA1P,OAEAA,GAAAnM,UAGA+P,SAAA5D,EAAAsQ,QACA1a,GAAA8Z,kBAAA1P,IAMA,IAAAyS,IACAC,KAAA,SACAC,MAAA,QACAnG,MAAA,eASA5W,GAAA8Z,kBAAA,SAAA1P,EAAA4S,GACA,GAAAC,GAAA79C,EAAAgrC,EAAApkB,qBAAAR,KAAA,qBACA,IAAA,GAAAy3B,EAAA/9C,OAAA,CAGA,IAAA89C,EAAA,CACAA,EAAA,OACA5S,GAAAyQ,cAAA,IAAAmC,EAAA,SAGA,GAAAA,GAAA5S,EAAA8S,YAAA,CACAD,EACAxzB,QACA0wB,YAAA,SAAA9nB,EAAA8qB,GACA,MAAAA,GAAAn9C,MAAA,KAAAoV,OAAA,SAAAgoC,GAEA,MAAA,IAAAA,EAAAv7B,QAAA,YACA8wB,KAAA,MAGA,IAAA,QAAAqK,EAAA,CACAC,EAAAjW,OAAA5nC,EAAA,SACAs4C,QAAA,WAEAtN,GAAA8S,YAAAF,MACA,IAAA,SAAAA,GAAA,SAAAA,EAAA,CACAC,EAAA1L,SAAA,SAAAyL,EACA7S,GAAA1E,IAAAmB,KAAAqW,EAAAzF,EAAAqF,EAAAG,IACA5S,GAAA8S,YAAAF,KAYAhd,GAAAqd,aAAA,SAAAC,EAAAt/B,GACAA,EAAA25B,EAAA35B,EAGA,IAGAosB,IAHAhrC,EAAA,SACAs4C,QAAA,UACA6F,aAAAn+C,EAAAk+C,IAAAtW,OAAA5nC,EAAAk+C,IACA1F,EAAA95B,EAAAu/B,aAAAC,EAAAt/B,IACA65B,GAAAzN,EACA,OAAAA,GAIApK,GAAAqV,WAAA,SAAAjL,GACA,GAAAe,GAAAjB,EAAAkB,iBAAAhB,EAAAA,EAAA7d,QAAA8e,WACAF,IACAhB,EAAA5J,QAAAI,IAAAwK,EAAAf,EAAA2O,WAAA,SAGA/Y,GAAAmU,aAAA,SAAA/J,GAQA,IAAA,GAPAre,GAAAqe,EAAA/b,WAAA,GAAA9G,KACAoL,EAAAyX,EAAA/b,WAAA,GAAA9G,KACAoB,EAAAD,KAAAC,IAAAoD,EAAA4G,GACA9J,EAAAH,KAAAG,IAAAkD,EAAA4G,GAGA6qB,GAAA,EACA3+C,EAAA8pB,EAAA9pB,GAAAgqB,EAAAhqB,IAAA,CACA,GAAA0oB,GAAA6iB,EAAAphB,QAAAnqB,EACA,IAAA,GAAA0oB,EAAAroB,QAAA,KAAAqoB,EAAAsoB,UAAA,EAAA,GAAA,CACA2N,GAAA,CACA,QAGA,IAAA,GAAA3+C,GAAA8pB,EAAA9pB,GAAAgqB,EAAAhqB,IACA2+C,EAEApT,EAAAvO,aAAA,IACAtU,KAAA1oB,EACA4oB,GAAA,IAEAF,KAAA1oB,EACA4oB,GAAA,IAIA2iB,EAAAvO,aAAA,KACAtU,KAAA1oB,EACA4oB,GAAA,IAOAuY,GAAAwU,WAAA,SAAApK,GACA,GAAAzR,GAAAyR,EAAA/b,YACAoR,EAAA2K,EAAA3K,WAEA2K,GAAAvO,aAAA,MACAtU,KAAAkY,EAAA,EACAhY,GAAA2iB,EAAAphB,QAAAyW,EAAA,GAAAvgC,QAGA,KAAA,GAAAL,GAAA4gC,EAAA5gC,EAAA85B,EAAApR,KAAA1oB,IAAA,CACA,GAAA0oB,GAAA6iB,EAAAphB,QAAAnqB,EAAA,EACAurC,GAAAvO,aAAAtU,GACAA,KAAA1oB,EACA4oB,GAAA,IAEAF,KAAA1oB,EACA4oB,GAAA2iB,EAAAphB,QAAAnqB,GAAAK,UAIA8gC,GAAAsU,aAAA,SAAAlK,GACApK,EAAAwU,WAAApK,EAEA,IAAAzR,GAAAyR,EAAA/b,WACAsK,GAAApR,MACA6iB,GAAAqT,UAAA9kB,GAEAqH,GAAA4U,aAAA,SAAAxK,GACA,GAAAA,EAAA/P,oBAAA,CACA,GAAAnS,IACAX,KAAA6iB,EAAA/b,WAAA,GAAA9G,KACAE,GAAA2iB,EAAAxW,eAAA10B,OAEAw+C,GAAAtT,EAAAA,EAAA/b,WAAA,GAAAnG,OACA,CACA,GAAAy1B,GAAAvT,EAAA3K,YACAme,EAAAxT,EAAAyT,cAAAjd,MAAA1hC,MACAw+C,GAAAtT,GACA7iB,KAAA,EACAE,GAAA,IAEAF,KAAAo2B,EACAl2B,GAAAm2B,KAOA,IAAAF,GAAA,SAAAtT,EAAAniB,EAAAC,GACA,GAAA41B,GAAA1T,EAAA2T,aAAA91B,GACA+1B,EAAA5T,EAAA2T,aAAA71B,GAGA+1B,EAAAC,EAAA9T,EAAA2O,WAAA+E,EAAAE,EAGA5T,GAAArgB,UAAA,WACAqgB,EAAAvO,aAAAoiB,EAAAh2B,EAAAC,EAGA,KAAA,GAFA6D,GAAAqe,EAAA+T,aAAAL,GAAAv2B,KACAoL,EAAAyX,EAAA+T,aAAAL,EAAAG,EAAA/+C,QAAAqoB,KACA1oB,EAAAktB,EAAAltB,GAAA8zB,EAAA9zB,IACAurC,EAAAgU,WAAAv/C,EAAA,YAKAq/C,EAAA,SAAAt+B,EAAAC,EAAAoJ,GACArJ,EAAAA,EAAAiwB,UAAAhwB,EAAAoJ,EACA,IAAAo1B,KACA,UAAA,KAAA,WAAA,KAAA,QACA,UAAA,KAAA,QAEAC,GAAA,IAAA,IAAA,KACAC,GAAA,KACAC,EAAA,SAAAxF,EAAAptB,GACA,IAAA,GAAA/sB,GAAA,EAAAA,EAAAw/C,EAAAn/C,OAAAL,IACA,GAAA4/C,EAAAC,UAAAlgC,YAAA6/B,EAAAx/C,GAAA6/C,UACAlgC,WACA,MAAA,EAGA,KAAA,GAAA3f,GAAA,EAAAA,EAAAy/C,EAAAp/C,OAAAL,IACA,GAAAm6C,GAAAsF,EAAAz/C,GACA,MAAA,EAGA,KAAA,GAAAA,GAAA,EAAAA,EAAA0/C,EAAAr/C,OAAAL,IAGA,GAAA,IAAAO,EAAAmxC,KAAAoO,IAAA3F,GAAAuF,EAAA1/C,GACA,QAGA,OAAA,IAEA+/C,EAAA,GACAD,EAAA,GACAF,IACA3gC,GAAA+e,QAAAjd,EAAA,WAAA,SAAAo5B,EAAAptB,GACA6yB,EAAAz9C,KAAA4qB,EACA,IAAAizB,GAAAL,EAAAxF,EAAAptB,EACA,IAAA,GAAAizB,EAAA,CACA,GAAA,GAAAA,EAAA,CACAD,GAAA5F,EAAA,IACA2F,GAAA,OACA,CACAC,GAAA,KAAA5F,CACA2F,GAAA3F,EAEAyF,SACA,CACAE,GAAA3F,CACA4F,IAAA5F,EAEA,GAAAyF,EAAAv/C,QAAA,SAAAu/C,EAAA,KACAA,OAEA,OAAAr/C,GAAAmxC,KAAAqO,EAAA7+C,QAAA,WAAA,OAGAnB,GAAA,eACAA,EAAA,gBACAohC,GAAA5gC,EAAAA,CACA4gC,GAAAU,SACA5iB,WAAAA,EAAA4iB,QACAviC,MAAAS,EAAA,mBAAA8hC,QACAz/B,OAAA7B,EAAAs8B,GAAAz6B,OACAykC,eAAAyE,EAAAzJ,W7BshPGoe,oBAAoB,EAAEC,8BAA8B,EAAEnZ,kBAAkB,GAAGoZ,wCAAwC,GAAGC,8BAA8B,GAAGC,+BAA+B,GAAGC,iCAAiC,GAAGC,gCAAgC,GAAGC,YAAY,GAAGC,gBAAgB,GAAGC,YAAY,GAAGC,kBAAkB,GAAGC,mBAAmB,GAAG7M,cAAc,GAAG8M,kBAAkB,GAAGC,YAAY,GAAG9Q,aAAa,GAAGvqB,WAAaxjB,OAAU8+C,yCAAyC,EAAEC,yCAAyC,EAAEC,sCAAsC,EAAEC,oCAAoC,EAAEC,sCAAsC,EAAEC,oCAAoC,GAAGC,qCAAqC,GAAGC,sCAAsC,GAAGC,0CAA0C,GAAGn/C,OAASH,OAAU4kC,eAAe,KAAK2a,IAAI,SAASzhD,EAAQjB,EAAOD,G8BzyQ/2B,QAAA4iD,GAAAx6B,EAAAyB,EAAAE,EAAAsD,GACAtD,IAAAA,EAAA,EACAsD,KAAAA,EAAAjF,EAAAkD,QAAAzB,GACAwD,GAAAA,EAAA3K,aACA,KAAA,GAAAyK,GAAApD,EAAAqD,EAAA,IAAA,CACA,GAAA/C,GAAAgD,EAAAlJ,QAAA0+B,EAAA11B,EACA,IAAA9C,MAAA,CAOA,GAAA,GAAA+C,GAAA/C,EAAAN,EACA,KACAwD,WAAAnF,EAAA+B,eAAA/J,EAAAgK,IAAAP,EAAAQ,EAAA,GACA,KAAA,oBAAArnB,KAAAuqB,WACA,MAAAlD,GAAA,CACA8C,GAAA9C,EAAA,MAZA,CACA,GAAA,GAAA+C,EACA,KACAA,GAAA,CACAD,GAAAE,EAAA7rB,SA1BA,GAAA4e,GAAA,WAAA,IAAA,MAAAlf,GAAA,cAAA,MAAAR,GAAA,MAAAL,QAAA+f,eACA0iC,EAAA5hD,EAAA,mBAGA2hD,EAAA,QACA5iD,GAAAD,SACA26C,oBAAA,SAAAvyB,GAEA,IAAA,GADA8C,GAAA9C,EAAA8C,WACA/pB,EAAA,EAAAA,GAAA+pB,IAAA/pB,EACA,GAAAyhD,EAAAx6B,EAAAjnB,IAAA,EACA,MAAAA,IA4BAif,GAAA4M,eAAA,OAAA,SAAA,SAAA5E,EAAAjG,GAMA,QAAA4gC,KAEA,IAAA,GADAA,IAAA,EACA5hD,EAAA0oB,EAAA,EAAA1oB,GAAA,EAAAA,IACA,GAAAinB,EAAAkD,QAAAnqB,GAAAuhB,cAAAyB,QAAA0+B,IAAA,EAAA,CACAE,GAAA,CACA,OAGA,MAAAA,GAbA,GAAAl5B,GAAA1H,EAAA0H,KACAwD,EAAAjF,EAAAkD,QAAAzB,GAkCAm5B,EAAA,SAAAn5B,EAAAE,GACA,GAAAk5B,GAAA76B,EAAA6F,WAAA7N,EAAAgK,IAAAP,EAAAE,EAAA,GACA,KAAAk5B,GAAA,WAAAA,EAAA/0B,KAAA,QACA,IAAAg1B,GAAAJ,EAAAvI,kBAAAnyB,EAAAyB,EAAAo5B,EAAA13B,IAAA,EACA,KAAA23B,GAAA,YAAAA,EAAAh1B,KAAA,QACA,IAAAi1B,GAAAL,EAAAvI,kBAAAnyB,EAAAyB,EAAAq5B,EAAA33B,IAAA,EACA,OAAA43B,IAAA,cAAAA,EAAAj1B,KACAi1B,EAAA53B,OAIA,KAAAw3B,IAAA,CAEA,GAAAK,GAAAR,EAAAx6B,EAAAyB,EAAA1H,EAAA4H,GAAAsD,EAEA,IAAA,MAAA+1B,EAAA,CAUA,IAAA,GAJAz1B,GAJA01B,EAAA,IACAC,GAAA,EAEAp4B,EAAA9C,EAAA8C,WAEAq4B,EAAAP,EAAAn5B,EAAAu5B,GACAI,EAAA35B,EAEA1oB,EAAA0oB,EAAA1oB,GAAA+pB,IACAo4B,IADAniD,EAMA,IAHA,GAAA+gB,GAAAkG,EAAAkD,QAAAnqB,GACAmiB,EAAAniB,GAAA0oB,EAAAu5B,EAAA,EAAA,IAEA,EACAE,GAAAphC,EAAAiC,QAAAk/B,IAAA,IACAC,GAAA,EAEA,IAAAG,GAAAvhC,EAAAQ,cACAyB,QAAA0+B,EAAAv/B,EAEA,MAAAmgC,GAAA,GAQA,KAPA,KAAA91B,EAAAq1B,EAAA7hD,EAAAsiD,IAAA,EAAA,CACAF,EAAA51B,CACA61B,GAAAriD,CACAmiB,GAAAigC,EAEAjgC,IAMA,OACAiH,KAAAnK,EAAAgK,IAAAP,EAAAu5B,EAAAP,EAAArhD,QACAgpB,GAAApK,EAAAgK,IAAAo5B,EAAAD,U9B6zQGvB,kBAAkB,GAAGp7B,WAAaxjB,SAAYsgD,IAAI,SAASxiD,EAAQjB,EAAOD,G+B37Q7E,YAOA,IAAAsyC,GAAA,SAAA5F,EAAA1lB,GACA,GAAA28B,GAAAjX,EAAA2F,sBAEA,IAAA,gBAAArrB,GACA48B,EAAAlX,EAAA1lB,OAEA,KAAA,GAAA68B,KAAA78B,GACA68B,IAAAF,IACAC,EAAAlX,EAAAmX,EAAA,MAAA78B,EAAA68B,GAAA,IAGAnX,GAAAqF,kBAAA,IAGA6R,EAAA,SAAAlX,EAAAoX,GAIA,IAAA,GAHAC,GAAA,KACAC,EAAA,EACAC,EAAAvX,EAAA3K,YACA5gC,EAAA,EAAAA,EAAA8iD,EAAA9iD,IAAA,CACA,GAAA+iD,GAAAxX,EAAA6N,kBAAAp5C,EACA,IAAA,MAAA+iD,IAAA,UAAAA,EAAA1lC,QAAA,QAAA0lC,EAAA1lC,QAAA,CACAulC,EAAAG,CACAF,GAAA7iD,GAIA,GAAA,MAAA4iD,EACArX,EAAAvO,aAAA,UAAA2lB,EAAA,MACAj6B,KAAA,EACAE,GAAA,QAEA,CACA,GAAAo6B,GAAAC,EAAA1X,EAAAsX,EACAtX,GAAAvO,aAAA,KAAAgmB,EAAA,UAAAL,GACAj6B,KAAAm6B,IAGAtX,EAAAqF,kBAAA,IAEAmJ,EAAA,SAAAxO,EAAA1lB,GACA,GAAAq9B,GAAA,SAAA7lC,GAEA,MAAAA,GAAAnc,QAAA,yBAAA,QAEA,KAAA,GAAAwhD,KAAA78B,GACA0lB,EAAAwP,SAAAxP,EAAA2O,WAAAh5C,QAAA,GAAA0jB,QAAA,aAAA89B,EAAA,QAAAQ,EAAA,IAAAr9B,EAAA68B,GAAA,KAAA,OAAA,MAAA,IAEAnX,GAAAqF,kBAAA,IAUAM,EAAA,SAAA3F,GAsCA,IAAA,GArCA0F,MACAkS,GAAA,EACAC,EAAA,SAAAC,EAAAC,GACA,GAAAH,EAAA,CACAG,IAAAA,EAAA,EACA,IAAA9gC,GAAA+oB,EAAA6N,kBAAAp5C,EAAAsjD,EACA,IAAA9gC,EAAA,CACAA,EAAA1C,MAAAsC,gBAAAY,QAAA,eAAAR,EAAA1C,MAAAuC,aAAAW,QAAA,gBAAAmgC,GAAA,EACA,IAAA,UAAA3gC,EAAAnF,OAAAkE,cAAA,CACA,GAAAivB,GAAAjF,EAAA6N,kBAAAp5C,EAAAwiB,EAAA4H,IAAA,EACA,IAAAomB,EAAA,CACA,GAAA2B,GAAA5G,EAAA6N,kBAAAp5C,EAAAwwC,EAAApmB,IAAA,EACA,IAAA+nB,EAAA,CACA,GAAAoR,GAAApR,EAAA90B,MACA,IAAAkmC,EAAAvgC,QAAA,OACAugC,EAAAA,EAAAvS,UAAA,GACA,MAAAuS,EAAAh2B,YACAg2B,EAAAA,EACAvS,UAAA,EAAAuS,EAAAljD,OAAA,GACA4wC,GAAAT,EAAAnzB,OAAAkQ,MAAA,OAAAg2B,CAEAH,GAAAC,EAAAlR,EAAA/nB,IAAA,OAEAg5B,GAAAC,EAAA7S,EAAApmB,IAAA,OAIAg5B,GAAAC,EAAA7gC,EAAA4H,IAAA,OAGAg5B,GAAAC,EAAA7gC,EAAA4H,IAAA,MAMA04B,EAAAvX,EAAA3K,YACA5gC,EAAA,EAAAA,EAAA8iD,GACAK,EADAnjD,IAEAojD,EAAApjD,EAGA,OAAAixC,IAWAgS,EAAA,SAAA1X,EAAA7iB,EAAA4wB,GACAr3C,QAAAq3C,IACAA,EAAA,EACA,IAAA92B,GAAA+oB,EAAAze,YACApE,KAAAA,EACAE,GAAA0wB,GAEA,OAAA,OAAA92B,GAAAvgB,QAAAugB,GAAA,MAAAA,EAAAuK,KACA,GAEAvK,EAAAnF,OAAA4lC,EAAA1X,EAAA7iB,EAAAlG,EAAA4H,IAAA,GAIAtrB,GAAAD,SACAsyC,YAAAA,EACAD,qBAAAA,EACA6I,eAAAA,Q/B87QMyJ,IAAI,SAASzjD,EAAQjB,EAAOD,GgCrkRlC,YACA,IAAA0B,GAAA,WAAA,IAAA,MAAAR,GAAA,UAAA,MAAAR,GAAA,MAAAL,QAAAsB,WACA6qC,EAAAtrC,EAAA,cACAT,EAAAS,EAAA,YAEAT,GAAAi0C,cAAA,SAAAhI,EAAAsO,GACA,GAAAje,GAAA,kBAAAie,GAAAA,EAAA,KACA16B,EAAA,gBAAA06B,GAAAA,IAEAtO,GAAA7d,QAAAylB,SACAh0B,EAAA5e,EAAA0zC,UAAA1I,EAAA7d,QAAAylB,OAAAh0B,GAGAA,GAAA64B,UACAz3C,EAAA0zC,QAAA,EAAA90B,EAAAwuB,UAAAxuB,EAAA64B,SAGA,IAAA74B,EAAAo4B,UAAA,GAAAp4B,EAAAo4B,SAAAl3C,OAAA,CAMA,GAAAizC,IACA5N,IAAA,kBAAAvmB,GAAAo4B,SAAAp4B,EAAAo4B,SAAAhM,GAAApsB,EAAAo4B,SACAxqB,KAAA,kBAAA5N,GAAAw0B,cAAAx0B,EAAAw0B,cAAApI,GAAApsB,EAAAw0B,cACAE,SACA4P,OAAAC,EAAAnY,EAAApsB,IAGAA,GAAAwkC,YAAArQ,EAAAqQ,UAAAxkC,EAAAwkC,UAIA,IAAAC,IAAA,CACA,IAAAzkC,EAAAwuB,UACA,IAAA,GAAAkW,KAAA1kC,GAAAwuB,UACA,GAAAxuB,EAAAwuB,UAAAkW,GAAA,CACAD,GAAA,CACAtQ,GAAAuQ,GAAA1kC,EAAAwuB,UAAAkW,GAIA,GAAA,QAAAvQ,EAAAvmB,KAAA,CAGA,GAAAoQ,IAAA,CACA58B,GAAAU,KAAAsqC,EAAAuO,gBAAA36B,GAAA,SAAA3d,EAAAF,GACAgyC,EAAA5N,MAAAvI,EAAA,IAAA,KAAA77B,EAAA8f,KAAA,IAAA0iC,mBAAAxiD,EAAAygC,MACA5E,IAAA,QAGAmW,GAAA1b,KAAA2T,EAAAuO,gBAAA36B,EAEA,IAAAykC,GAAAhoB,EAAA,CAIAA,IACA0X,EAAAxyB,SAAA8a,EAOAzc,GAAA00B,UAAAtzC,EAAAwjD,cAAA5kC,EAAA00B,UACAtzC,EAAA0zC,OAAAX,EAAAO,QAAA10B,EAAA00B,QAGA,IAAAmQ,GAAA,GAAArc,MACAsc,EAAA,WACA1Y,EAAA4N,kBAAA,GAAAxR,MAAAqc,CACA1kD,GAAA27C,kBAAA1P,EACAA,GAAAmO,aAAA,IAGAwK,GACA,WAAAnkD,EAAA,aAAA4uB,OAAA4c,EAAA,cAAAxb,YACAk0B,EAGA3Q,GAAAxyB,UACAojC,EAAA/hD,KAAAmxC,EAAAxyB,SAEAwyB,GAAAxyB,SAAAojC,CACA,OAAA5Q,KAKAh0C,GAAAq3C,aAAA,SAAApL,EAAAsO,GACAv6C,EAAAqvB,OAAA4c,EAAA,QAAAA,EAAAsO,EACAv6C,GAAA27C,kBAAA1P,EAAA,OACAA,GAAAmO,aAAA,EACAnO,GAAAuS,IAAAv9C,EAAA4jD,KAAA7kD,EAAAi0C,cAAAhI,EAAAsO,IAIAv6C,GAAAw6C,gBAAA,SAAAvO,EAAApsB,GACA,GAAAilC,GAAA7Y,EAAA8L,eACAzf,IACAxW,KAAAiqB,EAAAgZ,UAAA9Y,EAAAA,EAAA7d,QAAAylB,OAAAiE,WACArV,MAAA5iB,EAAA04B,gBAAA14B,EAAA04B,gBAAAtM,GAAAA,EAAA2O,YAMA,IAAA/6B,EAAAw4B,aAAAx4B,EAAAw4B,YAAAt3C,OAAA,EAEA,IAAA,GADAikD,GAAA,SAAAF,EAAA,kBAAA,yBACApkD,EAAA,EAAAA,EAAAmf,EAAAw4B,YAAAt3C,OAAAL,IACA43B,EAAAz1B,MACAif,KAAAkjC,EACAviB,MAAA5iB,EAAAw4B,YAAA33C,IAMA,IAAAmf,EAAAy4B,eAAAz4B,EAAAy4B,cAAAv3C,OAAA,EAEA,IAAA,GADAikD,GAAA,SAAAF,EAAA,oBAAA,mBACApkD,EAAA,EAAAA,EAAAmf,EAAAy4B,cAAAv3C,OAAAL,IACA43B,EAAAz1B,MACAif,KAAAkjC,EACAviB,MAAA5iB,EAAAy4B,cAAA53C,IAOAmf,GAAAokB,MAAApkB,EAAAokB,KAAAljC,OAAA,GAAAE,EAAAgkD,MAAA3sB,EAAAzY,EAAAokB,KAEA,OAAA3L,GAEA,IAAA8rB,GAAA,SAAAnY,EAAApsB,GACA,GAAAqlC,GAAA,IACA,KAAArlC,EAAAqlC,cAAArlC,EAAAq4B,mBAAAr4B,EAAAs4B,oBAAAt4B,EAAAu4B,mBAQA,GAAA,UAAAnM,EAAA8L,eACAmN,EAAA,kBAAArlC,GAAAqlC,aAAArlC,EAAAu4B,mBAAAnM,GAAApsB,EAAAu4B,uBACA,CACA,GAAA+M,GAAAlZ,EAAA6O,cAEAoK,GADA,YAAAC,GAAA,aAAAA,EACA,kBAAAtlC,GAAAq4B,kBAAAr4B,EAAAq4B,kBAAAjM,GAAApsB,EAAAq4B,kBAEA,kBAAAr4B,GAAAs4B,mBAAAt4B,EAAAs4B,mBAAAlM,GAAApsB,EAAAs4B,uBAZA+M,GADA,kBAAArlC,GAAAqlC,aACArlC,EAAAqlC,aAAAjZ,GAEApsB,EAAAqlC,YAcA,OAAAA,GAGA1lD,GAAAD,SACA00C,cAAAj0C,EAAAi0C,iBhCykRG0E,YAAY,GAAGjI,aAAa,GAAG5tC,OAASH,SAAYyiD,IAAI,SAAS3kD,EAAQjB,EAAOD,GiC1uRnF,YAaA,IAAAwvC,GAAA,SAAA9C,EAAA/oB,EAAA9gB,GACAA,IACAA,EAAA6pC,EAAA/b,YAEAhN,KACAA,EAAA+oB,EAAAze,WAAAprB,GAEA,IAAAijD,GAAApZ,EAAAze,YACApE,KAAAhnB,EAAAgnB,KACAE,GAAApG,EAAAxB,OAGA,IACA,MAAA2jC,EAAA53B,MAAA,MAAA43B,EAAA53B,MAAA,MAAAvK,EAAAuK,MAAA,MAAAvK,EAAAuK,KACA,CACAvK,EAAAxB,MAAA2jC,EAAA3jC,KACAwB,GAAAnF,OAAAsnC,EAAAtnC,OAAAmF,EAAAnF,MACA,OAAAgxB,GAAA9C,EAAA/oB,GACAkG,KAAAhnB,EAAAgnB,KACAE,GAAA+7B,EAAA3jC,QAEA,GAAA,MAAAwB,EAAAuK,MAAA,MAAAvK,EAAAuK,KAAA,CAEAvK,EAAAxB,MAAAwB,EAAAxB,MAAA,CACAwB,GAAAnF,OAAAmF,EAAAnF,OAAA2zB,UAAA,EACA,OAAAxuB,GAEA,MAAAA,IAGAotB,EAAA,SAAArE,EAAA7iB,EAAAlG,GACA,GAAAmtB,GAAApE,EAAAze,YACApE,KAAAA,EACAE,GAAApG,EAAAxB,OAEA,OAAA2uB,GAAA,MAAAA,EAAA5iB,OACA4iB,EAAAC,EAAArE,EAAA7iB,EAAAinB,GAEA,OAAAA,IAEAyJ,EAAA,SAAA7N,EAAA8N,EAAAC,GACAr3C,QAAAq3C,IACAA,EAAA,EACA,IAAA92B,GAAA+oB,EAAAze,YACApE,KAAA2wB,EACAzwB,GAAA0wB,GAEA,OAAA,OAAA92B,GAAAvgB,QAAAugB,GAAAA,EAAA4H,IAAAkvB,EACA,KAEA,MAAA92B,EAAAuK,KACAqsB,EAAA7N,EAAA8N,EAAA72B,EAAA4H,IAAA,GAEA5H,EAGA1jB,GAAAD,SACA+wC,sBAAAA,EACAvB,iBAAAA,EACA+K,kBAAAA,QjC6uRMwL,IAAI,SAAS7kD,EAAQjB,EAAOD,GkCrzRlC,YACA,IAAA0B,GAAA,WAAA,IAAA,MAAAR,GAAA,UAAA,MAAAR,GAAA,MAAAL,QAAAsB,UACAT,GAAA,aAQAjB,GAAAD,QAAA,SAAA0sC,EAAAvD,EAAAqU,GACA,GACAwI,GADA7c,EAAAznC,EAAAynC,EAEAA,GAAA8c,MAAA,WACA,kBAAAzI,KAAAA,EAAAA,IACAwI,GAAAtkD,EAAA,SAAAmyC,SAAA,iBAAA2J,KAAAA,GAAAlN,SAAAnH,EACA+c,MAEA,WACAxkD,EAAA,kBAAA8lB,UAQA,IAAA0+B,GAAA,WACA,GAAAxkD,EAAAgrC,EAAApkB,qBAAA6kB,SAAAtT,KAAAmsB,EAAA7Y,SAAAtT,IAAA,CAEAmsB,EAAA1Y,IAAA,SAAA,OACA0Y,GAAA1Y,IAAA,MAAA,alC0zRG6D,aAAa,GAAG5tC,OAASH,SAAY+iD,IAAI,SAASjlD,EAAQjB,EAAOD,GmCz1RpE,YACA,IAAA0B,GAAA,WAAA,IAAA,MAAAR,GAAA,UAAA,MAAAR,GAAA,MAAAL,QAAAsB,WAEAykD,EAAA,SAAAC,EAAA1jD,GACA,GAAA2jD,IAAA,CACA,KACAljD,SAAAijD,EAAA1jD,KACA2jD,GAAA,GACA,MAAA5lD,IACA,MAAA4lD,IAGA5Y,EAAA,SAAAhB,EAAA6Z,GACA,GAAAC,GAAA,IAEAD,KAEAC,EADA,gBAAAD,GACAA,EAEAA,EAAA7Z,GAGA,OAAA8Z,IAGAvJ,EAAA,WACA,QAAAwJ,GAAAC,GACA,GAAApjC,GAAAsF,EAAAC,CACAvF,GAAA5hB,EAAAglD,GAAAvZ,QACAvkB,GAAAlnB,EAAAglD,GAAA99B,OACAC,GAAAnnB,EAAAglD,GAAA79B,QACA,SACAvF,EAAAsW,KAAAtW,EAAAsW,KAAAhR,IACAtF,EAAAuW,IAAAvW,EAAAuW,IAAAhR,IAIA,QAAA89B,GAAAC,EAAAC,GACA,GAAAC,GAAAC,CACAD,GAAAF,EAAA,GAAAC,EAAA,GAAAD,EAAAC,CACAE,GAAAH,EAAA,GAAAC,EAAA,GAAAA,EAAAD,CACA,OAAAE,GAAA,GAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,GAGA,MAAA,UAAA9lD,EAAA2yB,GACA,GAAA6N,GAAAglB,EAAAxlD,GACA+lD,EAAAP,EAAA7yB,EACA,OAAA+yB,GAAAllB,EAAA,GAAAulB,EAAA,KAAAL,EAAAllB,EAAA,GAAAulB,EAAA,QAIAxB,EAAA,SAAA9Y,EAAAzoB,GACA,MAAA,kBAAAA,GACAA,EAAAyoB,GAEAzoB,EAGAhkB,GAAAD,SACAomD,UAAAA,EACA1Y,iBAAAA,EACAuP,gBAAAA,EACAuI,UAAAA,KnC61RGjiD,OAASH,cAAiB,KAAK","file":"yasqe.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n/*\n  jQuery deparam is an extraction of the deparam method from Ben Alman's jQuery BBQ\n  http://benalman.com/projects/jquery-bbq-plugin/\n*/\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\n$.deparam = function (params, coerce) {\nvar obj = {},\n\tcoerce_types = { 'true': !0, 'false': !1, 'null': null };\n  \n// Iterate over all name=value pairs.\n$.each(params.replace(/\\+/g, ' ').split('&'), function (j,v) {\n  var param = v.split('='),\n\t  key = decodeURIComponent(param[0]),\n\t  val,\n\t  cur = obj,\n\t  i = 0,\n\t\t\n\t  // If key is more complex than 'foo', like 'a[]' or 'a[b][c]', split it\n\t  // into its component parts.\n\t  keys = key.split(']['),\n\t  keys_last = keys.length - 1;\n\t\n  // If the first keys part contains [ and the last ends with ], then []\n  // are correctly balanced.\n  if (/\\[/.test(keys[0]) && /\\]$/.test(keys[keys_last])) {\n\t// Remove the trailing ] from the last keys part.\n\tkeys[keys_last] = keys[keys_last].replace(/\\]$/, '');\n\t  \n\t// Split first keys part into two parts on the [ and add them back onto\n\t// the beginning of the keys array.\n\tkeys = keys.shift().split('[').concat(keys);\n\t  \n\tkeys_last = keys.length - 1;\n  } else {\n\t// Basic 'foo' style key.\n\tkeys_last = 0;\n  }\n\t\n  // Are we dealing with a name=value pair, or just a name?\n  if (param.length === 2) {\n\tval = decodeURIComponent(param[1]);\n\t  \n\t// Coerce values.\n\tif (coerce) {\n\t  val = val && !isNaN(val)              ? +val              // number\n\t\t  : val === 'undefined'             ? undefined         // undefined\n\t\t  : coerce_types[val] !== undefined ? coerce_types[val] // true, false, null\n\t\t  : val;                                                // string\n\t}\n\t  \n\tif ( keys_last ) {\n\t  // Complex key, build deep object structure based on a few rules:\n\t  // * The 'cur' pointer starts at the object top-level.\n\t  // * [] = array push (n is set to array length), [n] = array if n is \n\t  //   numeric, otherwise object.\n\t  // * If at the last keys part, set the value.\n\t  // * For each keys part, if the current level is undefined create an\n\t  //   object or array based on the type of the next keys part.\n\t  // * Move the 'cur' pointer to the next level.\n\t  // * Rinse & repeat.\n\t  for (; i <= keys_last; i++) {\n\t\tkey = keys[i] === '' ? cur.length : keys[i];\n\t\tcur = cur[key] = i < keys_last\n\t\t  ? cur[key] || (keys[i+1] && isNaN(keys[i+1]) ? {} : [])\n\t\t  : val;\n\t  }\n\t\t\n\t} else {\n\t  // Simple key, even simpler rules, since only scalars and shallow\n\t  // arrays are allowed.\n\t\t\n\t  if ($.isArray(obj[key])) {\n\t\t// val is already an array, so push on the next value.\n\t\tobj[key].push( val );\n\t\t  \n\t  } else if (obj[key] !== undefined) {\n\t\t// val isn't an array, but since a second value has been specified,\n\t\t// convert val into an array.\n\t\tobj[key] = [obj[key], val];\n\t\t  \n\t  } else {\n\t\t// val is a scalar.\n\t\tobj[key] = val;\n\t  }\n\t}\n\t  \n  } else if (key) {\n\t// No value was defined, so set something meaningful.\n\tobj[key] = coerce\n\t  ? undefined\n\t  : '';\n  }\n});\n  \nreturn obj;\n};\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.YASQE = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n/*\n  jQuery deparam is an extraction of the deparam method from Ben Alman's jQuery BBQ\n  http://benalman.com/projects/jquery-bbq-plugin/\n*/\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\n$.deparam = function (params, coerce) {\nvar obj = {},\n\tcoerce_types = { 'true': !0, 'false': !1, 'null': null };\n  \n// Iterate over all name=value pairs.\n$.each(params.replace(/\\+/g, ' ').split('&'), function (j,v) {\n  var param = v.split('='),\n\t  key = decodeURIComponent(param[0]),\n\t  val,\n\t  cur = obj,\n\t  i = 0,\n\t\t\n\t  // If key is more complex than 'foo', like 'a[]' or 'a[b][c]', split it\n\t  // into its component parts.\n\t  keys = key.split(']['),\n\t  keys_last = keys.length - 1;\n\t\n  // If the first keys part contains [ and the last ends with ], then []\n  // are correctly balanced.\n  if (/\\[/.test(keys[0]) && /\\]$/.test(keys[keys_last])) {\n\t// Remove the trailing ] from the last keys part.\n\tkeys[keys_last] = keys[keys_last].replace(/\\]$/, '');\n\t  \n\t// Split first keys part into two parts on the [ and add them back onto\n\t// the beginning of the keys array.\n\tkeys = keys.shift().split('[').concat(keys);\n\t  \n\tkeys_last = keys.length - 1;\n  } else {\n\t// Basic 'foo' style key.\n\tkeys_last = 0;\n  }\n\t\n  // Are we dealing with a name=value pair, or just a name?\n  if (param.length === 2) {\n\tval = decodeURIComponent(param[1]);\n\t  \n\t// Coerce values.\n\tif (coerce) {\n\t  val = val && !isNaN(val)              ? +val              // number\n\t\t  : val === 'undefined'             ? undefined         // undefined\n\t\t  : coerce_types[val] !== undefined ? coerce_types[val] // true, false, null\n\t\t  : val;                                                // string\n\t}\n\t  \n\tif ( keys_last ) {\n\t  // Complex key, build deep object structure based on a few rules:\n\t  // * The 'cur' pointer starts at the object top-level.\n\t  // * [] = array push (n is set to array length), [n] = array if n is \n\t  //   numeric, otherwise object.\n\t  // * If at the last keys part, set the value.\n\t  // * For each keys part, if the current level is undefined create an\n\t  //   object or array based on the type of the next keys part.\n\t  // * Move the 'cur' pointer to the next level.\n\t  // * Rinse & repeat.\n\t  for (; i <= keys_last; i++) {\n\t\tkey = keys[i] === '' ? cur.length : keys[i];\n\t\tcur = cur[key] = i < keys_last\n\t\t  ? cur[key] || (keys[i+1] && isNaN(keys[i+1]) ? {} : [])\n\t\t  : val;\n\t  }\n\t\t\n\t} else {\n\t  // Simple key, even simpler rules, since only scalars and shallow\n\t  // arrays are allowed.\n\t\t\n\t  if ($.isArray(obj[key])) {\n\t\t// val is already an array, so push on the next value.\n\t\tobj[key].push( val );\n\t\t  \n\t  } else if (obj[key] !== undefined) {\n\t\t// val isn't an array, but since a second value has been specified,\n\t\t// convert val into an array.\n\t\tobj[key] = [obj[key], val];\n\t\t  \n\t  } else {\n\t\t// val is a scalar.\n\t\tobj[key] = val;\n\t  }\n\t}\n\t  \n  } else if (key) {\n\t// No value was defined, so set something meaningful.\n\tobj[key] = coerce\n\t  ? undefined\n\t  : '';\n  }\n});\n  \nreturn obj;\n};\n\n},{\"jquery\":undefined}],2:[function(require,module,exports){\nmodule.exports = {table:\n{\n  \"*[&&,valueLogical]\" : {\n     \"&&\": [\"[&&,valueLogical]\",\"*[&&,valueLogical]\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"||\": [], \n     \";\": []}, \n  \"*[,,expression]\" : {\n     \",\": [\"[,,expression]\",\"*[,,expression]\"], \n     \")\": []}, \n  \"*[,,objectPath]\" : {\n     \",\": [\"[,,objectPath]\",\"*[,,objectPath]\"], \n     \".\": [], \n     \";\": [], \n     \"]\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"*[,,object]\" : {\n     \",\": [\"[,,object]\",\"*[,,object]\"], \n     \".\": [], \n     \";\": [], \n     \"]\": [], \n     \"}\": [], \n     \"GRAPH\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": []}, \n  \"*[/,pathEltOrInverse]\" : {\n     \"/\": [\"[/,pathEltOrInverse]\",\"*[/,pathEltOrInverse]\"], \n     \"|\": [], \n     \")\": [], \n     \"(\": [], \n     \"[\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"IRI_REF\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": []}, \n  \"*[;,?[or([verbPath,verbSimple]),objectList]]\" : {\n     \";\": [\"[;,?[or([verbPath,verbSimple]),objectList]]\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \".\": [], \n     \"]\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"*[;,?[verb,objectList]]\" : {\n     \";\": [\"[;,?[verb,objectList]]\",\"*[;,?[verb,objectList]]\"], \n     \".\": [], \n     \"]\": [], \n     \"}\": [], \n     \"GRAPH\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": []}, \n  \"*[UNION,groupGraphPattern]\" : {\n     \"UNION\": [\"[UNION,groupGraphPattern]\",\"*[UNION,groupGraphPattern]\"], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"(\": [], \n     \"[\": [], \n     \"IRI_REF\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \".\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"*[graphPatternNotTriples,?.,?triplesBlock]\" : {\n     \"{\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"OPTIONAL\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"MINUS\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"GRAPH\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"SERVICE\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"FILTER\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"BIND\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"VALUES\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"}\": []}, \n  \"*[quadsNotTriples,?.,?triplesTemplate]\" : {\n     \"GRAPH\": [\"[quadsNotTriples,?.,?triplesTemplate]\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"}\": []}, \n  \"*[|,pathOneInPropertySet]\" : {\n     \"|\": [\"[|,pathOneInPropertySet]\",\"*[|,pathOneInPropertySet]\"], \n     \")\": []}, \n  \"*[|,pathSequence]\" : {\n     \"|\": [\"[|,pathSequence]\",\"*[|,pathSequence]\"], \n     \")\": [], \n     \"(\": [], \n     \"[\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"IRI_REF\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": []}, \n  \"*[||,conditionalAndExpression]\" : {\n     \"||\": [\"[||,conditionalAndExpression]\",\"*[||,conditionalAndExpression]\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \";\": []}, \n  \"*dataBlockValue\" : {\n     \"UNDEF\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"IRI_REF\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"TRUE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"FALSE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"PNAME_LN\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"PNAME_NS\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"STRING_LITERAL1\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"STRING_LITERAL2\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"STRING_LITERAL_LONG1\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"STRING_LITERAL_LONG2\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"INTEGER\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DECIMAL\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DOUBLE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"INTEGER_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DECIMAL_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DOUBLE_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"INTEGER_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DECIMAL_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DOUBLE_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"}\": [], \n     \")\": []}, \n  \"*datasetClause\" : {\n     \"FROM\": [\"datasetClause\",\"*datasetClause\"], \n     \"WHERE\": [], \n     \"{\": []}, \n  \"*describeDatasetClause\" : {\n     \"FROM\": [\"describeDatasetClause\",\"*describeDatasetClause\"], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"WHERE\": [], \n     \"{\": [], \n     \"VALUES\": [], \n     \"$\": []}, \n  \"*graphNode\" : {\n     \"(\": [\"graphNode\",\"*graphNode\"], \n     \"[\": [\"graphNode\",\"*graphNode\"], \n     \"VAR1\": [\"graphNode\",\"*graphNode\"], \n     \"VAR2\": [\"graphNode\",\"*graphNode\"], \n     \"NIL\": [\"graphNode\",\"*graphNode\"], \n     \"IRI_REF\": [\"graphNode\",\"*graphNode\"], \n     \"TRUE\": [\"graphNode\",\"*graphNode\"], \n     \"FALSE\": [\"graphNode\",\"*graphNode\"], \n     \"BLANK_NODE_LABEL\": [\"graphNode\",\"*graphNode\"], \n     \"ANON\": [\"graphNode\",\"*graphNode\"], \n     \"PNAME_LN\": [\"graphNode\",\"*graphNode\"], \n     \"PNAME_NS\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL1\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL2\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \")\": []}, \n  \"*graphNodePath\" : {\n     \"(\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"[\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"VAR1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"VAR2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"NIL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"IRI_REF\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"TRUE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"FALSE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"BLANK_NODE_LABEL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"ANON\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"PNAME_LN\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"PNAME_NS\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \")\": []}, \n  \"*groupCondition\" : {\n     \"(\": [\"groupCondition\",\"*groupCondition\"], \n     \"STR\": [\"groupCondition\",\"*groupCondition\"], \n     \"LANG\": [\"groupCondition\",\"*groupCondition\"], \n     \"LANGMATCHES\": [\"groupCondition\",\"*groupCondition\"], \n     \"DATATYPE\": [\"groupCondition\",\"*groupCondition\"], \n     \"BOUND\": [\"groupCondition\",\"*groupCondition\"], \n     \"IRI\": [\"groupCondition\",\"*groupCondition\"], \n     \"URI\": [\"groupCondition\",\"*groupCondition\"], \n     \"BNODE\": [\"groupCondition\",\"*groupCondition\"], \n     \"RAND\": [\"groupCondition\",\"*groupCondition\"], \n     \"ABS\": [\"groupCondition\",\"*groupCondition\"], \n     \"CEIL\": [\"groupCondition\",\"*groupCondition\"], \n     \"FLOOR\": [\"groupCondition\",\"*groupCondition\"], \n     \"ROUND\": [\"groupCondition\",\"*groupCondition\"], \n     \"CONCAT\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRLEN\": [\"groupCondition\",\"*groupCondition\"], \n     \"UCASE\": [\"groupCondition\",\"*groupCondition\"], \n     \"LCASE\": [\"groupCondition\",\"*groupCondition\"], \n     \"ENCODE_FOR_URI\": [\"groupCondition\",\"*groupCondition\"], \n     \"CONTAINS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRSTARTS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRENDS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRBEFORE\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRAFTER\": [\"groupCondition\",\"*groupCondition\"], \n     \"YEAR\": [\"groupCondition\",\"*groupCondition\"], \n     \"MONTH\": [\"groupCondition\",\"*groupCondition\"], \n     \"DAY\": [\"groupCondition\",\"*groupCondition\"], \n     \"HOURS\": [\"groupCondition\",\"*groupCondition\"], \n     \"MINUTES\": [\"groupCondition\",\"*groupCondition\"], \n     \"SECONDS\": [\"groupCondition\",\"*groupCondition\"], \n     \"TIMEZONE\": [\"groupCondition\",\"*groupCondition\"], \n     \"TZ\": [\"groupCondition\",\"*groupCondition\"], \n     \"NOW\": [\"groupCondition\",\"*groupCondition\"], \n     \"UUID\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRUUID\": [\"groupCondition\",\"*groupCondition\"], \n     \"MD5\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA1\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA256\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA384\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA512\": [\"groupCondition\",\"*groupCondition\"], \n     \"COALESCE\": [\"groupCondition\",\"*groupCondition\"], \n     \"IF\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRLANG\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRDT\": [\"groupCondition\",\"*groupCondition\"], \n     \"SAMETERM\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISIRI\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISURI\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISBLANK\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISLITERAL\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISNUMERIC\": [\"groupCondition\",\"*groupCondition\"], \n     \"VAR1\": [\"groupCondition\",\"*groupCondition\"], \n     \"VAR2\": [\"groupCondition\",\"*groupCondition\"], \n     \"SUBSTR\": [\"groupCondition\",\"*groupCondition\"], \n     \"REPLACE\": [\"groupCondition\",\"*groupCondition\"], \n     \"REGEX\": [\"groupCondition\",\"*groupCondition\"], \n     \"EXISTS\": [\"groupCondition\",\"*groupCondition\"], \n     \"NOT\": [\"groupCondition\",\"*groupCondition\"], \n     \"IRI_REF\": [\"groupCondition\",\"*groupCondition\"], \n     \"PNAME_LN\": [\"groupCondition\",\"*groupCondition\"], \n     \"PNAME_NS\": [\"groupCondition\",\"*groupCondition\"], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"*havingCondition\" : {\n     \"(\": [\"havingCondition\",\"*havingCondition\"], \n     \"STR\": [\"havingCondition\",\"*havingCondition\"], \n     \"LANG\": [\"havingCondition\",\"*havingCondition\"], \n     \"LANGMATCHES\": [\"havingCondition\",\"*havingCondition\"], \n     \"DATATYPE\": [\"havingCondition\",\"*havingCondition\"], \n     \"BOUND\": [\"havingCondition\",\"*havingCondition\"], \n     \"IRI\": [\"havingCondition\",\"*havingCondition\"], \n     \"URI\": [\"havingCondition\",\"*havingCondition\"], \n     \"BNODE\": [\"havingCondition\",\"*havingCondition\"], \n     \"RAND\": [\"havingCondition\",\"*havingCondition\"], \n     \"ABS\": [\"havingCondition\",\"*havingCondition\"], \n     \"CEIL\": [\"havingCondition\",\"*havingCondition\"], \n     \"FLOOR\": [\"havingCondition\",\"*havingCondition\"], \n     \"ROUND\": [\"havingCondition\",\"*havingCondition\"], \n     \"CONCAT\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRLEN\": [\"havingCondition\",\"*havingCondition\"], \n     \"UCASE\": [\"havingCondition\",\"*havingCondition\"], \n     \"LCASE\": [\"havingCondition\",\"*havingCondition\"], \n     \"ENCODE_FOR_URI\": [\"havingCondition\",\"*havingCondition\"], \n     \"CONTAINS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRSTARTS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRENDS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRBEFORE\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRAFTER\": [\"havingCondition\",\"*havingCondition\"], \n     \"YEAR\": [\"havingCondition\",\"*havingCondition\"], \n     \"MONTH\": [\"havingCondition\",\"*havingCondition\"], \n     \"DAY\": [\"havingCondition\",\"*havingCondition\"], \n     \"HOURS\": [\"havingCondition\",\"*havingCondition\"], \n     \"MINUTES\": [\"havingCondition\",\"*havingCondition\"], \n     \"SECONDS\": [\"havingCondition\",\"*havingCondition\"], \n     \"TIMEZONE\": [\"havingCondition\",\"*havingCondition\"], \n     \"TZ\": [\"havingCondition\",\"*havingCondition\"], \n     \"NOW\": [\"havingCondition\",\"*havingCondition\"], \n     \"UUID\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRUUID\": [\"havingCondition\",\"*havingCondition\"], \n     \"MD5\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA1\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA256\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA384\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA512\": [\"havingCondition\",\"*havingCondition\"], \n     \"COALESCE\": [\"havingCondition\",\"*havingCondition\"], \n     \"IF\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRLANG\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRDT\": [\"havingCondition\",\"*havingCondition\"], \n     \"SAMETERM\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISIRI\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISURI\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISBLANK\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISLITERAL\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISNUMERIC\": [\"havingCondition\",\"*havingCondition\"], \n     \"SUBSTR\": [\"havingCondition\",\"*havingCondition\"], \n     \"REPLACE\": [\"havingCondition\",\"*havingCondition\"], \n     \"REGEX\": [\"havingCondition\",\"*havingCondition\"], \n     \"EXISTS\": [\"havingCondition\",\"*havingCondition\"], \n     \"NOT\": [\"havingCondition\",\"*havingCondition\"], \n     \"IRI_REF\": [\"havingCondition\",\"*havingCondition\"], \n     \"PNAME_LN\": [\"havingCondition\",\"*havingCondition\"], \n     \"PNAME_NS\": [\"havingCondition\",\"*havingCondition\"], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"ORDER\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"*or([[ (,*dataBlockValue,)],NIL])\" : {\n     \"(\": [\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"], \n     \"NIL\": [\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"], \n     \"}\": []}, \n  \"*or([[*,unaryExpression],[/,unaryExpression]])\" : {\n     \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \"+\": [], \n     \"-\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \";\": []}, \n  \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\" : {\n     \"+\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"-\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \";\": []}, \n  \"*or([baseDecl,prefixDecl])\" : {\n     \"BASE\": [\"or([baseDecl,prefixDecl])\",\"*or([baseDecl,prefixDecl])\"], \n     \"PREFIX\": [\"or([baseDecl,prefixDecl])\",\"*or([baseDecl,prefixDecl])\"], \n     \"$\": [], \n     \"CONSTRUCT\": [], \n     \"DESCRIBE\": [], \n     \"ASK\": [], \n     \"INSERT\": [], \n     \"DELETE\": [], \n     \"SELECT\": [], \n     \"LOAD\": [], \n     \"CLEAR\": [], \n     \"DROP\": [], \n     \"ADD\": [], \n     \"MOVE\": [], \n     \"COPY\": [], \n     \"CREATE\": [], \n     \"WITH\": []}, \n  \"*or([var,[ (,expression,AS,var,)]])\" : {\n     \"(\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR1\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR2\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"WHERE\": [], \n     \"{\": [], \n     \"FROM\": []}, \n  \"*orderCondition\" : {\n     \"ASC\": [\"orderCondition\",\"*orderCondition\"], \n     \"DESC\": [\"orderCondition\",\"*orderCondition\"], \n     \"VAR1\": [\"orderCondition\",\"*orderCondition\"], \n     \"VAR2\": [\"orderCondition\",\"*orderCondition\"], \n     \"(\": [\"orderCondition\",\"*orderCondition\"], \n     \"STR\": [\"orderCondition\",\"*orderCondition\"], \n     \"LANG\": [\"orderCondition\",\"*orderCondition\"], \n     \"LANGMATCHES\": [\"orderCondition\",\"*orderCondition\"], \n     \"DATATYPE\": [\"orderCondition\",\"*orderCondition\"], \n     \"BOUND\": [\"orderCondition\",\"*orderCondition\"], \n     \"IRI\": [\"orderCondition\",\"*orderCondition\"], \n     \"URI\": [\"orderCondition\",\"*orderCondition\"], \n     \"BNODE\": [\"orderCondition\",\"*orderCondition\"], \n     \"RAND\": [\"orderCondition\",\"*orderCondition\"], \n     \"ABS\": [\"orderCondition\",\"*orderCondition\"], \n     \"CEIL\": [\"orderCondition\",\"*orderCondition\"], \n     \"FLOOR\": [\"orderCondition\",\"*orderCondition\"], \n     \"ROUND\": [\"orderCondition\",\"*orderCondition\"], \n     \"CONCAT\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRLEN\": [\"orderCondition\",\"*orderCondition\"], \n     \"UCASE\": [\"orderCondition\",\"*orderCondition\"], \n     \"LCASE\": [\"orderCondition\",\"*orderCondition\"], \n     \"ENCODE_FOR_URI\": [\"orderCondition\",\"*orderCondition\"], \n     \"CONTAINS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRSTARTS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRENDS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRBEFORE\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRAFTER\": [\"orderCondition\",\"*orderCondition\"], \n     \"YEAR\": [\"orderCondition\",\"*orderCondition\"], \n     \"MONTH\": [\"orderCondition\",\"*orderCondition\"], \n     \"DAY\": [\"orderCondition\",\"*orderCondition\"], \n     \"HOURS\": [\"orderCondition\",\"*orderCondition\"], \n     \"MINUTES\": [\"orderCondition\",\"*orderCondition\"], \n     \"SECONDS\": [\"orderCondition\",\"*orderCondition\"], \n     \"TIMEZONE\": [\"orderCondition\",\"*orderCondition\"], \n     \"TZ\": [\"orderCondition\",\"*orderCondition\"], \n     \"NOW\": [\"orderCondition\",\"*orderCondition\"], \n     \"UUID\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRUUID\": [\"orderCondition\",\"*orderCondition\"], \n     \"MD5\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA1\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA256\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA384\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA512\": [\"orderCondition\",\"*orderCondition\"], \n     \"COALESCE\": [\"orderCondition\",\"*orderCondition\"], \n     \"IF\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRLANG\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRDT\": [\"orderCondition\",\"*orderCondition\"], \n     \"SAMETERM\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISIRI\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISURI\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISBLANK\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISLITERAL\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISNUMERIC\": [\"orderCondition\",\"*orderCondition\"], \n     \"SUBSTR\": [\"orderCondition\",\"*orderCondition\"], \n     \"REPLACE\": [\"orderCondition\",\"*orderCondition\"], \n     \"REGEX\": [\"orderCondition\",\"*orderCondition\"], \n     \"EXISTS\": [\"orderCondition\",\"*orderCondition\"], \n     \"NOT\": [\"orderCondition\",\"*orderCondition\"], \n     \"IRI_REF\": [\"orderCondition\",\"*orderCondition\"], \n     \"PNAME_LN\": [\"orderCondition\",\"*orderCondition\"], \n     \"PNAME_NS\": [\"orderCondition\",\"*orderCondition\"], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"*usingClause\" : {\n     \"USING\": [\"usingClause\",\"*usingClause\"], \n     \"WHERE\": []}, \n  \"*var\" : {\n     \"VAR1\": [\"var\",\"*var\"], \n     \"VAR2\": [\"var\",\"*var\"], \n     \")\": []}, \n  \"*varOrIRIref\" : {\n     \"VAR1\": [\"varOrIRIref\",\"*varOrIRIref\"], \n     \"VAR2\": [\"varOrIRIref\",\"*varOrIRIref\"], \n     \"IRI_REF\": [\"varOrIRIref\",\"*varOrIRIref\"], \n     \"PNAME_LN\": [\"varOrIRIref\",\"*varOrIRIref\"], \n     \"PNAME_NS\": [\"varOrIRIref\",\"*varOrIRIref\"], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"WHERE\": [], \n     \"{\": [], \n     \"FROM\": [], \n     \"VALUES\": [], \n     \"$\": []}, \n  \"+graphNode\" : {\n     \"(\": [\"graphNode\",\"*graphNode\"], \n     \"[\": [\"graphNode\",\"*graphNode\"], \n     \"VAR1\": [\"graphNode\",\"*graphNode\"], \n     \"VAR2\": [\"graphNode\",\"*graphNode\"], \n     \"NIL\": [\"graphNode\",\"*graphNode\"], \n     \"IRI_REF\": [\"graphNode\",\"*graphNode\"], \n     \"TRUE\": [\"graphNode\",\"*graphNode\"], \n     \"FALSE\": [\"graphNode\",\"*graphNode\"], \n     \"BLANK_NODE_LABEL\": [\"graphNode\",\"*graphNode\"], \n     \"ANON\": [\"graphNode\",\"*graphNode\"], \n     \"PNAME_LN\": [\"graphNode\",\"*graphNode\"], \n     \"PNAME_NS\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL1\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL2\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNode\",\"*graphNode\"]}, \n  \"+graphNodePath\" : {\n     \"(\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"[\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"VAR1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"VAR2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"NIL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"IRI_REF\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"TRUE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"FALSE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"BLANK_NODE_LABEL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"ANON\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"PNAME_LN\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"PNAME_NS\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"]}, \n  \"+groupCondition\" : {\n     \"(\": [\"groupCondition\",\"*groupCondition\"], \n     \"STR\": [\"groupCondition\",\"*groupCondition\"], \n     \"LANG\": [\"groupCondition\",\"*groupCondition\"], \n     \"LANGMATCHES\": [\"groupCondition\",\"*groupCondition\"], \n     \"DATATYPE\": [\"groupCondition\",\"*groupCondition\"], \n     \"BOUND\": [\"groupCondition\",\"*groupCondition\"], \n     \"IRI\": [\"groupCondition\",\"*groupCondition\"], \n     \"URI\": [\"groupCondition\",\"*groupCondition\"], \n     \"BNODE\": [\"groupCondition\",\"*groupCondition\"], \n     \"RAND\": [\"groupCondition\",\"*groupCondition\"], \n     \"ABS\": [\"groupCondition\",\"*groupCondition\"], \n     \"CEIL\": [\"groupCondition\",\"*groupCondition\"], \n     \"FLOOR\": [\"groupCondition\",\"*groupCondition\"], \n     \"ROUND\": [\"groupCondition\",\"*groupCondition\"], \n     \"CONCAT\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRLEN\": [\"groupCondition\",\"*groupCondition\"], \n     \"UCASE\": [\"groupCondition\",\"*groupCondition\"], \n     \"LCASE\": [\"groupCondition\",\"*groupCondition\"], \n     \"ENCODE_FOR_URI\": [\"groupCondition\",\"*groupCondition\"], \n     \"CONTAINS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRSTARTS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRENDS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRBEFORE\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRAFTER\": [\"groupCondition\",\"*groupCondition\"], \n     \"YEAR\": [\"groupCondition\",\"*groupCondition\"], \n     \"MONTH\": [\"groupCondition\",\"*groupCondition\"], \n     \"DAY\": [\"groupCondition\",\"*groupCondition\"], \n     \"HOURS\": [\"groupCondition\",\"*groupCondition\"], \n     \"MINUTES\": [\"groupCondition\",\"*groupCondition\"], \n     \"SECONDS\": [\"groupCondition\",\"*groupCondition\"], \n     \"TIMEZONE\": [\"groupCondition\",\"*groupCondition\"], \n     \"TZ\": [\"groupCondition\",\"*groupCondition\"], \n     \"NOW\": [\"groupCondition\",\"*groupCondition\"], \n     \"UUID\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRUUID\": [\"groupCondition\",\"*groupCondition\"], \n     \"MD5\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA1\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA256\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA384\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA512\": [\"groupCondition\",\"*groupCondition\"], \n     \"COALESCE\": [\"groupCondition\",\"*groupCondition\"], \n     \"IF\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRLANG\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRDT\": [\"groupCondition\",\"*groupCondition\"], \n     \"SAMETERM\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISIRI\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISURI\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISBLANK\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISLITERAL\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISNUMERIC\": [\"groupCondition\",\"*groupCondition\"], \n     \"VAR1\": [\"groupCondition\",\"*groupCondition\"], \n     \"VAR2\": [\"groupCondition\",\"*groupCondition\"], \n     \"SUBSTR\": [\"groupCondition\",\"*groupCondition\"], \n     \"REPLACE\": [\"groupCondition\",\"*groupCondition\"], \n     \"REGEX\": [\"groupCondition\",\"*groupCondition\"], \n     \"EXISTS\": [\"groupCondition\",\"*groupCondition\"], \n     \"NOT\": [\"groupCondition\",\"*groupCondition\"], \n     \"IRI_REF\": [\"groupCondition\",\"*groupCondition\"], \n     \"PNAME_LN\": [\"groupCondition\",\"*groupCondition\"], \n     \"PNAME_NS\": [\"groupCondition\",\"*groupCondition\"]}, \n  \"+havingCondition\" : {\n     \"(\": [\"havingCondition\",\"*havingCondition\"], \n     \"STR\": [\"havingCondition\",\"*havingCondition\"], \n     \"LANG\": [\"havingCondition\",\"*havingCondition\"], \n     \"LANGMATCHES\": [\"havingCondition\",\"*havingCondition\"], \n     \"DATATYPE\": [\"havingCondition\",\"*havingCondition\"], \n     \"BOUND\": [\"havingCondition\",\"*havingCondition\"], \n     \"IRI\": [\"havingCondition\",\"*havingCondition\"], \n     \"URI\": [\"havingCondition\",\"*havingCondition\"], \n     \"BNODE\": [\"havingCondition\",\"*havingCondition\"], \n     \"RAND\": [\"havingCondition\",\"*havingCondition\"], \n     \"ABS\": [\"havingCondition\",\"*havingCondition\"], \n     \"CEIL\": [\"havingCondition\",\"*havingCondition\"], \n     \"FLOOR\": [\"havingCondition\",\"*havingCondition\"], \n     \"ROUND\": [\"havingCondition\",\"*havingCondition\"], \n     \"CONCAT\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRLEN\": [\"havingCondition\",\"*havingCondition\"], \n     \"UCASE\": [\"havingCondition\",\"*havingCondition\"], \n     \"LCASE\": [\"havingCondition\",\"*havingCondition\"], \n     \"ENCODE_FOR_URI\": [\"havingCondition\",\"*havingCondition\"], \n     \"CONTAINS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRSTARTS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRENDS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRBEFORE\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRAFTER\": [\"havingCondition\",\"*havingCondition\"], \n     \"YEAR\": [\"havingCondition\",\"*havingCondition\"], \n     \"MONTH\": [\"havingCondition\",\"*havingCondition\"], \n     \"DAY\": [\"havingCondition\",\"*havingCondition\"], \n     \"HOURS\": [\"havingCondition\",\"*havingCondition\"], \n     \"MINUTES\": [\"havingCondition\",\"*havingCondition\"], \n     \"SECONDS\": [\"havingCondition\",\"*havingCondition\"], \n     \"TIMEZONE\": [\"havingCondition\",\"*havingCondition\"], \n     \"TZ\": [\"havingCondition\",\"*havingCondition\"], \n     \"NOW\": [\"havingCondition\",\"*havingCondition\"], \n     \"UUID\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRUUID\": [\"havingCondition\",\"*havingCondition\"], \n     \"MD5\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA1\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA256\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA384\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA512\": [\"havingCondition\",\"*havingCondition\"], \n     \"COALESCE\": [\"havingCondition\",\"*havingCondition\"], \n     \"IF\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRLANG\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRDT\": [\"havingCondition\",\"*havingCondition\"], \n     \"SAMETERM\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISIRI\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISURI\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISBLANK\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISLITERAL\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISNUMERIC\": [\"havingCondition\",\"*havingCondition\"], \n     \"SUBSTR\": [\"havingCondition\",\"*havingCondition\"], \n     \"REPLACE\": [\"havingCondition\",\"*havingCondition\"], \n     \"REGEX\": [\"havingCondition\",\"*havingCondition\"], \n     \"EXISTS\": [\"havingCondition\",\"*havingCondition\"], \n     \"NOT\": [\"havingCondition\",\"*havingCondition\"], \n     \"IRI_REF\": [\"havingCondition\",\"*havingCondition\"], \n     \"PNAME_LN\": [\"havingCondition\",\"*havingCondition\"], \n     \"PNAME_NS\": [\"havingCondition\",\"*havingCondition\"]}, \n  \"+or([var,[ (,expression,AS,var,)]])\" : {\n     \"(\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR1\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR2\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"]}, \n  \"+orderCondition\" : {\n     \"ASC\": [\"orderCondition\",\"*orderCondition\"], \n     \"DESC\": [\"orderCondition\",\"*orderCondition\"], \n     \"VAR1\": [\"orderCondition\",\"*orderCondition\"], \n     \"VAR2\": [\"orderCondition\",\"*orderCondition\"], \n     \"(\": [\"orderCondition\",\"*orderCondition\"], \n     \"STR\": [\"orderCondition\",\"*orderCondition\"], \n     \"LANG\": [\"orderCondition\",\"*orderCondition\"], \n     \"LANGMATCHES\": [\"orderCondition\",\"*orderCondition\"], \n     \"DATATYPE\": [\"orderCondition\",\"*orderCondition\"], \n     \"BOUND\": [\"orderCondition\",\"*orderCondition\"], \n     \"IRI\": [\"orderCondition\",\"*orderCondition\"], \n     \"URI\": [\"orderCondition\",\"*orderCondition\"], \n     \"BNODE\": [\"orderCondition\",\"*orderCondition\"], \n     \"RAND\": [\"orderCondition\",\"*orderCondition\"], \n     \"ABS\": [\"orderCondition\",\"*orderCondition\"], \n     \"CEIL\": [\"orderCondition\",\"*orderCondition\"], \n     \"FLOOR\": [\"orderCondition\",\"*orderCondition\"], \n     \"ROUND\": [\"orderCondition\",\"*orderCondition\"], \n     \"CONCAT\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRLEN\": [\"orderCondition\",\"*orderCondition\"], \n     \"UCASE\": [\"orderCondition\",\"*orderCondition\"], \n     \"LCASE\": [\"orderCondition\",\"*orderCondition\"], \n     \"ENCODE_FOR_URI\": [\"orderCondition\",\"*orderCondition\"], \n     \"CONTAINS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRSTARTS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRENDS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRBEFORE\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRAFTER\": [\"orderCondition\",\"*orderCondition\"], \n     \"YEAR\": [\"orderCondition\",\"*orderCondition\"], \n     \"MONTH\": [\"orderCondition\",\"*orderCondition\"], \n     \"DAY\": [\"orderCondition\",\"*orderCondition\"], \n     \"HOURS\": [\"orderCondition\",\"*orderCondition\"], \n     \"MINUTES\": [\"orderCondition\",\"*orderCondition\"], \n     \"SECONDS\": [\"orderCondition\",\"*orderCondition\"], \n     \"TIMEZONE\": [\"orderCondition\",\"*orderCondition\"], \n     \"TZ\": [\"orderCondition\",\"*orderCondition\"], \n     \"NOW\": [\"orderCondition\",\"*orderCondition\"], \n     \"UUID\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRUUID\": [\"orderCondition\",\"*orderCondition\"], \n     \"MD5\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA1\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA256\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA384\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA512\": [\"orderCondition\",\"*orderCondition\"], \n     \"COALESCE\": [\"orderCondition\",\"*orderCondition\"], \n     \"IF\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRLANG\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRDT\": [\"orderCondition\",\"*orderCondition\"], \n     \"SAMETERM\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISIRI\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISURI\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISBLANK\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISLITERAL\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISNUMERIC\": [\"orderCondition\",\"*orderCondition\"], \n     \"SUBSTR\": [\"orderCondition\",\"*orderCondition\"], \n     \"REPLACE\": [\"orderCondition\",\"*orderCondition\"], \n     \"REGEX\": [\"orderCondition\",\"*orderCondition\"], \n     \"EXISTS\": [\"orderCondition\",\"*orderCondition\"], \n     \"NOT\": [\"orderCondition\",\"*orderCondition\"], \n     \"IRI_REF\": [\"orderCondition\",\"*orderCondition\"], \n     \"PNAME_LN\": [\"orderCondition\",\"*orderCondition\"], \n     \"PNAME_NS\": [\"orderCondition\",\"*orderCondition\"]}, \n  \"+varOrIRIref\" : {\n     \"VAR1\": [\"varOrIRIref\",\"*varOrIRIref\"], \n     \"VAR2\": [\"varOrIRIref\",\"*varOrIRIref\"], \n     \"IRI_REF\": [\"varOrIRIref\",\"*varOrIRIref\"], \n     \"PNAME_LN\": [\"varOrIRIref\",\"*varOrIRIref\"], \n     \"PNAME_NS\": [\"varOrIRIref\",\"*varOrIRIref\"]}, \n  \"?.\" : {\n     \".\": [\".\"], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"(\": [], \n     \"[\": [], \n     \"IRI_REF\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"GRAPH\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"?DISTINCT\" : {\n     \"DISTINCT\": [\"DISTINCT\"], \n     \"!\": [], \n     \"+\": [], \n     \"-\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"(\": [], \n     \"STR\": [], \n     \"LANG\": [], \n     \"LANGMATCHES\": [], \n     \"DATATYPE\": [], \n     \"BOUND\": [], \n     \"IRI\": [], \n     \"URI\": [], \n     \"BNODE\": [], \n     \"RAND\": [], \n     \"ABS\": [], \n     \"CEIL\": [], \n     \"FLOOR\": [], \n     \"ROUND\": [], \n     \"CONCAT\": [], \n     \"STRLEN\": [], \n     \"UCASE\": [], \n     \"LCASE\": [], \n     \"ENCODE_FOR_URI\": [], \n     \"CONTAINS\": [], \n     \"STRSTARTS\": [], \n     \"STRENDS\": [], \n     \"STRBEFORE\": [], \n     \"STRAFTER\": [], \n     \"YEAR\": [], \n     \"MONTH\": [], \n     \"DAY\": [], \n     \"HOURS\": [], \n     \"MINUTES\": [], \n     \"SECONDS\": [], \n     \"TIMEZONE\": [], \n     \"TZ\": [], \n     \"NOW\": [], \n     \"UUID\": [], \n     \"STRUUID\": [], \n     \"MD5\": [], \n     \"SHA1\": [], \n     \"SHA256\": [], \n     \"SHA384\": [], \n     \"SHA512\": [], \n     \"COALESCE\": [], \n     \"IF\": [], \n     \"STRLANG\": [], \n     \"STRDT\": [], \n     \"SAMETERM\": [], \n     \"ISIRI\": [], \n     \"ISURI\": [], \n     \"ISBLANK\": [], \n     \"ISLITERAL\": [], \n     \"ISNUMERIC\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"COUNT\": [], \n     \"SUM\": [], \n     \"MIN\": [], \n     \"MAX\": [], \n     \"AVG\": [], \n     \"SAMPLE\": [], \n     \"GROUP_CONCAT\": [], \n     \"SUBSTR\": [], \n     \"REPLACE\": [], \n     \"REGEX\": [], \n     \"EXISTS\": [], \n     \"NOT\": [], \n     \"IRI_REF\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"*\": []}, \n  \"?GRAPH\" : {\n     \"GRAPH\": [\"GRAPH\"], \n     \"IRI_REF\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": []}, \n  \"?SILENT\" : {\n     \"SILENT\": [\"SILENT\"], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"IRI_REF\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": []}, \n  \"?SILENT_1\" : {\n     \"SILENT\": [\"SILENT\"], \n     \"IRI_REF\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": []}, \n  \"?SILENT_2\" : {\n     \"SILENT\": [\"SILENT\"], \n     \"GRAPH\": [], \n     \"DEFAULT\": [], \n     \"NAMED\": [], \n     \"ALL\": []}, \n  \"?SILENT_3\" : {\n     \"SILENT\": [\"SILENT\"], \n     \"GRAPH\": []}, \n  \"?SILENT_4\" : {\n     \"SILENT\": [\"SILENT\"], \n     \"DEFAULT\": [], \n     \"GRAPH\": [], \n     \"IRI_REF\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": []}, \n  \"?WHERE\" : {\n     \"WHERE\": [\"WHERE\"], \n     \"{\": []}, \n  \"?[,,expression]\" : {\n     \",\": [\"[,,expression]\"], \n     \")\": []}, \n  \"?[.,?constructTriples]\" : {\n     \".\": [\"[.,?constructTriples]\"], \n     \"}\": []}, \n  \"?[.,?triplesBlock]\" : {\n     \".\": [\"[.,?triplesBlock]\"], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"?[.,?triplesTemplate]\" : {\n     \".\": [\"[.,?triplesTemplate]\"], \n     \"}\": [], \n     \"GRAPH\": []}, \n  \"?[;,SEPARATOR,=,string]\" : {\n     \";\": [\"[;,SEPARATOR,=,string]\"], \n     \")\": []}, \n  \"?[;,update]\" : {\n     \";\": [\"[;,update]\"], \n     \"$\": []}, \n  \"?[AS,var]\" : {\n     \"AS\": [\"[AS,var]\"], \n     \")\": []}, \n  \"?[INTO,graphRef]\" : {\n     \"INTO\": [\"[INTO,graphRef]\"], \n     \";\": [], \n     \"$\": []}, \n  \"?[or([verbPath,verbSimple]),objectList]\" : {\n     \"VAR1\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"VAR2\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"^\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"a\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"!\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"(\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"IRI_REF\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"PNAME_LN\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"PNAME_NS\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \";\": [], \n     \".\": [], \n     \"]\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\" : {\n     \"a\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \"^\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \"IRI_REF\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \"PNAME_LN\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \"PNAME_NS\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \")\": []}, \n  \"?[update1,?[;,update]]\" : {\n     \"INSERT\": [\"[update1,?[;,update]]\"], \n     \"DELETE\": [\"[update1,?[;,update]]\"], \n     \"LOAD\": [\"[update1,?[;,update]]\"], \n     \"CLEAR\": [\"[update1,?[;,update]]\"], \n     \"DROP\": [\"[update1,?[;,update]]\"], \n     \"ADD\": [\"[update1,?[;,update]]\"], \n     \"MOVE\": [\"[update1,?[;,update]]\"], \n     \"COPY\": [\"[update1,?[;,update]]\"], \n     \"CREATE\": [\"[update1,?[;,update]]\"], \n     \"WITH\": [\"[update1,?[;,update]]\"], \n     \"$\": []}, \n  \"?[verb,objectList]\" : {\n     \"a\": [\"[verb,objectList]\"], \n     \"VAR1\": [\"[verb,objectList]\"], \n     \"VAR2\": [\"[verb,objectList]\"], \n     \"IRI_REF\": [\"[verb,objectList]\"], \n     \"PNAME_LN\": [\"[verb,objectList]\"], \n     \"PNAME_NS\": [\"[verb,objectList]\"], \n     \";\": [], \n     \".\": [], \n     \"]\": [], \n     \"}\": [], \n     \"GRAPH\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": []}, \n  \"?argList\" : {\n     \"NIL\": [\"argList\"], \n     \"(\": [\"argList\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \"+\": [], \n     \"-\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"*\": [], \n     \"/\": [], \n     \";\": []}, \n  \"?constructTriples\" : {\n     \"VAR1\": [\"constructTriples\"], \n     \"VAR2\": [\"constructTriples\"], \n     \"NIL\": [\"constructTriples\"], \n     \"(\": [\"constructTriples\"], \n     \"[\": [\"constructTriples\"], \n     \"IRI_REF\": [\"constructTriples\"], \n     \"TRUE\": [\"constructTriples\"], \n     \"FALSE\": [\"constructTriples\"], \n     \"BLANK_NODE_LABEL\": [\"constructTriples\"], \n     \"ANON\": [\"constructTriples\"], \n     \"PNAME_LN\": [\"constructTriples\"], \n     \"PNAME_NS\": [\"constructTriples\"], \n     \"STRING_LITERAL1\": [\"constructTriples\"], \n     \"STRING_LITERAL2\": [\"constructTriples\"], \n     \"STRING_LITERAL_LONG1\": [\"constructTriples\"], \n     \"STRING_LITERAL_LONG2\": [\"constructTriples\"], \n     \"INTEGER\": [\"constructTriples\"], \n     \"DECIMAL\": [\"constructTriples\"], \n     \"DOUBLE\": [\"constructTriples\"], \n     \"INTEGER_POSITIVE\": [\"constructTriples\"], \n     \"DECIMAL_POSITIVE\": [\"constructTriples\"], \n     \"DOUBLE_POSITIVE\": [\"constructTriples\"], \n     \"INTEGER_NEGATIVE\": [\"constructTriples\"], \n     \"DECIMAL_NEGATIVE\": [\"constructTriples\"], \n     \"DOUBLE_NEGATIVE\": [\"constructTriples\"], \n     \"}\": []}, \n  \"?groupClause\" : {\n     \"GROUP\": [\"groupClause\"], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?havingClause\" : {\n     \"HAVING\": [\"havingClause\"], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"ORDER\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?insertClause\" : {\n     \"INSERT\": [\"insertClause\"], \n     \"WHERE\": [], \n     \"USING\": []}, \n  \"?limitClause\" : {\n     \"LIMIT\": [\"limitClause\"], \n     \"VALUES\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?limitOffsetClauses\" : {\n     \"LIMIT\": [\"limitOffsetClauses\"], \n     \"OFFSET\": [\"limitOffsetClauses\"], \n     \"VALUES\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?offsetClause\" : {\n     \"OFFSET\": [\"offsetClause\"], \n     \"VALUES\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?or([DISTINCT,REDUCED])\" : {\n     \"DISTINCT\": [\"or([DISTINCT,REDUCED])\"], \n     \"REDUCED\": [\"or([DISTINCT,REDUCED])\"], \n     \"*\": [], \n     \"(\": [], \n     \"VAR1\": [], \n     \"VAR2\": []}, \n  \"?or([LANGTAG,[^^,iriRef]])\" : {\n     \"LANGTAG\": [\"or([LANGTAG,[^^,iriRef]])\"], \n     \"^^\": [\"or([LANGTAG,[^^,iriRef]])\"], \n     \"UNDEF\": [], \n     \"IRI_REF\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"a\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"^\": [], \n     \"!\": [], \n     \"(\": [], \n     \".\": [], \n     \";\": [], \n     \",\": [], \n     \"AS\": [], \n     \")\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \"+\": [], \n     \"-\": [], \n     \"*\": [], \n     \"/\": [], \n     \"}\": [], \n     \"[\": [], \n     \"NIL\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"]\": [], \n     \"GRAPH\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": []}, \n  \"?or([[*,unaryExpression],[/,unaryExpression]])\" : {\n     \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"+\": [], \n     \"-\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \";\": []}, \n  \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\" : {\n     \"=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"!=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"<\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \">\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"<=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \">=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"IN\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"NOT\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"||\": [], \n     \"&&\": [], \n     \";\": []}, \n  \"?orderClause\" : {\n     \"ORDER\": [\"orderClause\"], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?pathMod\" : {\n     \"*\": [\"pathMod\"], \n     \"?\": [\"pathMod\"], \n     \"+\": [\"pathMod\"], \n     \"{\": [\"pathMod\"], \n     \"|\": [], \n     \"/\": [], \n     \")\": [], \n     \"(\": [], \n     \"[\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"IRI_REF\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": []}, \n  \"?triplesBlock\" : {\n     \"VAR1\": [\"triplesBlock\"], \n     \"VAR2\": [\"triplesBlock\"], \n     \"NIL\": [\"triplesBlock\"], \n     \"(\": [\"triplesBlock\"], \n     \"[\": [\"triplesBlock\"], \n     \"IRI_REF\": [\"triplesBlock\"], \n     \"TRUE\": [\"triplesBlock\"], \n     \"FALSE\": [\"triplesBlock\"], \n     \"BLANK_NODE_LABEL\": [\"triplesBlock\"], \n     \"ANON\": [\"triplesBlock\"], \n     \"PNAME_LN\": [\"triplesBlock\"], \n     \"PNAME_NS\": [\"triplesBlock\"], \n     \"STRING_LITERAL1\": [\"triplesBlock\"], \n     \"STRING_LITERAL2\": [\"triplesBlock\"], \n     \"STRING_LITERAL_LONG1\": [\"triplesBlock\"], \n     \"STRING_LITERAL_LONG2\": [\"triplesBlock\"], \n     \"INTEGER\": [\"triplesBlock\"], \n     \"DECIMAL\": [\"triplesBlock\"], \n     \"DOUBLE\": [\"triplesBlock\"], \n     \"INTEGER_POSITIVE\": [\"triplesBlock\"], \n     \"DECIMAL_POSITIVE\": [\"triplesBlock\"], \n     \"DOUBLE_POSITIVE\": [\"triplesBlock\"], \n     \"INTEGER_NEGATIVE\": [\"triplesBlock\"], \n     \"DECIMAL_NEGATIVE\": [\"triplesBlock\"], \n     \"DOUBLE_NEGATIVE\": [\"triplesBlock\"], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"?triplesTemplate\" : {\n     \"VAR1\": [\"triplesTemplate\"], \n     \"VAR2\": [\"triplesTemplate\"], \n     \"NIL\": [\"triplesTemplate\"], \n     \"(\": [\"triplesTemplate\"], \n     \"[\": [\"triplesTemplate\"], \n     \"IRI_REF\": [\"triplesTemplate\"], \n     \"TRUE\": [\"triplesTemplate\"], \n     \"FALSE\": [\"triplesTemplate\"], \n     \"BLANK_NODE_LABEL\": [\"triplesTemplate\"], \n     \"ANON\": [\"triplesTemplate\"], \n     \"PNAME_LN\": [\"triplesTemplate\"], \n     \"PNAME_NS\": [\"triplesTemplate\"], \n     \"STRING_LITERAL1\": [\"triplesTemplate\"], \n     \"STRING_LITERAL2\": [\"triplesTemplate\"], \n     \"STRING_LITERAL_LONG1\": [\"triplesTemplate\"], \n     \"STRING_LITERAL_LONG2\": [\"triplesTemplate\"], \n     \"INTEGER\": [\"triplesTemplate\"], \n     \"DECIMAL\": [\"triplesTemplate\"], \n     \"DOUBLE\": [\"triplesTemplate\"], \n     \"INTEGER_POSITIVE\": [\"triplesTemplate\"], \n     \"DECIMAL_POSITIVE\": [\"triplesTemplate\"], \n     \"DOUBLE_POSITIVE\": [\"triplesTemplate\"], \n     \"INTEGER_NEGATIVE\": [\"triplesTemplate\"], \n     \"DECIMAL_NEGATIVE\": [\"triplesTemplate\"], \n     \"DOUBLE_NEGATIVE\": [\"triplesTemplate\"], \n     \"}\": [], \n     \"GRAPH\": []}, \n  \"?whereClause\" : {\n     \"WHERE\": [\"whereClause\"], \n     \"{\": [\"whereClause\"], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"VALUES\": [], \n     \"$\": []}, \n  \"[ (,*dataBlockValue,)]\" : {\n     \"(\": [\"(\",\"*dataBlockValue\",\")\"]}, \n  \"[ (,*var,)]\" : {\n     \"(\": [\"(\",\"*var\",\")\"]}, \n  \"[ (,expression,)]\" : {\n     \"(\": [\"(\",\"expression\",\")\"]}, \n  \"[ (,expression,AS,var,)]\" : {\n     \"(\": [\"(\",\"expression\",\"AS\",\"var\",\")\"]}, \n  \"[!=,numericExpression]\" : {\n     \"!=\": [\"!=\",\"numericExpression\"]}, \n  \"[&&,valueLogical]\" : {\n     \"&&\": [\"&&\",\"valueLogical\"]}, \n  \"[*,unaryExpression]\" : {\n     \"*\": [\"*\",\"unaryExpression\"]}, \n  \"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\" : {\n     \"WHERE\": [\"*datasetClause\",\"WHERE\",\"{\",\"?triplesTemplate\",\"}\",\"solutionModifier\"], \n     \"FROM\": [\"*datasetClause\",\"WHERE\",\"{\",\"?triplesTemplate\",\"}\",\"solutionModifier\"]}, \n  \"[+,multiplicativeExpression]\" : {\n     \"+\": [\"+\",\"multiplicativeExpression\"]}, \n  \"[,,expression]\" : {\n     \",\": [\",\",\"expression\"]}, \n  \"[,,integer,}]\" : {\n     \",\": [\",\",\"integer\",\"}\"]}, \n  \"[,,objectPath]\" : {\n     \",\": [\",\",\"objectPath\"]}, \n  \"[,,object]\" : {\n     \",\": [\",\",\"object\"]}, \n  \"[,,or([},[integer,}]])]\" : {\n     \",\": [\",\",\"or([},[integer,}]])\"]}, \n  \"[-,multiplicativeExpression]\" : {\n     \"-\": [\"-\",\"multiplicativeExpression\"]}, \n  \"[.,?constructTriples]\" : {\n     \".\": [\".\",\"?constructTriples\"]}, \n  \"[.,?triplesBlock]\" : {\n     \".\": [\".\",\"?triplesBlock\"]}, \n  \"[.,?triplesTemplate]\" : {\n     \".\": [\".\",\"?triplesTemplate\"]}, \n  \"[/,pathEltOrInverse]\" : {\n     \"/\": [\"/\",\"pathEltOrInverse\"]}, \n  \"[/,unaryExpression]\" : {\n     \"/\": [\"/\",\"unaryExpression\"]}, \n  \"[;,?[or([verbPath,verbSimple]),objectList]]\" : {\n     \";\": [\";\",\"?[or([verbPath,verbSimple]),objectList]\"]}, \n  \"[;,?[verb,objectList]]\" : {\n     \";\": [\";\",\"?[verb,objectList]\"]}, \n  \"[;,SEPARATOR,=,string]\" : {\n     \";\": [\";\",\"SEPARATOR\",\"=\",\"string\"]}, \n  \"[;,update]\" : {\n     \";\": [\";\",\"update\"]}, \n  \"[<,numericExpression]\" : {\n     \"<\": [\"<\",\"numericExpression\"]}, \n  \"[<=,numericExpression]\" : {\n     \"<=\": [\"<=\",\"numericExpression\"]}, \n  \"[=,numericExpression]\" : {\n     \"=\": [\"=\",\"numericExpression\"]}, \n  \"[>,numericExpression]\" : {\n     \">\": [\">\",\"numericExpression\"]}, \n  \"[>=,numericExpression]\" : {\n     \">=\": [\">=\",\"numericExpression\"]}, \n  \"[AS,var]\" : {\n     \"AS\": [\"AS\",\"var\"]}, \n  \"[IN,expressionList]\" : {\n     \"IN\": [\"IN\",\"expressionList\"]}, \n  \"[INTO,graphRef]\" : {\n     \"INTO\": [\"INTO\",\"graphRef\"]}, \n  \"[NAMED,iriRef]\" : {\n     \"NAMED\": [\"NAMED\",\"iriRef\"]}, \n  \"[NOT,IN,expressionList]\" : {\n     \"NOT\": [\"NOT\",\"IN\",\"expressionList\"]}, \n  \"[UNION,groupGraphPattern]\" : {\n     \"UNION\": [\"UNION\",\"groupGraphPattern\"]}, \n  \"[^^,iriRef]\" : {\n     \"^^\": [\"^^\",\"iriRef\"]}, \n  \"[constructTemplate,*datasetClause,whereClause,solutionModifier]\" : {\n     \"{\": [\"constructTemplate\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]}, \n  \"[deleteClause,?insertClause]\" : {\n     \"DELETE\": [\"deleteClause\",\"?insertClause\"]}, \n  \"[graphPatternNotTriples,?.,?triplesBlock]\" : {\n     \"{\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"OPTIONAL\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"MINUS\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"GRAPH\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"SERVICE\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"FILTER\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"BIND\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"VALUES\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"]}, \n  \"[integer,or([[,,or([},[integer,}]])],}])]\" : {\n     \"INTEGER\": [\"integer\",\"or([[,,or([},[integer,}]])],}])\"]}, \n  \"[integer,}]\" : {\n     \"INTEGER\": [\"integer\",\"}\"]}, \n  \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\" : {\n     \"INTEGER_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"INTEGER_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"]}, \n  \"[or([verbPath,verbSimple]),objectList]\" : {\n     \"VAR1\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"VAR2\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"^\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"a\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"!\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"(\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"IRI_REF\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"PNAME_LN\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"PNAME_NS\": [\"or([verbPath,verbSimple])\",\"objectList\"]}, \n  \"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\" : {\n     \"a\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n     \"^\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n     \"IRI_REF\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n     \"PNAME_LN\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n     \"PNAME_NS\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"]}, \n  \"[quadsNotTriples,?.,?triplesTemplate]\" : {\n     \"GRAPH\": [\"quadsNotTriples\",\"?.\",\"?triplesTemplate\"]}, \n  \"[update1,?[;,update]]\" : {\n     \"INSERT\": [\"update1\",\"?[;,update]\"], \n     \"DELETE\": [\"update1\",\"?[;,update]\"], \n     \"LOAD\": [\"update1\",\"?[;,update]\"], \n     \"CLEAR\": [\"update1\",\"?[;,update]\"], \n     \"DROP\": [\"update1\",\"?[;,update]\"], \n     \"ADD\": [\"update1\",\"?[;,update]\"], \n     \"MOVE\": [\"update1\",\"?[;,update]\"], \n     \"COPY\": [\"update1\",\"?[;,update]\"], \n     \"CREATE\": [\"update1\",\"?[;,update]\"], \n     \"WITH\": [\"update1\",\"?[;,update]\"]}, \n  \"[verb,objectList]\" : {\n     \"a\": [\"verb\",\"objectList\"], \n     \"VAR1\": [\"verb\",\"objectList\"], \n     \"VAR2\": [\"verb\",\"objectList\"], \n     \"IRI_REF\": [\"verb\",\"objectList\"], \n     \"PNAME_LN\": [\"verb\",\"objectList\"], \n     \"PNAME_NS\": [\"verb\",\"objectList\"]}, \n  \"[|,pathOneInPropertySet]\" : {\n     \"|\": [\"|\",\"pathOneInPropertySet\"]}, \n  \"[|,pathSequence]\" : {\n     \"|\": [\"|\",\"pathSequence\"]}, \n  \"[||,conditionalAndExpression]\" : {\n     \"||\": [\"||\",\"conditionalAndExpression\"]}, \n  \"add\" : {\n     \"ADD\": [\"ADD\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]}, \n  \"additiveExpression\" : {\n     \"!\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"+\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"-\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"VAR1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"VAR2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"(\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"LANG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"LANGMATCHES\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DATATYPE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"BOUND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"IRI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"URI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"BNODE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"RAND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ABS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"CEIL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"FLOOR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ROUND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"CONCAT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRLEN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"UCASE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"LCASE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ENCODE_FOR_URI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"CONTAINS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRSTARTS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRENDS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRBEFORE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRAFTER\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"YEAR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MONTH\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DAY\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"HOURS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MINUTES\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SECONDS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"TIMEZONE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"TZ\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"NOW\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"UUID\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRUUID\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MD5\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SHA1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SHA256\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SHA384\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SHA512\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"COALESCE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"IF\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRLANG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRDT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SAMETERM\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISIRI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISURI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISBLANK\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISLITERAL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISNUMERIC\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"TRUE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"FALSE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"COUNT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SUM\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MIN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MAX\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"AVG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SAMPLE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"GROUP_CONCAT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SUBSTR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"REPLACE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"REGEX\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"EXISTS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"NOT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"IRI_REF\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL_LONG1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL_LONG2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"PNAME_LN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"PNAME_NS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"]}, \n  \"aggregate\" : {\n     \"COUNT\": [\"COUNT\",\"(\",\"?DISTINCT\",\"or([*,expression])\",\")\"], \n     \"SUM\": [\"SUM\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"MIN\": [\"MIN\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"MAX\": [\"MAX\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"AVG\": [\"AVG\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"SAMPLE\": [\"SAMPLE\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"GROUP_CONCAT\": [\"GROUP_CONCAT\",\"(\",\"?DISTINCT\",\"expression\",\"?[;,SEPARATOR,=,string]\",\")\"]}, \n  \"allowBnodes\" : {\n     \"}\": []}, \n  \"allowVars\" : {\n     \"}\": []}, \n  \"argList\" : {\n     \"NIL\": [\"NIL\"], \n     \"(\": [\"(\",\"?DISTINCT\",\"expression\",\"*[,,expression]\",\")\"]}, \n  \"askQuery\" : {\n     \"ASK\": [\"ASK\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]}, \n  \"baseDecl\" : {\n     \"BASE\": [\"BASE\",\"IRI_REF\"]}, \n  \"bind\" : {\n     \"BIND\": [\"BIND\",\"(\",\"expression\",\"AS\",\"var\",\")\"]}, \n  \"blankNode\" : {\n     \"BLANK_NODE_LABEL\": [\"BLANK_NODE_LABEL\"], \n     \"ANON\": [\"ANON\"]}, \n  \"blankNodePropertyList\" : {\n     \"[\": [\"[\",\"propertyListNotEmpty\",\"]\"]}, \n  \"blankNodePropertyListPath\" : {\n     \"[\": [\"[\",\"propertyListPathNotEmpty\",\"]\"]}, \n  \"booleanLiteral\" : {\n     \"TRUE\": [\"TRUE\"], \n     \"FALSE\": [\"FALSE\"]}, \n  \"brackettedExpression\" : {\n     \"(\": [\"(\",\"expression\",\")\"]}, \n  \"builtInCall\" : {\n     \"STR\": [\"STR\",\"(\",\"expression\",\")\"], \n     \"LANG\": [\"LANG\",\"(\",\"expression\",\")\"], \n     \"LANGMATCHES\": [\"LANGMATCHES\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"DATATYPE\": [\"DATATYPE\",\"(\",\"expression\",\")\"], \n     \"BOUND\": [\"BOUND\",\"(\",\"var\",\")\"], \n     \"IRI\": [\"IRI\",\"(\",\"expression\",\")\"], \n     \"URI\": [\"URI\",\"(\",\"expression\",\")\"], \n     \"BNODE\": [\"BNODE\",\"or([[ (,expression,)],NIL])\"], \n     \"RAND\": [\"RAND\",\"NIL\"], \n     \"ABS\": [\"ABS\",\"(\",\"expression\",\")\"], \n     \"CEIL\": [\"CEIL\",\"(\",\"expression\",\")\"], \n     \"FLOOR\": [\"FLOOR\",\"(\",\"expression\",\")\"], \n     \"ROUND\": [\"ROUND\",\"(\",\"expression\",\")\"], \n     \"CONCAT\": [\"CONCAT\",\"expressionList\"], \n     \"SUBSTR\": [\"substringExpression\"], \n     \"STRLEN\": [\"STRLEN\",\"(\",\"expression\",\")\"], \n     \"REPLACE\": [\"strReplaceExpression\"], \n     \"UCASE\": [\"UCASE\",\"(\",\"expression\",\")\"], \n     \"LCASE\": [\"LCASE\",\"(\",\"expression\",\")\"], \n     \"ENCODE_FOR_URI\": [\"ENCODE_FOR_URI\",\"(\",\"expression\",\")\"], \n     \"CONTAINS\": [\"CONTAINS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRSTARTS\": [\"STRSTARTS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRENDS\": [\"STRENDS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRBEFORE\": [\"STRBEFORE\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRAFTER\": [\"STRAFTER\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"YEAR\": [\"YEAR\",\"(\",\"expression\",\")\"], \n     \"MONTH\": [\"MONTH\",\"(\",\"expression\",\")\"], \n     \"DAY\": [\"DAY\",\"(\",\"expression\",\")\"], \n     \"HOURS\": [\"HOURS\",\"(\",\"expression\",\")\"], \n     \"MINUTES\": [\"MINUTES\",\"(\",\"expression\",\")\"], \n     \"SECONDS\": [\"SECONDS\",\"(\",\"expression\",\")\"], \n     \"TIMEZONE\": [\"TIMEZONE\",\"(\",\"expression\",\")\"], \n     \"TZ\": [\"TZ\",\"(\",\"expression\",\")\"], \n     \"NOW\": [\"NOW\",\"NIL\"], \n     \"UUID\": [\"UUID\",\"NIL\"], \n     \"STRUUID\": [\"STRUUID\",\"NIL\"], \n     \"MD5\": [\"MD5\",\"(\",\"expression\",\")\"], \n     \"SHA1\": [\"SHA1\",\"(\",\"expression\",\")\"], \n     \"SHA256\": [\"SHA256\",\"(\",\"expression\",\")\"], \n     \"SHA384\": [\"SHA384\",\"(\",\"expression\",\")\"], \n     \"SHA512\": [\"SHA512\",\"(\",\"expression\",\")\"], \n     \"COALESCE\": [\"COALESCE\",\"expressionList\"], \n     \"IF\": [\"IF\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRLANG\": [\"STRLANG\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRDT\": [\"STRDT\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"SAMETERM\": [\"SAMETERM\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"ISIRI\": [\"ISIRI\",\"(\",\"expression\",\")\"], \n     \"ISURI\": [\"ISURI\",\"(\",\"expression\",\")\"], \n     \"ISBLANK\": [\"ISBLANK\",\"(\",\"expression\",\")\"], \n     \"ISLITERAL\": [\"ISLITERAL\",\"(\",\"expression\",\")\"], \n     \"ISNUMERIC\": [\"ISNUMERIC\",\"(\",\"expression\",\")\"], \n     \"REGEX\": [\"regexExpression\"], \n     \"EXISTS\": [\"existsFunc\"], \n     \"NOT\": [\"notExistsFunc\"]}, \n  \"clear\" : {\n     \"CLEAR\": [\"CLEAR\",\"?SILENT_2\",\"graphRefAll\"]}, \n  \"collection\" : {\n     \"(\": [\"(\",\"+graphNode\",\")\"]}, \n  \"collectionPath\" : {\n     \"(\": [\"(\",\"+graphNodePath\",\")\"]}, \n  \"conditionalAndExpression\" : {\n     \"!\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"+\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"-\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"VAR1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"VAR2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"(\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"LANG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"LANGMATCHES\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DATATYPE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"BOUND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"IRI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"URI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"BNODE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"RAND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ABS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"CEIL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"FLOOR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ROUND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"CONCAT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRLEN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"UCASE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"LCASE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ENCODE_FOR_URI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"CONTAINS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRSTARTS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRENDS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRBEFORE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRAFTER\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"YEAR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MONTH\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DAY\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"HOURS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MINUTES\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SECONDS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"TIMEZONE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"TZ\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"NOW\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"UUID\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRUUID\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MD5\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SHA1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SHA256\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SHA384\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SHA512\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"COALESCE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"IF\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRLANG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRDT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SAMETERM\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISIRI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISURI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISBLANK\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISLITERAL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISNUMERIC\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"TRUE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"FALSE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"COUNT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SUM\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MIN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MAX\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"AVG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SAMPLE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"GROUP_CONCAT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SUBSTR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"REPLACE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"REGEX\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"EXISTS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"NOT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"IRI_REF\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL_LONG1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL_LONG2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"INTEGER\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DECIMAL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DOUBLE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"INTEGER_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DECIMAL_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DOUBLE_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"INTEGER_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DECIMAL_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DOUBLE_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"PNAME_LN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"PNAME_NS\": [\"valueLogical\",\"*[&&,valueLogical]\"]}, \n  \"conditionalOrExpression\" : {\n     \"!\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"+\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"-\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"VAR1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"VAR2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"(\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"LANG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"LANGMATCHES\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DATATYPE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"BOUND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"IRI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"URI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"BNODE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"RAND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ABS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"CEIL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"FLOOR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ROUND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"CONCAT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRLEN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"UCASE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"LCASE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ENCODE_FOR_URI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"CONTAINS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRSTARTS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRENDS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRBEFORE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRAFTER\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"YEAR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MONTH\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DAY\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"HOURS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MINUTES\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SECONDS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"TIMEZONE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"TZ\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"NOW\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"UUID\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRUUID\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MD5\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SHA1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SHA256\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SHA384\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SHA512\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"COALESCE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"IF\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRLANG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRDT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SAMETERM\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISIRI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISURI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISBLANK\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISLITERAL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISNUMERIC\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"TRUE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"FALSE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"COUNT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SUM\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MIN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MAX\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"AVG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SAMPLE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"GROUP_CONCAT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SUBSTR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"REPLACE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"REGEX\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"EXISTS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"NOT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"IRI_REF\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL_LONG1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL_LONG2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"INTEGER\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DECIMAL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DOUBLE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"INTEGER_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DECIMAL_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DOUBLE_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"INTEGER_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DECIMAL_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DOUBLE_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"PNAME_LN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"PNAME_NS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"]}, \n  \"constraint\" : {\n     \"(\": [\"brackettedExpression\"], \n     \"STR\": [\"builtInCall\"], \n     \"LANG\": [\"builtInCall\"], \n     \"LANGMATCHES\": [\"builtInCall\"], \n     \"DATATYPE\": [\"builtInCall\"], \n     \"BOUND\": [\"builtInCall\"], \n     \"IRI\": [\"builtInCall\"], \n     \"URI\": [\"builtInCall\"], \n     \"BNODE\": [\"builtInCall\"], \n     \"RAND\": [\"builtInCall\"], \n     \"ABS\": [\"builtInCall\"], \n     \"CEIL\": [\"builtInCall\"], \n     \"FLOOR\": [\"builtInCall\"], \n     \"ROUND\": [\"builtInCall\"], \n     \"CONCAT\": [\"builtInCall\"], \n     \"STRLEN\": [\"builtInCall\"], \n     \"UCASE\": [\"builtInCall\"], \n     \"LCASE\": [\"builtInCall\"], \n     \"ENCODE_FOR_URI\": [\"builtInCall\"], \n     \"CONTAINS\": [\"builtInCall\"], \n     \"STRSTARTS\": [\"builtInCall\"], \n     \"STRENDS\": [\"builtInCall\"], \n     \"STRBEFORE\": [\"builtInCall\"], \n     \"STRAFTER\": [\"builtInCall\"], \n     \"YEAR\": [\"builtInCall\"], \n     \"MONTH\": [\"builtInCall\"], \n     \"DAY\": [\"builtInCall\"], \n     \"HOURS\": [\"builtInCall\"], \n     \"MINUTES\": [\"builtInCall\"], \n     \"SECONDS\": [\"builtInCall\"], \n     \"TIMEZONE\": [\"builtInCall\"], \n     \"TZ\": [\"builtInCall\"], \n     \"NOW\": [\"builtInCall\"], \n     \"UUID\": [\"builtInCall\"], \n     \"STRUUID\": [\"builtInCall\"], \n     \"MD5\": [\"builtInCall\"], \n     \"SHA1\": [\"builtInCall\"], \n     \"SHA256\": [\"builtInCall\"], \n     \"SHA384\": [\"builtInCall\"], \n     \"SHA512\": [\"builtInCall\"], \n     \"COALESCE\": [\"builtInCall\"], \n     \"IF\": [\"builtInCall\"], \n     \"STRLANG\": [\"builtInCall\"], \n     \"STRDT\": [\"builtInCall\"], \n     \"SAMETERM\": [\"builtInCall\"], \n     \"ISIRI\": [\"builtInCall\"], \n     \"ISURI\": [\"builtInCall\"], \n     \"ISBLANK\": [\"builtInCall\"], \n     \"ISLITERAL\": [\"builtInCall\"], \n     \"ISNUMERIC\": [\"builtInCall\"], \n     \"SUBSTR\": [\"builtInCall\"], \n     \"REPLACE\": [\"builtInCall\"], \n     \"REGEX\": [\"builtInCall\"], \n     \"EXISTS\": [\"builtInCall\"], \n     \"NOT\": [\"builtInCall\"], \n     \"IRI_REF\": [\"functionCall\"], \n     \"PNAME_LN\": [\"functionCall\"], \n     \"PNAME_NS\": [\"functionCall\"]}, \n  \"constructQuery\" : {\n     \"CONSTRUCT\": [\"CONSTRUCT\",\"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\"]}, \n  \"constructTemplate\" : {\n     \"{\": [\"{\",\"?constructTriples\",\"}\"]}, \n  \"constructTriples\" : {\n     \"VAR1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"VAR2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"NIL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"(\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"[\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"IRI_REF\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"TRUE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"FALSE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"BLANK_NODE_LABEL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"ANON\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"PNAME_LN\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"PNAME_NS\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL_LONG1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL_LONG2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"INTEGER\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DECIMAL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DOUBLE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"INTEGER_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DECIMAL_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DOUBLE_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"INTEGER_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DECIMAL_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DOUBLE_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"]}, \n  \"copy\" : {\n     \"COPY\": [\"COPY\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]}, \n  \"create\" : {\n     \"CREATE\": [\"CREATE\",\"?SILENT_3\",\"graphRef\"]}, \n  \"dataBlock\" : {\n     \"NIL\": [\"or([inlineDataOneVar,inlineDataFull])\"], \n     \"(\": [\"or([inlineDataOneVar,inlineDataFull])\"], \n     \"VAR1\": [\"or([inlineDataOneVar,inlineDataFull])\"], \n     \"VAR2\": [\"or([inlineDataOneVar,inlineDataFull])\"]}, \n  \"dataBlockValue\" : {\n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"], \n     \"STRING_LITERAL1\": [\"rdfLiteral\"], \n     \"STRING_LITERAL2\": [\"rdfLiteral\"], \n     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \n     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \n     \"INTEGER\": [\"numericLiteral\"], \n     \"DECIMAL\": [\"numericLiteral\"], \n     \"DOUBLE\": [\"numericLiteral\"], \n     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \n     \"TRUE\": [\"booleanLiteral\"], \n     \"FALSE\": [\"booleanLiteral\"], \n     \"UNDEF\": [\"UNDEF\"]}, \n  \"datasetClause\" : {\n     \"FROM\": [\"FROM\",\"or([defaultGraphClause,namedGraphClause])\"]}, \n  \"defaultGraphClause\" : {\n     \"IRI_REF\": [\"sourceSelector\"], \n     \"PNAME_LN\": [\"sourceSelector\"], \n     \"PNAME_NS\": [\"sourceSelector\"]}, \n  \"delete1\" : {\n     \"DATA\": [\"DATA\",\"quadDataNoBnodes\"], \n     \"WHERE\": [\"WHERE\",\"quadPatternNoBnodes\"], \n     \"{\": [\"quadPatternNoBnodes\",\"?insertClause\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]}, \n  \"deleteClause\" : {\n     \"DELETE\": [\"DELETE\",\"quadPattern\"]}, \n  \"describeDatasetClause\" : {\n     \"FROM\": [\"FROM\",\"or([defaultGraphClause,namedGraphClause])\"]}, \n  \"describeQuery\" : {\n     \"DESCRIBE\": [\"DESCRIBE\",\"or([+varOrIRIref,*])\",\"*describeDatasetClause\",\"?whereClause\",\"solutionModifier\"]}, \n  \"disallowBnodes\" : {\n     \"}\": [], \n     \"GRAPH\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"(\": [], \n     \"[\": [], \n     \"IRI_REF\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": []}, \n  \"disallowVars\" : {\n     \"}\": [], \n     \"GRAPH\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"(\": [], \n     \"[\": [], \n     \"IRI_REF\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": []}, \n  \"drop\" : {\n     \"DROP\": [\"DROP\",\"?SILENT_2\",\"graphRefAll\"]}, \n  \"existsFunc\" : {\n     \"EXISTS\": [\"EXISTS\",\"groupGraphPattern\"]}, \n  \"expression\" : {\n     \"!\": [\"conditionalOrExpression\"], \n     \"+\": [\"conditionalOrExpression\"], \n     \"-\": [\"conditionalOrExpression\"], \n     \"VAR1\": [\"conditionalOrExpression\"], \n     \"VAR2\": [\"conditionalOrExpression\"], \n     \"(\": [\"conditionalOrExpression\"], \n     \"STR\": [\"conditionalOrExpression\"], \n     \"LANG\": [\"conditionalOrExpression\"], \n     \"LANGMATCHES\": [\"conditionalOrExpression\"], \n     \"DATATYPE\": [\"conditionalOrExpression\"], \n     \"BOUND\": [\"conditionalOrExpression\"], \n     \"IRI\": [\"conditionalOrExpression\"], \n     \"URI\": [\"conditionalOrExpression\"], \n     \"BNODE\": [\"conditionalOrExpression\"], \n     \"RAND\": [\"conditionalOrExpression\"], \n     \"ABS\": [\"conditionalOrExpression\"], \n     \"CEIL\": [\"conditionalOrExpression\"], \n     \"FLOOR\": [\"conditionalOrExpression\"], \n     \"ROUND\": [\"conditionalOrExpression\"], \n     \"CONCAT\": [\"conditionalOrExpression\"], \n     \"STRLEN\": [\"conditionalOrExpression\"], \n     \"UCASE\": [\"conditionalOrExpression\"], \n     \"LCASE\": [\"conditionalOrExpression\"], \n     \"ENCODE_FOR_URI\": [\"conditionalOrExpression\"], \n     \"CONTAINS\": [\"conditionalOrExpression\"], \n     \"STRSTARTS\": [\"conditionalOrExpression\"], \n     \"STRENDS\": [\"conditionalOrExpression\"], \n     \"STRBEFORE\": [\"conditionalOrExpression\"], \n     \"STRAFTER\": [\"conditionalOrExpression\"], \n     \"YEAR\": [\"conditionalOrExpression\"], \n     \"MONTH\": [\"conditionalOrExpression\"], \n     \"DAY\": [\"conditionalOrExpression\"], \n     \"HOURS\": [\"conditionalOrExpression\"], \n     \"MINUTES\": [\"conditionalOrExpression\"], \n     \"SECONDS\": [\"conditionalOrExpression\"], \n     \"TIMEZONE\": [\"conditionalOrExpression\"], \n     \"TZ\": [\"conditionalOrExpression\"], \n     \"NOW\": [\"conditionalOrExpression\"], \n     \"UUID\": [\"conditionalOrExpression\"], \n     \"STRUUID\": [\"conditionalOrExpression\"], \n     \"MD5\": [\"conditionalOrExpression\"], \n     \"SHA1\": [\"conditionalOrExpression\"], \n     \"SHA256\": [\"conditionalOrExpression\"], \n     \"SHA384\": [\"conditionalOrExpression\"], \n     \"SHA512\": [\"conditionalOrExpression\"], \n     \"COALESCE\": [\"conditionalOrExpression\"], \n     \"IF\": [\"conditionalOrExpression\"], \n     \"STRLANG\": [\"conditionalOrExpression\"], \n     \"STRDT\": [\"conditionalOrExpression\"], \n     \"SAMETERM\": [\"conditionalOrExpression\"], \n     \"ISIRI\": [\"conditionalOrExpression\"], \n     \"ISURI\": [\"conditionalOrExpression\"], \n     \"ISBLANK\": [\"conditionalOrExpression\"], \n     \"ISLITERAL\": [\"conditionalOrExpression\"], \n     \"ISNUMERIC\": [\"conditionalOrExpression\"], \n     \"TRUE\": [\"conditionalOrExpression\"], \n     \"FALSE\": [\"conditionalOrExpression\"], \n     \"COUNT\": [\"conditionalOrExpression\"], \n     \"SUM\": [\"conditionalOrExpression\"], \n     \"MIN\": [\"conditionalOrExpression\"], \n     \"MAX\": [\"conditionalOrExpression\"], \n     \"AVG\": [\"conditionalOrExpression\"], \n     \"SAMPLE\": [\"conditionalOrExpression\"], \n     \"GROUP_CONCAT\": [\"conditionalOrExpression\"], \n     \"SUBSTR\": [\"conditionalOrExpression\"], \n     \"REPLACE\": [\"conditionalOrExpression\"], \n     \"REGEX\": [\"conditionalOrExpression\"], \n     \"EXISTS\": [\"conditionalOrExpression\"], \n     \"NOT\": [\"conditionalOrExpression\"], \n     \"IRI_REF\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL1\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL2\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL_LONG1\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL_LONG2\": [\"conditionalOrExpression\"], \n     \"INTEGER\": [\"conditionalOrExpression\"], \n     \"DECIMAL\": [\"conditionalOrExpression\"], \n     \"DOUBLE\": [\"conditionalOrExpression\"], \n     \"INTEGER_POSITIVE\": [\"conditionalOrExpression\"], \n     \"DECIMAL_POSITIVE\": [\"conditionalOrExpression\"], \n     \"DOUBLE_POSITIVE\": [\"conditionalOrExpression\"], \n     \"INTEGER_NEGATIVE\": [\"conditionalOrExpression\"], \n     \"DECIMAL_NEGATIVE\": [\"conditionalOrExpression\"], \n     \"DOUBLE_NEGATIVE\": [\"conditionalOrExpression\"], \n     \"PNAME_LN\": [\"conditionalOrExpression\"], \n     \"PNAME_NS\": [\"conditionalOrExpression\"]}, \n  \"expressionList\" : {\n     \"NIL\": [\"NIL\"], \n     \"(\": [\"(\",\"expression\",\"*[,,expression]\",\")\"]}, \n  \"filter\" : {\n     \"FILTER\": [\"FILTER\",\"constraint\"]}, \n  \"functionCall\" : {\n     \"IRI_REF\": [\"iriRef\",\"argList\"], \n     \"PNAME_LN\": [\"iriRef\",\"argList\"], \n     \"PNAME_NS\": [\"iriRef\",\"argList\"]}, \n  \"graphGraphPattern\" : {\n     \"GRAPH\": [\"GRAPH\",\"varOrIRIref\",\"groupGraphPattern\"]}, \n  \"graphNode\" : {\n     \"VAR1\": [\"varOrTerm\"], \n     \"VAR2\": [\"varOrTerm\"], \n     \"NIL\": [\"varOrTerm\"], \n     \"IRI_REF\": [\"varOrTerm\"], \n     \"TRUE\": [\"varOrTerm\"], \n     \"FALSE\": [\"varOrTerm\"], \n     \"BLANK_NODE_LABEL\": [\"varOrTerm\"], \n     \"ANON\": [\"varOrTerm\"], \n     \"PNAME_LN\": [\"varOrTerm\"], \n     \"PNAME_NS\": [\"varOrTerm\"], \n     \"STRING_LITERAL1\": [\"varOrTerm\"], \n     \"STRING_LITERAL2\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\"], \n     \"INTEGER\": [\"varOrTerm\"], \n     \"DECIMAL\": [\"varOrTerm\"], \n     \"DOUBLE\": [\"varOrTerm\"], \n     \"INTEGER_POSITIVE\": [\"varOrTerm\"], \n     \"DECIMAL_POSITIVE\": [\"varOrTerm\"], \n     \"DOUBLE_POSITIVE\": [\"varOrTerm\"], \n     \"INTEGER_NEGATIVE\": [\"varOrTerm\"], \n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\"], \n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\"], \n     \"(\": [\"triplesNode\"], \n     \"[\": [\"triplesNode\"]}, \n  \"graphNodePath\" : {\n     \"VAR1\": [\"varOrTerm\"], \n     \"VAR2\": [\"varOrTerm\"], \n     \"NIL\": [\"varOrTerm\"], \n     \"IRI_REF\": [\"varOrTerm\"], \n     \"TRUE\": [\"varOrTerm\"], \n     \"FALSE\": [\"varOrTerm\"], \n     \"BLANK_NODE_LABEL\": [\"varOrTerm\"], \n     \"ANON\": [\"varOrTerm\"], \n     \"PNAME_LN\": [\"varOrTerm\"], \n     \"PNAME_NS\": [\"varOrTerm\"], \n     \"STRING_LITERAL1\": [\"varOrTerm\"], \n     \"STRING_LITERAL2\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\"], \n     \"INTEGER\": [\"varOrTerm\"], \n     \"DECIMAL\": [\"varOrTerm\"], \n     \"DOUBLE\": [\"varOrTerm\"], \n     \"INTEGER_POSITIVE\": [\"varOrTerm\"], \n     \"DECIMAL_POSITIVE\": [\"varOrTerm\"], \n     \"DOUBLE_POSITIVE\": [\"varOrTerm\"], \n     \"INTEGER_NEGATIVE\": [\"varOrTerm\"], \n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\"], \n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\"], \n     \"(\": [\"triplesNodePath\"], \n     \"[\": [\"triplesNodePath\"]}, \n  \"graphOrDefault\" : {\n     \"DEFAULT\": [\"DEFAULT\"], \n     \"IRI_REF\": [\"?GRAPH\",\"iriRef\"], \n     \"PNAME_LN\": [\"?GRAPH\",\"iriRef\"], \n     \"PNAME_NS\": [\"?GRAPH\",\"iriRef\"], \n     \"GRAPH\": [\"?GRAPH\",\"iriRef\"]}, \n  \"graphPatternNotTriples\" : {\n     \"{\": [\"groupOrUnionGraphPattern\"], \n     \"OPTIONAL\": [\"optionalGraphPattern\"], \n     \"MINUS\": [\"minusGraphPattern\"], \n     \"GRAPH\": [\"graphGraphPattern\"], \n     \"SERVICE\": [\"serviceGraphPattern\"], \n     \"FILTER\": [\"filter\"], \n     \"BIND\": [\"bind\"], \n     \"VALUES\": [\"inlineData\"]}, \n  \"graphRef\" : {\n     \"GRAPH\": [\"GRAPH\",\"iriRef\"]}, \n  \"graphRefAll\" : {\n     \"GRAPH\": [\"graphRef\"], \n     \"DEFAULT\": [\"DEFAULT\"], \n     \"NAMED\": [\"NAMED\"], \n     \"ALL\": [\"ALL\"]}, \n  \"graphTerm\" : {\n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"], \n     \"STRING_LITERAL1\": [\"rdfLiteral\"], \n     \"STRING_LITERAL2\": [\"rdfLiteral\"], \n     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \n     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \n     \"INTEGER\": [\"numericLiteral\"], \n     \"DECIMAL\": [\"numericLiteral\"], \n     \"DOUBLE\": [\"numericLiteral\"], \n     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \n     \"TRUE\": [\"booleanLiteral\"], \n     \"FALSE\": [\"booleanLiteral\"], \n     \"BLANK_NODE_LABEL\": [\"blankNode\"], \n     \"ANON\": [\"blankNode\"], \n     \"NIL\": [\"NIL\"]}, \n  \"groupClause\" : {\n     \"GROUP\": [\"GROUP\",\"BY\",\"+groupCondition\"]}, \n  \"groupCondition\" : {\n     \"STR\": [\"builtInCall\"], \n     \"LANG\": [\"builtInCall\"], \n     \"LANGMATCHES\": [\"builtInCall\"], \n     \"DATATYPE\": [\"builtInCall\"], \n     \"BOUND\": [\"builtInCall\"], \n     \"IRI\": [\"builtInCall\"], \n     \"URI\": [\"builtInCall\"], \n     \"BNODE\": [\"builtInCall\"], \n     \"RAND\": [\"builtInCall\"], \n     \"ABS\": [\"builtInCall\"], \n     \"CEIL\": [\"builtInCall\"], \n     \"FLOOR\": [\"builtInCall\"], \n     \"ROUND\": [\"builtInCall\"], \n     \"CONCAT\": [\"builtInCall\"], \n     \"STRLEN\": [\"builtInCall\"], \n     \"UCASE\": [\"builtInCall\"], \n     \"LCASE\": [\"builtInCall\"], \n     \"ENCODE_FOR_URI\": [\"builtInCall\"], \n     \"CONTAINS\": [\"builtInCall\"], \n     \"STRSTARTS\": [\"builtInCall\"], \n     \"STRENDS\": [\"builtInCall\"], \n     \"STRBEFORE\": [\"builtInCall\"], \n     \"STRAFTER\": [\"builtInCall\"], \n     \"YEAR\": [\"builtInCall\"], \n     \"MONTH\": [\"builtInCall\"], \n     \"DAY\": [\"builtInCall\"], \n     \"HOURS\": [\"builtInCall\"], \n     \"MINUTES\": [\"builtInCall\"], \n     \"SECONDS\": [\"builtInCall\"], \n     \"TIMEZONE\": [\"builtInCall\"], \n     \"TZ\": [\"builtInCall\"], \n     \"NOW\": [\"builtInCall\"], \n     \"UUID\": [\"builtInCall\"], \n     \"STRUUID\": [\"builtInCall\"], \n     \"MD5\": [\"builtInCall\"], \n     \"SHA1\": [\"builtInCall\"], \n     \"SHA256\": [\"builtInCall\"], \n     \"SHA384\": [\"builtInCall\"], \n     \"SHA512\": [\"builtInCall\"], \n     \"COALESCE\": [\"builtInCall\"], \n     \"IF\": [\"builtInCall\"], \n     \"STRLANG\": [\"builtInCall\"], \n     \"STRDT\": [\"builtInCall\"], \n     \"SAMETERM\": [\"builtInCall\"], \n     \"ISIRI\": [\"builtInCall\"], \n     \"ISURI\": [\"builtInCall\"], \n     \"ISBLANK\": [\"builtInCall\"], \n     \"ISLITERAL\": [\"builtInCall\"], \n     \"ISNUMERIC\": [\"builtInCall\"], \n     \"SUBSTR\": [\"builtInCall\"], \n     \"REPLACE\": [\"builtInCall\"], \n     \"REGEX\": [\"builtInCall\"], \n     \"EXISTS\": [\"builtInCall\"], \n     \"NOT\": [\"builtInCall\"], \n     \"IRI_REF\": [\"functionCall\"], \n     \"PNAME_LN\": [\"functionCall\"], \n     \"PNAME_NS\": [\"functionCall\"], \n     \"(\": [\"(\",\"expression\",\"?[AS,var]\",\")\"], \n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"]}, \n  \"groupGraphPattern\" : {\n     \"{\": [\"{\",\"or([subSelect,groupGraphPatternSub])\",\"}\"]}, \n  \"groupGraphPatternSub\" : {\n     \"{\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"OPTIONAL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"MINUS\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"GRAPH\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"SERVICE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"FILTER\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"BIND\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"VALUES\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"VAR1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"VAR2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"NIL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"(\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"[\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"IRI_REF\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"TRUE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"FALSE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"BLANK_NODE_LABEL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"ANON\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"PNAME_LN\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"PNAME_NS\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"INTEGER\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DECIMAL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DOUBLE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"INTEGER_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DECIMAL_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DOUBLE_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"INTEGER_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DECIMAL_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DOUBLE_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"}\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"]}, \n  \"groupOrUnionGraphPattern\" : {\n     \"{\": [\"groupGraphPattern\",\"*[UNION,groupGraphPattern]\"]}, \n  \"havingClause\" : {\n     \"HAVING\": [\"HAVING\",\"+havingCondition\"]}, \n  \"havingCondition\" : {\n     \"(\": [\"constraint\"], \n     \"STR\": [\"constraint\"], \n     \"LANG\": [\"constraint\"], \n     \"LANGMATCHES\": [\"constraint\"], \n     \"DATATYPE\": [\"constraint\"], \n     \"BOUND\": [\"constraint\"], \n     \"IRI\": [\"constraint\"], \n     \"URI\": [\"constraint\"], \n     \"BNODE\": [\"constraint\"], \n     \"RAND\": [\"constraint\"], \n     \"ABS\": [\"constraint\"], \n     \"CEIL\": [\"constraint\"], \n     \"FLOOR\": [\"constraint\"], \n     \"ROUND\": [\"constraint\"], \n     \"CONCAT\": [\"constraint\"], \n     \"STRLEN\": [\"constraint\"], \n     \"UCASE\": [\"constraint\"], \n     \"LCASE\": [\"constraint\"], \n     \"ENCODE_FOR_URI\": [\"constraint\"], \n     \"CONTAINS\": [\"constraint\"], \n     \"STRSTARTS\": [\"constraint\"], \n     \"STRENDS\": [\"constraint\"], \n     \"STRBEFORE\": [\"constraint\"], \n     \"STRAFTER\": [\"constraint\"], \n     \"YEAR\": [\"constraint\"], \n     \"MONTH\": [\"constraint\"], \n     \"DAY\": [\"constraint\"], \n     \"HOURS\": [\"constraint\"], \n     \"MINUTES\": [\"constraint\"], \n     \"SECONDS\": [\"constraint\"], \n     \"TIMEZONE\": [\"constraint\"], \n     \"TZ\": [\"constraint\"], \n     \"NOW\": [\"constraint\"], \n     \"UUID\": [\"constraint\"], \n     \"STRUUID\": [\"constraint\"], \n     \"MD5\": [\"constraint\"], \n     \"SHA1\": [\"constraint\"], \n     \"SHA256\": [\"constraint\"], \n     \"SHA384\": [\"constraint\"], \n     \"SHA512\": [\"constraint\"], \n     \"COALESCE\": [\"constraint\"], \n     \"IF\": [\"constraint\"], \n     \"STRLANG\": [\"constraint\"], \n     \"STRDT\": [\"constraint\"], \n     \"SAMETERM\": [\"constraint\"], \n     \"ISIRI\": [\"constraint\"], \n     \"ISURI\": [\"constraint\"], \n     \"ISBLANK\": [\"constraint\"], \n     \"ISLITERAL\": [\"constraint\"], \n     \"ISNUMERIC\": [\"constraint\"], \n     \"SUBSTR\": [\"constraint\"], \n     \"REPLACE\": [\"constraint\"], \n     \"REGEX\": [\"constraint\"], \n     \"EXISTS\": [\"constraint\"], \n     \"NOT\": [\"constraint\"], \n     \"IRI_REF\": [\"constraint\"], \n     \"PNAME_LN\": [\"constraint\"], \n     \"PNAME_NS\": [\"constraint\"]}, \n  \"inlineData\" : {\n     \"VALUES\": [\"VALUES\",\"dataBlock\"]}, \n  \"inlineDataFull\" : {\n     \"NIL\": [\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"], \n     \"(\": [\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"]}, \n  \"inlineDataOneVar\" : {\n     \"VAR1\": [\"var\",\"{\",\"*dataBlockValue\",\"}\"], \n     \"VAR2\": [\"var\",\"{\",\"*dataBlockValue\",\"}\"]}, \n  \"insert1\" : {\n     \"DATA\": [\"DATA\",\"quadData\"], \n     \"{\": [\"quadPattern\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]}, \n  \"insertClause\" : {\n     \"INSERT\": [\"INSERT\",\"quadPattern\"]}, \n  \"integer\" : {\n     \"INTEGER\": [\"INTEGER\"]}, \n  \"iriRef\" : {\n     \"IRI_REF\": [\"IRI_REF\"], \n     \"PNAME_LN\": [\"prefixedName\"], \n     \"PNAME_NS\": [\"prefixedName\"]}, \n  \"iriRefOrFunction\" : {\n     \"IRI_REF\": [\"iriRef\",\"?argList\"], \n     \"PNAME_LN\": [\"iriRef\",\"?argList\"], \n     \"PNAME_NS\": [\"iriRef\",\"?argList\"]}, \n  \"limitClause\" : {\n     \"LIMIT\": [\"LIMIT\",\"INTEGER\"]}, \n  \"limitOffsetClauses\" : {\n     \"LIMIT\": [\"limitClause\",\"?offsetClause\"], \n     \"OFFSET\": [\"offsetClause\",\"?limitClause\"]}, \n  \"load\" : {\n     \"LOAD\": [\"LOAD\",\"?SILENT_1\",\"iriRef\",\"?[INTO,graphRef]\"]}, \n  \"minusGraphPattern\" : {\n     \"MINUS\": [\"MINUS\",\"groupGraphPattern\"]}, \n  \"modify\" : {\n     \"WITH\": [\"WITH\",\"iriRef\",\"or([[deleteClause,?insertClause],insertClause])\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]}, \n  \"move\" : {\n     \"MOVE\": [\"MOVE\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]}, \n  \"multiplicativeExpression\" : {\n     \"!\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"+\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"-\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"VAR1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"VAR2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"(\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"LANG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"LANGMATCHES\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DATATYPE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"BOUND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"IRI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"URI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"BNODE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"RAND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ABS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"CEIL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"FLOOR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ROUND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"CONCAT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRLEN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"UCASE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"LCASE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ENCODE_FOR_URI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"CONTAINS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRSTARTS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRENDS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRBEFORE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRAFTER\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"YEAR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MONTH\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DAY\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"HOURS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MINUTES\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SECONDS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"TIMEZONE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"TZ\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"NOW\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"UUID\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRUUID\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MD5\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SHA1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SHA256\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SHA384\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SHA512\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"COALESCE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"IF\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRLANG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRDT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SAMETERM\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISIRI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISURI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISBLANK\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISLITERAL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISNUMERIC\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"TRUE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"FALSE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"COUNT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SUM\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MIN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MAX\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"AVG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SAMPLE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"GROUP_CONCAT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SUBSTR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"REPLACE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"REGEX\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"EXISTS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"NOT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"IRI_REF\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL_LONG1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL_LONG2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"INTEGER\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"INTEGER_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"INTEGER_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"PNAME_LN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"PNAME_NS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"]}, \n  \"namedGraphClause\" : {\n     \"NAMED\": [\"NAMED\",\"sourceSelector\"]}, \n  \"notExistsFunc\" : {\n     \"NOT\": [\"NOT\",\"EXISTS\",\"groupGraphPattern\"]}, \n  \"numericExpression\" : {\n     \"!\": [\"additiveExpression\"], \n     \"+\": [\"additiveExpression\"], \n     \"-\": [\"additiveExpression\"], \n     \"VAR1\": [\"additiveExpression\"], \n     \"VAR2\": [\"additiveExpression\"], \n     \"(\": [\"additiveExpression\"], \n     \"STR\": [\"additiveExpression\"], \n     \"LANG\": [\"additiveExpression\"], \n     \"LANGMATCHES\": [\"additiveExpression\"], \n     \"DATATYPE\": [\"additiveExpression\"], \n     \"BOUND\": [\"additiveExpression\"], \n     \"IRI\": [\"additiveExpression\"], \n     \"URI\": [\"additiveExpression\"], \n     \"BNODE\": [\"additiveExpression\"], \n     \"RAND\": [\"additiveExpression\"], \n     \"ABS\": [\"additiveExpression\"], \n     \"CEIL\": [\"additiveExpression\"], \n     \"FLOOR\": [\"additiveExpression\"], \n     \"ROUND\": [\"additiveExpression\"], \n     \"CONCAT\": [\"additiveExpression\"], \n     \"STRLEN\": [\"additiveExpression\"], \n     \"UCASE\": [\"additiveExpression\"], \n     \"LCASE\": [\"additiveExpression\"], \n     \"ENCODE_FOR_URI\": [\"additiveExpression\"], \n     \"CONTAINS\": [\"additiveExpression\"], \n     \"STRSTARTS\": [\"additiveExpression\"], \n     \"STRENDS\": [\"additiveExpression\"], \n     \"STRBEFORE\": [\"additiveExpression\"], \n     \"STRAFTER\": [\"additiveExpression\"], \n     \"YEAR\": [\"additiveExpression\"], \n     \"MONTH\": [\"additiveExpression\"], \n     \"DAY\": [\"additiveExpression\"], \n     \"HOURS\": [\"additiveExpression\"], \n     \"MINUTES\": [\"additiveExpression\"], \n     \"SECONDS\": [\"additiveExpression\"], \n     \"TIMEZONE\": [\"additiveExpression\"], \n     \"TZ\": [\"additiveExpression\"], \n     \"NOW\": [\"additiveExpression\"], \n     \"UUID\": [\"additiveExpression\"], \n     \"STRUUID\": [\"additiveExpression\"], \n     \"MD5\": [\"additiveExpression\"], \n     \"SHA1\": [\"additiveExpression\"], \n     \"SHA256\": [\"additiveExpression\"], \n     \"SHA384\": [\"additiveExpression\"], \n     \"SHA512\": [\"additiveExpression\"], \n     \"COALESCE\": [\"additiveExpression\"], \n     \"IF\": [\"additiveExpression\"], \n     \"STRLANG\": [\"additiveExpression\"], \n     \"STRDT\": [\"additiveExpression\"], \n     \"SAMETERM\": [\"additiveExpression\"], \n     \"ISIRI\": [\"additiveExpression\"], \n     \"ISURI\": [\"additiveExpression\"], \n     \"ISBLANK\": [\"additiveExpression\"], \n     \"ISLITERAL\": [\"additiveExpression\"], \n     \"ISNUMERIC\": [\"additiveExpression\"], \n     \"TRUE\": [\"additiveExpression\"], \n     \"FALSE\": [\"additiveExpression\"], \n     \"COUNT\": [\"additiveExpression\"], \n     \"SUM\": [\"additiveExpression\"], \n     \"MIN\": [\"additiveExpression\"], \n     \"MAX\": [\"additiveExpression\"], \n     \"AVG\": [\"additiveExpression\"], \n     \"SAMPLE\": [\"additiveExpression\"], \n     \"GROUP_CONCAT\": [\"additiveExpression\"], \n     \"SUBSTR\": [\"additiveExpression\"], \n     \"REPLACE\": [\"additiveExpression\"], \n     \"REGEX\": [\"additiveExpression\"], \n     \"EXISTS\": [\"additiveExpression\"], \n     \"NOT\": [\"additiveExpression\"], \n     \"IRI_REF\": [\"additiveExpression\"], \n     \"STRING_LITERAL1\": [\"additiveExpression\"], \n     \"STRING_LITERAL2\": [\"additiveExpression\"], \n     \"STRING_LITERAL_LONG1\": [\"additiveExpression\"], \n     \"STRING_LITERAL_LONG2\": [\"additiveExpression\"], \n     \"INTEGER\": [\"additiveExpression\"], \n     \"DECIMAL\": [\"additiveExpression\"], \n     \"DOUBLE\": [\"additiveExpression\"], \n     \"INTEGER_POSITIVE\": [\"additiveExpression\"], \n     \"DECIMAL_POSITIVE\": [\"additiveExpression\"], \n     \"DOUBLE_POSITIVE\": [\"additiveExpression\"], \n     \"INTEGER_NEGATIVE\": [\"additiveExpression\"], \n     \"DECIMAL_NEGATIVE\": [\"additiveExpression\"], \n     \"DOUBLE_NEGATIVE\": [\"additiveExpression\"], \n     \"PNAME_LN\": [\"additiveExpression\"], \n     \"PNAME_NS\": [\"additiveExpression\"]}, \n  \"numericLiteral\" : {\n     \"INTEGER\": [\"numericLiteralUnsigned\"], \n     \"DECIMAL\": [\"numericLiteralUnsigned\"], \n     \"DOUBLE\": [\"numericLiteralUnsigned\"], \n     \"INTEGER_POSITIVE\": [\"numericLiteralPositive\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteralPositive\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteralPositive\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteralNegative\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteralNegative\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteralNegative\"]}, \n  \"numericLiteralNegative\" : {\n     \"INTEGER_NEGATIVE\": [\"INTEGER_NEGATIVE\"], \n     \"DECIMAL_NEGATIVE\": [\"DECIMAL_NEGATIVE\"], \n     \"DOUBLE_NEGATIVE\": [\"DOUBLE_NEGATIVE\"]}, \n  \"numericLiteralPositive\" : {\n     \"INTEGER_POSITIVE\": [\"INTEGER_POSITIVE\"], \n     \"DECIMAL_POSITIVE\": [\"DECIMAL_POSITIVE\"], \n     \"DOUBLE_POSITIVE\": [\"DOUBLE_POSITIVE\"]}, \n  \"numericLiteralUnsigned\" : {\n     \"INTEGER\": [\"INTEGER\"], \n     \"DECIMAL\": [\"DECIMAL\"], \n     \"DOUBLE\": [\"DOUBLE\"]}, \n  \"object\" : {\n     \"(\": [\"graphNode\"], \n     \"[\": [\"graphNode\"], \n     \"VAR1\": [\"graphNode\"], \n     \"VAR2\": [\"graphNode\"], \n     \"NIL\": [\"graphNode\"], \n     \"IRI_REF\": [\"graphNode\"], \n     \"TRUE\": [\"graphNode\"], \n     \"FALSE\": [\"graphNode\"], \n     \"BLANK_NODE_LABEL\": [\"graphNode\"], \n     \"ANON\": [\"graphNode\"], \n     \"PNAME_LN\": [\"graphNode\"], \n     \"PNAME_NS\": [\"graphNode\"], \n     \"STRING_LITERAL1\": [\"graphNode\"], \n     \"STRING_LITERAL2\": [\"graphNode\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNode\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNode\"], \n     \"INTEGER\": [\"graphNode\"], \n     \"DECIMAL\": [\"graphNode\"], \n     \"DOUBLE\": [\"graphNode\"], \n     \"INTEGER_POSITIVE\": [\"graphNode\"], \n     \"DECIMAL_POSITIVE\": [\"graphNode\"], \n     \"DOUBLE_POSITIVE\": [\"graphNode\"], \n     \"INTEGER_NEGATIVE\": [\"graphNode\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNode\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNode\"]}, \n  \"objectList\" : {\n     \"(\": [\"object\",\"*[,,object]\"], \n     \"[\": [\"object\",\"*[,,object]\"], \n     \"VAR1\": [\"object\",\"*[,,object]\"], \n     \"VAR2\": [\"object\",\"*[,,object]\"], \n     \"NIL\": [\"object\",\"*[,,object]\"], \n     \"IRI_REF\": [\"object\",\"*[,,object]\"], \n     \"TRUE\": [\"object\",\"*[,,object]\"], \n     \"FALSE\": [\"object\",\"*[,,object]\"], \n     \"BLANK_NODE_LABEL\": [\"object\",\"*[,,object]\"], \n     \"ANON\": [\"object\",\"*[,,object]\"], \n     \"PNAME_LN\": [\"object\",\"*[,,object]\"], \n     \"PNAME_NS\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL1\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL2\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL_LONG1\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL_LONG2\": [\"object\",\"*[,,object]\"], \n     \"INTEGER\": [\"object\",\"*[,,object]\"], \n     \"DECIMAL\": [\"object\",\"*[,,object]\"], \n     \"DOUBLE\": [\"object\",\"*[,,object]\"], \n     \"INTEGER_POSITIVE\": [\"object\",\"*[,,object]\"], \n     \"DECIMAL_POSITIVE\": [\"object\",\"*[,,object]\"], \n     \"DOUBLE_POSITIVE\": [\"object\",\"*[,,object]\"], \n     \"INTEGER_NEGATIVE\": [\"object\",\"*[,,object]\"], \n     \"DECIMAL_NEGATIVE\": [\"object\",\"*[,,object]\"], \n     \"DOUBLE_NEGATIVE\": [\"object\",\"*[,,object]\"]}, \n  \"objectListPath\" : {\n     \"(\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"[\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"VAR1\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"VAR2\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"NIL\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"IRI_REF\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"TRUE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"FALSE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"BLANK_NODE_LABEL\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"ANON\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"PNAME_LN\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"PNAME_NS\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL1\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL2\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL_LONG1\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL_LONG2\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"INTEGER\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DECIMAL\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DOUBLE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"INTEGER_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DECIMAL_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DOUBLE_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"INTEGER_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DECIMAL_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DOUBLE_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"]}, \n  \"objectPath\" : {\n     \"(\": [\"graphNodePath\"], \n     \"[\": [\"graphNodePath\"], \n     \"VAR1\": [\"graphNodePath\"], \n     \"VAR2\": [\"graphNodePath\"], \n     \"NIL\": [\"graphNodePath\"], \n     \"IRI_REF\": [\"graphNodePath\"], \n     \"TRUE\": [\"graphNodePath\"], \n     \"FALSE\": [\"graphNodePath\"], \n     \"BLANK_NODE_LABEL\": [\"graphNodePath\"], \n     \"ANON\": [\"graphNodePath\"], \n     \"PNAME_LN\": [\"graphNodePath\"], \n     \"PNAME_NS\": [\"graphNodePath\"], \n     \"STRING_LITERAL1\": [\"graphNodePath\"], \n     \"STRING_LITERAL2\": [\"graphNodePath\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNodePath\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNodePath\"], \n     \"INTEGER\": [\"graphNodePath\"], \n     \"DECIMAL\": [\"graphNodePath\"], \n     \"DOUBLE\": [\"graphNodePath\"], \n     \"INTEGER_POSITIVE\": [\"graphNodePath\"], \n     \"DECIMAL_POSITIVE\": [\"graphNodePath\"], \n     \"DOUBLE_POSITIVE\": [\"graphNodePath\"], \n     \"INTEGER_NEGATIVE\": [\"graphNodePath\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNodePath\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNodePath\"]}, \n  \"offsetClause\" : {\n     \"OFFSET\": [\"OFFSET\",\"INTEGER\"]}, \n  \"optionalGraphPattern\" : {\n     \"OPTIONAL\": [\"OPTIONAL\",\"groupGraphPattern\"]}, \n  \"or([*,expression])\" : {\n     \"*\": [\"*\"], \n     \"!\": [\"expression\"], \n     \"+\": [\"expression\"], \n     \"-\": [\"expression\"], \n     \"VAR1\": [\"expression\"], \n     \"VAR2\": [\"expression\"], \n     \"(\": [\"expression\"], \n     \"STR\": [\"expression\"], \n     \"LANG\": [\"expression\"], \n     \"LANGMATCHES\": [\"expression\"], \n     \"DATATYPE\": [\"expression\"], \n     \"BOUND\": [\"expression\"], \n     \"IRI\": [\"expression\"], \n     \"URI\": [\"expression\"], \n     \"BNODE\": [\"expression\"], \n     \"RAND\": [\"expression\"], \n     \"ABS\": [\"expression\"], \n     \"CEIL\": [\"expression\"], \n     \"FLOOR\": [\"expression\"], \n     \"ROUND\": [\"expression\"], \n     \"CONCAT\": [\"expression\"], \n     \"STRLEN\": [\"expression\"], \n     \"UCASE\": [\"expression\"], \n     \"LCASE\": [\"expression\"], \n     \"ENCODE_FOR_URI\": [\"expression\"], \n     \"CONTAINS\": [\"expression\"], \n     \"STRSTARTS\": [\"expression\"], \n     \"STRENDS\": [\"expression\"], \n     \"STRBEFORE\": [\"expression\"], \n     \"STRAFTER\": [\"expression\"], \n     \"YEAR\": [\"expression\"], \n     \"MONTH\": [\"expression\"], \n     \"DAY\": [\"expression\"], \n     \"HOURS\": [\"expression\"], \n     \"MINUTES\": [\"expression\"], \n     \"SECONDS\": [\"expression\"], \n     \"TIMEZONE\": [\"expression\"], \n     \"TZ\": [\"expression\"], \n     \"NOW\": [\"expression\"], \n     \"UUID\": [\"expression\"], \n     \"STRUUID\": [\"expression\"], \n     \"MD5\": [\"expression\"], \n     \"SHA1\": [\"expression\"], \n     \"SHA256\": [\"expression\"], \n     \"SHA384\": [\"expression\"], \n     \"SHA512\": [\"expression\"], \n     \"COALESCE\": [\"expression\"], \n     \"IF\": [\"expression\"], \n     \"STRLANG\": [\"expression\"], \n     \"STRDT\": [\"expression\"], \n     \"SAMETERM\": [\"expression\"], \n     \"ISIRI\": [\"expression\"], \n     \"ISURI\": [\"expression\"], \n     \"ISBLANK\": [\"expression\"], \n     \"ISLITERAL\": [\"expression\"], \n     \"ISNUMERIC\": [\"expression\"], \n     \"TRUE\": [\"expression\"], \n     \"FALSE\": [\"expression\"], \n     \"COUNT\": [\"expression\"], \n     \"SUM\": [\"expression\"], \n     \"MIN\": [\"expression\"], \n     \"MAX\": [\"expression\"], \n     \"AVG\": [\"expression\"], \n     \"SAMPLE\": [\"expression\"], \n     \"GROUP_CONCAT\": [\"expression\"], \n     \"SUBSTR\": [\"expression\"], \n     \"REPLACE\": [\"expression\"], \n     \"REGEX\": [\"expression\"], \n     \"EXISTS\": [\"expression\"], \n     \"NOT\": [\"expression\"], \n     \"IRI_REF\": [\"expression\"], \n     \"STRING_LITERAL1\": [\"expression\"], \n     \"STRING_LITERAL2\": [\"expression\"], \n     \"STRING_LITERAL_LONG1\": [\"expression\"], \n     \"STRING_LITERAL_LONG2\": [\"expression\"], \n     \"INTEGER\": [\"expression\"], \n     \"DECIMAL\": [\"expression\"], \n     \"DOUBLE\": [\"expression\"], \n     \"INTEGER_POSITIVE\": [\"expression\"], \n     \"DECIMAL_POSITIVE\": [\"expression\"], \n     \"DOUBLE_POSITIVE\": [\"expression\"], \n     \"INTEGER_NEGATIVE\": [\"expression\"], \n     \"DECIMAL_NEGATIVE\": [\"expression\"], \n     \"DOUBLE_NEGATIVE\": [\"expression\"], \n     \"PNAME_LN\": [\"expression\"], \n     \"PNAME_NS\": [\"expression\"]}, \n  \"or([+or([var,[ (,expression,AS,var,)]]),*])\" : {\n     \"(\": [\"+or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR1\": [\"+or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR2\": [\"+or([var,[ (,expression,AS,var,)]])\"], \n     \"*\": [\"*\"]}, \n  \"or([+varOrIRIref,*])\" : {\n     \"VAR1\": [\"+varOrIRIref\"], \n     \"VAR2\": [\"+varOrIRIref\"], \n     \"IRI_REF\": [\"+varOrIRIref\"], \n     \"PNAME_LN\": [\"+varOrIRIref\"], \n     \"PNAME_NS\": [\"+varOrIRIref\"], \n     \"*\": [\"*\"]}, \n  \"or([ASC,DESC])\" : {\n     \"ASC\": [\"ASC\"], \n     \"DESC\": [\"DESC\"]}, \n  \"or([DISTINCT,REDUCED])\" : {\n     \"DISTINCT\": [\"DISTINCT\"], \n     \"REDUCED\": [\"REDUCED\"]}, \n  \"or([LANGTAG,[^^,iriRef]])\" : {\n     \"LANGTAG\": [\"LANGTAG\"], \n     \"^^\": [\"[^^,iriRef]\"]}, \n  \"or([NIL,[ (,*var,)]])\" : {\n     \"NIL\": [\"NIL\"], \n     \"(\": [\"[ (,*var,)]\"]}, \n  \"or([[ (,*dataBlockValue,)],NIL])\" : {\n     \"(\": [\"[ (,*dataBlockValue,)]\"], \n     \"NIL\": [\"NIL\"]}, \n  \"or([[ (,expression,)],NIL])\" : {\n     \"(\": [\"[ (,expression,)]\"], \n     \"NIL\": [\"NIL\"]}, \n  \"or([[*,unaryExpression],[/,unaryExpression]])\" : {\n     \"*\": [\"[*,unaryExpression]\"], \n     \"/\": [\"[/,unaryExpression]\"]}, \n  \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\" : {\n     \"+\": [\"[+,multiplicativeExpression]\"], \n     \"-\": [\"[-,multiplicativeExpression]\"], \n     \"INTEGER_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"DECIMAL_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"DOUBLE_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"INTEGER_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"DECIMAL_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"DOUBLE_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"]}, \n  \"or([[,,or([},[integer,}]])],}])\" : {\n     \",\": [\"[,,or([},[integer,}]])]\"], \n     \"}\": [\"}\"]}, \n  \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\" : {\n     \"=\": [\"[=,numericExpression]\"], \n     \"!=\": [\"[!=,numericExpression]\"], \n     \"<\": [\"[<,numericExpression]\"], \n     \">\": [\"[>,numericExpression]\"], \n     \"<=\": [\"[<=,numericExpression]\"], \n     \">=\": [\"[>=,numericExpression]\"], \n     \"IN\": [\"[IN,expressionList]\"], \n     \"NOT\": [\"[NOT,IN,expressionList]\"]}, \n  \"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\" : {\n     \"{\": [\"[constructTemplate,*datasetClause,whereClause,solutionModifier]\"], \n     \"WHERE\": [\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"], \n     \"FROM\": [\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"]}, \n  \"or([[deleteClause,?insertClause],insertClause])\" : {\n     \"DELETE\": [\"[deleteClause,?insertClause]\"], \n     \"INSERT\": [\"insertClause\"]}, \n  \"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\" : {\n     \"INTEGER\": [\"[integer,or([[,,or([},[integer,}]])],}])]\"], \n     \",\": [\"[,,integer,}]\"]}, \n  \"or([baseDecl,prefixDecl])\" : {\n     \"BASE\": [\"baseDecl\"], \n     \"PREFIX\": [\"prefixDecl\"]}, \n  \"or([defaultGraphClause,namedGraphClause])\" : {\n     \"IRI_REF\": [\"defaultGraphClause\"], \n     \"PNAME_LN\": [\"defaultGraphClause\"], \n     \"PNAME_NS\": [\"defaultGraphClause\"], \n     \"NAMED\": [\"namedGraphClause\"]}, \n  \"or([inlineDataOneVar,inlineDataFull])\" : {\n     \"VAR1\": [\"inlineDataOneVar\"], \n     \"VAR2\": [\"inlineDataOneVar\"], \n     \"NIL\": [\"inlineDataFull\"], \n     \"(\": [\"inlineDataFull\"]}, \n  \"or([iriRef,[NAMED,iriRef]])\" : {\n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"], \n     \"NAMED\": [\"[NAMED,iriRef]\"]}, \n  \"or([iriRef,a])\" : {\n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"], \n     \"a\": [\"a\"]}, \n  \"or([numericLiteralPositive,numericLiteralNegative])\" : {\n     \"INTEGER_POSITIVE\": [\"numericLiteralPositive\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteralPositive\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteralPositive\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteralNegative\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteralNegative\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteralNegative\"]}, \n  \"or([queryAll,updateAll])\" : {\n     \"CONSTRUCT\": [\"queryAll\"], \n     \"DESCRIBE\": [\"queryAll\"], \n     \"ASK\": [\"queryAll\"], \n     \"SELECT\": [\"queryAll\"], \n     \"INSERT\": [\"updateAll\"], \n     \"DELETE\": [\"updateAll\"], \n     \"LOAD\": [\"updateAll\"], \n     \"CLEAR\": [\"updateAll\"], \n     \"DROP\": [\"updateAll\"], \n     \"ADD\": [\"updateAll\"], \n     \"MOVE\": [\"updateAll\"], \n     \"COPY\": [\"updateAll\"], \n     \"CREATE\": [\"updateAll\"], \n     \"WITH\": [\"updateAll\"], \n     \"$\": [\"updateAll\"]}, \n  \"or([selectQuery,constructQuery,describeQuery,askQuery])\" : {\n     \"SELECT\": [\"selectQuery\"], \n     \"CONSTRUCT\": [\"constructQuery\"], \n     \"DESCRIBE\": [\"describeQuery\"], \n     \"ASK\": [\"askQuery\"]}, \n  \"or([subSelect,groupGraphPatternSub])\" : {\n     \"SELECT\": [\"subSelect\"], \n     \"{\": [\"groupGraphPatternSub\"], \n     \"OPTIONAL\": [\"groupGraphPatternSub\"], \n     \"MINUS\": [\"groupGraphPatternSub\"], \n     \"GRAPH\": [\"groupGraphPatternSub\"], \n     \"SERVICE\": [\"groupGraphPatternSub\"], \n     \"FILTER\": [\"groupGraphPatternSub\"], \n     \"BIND\": [\"groupGraphPatternSub\"], \n     \"VALUES\": [\"groupGraphPatternSub\"], \n     \"VAR1\": [\"groupGraphPatternSub\"], \n     \"VAR2\": [\"groupGraphPatternSub\"], \n     \"NIL\": [\"groupGraphPatternSub\"], \n     \"(\": [\"groupGraphPatternSub\"], \n     \"[\": [\"groupGraphPatternSub\"], \n     \"IRI_REF\": [\"groupGraphPatternSub\"], \n     \"TRUE\": [\"groupGraphPatternSub\"], \n     \"FALSE\": [\"groupGraphPatternSub\"], \n     \"BLANK_NODE_LABEL\": [\"groupGraphPatternSub\"], \n     \"ANON\": [\"groupGraphPatternSub\"], \n     \"PNAME_LN\": [\"groupGraphPatternSub\"], \n     \"PNAME_NS\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL1\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL2\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL_LONG1\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL_LONG2\": [\"groupGraphPatternSub\"], \n     \"INTEGER\": [\"groupGraphPatternSub\"], \n     \"DECIMAL\": [\"groupGraphPatternSub\"], \n     \"DOUBLE\": [\"groupGraphPatternSub\"], \n     \"INTEGER_POSITIVE\": [\"groupGraphPatternSub\"], \n     \"DECIMAL_POSITIVE\": [\"groupGraphPatternSub\"], \n     \"DOUBLE_POSITIVE\": [\"groupGraphPatternSub\"], \n     \"INTEGER_NEGATIVE\": [\"groupGraphPatternSub\"], \n     \"DECIMAL_NEGATIVE\": [\"groupGraphPatternSub\"], \n     \"DOUBLE_NEGATIVE\": [\"groupGraphPatternSub\"], \n     \"}\": [\"groupGraphPatternSub\"]}, \n  \"or([var,[ (,expression,AS,var,)]])\" : {\n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"], \n     \"(\": [\"[ (,expression,AS,var,)]\"]}, \n  \"or([verbPath,verbSimple])\" : {\n     \"^\": [\"verbPath\"], \n     \"a\": [\"verbPath\"], \n     \"!\": [\"verbPath\"], \n     \"(\": [\"verbPath\"], \n     \"IRI_REF\": [\"verbPath\"], \n     \"PNAME_LN\": [\"verbPath\"], \n     \"PNAME_NS\": [\"verbPath\"], \n     \"VAR1\": [\"verbSimple\"], \n     \"VAR2\": [\"verbSimple\"]}, \n  \"or([},[integer,}]])\" : {\n     \"}\": [\"}\"], \n     \"INTEGER\": [\"[integer,}]\"]}, \n  \"orderClause\" : {\n     \"ORDER\": [\"ORDER\",\"BY\",\"+orderCondition\"]}, \n  \"orderCondition\" : {\n     \"ASC\": [\"or([ASC,DESC])\",\"brackettedExpression\"], \n     \"DESC\": [\"or([ASC,DESC])\",\"brackettedExpression\"], \n     \"(\": [\"constraint\"], \n     \"STR\": [\"constraint\"], \n     \"LANG\": [\"constraint\"], \n     \"LANGMATCHES\": [\"constraint\"], \n     \"DATATYPE\": [\"constraint\"], \n     \"BOUND\": [\"constraint\"], \n     \"IRI\": [\"constraint\"], \n     \"URI\": [\"constraint\"], \n     \"BNODE\": [\"constraint\"], \n     \"RAND\": [\"constraint\"], \n     \"ABS\": [\"constraint\"], \n     \"CEIL\": [\"constraint\"], \n     \"FLOOR\": [\"constraint\"], \n     \"ROUND\": [\"constraint\"], \n     \"CONCAT\": [\"constraint\"], \n     \"STRLEN\": [\"constraint\"], \n     \"UCASE\": [\"constraint\"], \n     \"LCASE\": [\"constraint\"], \n     \"ENCODE_FOR_URI\": [\"constraint\"], \n     \"CONTAINS\": [\"constraint\"], \n     \"STRSTARTS\": [\"constraint\"], \n     \"STRENDS\": [\"constraint\"], \n     \"STRBEFORE\": [\"constraint\"], \n     \"STRAFTER\": [\"constraint\"], \n     \"YEAR\": [\"constraint\"], \n     \"MONTH\": [\"constraint\"], \n     \"DAY\": [\"constraint\"], \n     \"HOURS\": [\"constraint\"], \n     \"MINUTES\": [\"constraint\"], \n     \"SECONDS\": [\"constraint\"], \n     \"TIMEZONE\": [\"constraint\"], \n     \"TZ\": [\"constraint\"], \n     \"NOW\": [\"constraint\"], \n     \"UUID\": [\"constraint\"], \n     \"STRUUID\": [\"constraint\"], \n     \"MD5\": [\"constraint\"], \n     \"SHA1\": [\"constraint\"], \n     \"SHA256\": [\"constraint\"], \n     \"SHA384\": [\"constraint\"], \n     \"SHA512\": [\"constraint\"], \n     \"COALESCE\": [\"constraint\"], \n     \"IF\": [\"constraint\"], \n     \"STRLANG\": [\"constraint\"], \n     \"STRDT\": [\"constraint\"], \n     \"SAMETERM\": [\"constraint\"], \n     \"ISIRI\": [\"constraint\"], \n     \"ISURI\": [\"constraint\"], \n     \"ISBLANK\": [\"constraint\"], \n     \"ISLITERAL\": [\"constraint\"], \n     \"ISNUMERIC\": [\"constraint\"], \n     \"SUBSTR\": [\"constraint\"], \n     \"REPLACE\": [\"constraint\"], \n     \"REGEX\": [\"constraint\"], \n     \"EXISTS\": [\"constraint\"], \n     \"NOT\": [\"constraint\"], \n     \"IRI_REF\": [\"constraint\"], \n     \"PNAME_LN\": [\"constraint\"], \n     \"PNAME_NS\": [\"constraint\"], \n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"]}, \n  \"path\" : {\n     \"^\": [\"pathAlternative\"], \n     \"a\": [\"pathAlternative\"], \n     \"!\": [\"pathAlternative\"], \n     \"(\": [\"pathAlternative\"], \n     \"IRI_REF\": [\"pathAlternative\"], \n     \"PNAME_LN\": [\"pathAlternative\"], \n     \"PNAME_NS\": [\"pathAlternative\"]}, \n  \"pathAlternative\" : {\n     \"^\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"a\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"!\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"(\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"IRI_REF\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"PNAME_LN\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"PNAME_NS\": [\"pathSequence\",\"*[|,pathSequence]\"]}, \n  \"pathElt\" : {\n     \"a\": [\"pathPrimary\",\"?pathMod\"], \n     \"!\": [\"pathPrimary\",\"?pathMod\"], \n     \"(\": [\"pathPrimary\",\"?pathMod\"], \n     \"IRI_REF\": [\"pathPrimary\",\"?pathMod\"], \n     \"PNAME_LN\": [\"pathPrimary\",\"?pathMod\"], \n     \"PNAME_NS\": [\"pathPrimary\",\"?pathMod\"]}, \n  \"pathEltOrInverse\" : {\n     \"a\": [\"pathElt\"], \n     \"!\": [\"pathElt\"], \n     \"(\": [\"pathElt\"], \n     \"IRI_REF\": [\"pathElt\"], \n     \"PNAME_LN\": [\"pathElt\"], \n     \"PNAME_NS\": [\"pathElt\"], \n     \"^\": [\"^\",\"pathElt\"]}, \n  \"pathMod\" : {\n     \"*\": [\"*\"], \n     \"?\": [\"?\"], \n     \"+\": [\"+\"], \n     \"{\": [\"{\",\"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\"]}, \n  \"pathNegatedPropertySet\" : {\n     \"a\": [\"pathOneInPropertySet\"], \n     \"^\": [\"pathOneInPropertySet\"], \n     \"IRI_REF\": [\"pathOneInPropertySet\"], \n     \"PNAME_LN\": [\"pathOneInPropertySet\"], \n     \"PNAME_NS\": [\"pathOneInPropertySet\"], \n     \"(\": [\"(\",\"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\",\")\"]}, \n  \"pathOneInPropertySet\" : {\n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"], \n     \"a\": [\"a\"], \n     \"^\": [\"^\",\"or([iriRef,a])\"]}, \n  \"pathPrimary\" : {\n     \"IRI_REF\": [\"storeProperty\",\"iriRef\"], \n     \"PNAME_LN\": [\"storeProperty\",\"iriRef\"], \n     \"PNAME_NS\": [\"storeProperty\",\"iriRef\"], \n     \"a\": [\"storeProperty\",\"a\"], \n     \"!\": [\"!\",\"pathNegatedPropertySet\"], \n     \"(\": [\"(\",\"path\",\")\"]}, \n  \"pathSequence\" : {\n     \"^\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"a\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"!\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"(\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"IRI_REF\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"PNAME_LN\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"PNAME_NS\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"]}, \n  \"prefixDecl\" : {\n     \"PREFIX\": [\"PREFIX\",\"PNAME_NS\",\"IRI_REF\"]}, \n  \"prefixedName\" : {\n     \"PNAME_LN\": [\"PNAME_LN\"], \n     \"PNAME_NS\": [\"PNAME_NS\"]}, \n  \"primaryExpression\" : {\n     \"(\": [\"brackettedExpression\"], \n     \"STR\": [\"builtInCall\"], \n     \"LANG\": [\"builtInCall\"], \n     \"LANGMATCHES\": [\"builtInCall\"], \n     \"DATATYPE\": [\"builtInCall\"], \n     \"BOUND\": [\"builtInCall\"], \n     \"IRI\": [\"builtInCall\"], \n     \"URI\": [\"builtInCall\"], \n     \"BNODE\": [\"builtInCall\"], \n     \"RAND\": [\"builtInCall\"], \n     \"ABS\": [\"builtInCall\"], \n     \"CEIL\": [\"builtInCall\"], \n     \"FLOOR\": [\"builtInCall\"], \n     \"ROUND\": [\"builtInCall\"], \n     \"CONCAT\": [\"builtInCall\"], \n     \"STRLEN\": [\"builtInCall\"], \n     \"UCASE\": [\"builtInCall\"], \n     \"LCASE\": [\"builtInCall\"], \n     \"ENCODE_FOR_URI\": [\"builtInCall\"], \n     \"CONTAINS\": [\"builtInCall\"], \n     \"STRSTARTS\": [\"builtInCall\"], \n     \"STRENDS\": [\"builtInCall\"], \n     \"STRBEFORE\": [\"builtInCall\"], \n     \"STRAFTER\": [\"builtInCall\"], \n     \"YEAR\": [\"builtInCall\"], \n     \"MONTH\": [\"builtInCall\"], \n     \"DAY\": [\"builtInCall\"], \n     \"HOURS\": [\"builtInCall\"], \n     \"MINUTES\": [\"builtInCall\"], \n     \"SECONDS\": [\"builtInCall\"], \n     \"TIMEZONE\": [\"builtInCall\"], \n     \"TZ\": [\"builtInCall\"], \n     \"NOW\": [\"builtInCall\"], \n     \"UUID\": [\"builtInCall\"], \n     \"STRUUID\": [\"builtInCall\"], \n     \"MD5\": [\"builtInCall\"], \n     \"SHA1\": [\"builtInCall\"], \n     \"SHA256\": [\"builtInCall\"], \n     \"SHA384\": [\"builtInCall\"], \n     \"SHA512\": [\"builtInCall\"], \n     \"COALESCE\": [\"builtInCall\"], \n     \"IF\": [\"builtInCall\"], \n     \"STRLANG\": [\"builtInCall\"], \n     \"STRDT\": [\"builtInCall\"], \n     \"SAMETERM\": [\"builtInCall\"], \n     \"ISIRI\": [\"builtInCall\"], \n     \"ISURI\": [\"builtInCall\"], \n     \"ISBLANK\": [\"builtInCall\"], \n     \"ISLITERAL\": [\"builtInCall\"], \n     \"ISNUMERIC\": [\"builtInCall\"], \n     \"SUBSTR\": [\"builtInCall\"], \n     \"REPLACE\": [\"builtInCall\"], \n     \"REGEX\": [\"builtInCall\"], \n     \"EXISTS\": [\"builtInCall\"], \n     \"NOT\": [\"builtInCall\"], \n     \"IRI_REF\": [\"iriRefOrFunction\"], \n     \"PNAME_LN\": [\"iriRefOrFunction\"], \n     \"PNAME_NS\": [\"iriRefOrFunction\"], \n     \"STRING_LITERAL1\": [\"rdfLiteral\"], \n     \"STRING_LITERAL2\": [\"rdfLiteral\"], \n     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \n     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \n     \"INTEGER\": [\"numericLiteral\"], \n     \"DECIMAL\": [\"numericLiteral\"], \n     \"DOUBLE\": [\"numericLiteral\"], \n     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \n     \"TRUE\": [\"booleanLiteral\"], \n     \"FALSE\": [\"booleanLiteral\"], \n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"], \n     \"COUNT\": [\"aggregate\"], \n     \"SUM\": [\"aggregate\"], \n     \"MIN\": [\"aggregate\"], \n     \"MAX\": [\"aggregate\"], \n     \"AVG\": [\"aggregate\"], \n     \"SAMPLE\": [\"aggregate\"], \n     \"GROUP_CONCAT\": [\"aggregate\"]}, \n  \"prologue\" : {\n     \"BASE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"PREFIX\": [\"*or([baseDecl,prefixDecl])\"], \n     \"$\": [\"*or([baseDecl,prefixDecl])\"], \n     \"CONSTRUCT\": [\"*or([baseDecl,prefixDecl])\"], \n     \"DESCRIBE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"ASK\": [\"*or([baseDecl,prefixDecl])\"], \n     \"INSERT\": [\"*or([baseDecl,prefixDecl])\"], \n     \"DELETE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"SELECT\": [\"*or([baseDecl,prefixDecl])\"], \n     \"LOAD\": [\"*or([baseDecl,prefixDecl])\"], \n     \"CLEAR\": [\"*or([baseDecl,prefixDecl])\"], \n     \"DROP\": [\"*or([baseDecl,prefixDecl])\"], \n     \"ADD\": [\"*or([baseDecl,prefixDecl])\"], \n     \"MOVE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"COPY\": [\"*or([baseDecl,prefixDecl])\"], \n     \"CREATE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"WITH\": [\"*or([baseDecl,prefixDecl])\"]}, \n  \"propertyList\" : {\n     \"a\": [\"propertyListNotEmpty\"], \n     \"VAR1\": [\"propertyListNotEmpty\"], \n     \"VAR2\": [\"propertyListNotEmpty\"], \n     \"IRI_REF\": [\"propertyListNotEmpty\"], \n     \"PNAME_LN\": [\"propertyListNotEmpty\"], \n     \"PNAME_NS\": [\"propertyListNotEmpty\"], \n     \".\": [], \n     \"}\": [], \n     \"GRAPH\": []}, \n  \"propertyListNotEmpty\" : {\n     \"a\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"VAR1\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"VAR2\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"IRI_REF\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"PNAME_LN\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"PNAME_NS\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"]}, \n  \"propertyListPath\" : {\n     \"a\": [\"propertyListNotEmpty\"], \n     \"VAR1\": [\"propertyListNotEmpty\"], \n     \"VAR2\": [\"propertyListNotEmpty\"], \n     \"IRI_REF\": [\"propertyListNotEmpty\"], \n     \"PNAME_LN\": [\"propertyListNotEmpty\"], \n     \"PNAME_NS\": [\"propertyListNotEmpty\"], \n     \".\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"propertyListPathNotEmpty\" : {\n     \"VAR1\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"VAR2\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"^\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"a\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"!\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"(\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"IRI_REF\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"PNAME_LN\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"PNAME_NS\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"]}, \n  \"quadData\" : {\n     \"{\": [\"{\",\"disallowVars\",\"quads\",\"allowVars\",\"}\"]}, \n  \"quadDataNoBnodes\" : {\n     \"{\": [\"{\",\"disallowBnodes\",\"disallowVars\",\"quads\",\"allowVars\",\"allowBnodes\",\"}\"]}, \n  \"quadPattern\" : {\n     \"{\": [\"{\",\"quads\",\"}\"]}, \n  \"quadPatternNoBnodes\" : {\n     \"{\": [\"{\",\"disallowBnodes\",\"quads\",\"allowBnodes\",\"}\"]}, \n  \"quads\" : {\n     \"GRAPH\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"VAR1\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"VAR2\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"NIL\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"(\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"[\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"IRI_REF\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"TRUE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"FALSE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"BLANK_NODE_LABEL\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"ANON\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"PNAME_LN\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"PNAME_NS\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"STRING_LITERAL1\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"STRING_LITERAL2\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"STRING_LITERAL_LONG1\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"STRING_LITERAL_LONG2\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"INTEGER\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"DECIMAL\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"DOUBLE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"INTEGER_POSITIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"DECIMAL_POSITIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"DOUBLE_POSITIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"INTEGER_NEGATIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"DECIMAL_NEGATIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"DOUBLE_NEGATIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"}\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"]}, \n  \"quadsNotTriples\" : {\n     \"GRAPH\": [\"GRAPH\",\"varOrIRIref\",\"{\",\"?triplesTemplate\",\"}\"]}, \n  \"queryAll\" : {\n     \"CONSTRUCT\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"], \n     \"DESCRIBE\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"], \n     \"ASK\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"], \n     \"SELECT\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"]}, \n  \"rdfLiteral\" : {\n     \"STRING_LITERAL1\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \n     \"STRING_LITERAL2\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \n     \"STRING_LITERAL_LONG1\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \n     \"STRING_LITERAL_LONG2\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"]}, \n  \"regexExpression\" : {\n     \"REGEX\": [\"REGEX\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \n  \"relationalExpression\" : {\n     \"!\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"+\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"-\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"VAR1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"VAR2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"(\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"LANG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"LANGMATCHES\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DATATYPE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"BOUND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"IRI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"URI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"BNODE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"RAND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ABS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"CEIL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"FLOOR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ROUND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"CONCAT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRLEN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"UCASE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"LCASE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ENCODE_FOR_URI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"CONTAINS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRSTARTS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRENDS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRBEFORE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRAFTER\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"YEAR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MONTH\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DAY\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"HOURS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MINUTES\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SECONDS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"TIMEZONE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"TZ\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"NOW\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"UUID\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRUUID\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MD5\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SHA1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SHA256\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SHA384\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SHA512\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"COALESCE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"IF\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRLANG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRDT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SAMETERM\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISIRI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISURI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISBLANK\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISLITERAL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISNUMERIC\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"TRUE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"FALSE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"COUNT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SUM\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MIN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MAX\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"AVG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SAMPLE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"GROUP_CONCAT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SUBSTR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"REPLACE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"REGEX\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"EXISTS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"NOT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"IRI_REF\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL_LONG1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL_LONG2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"INTEGER\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DECIMAL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DOUBLE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"INTEGER_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DECIMAL_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DOUBLE_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"INTEGER_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DECIMAL_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DOUBLE_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"PNAME_LN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"PNAME_NS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"]}, \n  \"selectClause\" : {\n     \"SELECT\": [\"SELECT\",\"?or([DISTINCT,REDUCED])\",\"or([+or([var,[ (,expression,AS,var,)]]),*])\"]}, \n  \"selectQuery\" : {\n     \"SELECT\": [\"selectClause\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]}, \n  \"serviceGraphPattern\" : {\n     \"SERVICE\": [\"SERVICE\",\"?SILENT\",\"varOrIRIref\",\"groupGraphPattern\"]}, \n  \"solutionModifier\" : {\n     \"LIMIT\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"OFFSET\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"ORDER\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"HAVING\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"GROUP\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"VALUES\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"$\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"}\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"]}, \n  \"sourceSelector\" : {\n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"]}, \n  \"sparql11\" : {\n     \"$\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"CONSTRUCT\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"DESCRIBE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"ASK\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"INSERT\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"DELETE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"SELECT\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"LOAD\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"CLEAR\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"DROP\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"ADD\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"MOVE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"COPY\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"CREATE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"WITH\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"BASE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"PREFIX\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"]}, \n  \"storeProperty\" : {\n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"IRI_REF\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"a\": []}, \n  \"strReplaceExpression\" : {\n     \"REPLACE\": [\"REPLACE\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \n  \"string\" : {\n     \"STRING_LITERAL1\": [\"STRING_LITERAL1\"], \n     \"STRING_LITERAL2\": [\"STRING_LITERAL2\"], \n     \"STRING_LITERAL_LONG1\": [\"STRING_LITERAL_LONG1\"], \n     \"STRING_LITERAL_LONG2\": [\"STRING_LITERAL_LONG2\"]}, \n  \"subSelect\" : {\n     \"SELECT\": [\"selectClause\",\"whereClause\",\"solutionModifier\",\"valuesClause\"]}, \n  \"substringExpression\" : {\n     \"SUBSTR\": [\"SUBSTR\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \n  \"triplesBlock\" : {\n     \"VAR1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"VAR2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"NIL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"(\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"[\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"IRI_REF\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"TRUE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"FALSE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"BLANK_NODE_LABEL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"ANON\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"PNAME_LN\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"PNAME_NS\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"INTEGER\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DECIMAL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DOUBLE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"INTEGER_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DECIMAL_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DOUBLE_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"INTEGER_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DECIMAL_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DOUBLE_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"]}, \n  \"triplesNode\" : {\n     \"(\": [\"collection\"], \n     \"[\": [\"blankNodePropertyList\"]}, \n  \"triplesNodePath\" : {\n     \"(\": [\"collectionPath\"], \n     \"[\": [\"blankNodePropertyListPath\"]}, \n  \"triplesSameSubject\" : {\n     \"VAR1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"VAR2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"NIL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"IRI_REF\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"TRUE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"FALSE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"BLANK_NODE_LABEL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"ANON\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"PNAME_LN\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"PNAME_NS\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"INTEGER\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DECIMAL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DOUBLE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"INTEGER_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DECIMAL_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DOUBLE_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"INTEGER_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"(\": [\"triplesNode\",\"propertyList\"], \n     \"[\": [\"triplesNode\",\"propertyList\"]}, \n  \"triplesSameSubjectPath\" : {\n     \"VAR1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"VAR2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"NIL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"IRI_REF\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"TRUE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"FALSE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"BLANK_NODE_LABEL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"ANON\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"PNAME_LN\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"PNAME_NS\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"INTEGER\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DECIMAL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DOUBLE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"INTEGER_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DECIMAL_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DOUBLE_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"INTEGER_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"(\": [\"triplesNodePath\",\"propertyListPath\"], \n     \"[\": [\"triplesNodePath\",\"propertyListPath\"]}, \n  \"triplesTemplate\" : {\n     \"VAR1\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"VAR2\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"NIL\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"(\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"[\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"IRI_REF\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"TRUE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"FALSE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"BLANK_NODE_LABEL\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"ANON\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"PNAME_LN\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"PNAME_NS\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"STRING_LITERAL1\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"STRING_LITERAL2\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"STRING_LITERAL_LONG1\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"STRING_LITERAL_LONG2\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"INTEGER\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"DECIMAL\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"DOUBLE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"INTEGER_POSITIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"DECIMAL_POSITIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"DOUBLE_POSITIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"INTEGER_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"DECIMAL_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"DOUBLE_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"]}, \n  \"unaryExpression\" : {\n     \"!\": [\"!\",\"primaryExpression\"], \n     \"+\": [\"+\",\"primaryExpression\"], \n     \"-\": [\"-\",\"primaryExpression\"], \n     \"VAR1\": [\"primaryExpression\"], \n     \"VAR2\": [\"primaryExpression\"], \n     \"(\": [\"primaryExpression\"], \n     \"STR\": [\"primaryExpression\"], \n     \"LANG\": [\"primaryExpression\"], \n     \"LANGMATCHES\": [\"primaryExpression\"], \n     \"DATATYPE\": [\"primaryExpression\"], \n     \"BOUND\": [\"primaryExpression\"], \n     \"IRI\": [\"primaryExpression\"], \n     \"URI\": [\"primaryExpression\"], \n     \"BNODE\": [\"primaryExpression\"], \n     \"RAND\": [\"primaryExpression\"], \n     \"ABS\": [\"primaryExpression\"], \n     \"CEIL\": [\"primaryExpression\"], \n     \"FLOOR\": [\"primaryExpression\"], \n     \"ROUND\": [\"primaryExpression\"], \n     \"CONCAT\": [\"primaryExpression\"], \n     \"STRLEN\": [\"primaryExpression\"], \n     \"UCASE\": [\"primaryExpression\"], \n     \"LCASE\": [\"primaryExpression\"], \n     \"ENCODE_FOR_URI\": [\"primaryExpression\"], \n     \"CONTAINS\": [\"primaryExpression\"], \n     \"STRSTARTS\": [\"primaryExpression\"], \n     \"STRENDS\": [\"primaryExpression\"], \n     \"STRBEFORE\": [\"primaryExpression\"], \n     \"STRAFTER\": [\"primaryExpression\"], \n     \"YEAR\": [\"primaryExpression\"], \n     \"MONTH\": [\"primaryExpression\"], \n     \"DAY\": [\"primaryExpression\"], \n     \"HOURS\": [\"primaryExpression\"], \n     \"MINUTES\": [\"primaryExpression\"], \n     \"SECONDS\": [\"primaryExpression\"], \n     \"TIMEZONE\": [\"primaryExpression\"], \n     \"TZ\": [\"primaryExpression\"], \n     \"NOW\": [\"primaryExpression\"], \n     \"UUID\": [\"primaryExpression\"], \n     \"STRUUID\": [\"primaryExpression\"], \n     \"MD5\": [\"primaryExpression\"], \n     \"SHA1\": [\"primaryExpression\"], \n     \"SHA256\": [\"primaryExpression\"], \n     \"SHA384\": [\"primaryExpression\"], \n     \"SHA512\": [\"primaryExpression\"], \n     \"COALESCE\": [\"primaryExpression\"], \n     \"IF\": [\"primaryExpression\"], \n     \"STRLANG\": [\"primaryExpression\"], \n     \"STRDT\": [\"primaryExpression\"], \n     \"SAMETERM\": [\"primaryExpression\"], \n     \"ISIRI\": [\"primaryExpression\"], \n     \"ISURI\": [\"primaryExpression\"], \n     \"ISBLANK\": [\"primaryExpression\"], \n     \"ISLITERAL\": [\"primaryExpression\"], \n     \"ISNUMERIC\": [\"primaryExpression\"], \n     \"TRUE\": [\"primaryExpression\"], \n     \"FALSE\": [\"primaryExpression\"], \n     \"COUNT\": [\"primaryExpression\"], \n     \"SUM\": [\"primaryExpression\"], \n     \"MIN\": [\"primaryExpression\"], \n     \"MAX\": [\"primaryExpression\"], \n     \"AVG\": [\"primaryExpression\"], \n     \"SAMPLE\": [\"primaryExpression\"], \n     \"GROUP_CONCAT\": [\"primaryExpression\"], \n     \"SUBSTR\": [\"primaryExpression\"], \n     \"REPLACE\": [\"primaryExpression\"], \n     \"REGEX\": [\"primaryExpression\"], \n     \"EXISTS\": [\"primaryExpression\"], \n     \"NOT\": [\"primaryExpression\"], \n     \"IRI_REF\": [\"primaryExpression\"], \n     \"STRING_LITERAL1\": [\"primaryExpression\"], \n     \"STRING_LITERAL2\": [\"primaryExpression\"], \n     \"STRING_LITERAL_LONG1\": [\"primaryExpression\"], \n     \"STRING_LITERAL_LONG2\": [\"primaryExpression\"], \n     \"INTEGER\": [\"primaryExpression\"], \n     \"DECIMAL\": [\"primaryExpression\"], \n     \"DOUBLE\": [\"primaryExpression\"], \n     \"INTEGER_POSITIVE\": [\"primaryExpression\"], \n     \"DECIMAL_POSITIVE\": [\"primaryExpression\"], \n     \"DOUBLE_POSITIVE\": [\"primaryExpression\"], \n     \"INTEGER_NEGATIVE\": [\"primaryExpression\"], \n     \"DECIMAL_NEGATIVE\": [\"primaryExpression\"], \n     \"DOUBLE_NEGATIVE\": [\"primaryExpression\"], \n     \"PNAME_LN\": [\"primaryExpression\"], \n     \"PNAME_NS\": [\"primaryExpression\"]}, \n  \"update\" : {\n     \"INSERT\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"DELETE\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"LOAD\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"CLEAR\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"DROP\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"ADD\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"MOVE\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"COPY\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"CREATE\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"WITH\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"BASE\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"PREFIX\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"$\": [\"prologue\",\"?[update1,?[;,update]]\"]}, \n  \"update1\" : {\n     \"LOAD\": [\"load\"], \n     \"CLEAR\": [\"clear\"], \n     \"DROP\": [\"drop\"], \n     \"ADD\": [\"add\"], \n     \"MOVE\": [\"move\"], \n     \"COPY\": [\"copy\"], \n     \"CREATE\": [\"create\"], \n     \"INSERT\": [\"INSERT\",\"insert1\"], \n     \"DELETE\": [\"DELETE\",\"delete1\"], \n     \"WITH\": [\"modify\"]}, \n  \"updateAll\" : {\n     \"INSERT\": [\"?[update1,?[;,update]]\"], \n     \"DELETE\": [\"?[update1,?[;,update]]\"], \n     \"LOAD\": [\"?[update1,?[;,update]]\"], \n     \"CLEAR\": [\"?[update1,?[;,update]]\"], \n     \"DROP\": [\"?[update1,?[;,update]]\"], \n     \"ADD\": [\"?[update1,?[;,update]]\"], \n     \"MOVE\": [\"?[update1,?[;,update]]\"], \n     \"COPY\": [\"?[update1,?[;,update]]\"], \n     \"CREATE\": [\"?[update1,?[;,update]]\"], \n     \"WITH\": [\"?[update1,?[;,update]]\"], \n     \"$\": [\"?[update1,?[;,update]]\"]}, \n  \"usingClause\" : {\n     \"USING\": [\"USING\",\"or([iriRef,[NAMED,iriRef]])\"]}, \n  \"valueLogical\" : {\n     \"!\": [\"relationalExpression\"], \n     \"+\": [\"relationalExpression\"], \n     \"-\": [\"relationalExpression\"], \n     \"VAR1\": [\"relationalExpression\"], \n     \"VAR2\": [\"relationalExpression\"], \n     \"(\": [\"relationalExpression\"], \n     \"STR\": [\"relationalExpression\"], \n     \"LANG\": [\"relationalExpression\"], \n     \"LANGMATCHES\": [\"relationalExpression\"], \n     \"DATATYPE\": [\"relationalExpression\"], \n     \"BOUND\": [\"relationalExpression\"], \n     \"IRI\": [\"relationalExpression\"], \n     \"URI\": [\"relationalExpression\"], \n     \"BNODE\": [\"relationalExpression\"], \n     \"RAND\": [\"relationalExpression\"], \n     \"ABS\": [\"relationalExpression\"], \n     \"CEIL\": [\"relationalExpression\"], \n     \"FLOOR\": [\"relationalExpression\"], \n     \"ROUND\": [\"relationalExpression\"], \n     \"CONCAT\": [\"relationalExpression\"], \n     \"STRLEN\": [\"relationalExpression\"], \n     \"UCASE\": [\"relationalExpression\"], \n     \"LCASE\": [\"relationalExpression\"], \n     \"ENCODE_FOR_URI\": [\"relationalExpression\"], \n     \"CONTAINS\": [\"relationalExpression\"], \n     \"STRSTARTS\": [\"relationalExpression\"], \n     \"STRENDS\": [\"relationalExpression\"], \n     \"STRBEFORE\": [\"relationalExpression\"], \n     \"STRAFTER\": [\"relationalExpression\"], \n     \"YEAR\": [\"relationalExpression\"], \n     \"MONTH\": [\"relationalExpression\"], \n     \"DAY\": [\"relationalExpression\"], \n     \"HOURS\": [\"relationalExpression\"], \n     \"MINUTES\": [\"relationalExpression\"], \n     \"SECONDS\": [\"relationalExpression\"], \n     \"TIMEZONE\": [\"relationalExpression\"], \n     \"TZ\": [\"relationalExpression\"], \n     \"NOW\": [\"relationalExpression\"], \n     \"UUID\": [\"relationalExpression\"], \n     \"STRUUID\": [\"relationalExpression\"], \n     \"MD5\": [\"relationalExpression\"], \n     \"SHA1\": [\"relationalExpression\"], \n     \"SHA256\": [\"relationalExpression\"], \n     \"SHA384\": [\"relationalExpression\"], \n     \"SHA512\": [\"relationalExpression\"], \n     \"COALESCE\": [\"relationalExpression\"], \n     \"IF\": [\"relationalExpression\"], \n     \"STRLANG\": [\"relationalExpression\"], \n     \"STRDT\": [\"relationalExpression\"], \n     \"SAMETERM\": [\"relationalExpression\"], \n     \"ISIRI\": [\"relationalExpression\"], \n     \"ISURI\": [\"relationalExpression\"], \n     \"ISBLANK\": [\"relationalExpression\"], \n     \"ISLITERAL\": [\"relationalExpression\"], \n     \"ISNUMERIC\": [\"relationalExpression\"], \n     \"TRUE\": [\"relationalExpression\"], \n     \"FALSE\": [\"relationalExpression\"], \n     \"COUNT\": [\"relationalExpression\"], \n     \"SUM\": [\"relationalExpression\"], \n     \"MIN\": [\"relationalExpression\"], \n     \"MAX\": [\"relationalExpression\"], \n     \"AVG\": [\"relationalExpression\"], \n     \"SAMPLE\": [\"relationalExpression\"], \n     \"GROUP_CONCAT\": [\"relationalExpression\"], \n     \"SUBSTR\": [\"relationalExpression\"], \n     \"REPLACE\": [\"relationalExpression\"], \n     \"REGEX\": [\"relationalExpression\"], \n     \"EXISTS\": [\"relationalExpression\"], \n     \"NOT\": [\"relationalExpression\"], \n     \"IRI_REF\": [\"relationalExpression\"], \n     \"STRING_LITERAL1\": [\"relationalExpression\"], \n     \"STRING_LITERAL2\": [\"relationalExpression\"], \n     \"STRING_LITERAL_LONG1\": [\"relationalExpression\"], \n     \"STRING_LITERAL_LONG2\": [\"relationalExpression\"], \n     \"INTEGER\": [\"relationalExpression\"], \n     \"DECIMAL\": [\"relationalExpression\"], \n     \"DOUBLE\": [\"relationalExpression\"], \n     \"INTEGER_POSITIVE\": [\"relationalExpression\"], \n     \"DECIMAL_POSITIVE\": [\"relationalExpression\"], \n     \"DOUBLE_POSITIVE\": [\"relationalExpression\"], \n     \"INTEGER_NEGATIVE\": [\"relationalExpression\"], \n     \"DECIMAL_NEGATIVE\": [\"relationalExpression\"], \n     \"DOUBLE_NEGATIVE\": [\"relationalExpression\"], \n     \"PNAME_LN\": [\"relationalExpression\"], \n     \"PNAME_NS\": [\"relationalExpression\"]}, \n  \"valuesClause\" : {\n     \"VALUES\": [\"VALUES\",\"dataBlock\"], \n     \"$\": [], \n     \"}\": []}, \n  \"var\" : {\n     \"VAR1\": [\"VAR1\"], \n     \"VAR2\": [\"VAR2\"]}, \n  \"varOrIRIref\" : {\n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"], \n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"]}, \n  \"varOrTerm\" : {\n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"], \n     \"NIL\": [\"graphTerm\"], \n     \"IRI_REF\": [\"graphTerm\"], \n     \"TRUE\": [\"graphTerm\"], \n     \"FALSE\": [\"graphTerm\"], \n     \"BLANK_NODE_LABEL\": [\"graphTerm\"], \n     \"ANON\": [\"graphTerm\"], \n     \"PNAME_LN\": [\"graphTerm\"], \n     \"PNAME_NS\": [\"graphTerm\"], \n     \"STRING_LITERAL1\": [\"graphTerm\"], \n     \"STRING_LITERAL2\": [\"graphTerm\"], \n     \"STRING_LITERAL_LONG1\": [\"graphTerm\"], \n     \"STRING_LITERAL_LONG2\": [\"graphTerm\"], \n     \"INTEGER\": [\"graphTerm\"], \n     \"DECIMAL\": [\"graphTerm\"], \n     \"DOUBLE\": [\"graphTerm\"], \n     \"INTEGER_POSITIVE\": [\"graphTerm\"], \n     \"DECIMAL_POSITIVE\": [\"graphTerm\"], \n     \"DOUBLE_POSITIVE\": [\"graphTerm\"], \n     \"INTEGER_NEGATIVE\": [\"graphTerm\"], \n     \"DECIMAL_NEGATIVE\": [\"graphTerm\"], \n     \"DOUBLE_NEGATIVE\": [\"graphTerm\"]}, \n  \"verb\" : {\n     \"VAR1\": [\"storeProperty\",\"varOrIRIref\"], \n     \"VAR2\": [\"storeProperty\",\"varOrIRIref\"], \n     \"IRI_REF\": [\"storeProperty\",\"varOrIRIref\"], \n     \"PNAME_LN\": [\"storeProperty\",\"varOrIRIref\"], \n     \"PNAME_NS\": [\"storeProperty\",\"varOrIRIref\"], \n     \"a\": [\"storeProperty\",\"a\"]}, \n  \"verbPath\" : {\n     \"^\": [\"path\"], \n     \"a\": [\"path\"], \n     \"!\": [\"path\"], \n     \"(\": [\"path\"], \n     \"IRI_REF\": [\"path\"], \n     \"PNAME_LN\": [\"path\"], \n     \"PNAME_NS\": [\"path\"]}, \n  \"verbSimple\" : {\n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"]}, \n  \"whereClause\" : {\n     \"{\": [\"?WHERE\",\"groupGraphPattern\"], \n     \"WHERE\": [\"?WHERE\",\"groupGraphPattern\"]}\n},\n\nkeywords:/^(GROUP_CONCAT|DATATYPE|BASE|PREFIX|SELECT|CONSTRUCT|DESCRIBE|ASK|FROM|NAMED|ORDER|BY|LIMIT|ASC|DESC|OFFSET|DISTINCT|REDUCED|WHERE|GRAPH|OPTIONAL|UNION|FILTER|GROUP|HAVING|AS|VALUES|LOAD|CLEAR|DROP|CREATE|MOVE|COPY|SILENT|INSERT|DELETE|DATA|WITH|TO|USING|NAMED|MINUS|BIND|LANGMATCHES|LANG|BOUND|SAMETERM|ISIRI|ISURI|ISBLANK|ISLITERAL|REGEX|TRUE|FALSE|UNDEF|ADD|DEFAULT|ALL|SERVICE|INTO|IN|NOT|IRI|URI|BNODE|RAND|ABS|CEIL|FLOOR|ROUND|CONCAT|STRLEN|UCASE|LCASE|ENCODE_FOR_URI|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|NOW|UUID|STRUUID|MD5|SHA1|SHA256|SHA384|SHA512|COALESCE|IF|STRLANG|STRDT|ISNUMERIC|SUBSTR|REPLACE|EXISTS|COUNT|SUM|MIN|MAX|AVG|SAMPLE|SEPARATOR|STR)/i ,\n\npunct:/^(\\*|a|\\.|\\{|\\}|,|\\(|\\)|;|\\[|\\]|\\|\\||&&|=|!=|!|<=|>=|<|>|\\+|-|\\/|\\^\\^|\\?|\\||\\^)/ ,\n\nstartSymbol:\"sparql11\",\nacceptEmpty:true,\n}\n},{}],3:[function(require,module,exports){\n\"use strict\";\nvar CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})();\nCodeMirror.defineMode(\"sparql11\", function(config, parserConfig) {\n\n\tvar indentUnit = config.indentUnit;\n\n\tvar grammar = require('./_tokenizer-table.js');\n\tvar ll1_table = grammar.table;\n\n\tvar IRI_REF = '<[^<>\\\"\\'\\|\\{\\}\\^\\\\\\x00-\\x20]*>';\n\t/*\n\t * PN_CHARS_BASE =\n\t * '[A-Z]|[a-z]|[\\\\u00C0-\\\\u00D6]|[\\\\u00D8-\\\\u00F6]|[\\\\u00F8-\\\\u02FF]|[\\\\u0370-\\\\u037D]|[\\\\u037F-\\\\u1FFF]|[\\\\u200C-\\\\u200D]|[\\\\u2070-\\\\u218F]|[\\\\u2C00-\\\\u2FEF]|[\\\\u3001-\\\\uD7FF]|[\\\\uF900-\\\\uFDCF]|[\\\\uFDF0-\\\\uFFFD]|[\\\\u10000-\\\\uEFFFF]';\n\t */\n\n\tvar PN_CHARS_BASE =\n\t\t'[A-Za-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD]';\n\tvar PN_CHARS_U = PN_CHARS_BASE+'|_';\n\n\tvar PN_CHARS= '('+PN_CHARS_U+'|-|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])';\n\tvar VARNAME = '('+PN_CHARS_U+'|[0-9])'+\n\t\t'('+PN_CHARS_U+'|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])*';\n\tvar VAR1 = '\\\\?'+VARNAME;\n\tvar VAR2 = '\\\\$'+VARNAME;\n\n\tvar PN_PREFIX= '('+PN_CHARS_BASE+')((('+PN_CHARS+')|\\\\.)*('+PN_CHARS+'))?';\n\n\tvar HEX= '[0-9A-Fa-f]';\n\tvar PERCENT='(%'+HEX+HEX+')';\n\tvar PN_LOCAL_ESC='(\\\\\\\\[_~\\\\.\\\\-!\\\\$&\\'\\\\(\\\\)\\\\*\\\\+,;=/\\\\?#@%])';\n\tvar PLX= '('+PERCENT+'|'+PN_LOCAL_ESC+')';\n\tvar PN_LOCAL= '('+PN_CHARS_U+'|:|[0-9]|'+PLX+')(('+PN_CHARS+'|\\\\.|:|'+PLX+')*('+PN_CHARS+'|:|'+PLX+'))?';\n\tvar BLANK_NODE_LABEL = '_:('+PN_CHARS_U+'|[0-9])(('+PN_CHARS+'|\\\\.)*'+PN_CHARS+')?';\n\tvar PNAME_NS = '('+PN_PREFIX+')?:';\n\tvar PNAME_LN = PNAME_NS+PN_LOCAL;\n\tvar LANGTAG = '@[a-zA-Z]+(-[a-zA-Z0-9]+)*';\n\n\tvar EXPONENT = '[eE][\\\\+-]?[0-9]+';\n\tvar INTEGER = '[0-9]+';\n\tvar DECIMAL = '(([0-9]+\\\\.[0-9]*)|(\\\\.[0-9]+))';\n\tvar DOUBLE =\n\t\t'(([0-9]+\\\\.[0-9]*'+EXPONENT+')|'+\n\t\t'(\\\\.[0-9]+'+EXPONENT+')|'+\n\t\t'([0-9]+'+EXPONENT+'))';\n\n\tvar INTEGER_POSITIVE = '\\\\+' + INTEGER;\n\tvar DECIMAL_POSITIVE = '\\\\+' + DECIMAL;\n\tvar DOUBLE_POSITIVE  = '\\\\+' + DOUBLE;\n\tvar INTEGER_NEGATIVE = '-' + INTEGER;\n\tvar DECIMAL_NEGATIVE = '-' + DECIMAL;\n\tvar DOUBLE_NEGATIVE  = '-' + DOUBLE;\n\n\tvar ECHAR = '\\\\\\\\[tbnrf\\\\\\\\\"\\']';\n\t\n\t\n\t //IMPORTANT: this unicode rule is not in the official grammar.\n      //Reason: https://github.com/YASGUI/YASQE/issues/49\n      //unicode escape sequences (which the sparql spec considers part of the pre-processing of sparql queries)\n      //are marked as invalid. We have little choice (other than adding a layer of complixity) than to modify the grammar accordingly\n      //however, for now only allow these escape sequences in literals (where actually, this should be allows in e.g. prefixes as well)\n\tvar hex4 = HEX + '{4}'\n\tvar unicode = '(\\\\\\\\u' + hex4 +'|\\\\\\\\U00(10|0' + HEX + ')'+ hex4 + ')';\n\tvar LINE_BREAK = \"\\n\";\n\tvar STRING_LITERAL1 = \"'(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D])|\"+ECHAR+\"|\" + unicode + \")*'\";\n\tvar STRING_LITERAL2 = '\"(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D])|'+ECHAR+'|' + unicode + ')*\"';\n\t\n\tvar STRING_LITERAL_LONG = {\n\t\tSINGLE: {\n\t\t\tCAT: \"STRING_LITERAL_LONG1\",\n\t\t\tQUOTES: \"'''\",\n\t\t\tCONTENTS: \"(('|'')?([^'\\\\\\\\]|\"+ECHAR+\"|\"+unicode+\"))*\",\n\t\t\t\n\t\t},\n\t\tDOUBLE: {\n\t\t\tCAT: \"STRING_LITERAL_LONG2\",\n\t\t\tQUOTES: '\"\"\"',\n\t\t\tCONTENTS: '((\"|\"\")?([^\"\\\\\\\\]|'+ECHAR+'|'+unicode+'))*',\n\t\t}\n\t};\n\tfor (var key in STRING_LITERAL_LONG) {\n\t\tSTRING_LITERAL_LONG[key].COMPLETE = STRING_LITERAL_LONG[key].QUOTES + STRING_LITERAL_LONG[key].CONTENTS + STRING_LITERAL_LONG[key].QUOTES;\n\t}\n//\tvar STRING_LITERAL_LONG_QUOTES = {\n//\t\t\"STRING_LITERAL_LONG_QUOTES1\": \"'''\",\n//\t\t\"STRING_LITERAL_LONG_QUOTES2\": '\"\"\"',\n//\t}\n//\tvar STRING_LITERAL_LONG_CONTENTS = {\n//\t\t\"STRING_LITERAL_LONG_QUOTES1\": \"(('|'')?([^'\\\\\\\\]|\"+ECHAR+\"|\"+unicode+\"))*\",\n//\t\t\"STRING_LITERAL_LONG_QUOTES2\": '((\"|\"\")?([^\"\\\\\\\\]|'+ECHAR+'|'+unicode+'))*'\n//\t};\n//\tvar STRING_LITERAL_LONG1 = STRING_LITERAL_LONG['SINGLE'].QUOTES + STRING_LITERAL_LONG['SINGLE'].CONTENTS + STRING_LITERAL_LONG['SINGLE'].QUOTES;\n//\tvar STRING_LITERAL_LONG2 = STRING_LITERAL_LONG['DOUBLE'].QUOTES + STRING_LITERAL_LONG['DOUBLE'].CONTENTS + STRING_LITERAL_LONG['DOUBLE'].QUOTES;\n\t\n//\tvar stringLiteralLongContentTerminals = {};\n//\tfor (var key in STRING_LITERAL_LONG) {\n//\t\tstringLiteralLongContentTerminals[key] = {\n//\t\t\tname: key,\n//\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG_CONTENTS[key]),\n//\t\t\tstyle:\"string\"\n//\t\t};\n//\t}\n\t//some regular expressions not used in regular terminals, because this is used accross lines\n\tvar stringLiteralLongRegex = {};\n\tfor (var key in STRING_LITERAL_LONG) {\n\t\tstringLiteralLongRegex[key] = {\n\t\t\tcomplete: {\n\t\t\t\tname: \"STRING_LITERAL_LONG_\" + key,\n\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG[key].COMPLETE),\n\t\t\t\tstyle:\"string\"\n\t\t\t},\n\t\t\tcontents: {\n\t\t\t\tname: \"STRING_LITERAL_LONG_\" + key,\n\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG[key].CONTENTS),\n\t\t\t\tstyle:\"string\"\n\t\t\t},\n\t\t\tclosing: {\n\t\t\t\tname: \"STRING_LITERAL_LONG_\" + key,\n\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG[key].CONTENTS + STRING_LITERAL_LONG[key].QUOTES),\n\t\t\t\tstyle:\"string\"\n\t\t\t},\n\t\t\tquotes: {\n\t\t\t\tname: \"STRING_LITERAL_LONG_QUOTES_\" + key,\n\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG[key].QUOTES),\n\t\t\t\tstyle:\"string\"\n\t\t\t},\n\t\t\n\t\t}\n\t}\n\t\n\tvar WS    =        '[\\\\x20\\\\x09\\\\x0D\\\\x0A]';\n\t// Careful! Code mirror feeds one line at a time with no \\n\n\t// ... but otherwise comment is terminated by \\n\n\tvar COMMENT = '#([^\\\\n\\\\r]*[\\\\n\\\\r]|[^\\\\n\\\\r]*$)';\n\tvar WS_OR_COMMENT_STAR = '('+WS+'|('+COMMENT+'))*';\n\tvar NIL   = '\\\\('+WS_OR_COMMENT_STAR+'\\\\)';\n\tvar ANON  = '\\\\['+WS_OR_COMMENT_STAR+'\\\\]';\n\tvar terminals= [\n\t\t{ name: \"WS\",\n\t\t\tregex:new RegExp(\"^\"+WS+\"+\"),\n\t\t\tstyle:\"ws\" },\n\n\t\t{ name: \"COMMENT\",\n\t\t\tregex:new RegExp(\"^\"+COMMENT),\n\t\t\tstyle:\"comment\" },\n\n\t\t{ name: \"IRI_REF\",\n\t\t\tregex:new RegExp(\"^\"+IRI_REF),\n\t\t\tstyle:\"variable-3\" },\n\n\t\t{ name: \"VAR1\",\n\t\t\tregex:new RegExp(\"^\"+VAR1),\n\t\t\tstyle:\"atom\"},\n\n\t\t{ name: \"VAR2\",\n\t\t\tregex:new RegExp(\"^\"+VAR2),\n\t\t\tstyle:\"atom\"},\n\n\t\t{ name: \"LANGTAG\",\n\t\t\tregex:new RegExp(\"^\"+LANGTAG),\n\t\t\tstyle:\"meta\"},\n\n\t\t{ name: \"DOUBLE\",\n\t\t\tregex:new RegExp(\"^\"+DOUBLE),\n\t\t\tstyle:\"number\" },\n\n\t\t{ name: \"DECIMAL\",\n\t\t\tregex:new RegExp(\"^\"+DECIMAL),\n\t\t\tstyle:\"number\" },\n\n\t\t{ name: \"INTEGER\",\n\t\t\tregex:new RegExp(\"^\"+INTEGER),\n\t\t\tstyle:\"number\" },\n\n\t\t{ name: \"DOUBLE_POSITIVE\",\n\t\t\tregex:new RegExp(\"^\"+DOUBLE_POSITIVE),\n\t\t\tstyle:\"number\" },\n\n\t\t{ name: \"DECIMAL_POSITIVE\",\n\t\t\tregex:new RegExp(\"^\"+DECIMAL_POSITIVE),\n\t\t\tstyle:\"number\" },\n\n\t\t{ name: \"INTEGER_POSITIVE\",\n\t\t\tregex:new RegExp(\"^\"+INTEGER_POSITIVE),\n\t\t\tstyle:\"number\" },\n\n\t\t{ name: \"DOUBLE_NEGATIVE\",\n\t\t\tregex:new RegExp(\"^\"+DOUBLE_NEGATIVE),\n\t\t\tstyle:\"number\" },\n\n\t\t{ name: \"DECIMAL_NEGATIVE\",\n\t\t\tregex:new RegExp(\"^\"+DECIMAL_NEGATIVE),\n\t\t\tstyle:\"number\" },\n\n\t\t{ name: \"INTEGER_NEGATIVE\",\n\t\t\tregex:new RegExp(\"^\"+INTEGER_NEGATIVE),\n\t\t\tstyle:\"number\" },\n//\t\tstringLiteralLongRegex.SINGLE.complete,\n//\t\tstringLiteralLongRegex.DOUBLE.complete,\n//\t\tstringLiteralLongRegex.SINGLE.quotes,\n//\t\tstringLiteralLongRegex.DOUBLE.quotes,\n\t\t\n\t\t{ name: \"STRING_LITERAL1\",\n\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL1),\n\t\t\tstyle:\"string\" },\n\n\t\t{ name: \"STRING_LITERAL2\",\n\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL2),\n\t\t\tstyle:\"string\" },\n\n\t\t// Enclosed comments won't be highlighted\n\t\t{ name: \"NIL\",\n\t\t\tregex:new RegExp(\"^\"+NIL),\n\t\t\tstyle:\"punc\" },\n\n\t\t// Enclosed comments won't be highlighted\n\t\t{ name: \"ANON\",\n\t\t\tregex:new RegExp(\"^\"+ANON),\n\t\t\tstyle:\"punc\" },\n\n\t\t{ name: \"PNAME_LN\",\n\t\t\tregex:new RegExp(\"^\"+PNAME_LN),\n\t\t\tstyle:\"string-2\" },\n\n\t\t{ name: \"PNAME_NS\",\n\t\t\tregex:new RegExp(\"^\"+PNAME_NS),\n\t\t\tstyle:\"string-2\" },\n\n\t\t{ name: \"BLANK_NODE_LABEL\",\n\t\t\tregex:new RegExp(\"^\"+BLANK_NODE_LABEL),\n\t\t\tstyle:\"string-2\" }\n\t];\n\n\tfunction getPossibles(symbol) {\n\t\tvar possibles=[], possiblesOb=ll1_table[symbol];\n\t\tif (possiblesOb!=undefined) {\n\t\t\tfor (var property in possiblesOb) {\n\t\t\t\tpossibles.push(property.toString());\n\t\t\t}\n\t\t} else {\n\t\t\tpossibles.push(symbol);\n\t\t}\n\t\treturn possibles;\n\t}\n\n\n\tfunction tokenBase(stream, state) {\n\n\t\tfunction nextToken() {\n\t\t\tvar consumed=null;\n\t\t\tif (state.inLiteral) {\n\t\t\t\t\n\t\t\t\tvar closingQuotes = false;\n\t\t\t\t//multi-line literal. try to parse contents.\n\t\t\t\tconsumed = stream.match(stringLiteralLongRegex[state.inLiteral].contents.regex, true, false);\n\t\t\t\tif (consumed && consumed[0].length == 0) {\n\t\t\t\t\t//try seeing whether we can consume closing quotes, to avoid stopping\n\t\t\t\t\tconsumed = stream.match(stringLiteralLongRegex[state.inLiteral].closing.regex, true, false);\n\t\t\t\t\tclosingQuotes = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (consumed && consumed[0].length > 0) {\n\t\t\t\t\t//some string content here. \n\t\t\t\t\t var returnObj = {\n\t\t\t\t\t\tquotePos: (closingQuotes? 'end': 'content'),\n\t\t\t\t\t\tcat: STRING_LITERAL_LONG[state.inLiteral].CAT,\n\t\t\t\t\t\tstyle: stringLiteralLongRegex[state.inLiteral].complete.style,\n\t\t\t\t\t\ttext: consumed[0],\n\t\t\t\t\t\tstart: stream.start\n\t\t\t\t\t};\n\t\t\t\t\t if (closingQuotes) state.inLiteral = false;\n\t\t\t\t\t return returnObj;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//Multiline literals\n\t\t\tfor (var quoteType in stringLiteralLongRegex) {\n\t\t\t\tconsumed= stream.match(stringLiteralLongRegex[quoteType].quotes.regex,true,false);\n\t\t\t\tif (consumed) {\n\t\t\t\t\tvar quotePos;\n\t\t\t\t\tif (state.inLiteral) {\n\t\t\t\t\t\t//end of literal. everything is fine\n\t\t\t\t\t\tstate.inLiteral = false;\n\t\t\t\t\t\tquotePos = 'end';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.inLiteral = quoteType;\n\t\t\t\t\t\tquotePos = 'start';\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcat: STRING_LITERAL_LONG[quoteType].CAT,\n\t\t\t\t\t\tstyle: stringLiteralLongRegex[quoteType].quotes.style,\n\t\t\t\t\t\ttext: consumed[0],\n\t\t\t\t\t\tquotePos: quotePos,\n\t\t\t\t\t\tstart: stream.start\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t// Tokens defined by individual regular expressions\n\t\t\tfor (var i=0; i<terminals.length; ++i) {\n\t\t\t\tconsumed= stream.match(terminals[i].regex,true,false);\n\t\t\t\tif (consumed) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcat: terminals[i].name,\n\t\t\t\t\t\tstyle: terminals[i].style,\n\t\t\t\t\t\ttext: consumed[0],\n\t\t\t\t\t\tstart: stream.start\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Keywords\n\t\t\tconsumed= stream.match(grammar.keywords,true,false);\n\t\t\tif (consumed)\n\t\t\t\treturn { cat: stream.current().toUpperCase(),\n\t\t\t\t\t\t\t\t style: \"keyword\",\n\t\t\t\t\t\t\t\t text: consumed[0],\n\t\t\t\t\t\t\t\t start: stream.start\n\t\t\t\t\t\t\t };\n\n\t\t\t// Punctuation\n\t\t\tconsumed= stream.match(grammar.punct,true,false);\n\t\t\tif (consumed)\n\t\t\t\treturn { cat: stream.current(),\n\t\t\t\t\t\t\t\t style: \"punc\",\n\t\t\t\t\t\t\t\t text: consumed[0],\n\t\t\t\t\t\t\t\t start: stream.start\n\t\t\t\t\t\t\t };\n\n\t\t\t// Token is invalid\n\t\t\t// better consume something anyway, or else we're stuck\n\t\t\tconsumed= stream.match(/^.[A-Za-z0-9]*/,true,false);\n\t\t\treturn { cat:\"<invalid_token>\",\n\t\t\t\t\t\t\t style: \"error\",\n\t\t\t\t\t\t\t text: consumed[0],\n\t\t\t\t\t\t\t start: stream.start\n\t\t\t\t\t\t };\n\t\t}\n\n\t\tfunction recordFailurePos() {\n\t\t\t// tokenOb.style= \"sp-invalid\";\n\t\t\tvar col= stream.column();\n\t\t\tstate.errorStartPos= col;\n\t\t\tstate.errorEndPos= col+tokenOb.text.length;\n\t\t};\n\n\t\tfunction setQueryType(s) {\n\t\t\tif (state.queryType==null) {\n\t\t\t\tif (s ==\"SELECT\" || s==\"CONSTRUCT\" || s==\"ASK\" || s==\"DESCRIBE\" || s==\"INSERT\" || s==\"DELETE\" || s==\"LOAD\" || s==\"CLEAR\" || s==\"CREATE\" || s==\"DROP\" || s==\"COPY\" || s==\"MOVE\" || s==\"ADD\")\n\t\t\t\t\tstate.queryType=s;\n\t\t\t}\n\t\t}\n\n\t\t// Some fake non-terminals are just there to have side-effect on state\n\t\t// - i.e. allow or disallow variables and bnodes in certain non-nesting\n\t\t// contexts\n\t\tfunction setSideConditions(topSymbol) {\n\t\t\tif (topSymbol==\"disallowVars\") state.allowVars=false;\n\t\t\telse if (topSymbol==\"allowVars\") state.allowVars=true;\n\t\t\telse if (topSymbol==\"disallowBnodes\") state.allowBnodes=false;\n\t\t\telse if (topSymbol==\"allowBnodes\") state.allowBnodes=true;\n\t\t\telse if (topSymbol==\"storeProperty\") state.storeProperty=true;\n\t\t}\n\n\t\tfunction checkSideConditions(topSymbol) {\n\t\t\treturn(\n\t\t\t\t(state.allowVars || topSymbol!=\"var\") &&\n\t\t\t\t\t(state.allowBnodes ||\n\t\t\t\t\t (topSymbol!=\"blankNode\" &&\n\t\t\t\t\t\ttopSymbol!=\"blankNodePropertyList\" &&\n\t\t\t\t\t\ttopSymbol!=\"blankNodePropertyListPath\")));\n\t\t}\n\n\t\t// CodeMirror works with one line at a time,\n\t\t// but newline should behave like whitespace\n\t\t// - i.e. a definite break between tokens (for autocompleter)\n\t\tif (stream.pos==0)\n\t\t\tstate.possibleCurrent= state.possibleNext;\n\n\t\tvar tokenOb= nextToken();\n\n\n\t\tif (tokenOb.cat==\"<invalid_token>\") {\n\t\t\t// set error state, and\n\t\t\tif (state.OK==true) {\n\t\t\t\tstate.OK=false;\n\t\t\t\trecordFailurePos();\n\t\t\t}\n\t\t\tstate.complete=false;\n\t\t\t// alert(\"Invalid:\"+tokenOb.text);\n\t\t\treturn tokenOb.style;\n\t\t}\n\n\t\tif (tokenOb.cat == \"WS\" || tokenOb.cat == \"COMMENT\" || (tokenOb.quotePos && tokenOb.quotePos != 'end')) {\n\t\t\tstate.possibleCurrent = state.possibleNext;\n\t\t\treturn(tokenOb.style);\n\t\t}\n\t\t// Otherwise, run the parser until the token is digested\n\t\t// or failure\n\t\tvar finished= false;\n\t\tvar topSymbol;\n\t\tvar token= tokenOb.cat;\n\t\t\n\t\tif (!tokenOb.quotePos || tokenOb.quotePos == 'end') {\n\t\t// Incremental LL1 parse\n\t\t\twhile(state.stack.length>0 && token && state.OK && !finished ) {\n\t\t\t\ttopSymbol= state.stack.pop();\n\t\n\t\t\t\tif (!ll1_table[topSymbol]) {\n\t\t\t\t\t// Top symbol is a terminal\n\t\t\t\t\tif (topSymbol == token) {\n\t\t\t\t\t\t// Matching terminals\n\t\t\t\t\t\t// - consume token from input stream\n\t\t\t\t\t\tfinished=true;\n\t\t\t\t\t\tsetQueryType(topSymbol);\n\t\t\t\t\t\t// Check whether $ (end of input token) is poss next\n\t\t\t\t\t\t// for everything on stack\n\t\t\t\t\t\tvar allNillable=true;\n\t\t\t\t\t\tfor(var sp=state.stack.length;sp>0;--sp) {\n\t\t\t\t\t\t\tvar item=ll1_table[state.stack[sp-1]];\n\t\t\t\t\t\t\tif (!item || !item[\"$\"])\n\t\t\t\t\t\t\t\tallNillable=false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstate.complete= allNillable;\n\t\t\t\t\t\tif (state.storeProperty && token.cat != \"punc\") {\n\t\t\t\t\t\t\tstate.lastProperty = tokenOb.text;\n\t\t\t\t\t\t\tstate.storeProperty = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.OK=false;\n\t\t\t\t\t\tstate.complete=false;\n\t\t\t\t\t\trecordFailurePos();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// topSymbol is nonterminal\n\t\t\t\t\t// - see if there is an entry for topSymbol\n\t\t\t\t\t// and nextToken in table\n\t\t\t\t\tvar nextSymbols= ll1_table[topSymbol][token];\n\t\t\t\t\tif (nextSymbols!=undefined && checkSideConditions(topSymbol)) {\n\t\t\t\t\t\t// Match - copy RHS of rule to stack\n\t\t\t\t\t\tfor (var i=nextSymbols.length-1; i>=0; --i) {\n\t\t\t\t\t\t\tstate.stack.push(nextSymbols[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Peform any non-grammatical side-effects\n\t\t\t\t\t\tsetSideConditions(topSymbol);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// No match in table - fail\n\t\t\t\t\t\tstate.OK=false;\n\t\t\t\t\t\tstate.complete=false;\n\t\t\t\t\t\trecordFailurePos();\n\t\t\t\t\t\tstate.stack.push(topSymbol);  // Shove topSymbol back on stack\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!finished && state.OK) { \n\t\t\tstate.OK=false; state.complete=false; recordFailurePos(); \n\t\t}\n\t\t\n\t\tif (state.possibleCurrent.indexOf('a') >= 0){\n\t\t\tstate.lastPredicateOffset = tokenOb.start;\n\t\t}\n\t\tstate.possibleCurrent = state.possibleNext;\n\t\t\n\t\tstate.possibleNext = getPossibles(state.stack[state.stack.length-1]);\n\n\t\treturn tokenOb.style;\n\t}\n\n\tvar indentTop={\n\t\t\"*[,, object]\": 3,\n\t\t\"*[(,),object]\": 3,\n\t\t\"*[(,),objectPath]\": 3,\n\t\t\"*[/,pathEltOrInverse]\": 2,\n\t\t\"object\": 2,\n\t\t\"objectPath\": 2,\n\t\t\"objectList\": 2,\n\t\t\"objectListPath\": 2,\n\t\t\"storeProperty\": 2,\n\t\t\"pathMod\": 2,\n\t\t\"?pathMod\": 2,\n\t\t\"propertyListNotEmpty\": 1,\n\t\t\"propertyList\": 1,\n\t\t\"propertyListPath\": 1,\n\t\t\"propertyListPathNotEmpty\": 1,\n\t\t\"?[verb,objectList]\": 1,\n//\t\t\"?[or([verbPath, verbSimple]),objectList]\": 1,\n\t};\n\n\tvar indentTable={\n\t\t\"}\":1,\n\t\t\"]\":0,\n\t\t\")\":1,\n\t\t\"{\":-1,\n\t\t\"(\":-1,\n//\t\t\"*[;,?[or([verbPath,verbSimple]),objectList]]\": 1,\n\t};\n\t\n\n\tfunction indent(state, textAfter) {\n\t\t//just avoid we don't indent multi-line  literals\n\t\tif (state.inLiteral) return 0;\n\t\tif (state.stack.length && state.stack[state.stack.length-1] == \"?[or([verbPath,verbSimple]),objectList]\") {\n\t\t\t//we are after a semi-colon. I.e., nicely align this line with predicate position of previous line\n\t\t\treturn state.lastPredicateOffset;\n\t\t} else {\n\t\t\tvar n = 0; // indent level\n\t\t\tvar i = state.stack.length-1;\n\t\t\tif (/^[\\}\\]\\)]/.test(textAfter)) {\n\t\t\t\t// Skip stack items until after matching bracket\n\t\t\t\tvar closeBracket=textAfter.substr(0,1);\n\t\t\t\tfor( ;i>=0;--i)\t{\n\t\t\t\t\tif (state.stack[i]==closeBracket) {\n\t\t\t\t\t\t--i; \n\t\t\t\t\t\tbreak;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Consider nullable non-terminals if at top of stack\n\t\t\t\tvar dn = indentTop[state.stack[i]];\n\t\t\t\tif (dn) { \n\t\t\t\t\tn += dn; \n\t\t\t\t\t--i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor( ;i>=0;--i)\t{\n\t\t\t\tvar dn = indentTable[state.stack[i]];\n\t\t\t\tif (dn) {\n\t\t\t\t\tn+=dn;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn n * config.indentUnit;\n\t\t}\n\t};\n\n\treturn {\n\t\ttoken: tokenBase,\n\t\tstartState: function(base) {\n\t\t\treturn {\n\t\t\t\ttokenize: tokenBase,\n\t\t\t\tOK: true,\n\t\t\t\tcomplete: grammar.acceptEmpty,\n\t\t\t\terrorStartPos: null,\n\t\t\t\terrorEndPos: null,\n\t\t\t\tqueryType: null,\n\t\t\t\tpossibleCurrent: getPossibles(grammar.startSymbol),\n\t\t\t\tpossibleNext: getPossibles(grammar.startSymbol),\n\t\t\t\tallowVars : true,\n\t\t\t\tallowBnodes : true,\n\t\t\t\tstoreProperty : false,\n\t\t\t\tlastProperty : \"\",\n\t\t\t\tinLiteral: false,\n\t\t\t\tstack: [grammar.startSymbol],\n\t\t\t\tlastPredicateOffset: config.indentUnit,\n\t\t\t}; \n\t\t},\n\t\tindent: indent,\n\t\telectricChars: \"}])\"\n\t};\n}\n);\nCodeMirror.defineMIME(\"application/x-sparql-query\", \"sparql11\");\n\n},{\"./_tokenizer-table.js\":2,\"codemirror\":undefined}],4:[function(require,module,exports){\n/*\n* TRIE implementation in Javascript\n* Copyright (c) 2010 Saurabh Odhyan | http://odhyan.com\n* \n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n* \n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n* \n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n* THE SOFTWARE.\n*\n* Date: Nov 7, 2010\n*/\n\n/*\n* A trie, or prefix tree, is a multi-way tree structure useful for storing strings over an alphabet. \n* It has been used to store large dictionaries of English (say) words in spell-checking programs \n* and in natural-language \"understanding\" programs.    \n* @see http://en.wikipedia.org/wiki/Trie\n* @see http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Trie/\n/*\n\n* @class Trie\n* @constructor\n*/  \nvar Trie = module.exports = function() {\n    this.words = 0;\n    this.prefixes = 0;\n    this.children = [];\n};\n\nTrie.prototype = {\n    \n    /*\n    * Insert a word into the dictionary. \n    * Recursively traverse through the trie nodes, and create new node if does not already exist.\n    *\n    * @method insert\n    * @param {String} str Word to insert in the dictionary\n    * @param {Integer} pos Current index of the string to be inserted\n    * @return {Void}\n    */\n    insert: function(str, pos) {\n        if(str.length == 0) { //blank string cannot be inserted\n            return;\n        }\n        \n        var T = this,\n            k,\n            child;\n            \n        if(pos === undefined) {\n            pos = 0;\n        }\n        if(pos === str.length) {\n            T.words ++;\n            return;\n        }\n        T.prefixes ++;\n        k = str[pos];\n        if(T.children[k] === undefined) { //if node for this char doesn't exist, create one\n            T.children[k] = new Trie();\n        }\n        child = T.children[k];\n        child.insert(str, pos + 1);\n    },\n    \n    /*\n    * Remove a word from the dictionary.\n    *\n    * @method remove\n    * @param {String} str Word to be removed\n    * @param {Integer} pos Current index of the string to be removed\n    * @return {Void}\n    */\n    remove: function(str, pos) {\n        if(str.length == 0) {\n            return;\n        }\n        \n        var T = this,\n            k,\n            child;\n        \n        if(pos === undefined) {\n            pos = 0;\n        }   \n        if(T === undefined) {\n            return;\n        }\n        if(pos === str.length) {\n            T.words --;\n            return;\n        }\n        T.prefixes --;\n        k = str[pos];\n        child = T.children[k];\n        child.remove(str, pos + 1);\n    },\n    \n    /*\n    * Update an existing word in the dictionary. \n    * This method removes the old word from the dictionary and inserts the new word.\n    *\n    * @method update\n    * @param {String} strOld The old word to be replaced\n    * @param {String} strNew The new word to be inserted\n    * @return {Void}\n    */\n    update: function(strOld, strNew) {\n        if(strOld.length == 0 || strNew.length == 0) {\n            return;\n        }\n        this.remove(strOld);\n        this.insert(strNew);\n    },\n    \n    /*\n    * Count the number of times a given word has been inserted into the dictionary\n    *\n    * @method countWord\n    * @param {String} str Word to get count of\n    * @param {Integer} pos Current index of the given word\n    * @return {Integer} The number of times a given word exists in the dictionary\n    */\n    countWord: function(str, pos) {\n        if(str.length == 0) {\n            return 0;\n        }\n        \n        var T = this,\n            k,\n            child,\n            ret = 0;\n        \n        if(pos === undefined) {\n            pos = 0;\n        }   \n        if(pos === str.length) {\n            return T.words;\n        }\n        k = str[pos];\n        child = T.children[k];\n        if(child !== undefined) { //node exists\n            ret = child.countWord(str, pos + 1);\n        }\n        return ret;\n    },\n    \n    /*\n    * Count the number of times a given prefix exists in the dictionary\n    *\n    * @method countPrefix\n    * @param {String} str Prefix to get count of\n    * @param {Integer} pos Current index of the given prefix\n    * @return {Integer} The number of times a given prefix exists in the dictionary\n    */\n    countPrefix: function(str, pos) {\n        if(str.length == 0) {\n            return 0;\n        }\n        \n        var T = this,\n            k,\n            child,\n            ret = 0;\n\n        if(pos === undefined) {\n            pos = 0;\n        }\n        if(pos === str.length) {\n            return T.prefixes;\n        }\n        var k = str[pos];\n        child = T.children[k];\n        if(child !== undefined) { //node exists\n            ret = child.countPrefix(str, pos + 1); \n        }\n        return ret; \n    },\n    \n    /*\n    * Find a word in the dictionary\n    *\n    * @method find\n    * @param {String} str The word to find in the dictionary\n    * @return {Boolean} True if the word exists in the dictionary, else false\n    */\n    find: function(str) {\n        if(str.length == 0) {\n            return false;\n        }\n        \n        if(this.countWord(str) > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    },\n    \n    /*\n    * Get all words in the dictionary\n    *\n    * @method getAllWords\n    * @param {String} str Prefix of current word\n    * @return {Array} Array of words in the dictionary\n    */\n    getAllWords: function(str) {\n        var T = this,\n            k,\n            child,\n            ret = [];\n        if(str === undefined) {\n            str = \"\";\n        }\n        if(T === undefined) {\n            return [];\n        }\n        if(T.words > 0) {\n            ret.push(str);\n        }\n        for(k in T.children) {\n            child = T.children[k];\n            ret = ret.concat(child.getAllWords(str + k));\n        }\n        return ret;\n    },\n    \n    /*\n    * Autocomplete a given prefix\n    *\n    * @method autoComplete\n    * @param {String} str Prefix to be completed based on dictionary entries\n    * @param {Integer} pos Current index of the prefix\n    * @return {Array} Array of possible suggestions\n    */\n    autoComplete: function(str, pos) {\n        \n        \n        var T = this,\n            k,\n            child;\n        if(str.length == 0) {\n\t\t\tif (pos === undefined) {\n\t\t\t\treturn T.getAllWords(str);\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n        }\n        if(pos === undefined) {\n            pos = 0;\n        }   \n        k = str[pos];\n        child = T.children[k];\n        if(child === undefined) { //node doesn't exist\n            return [];\n        }\n        if(pos === str.length - 1) {\n            return child.getAllWords(str);\n        }\n        return child.autoComplete(str, pos + 1);\n    }\n};\n\n},{}],5:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"fullScreen\", false, function(cm, val, old) {\n    if (old == CodeMirror.Init) old = false;\n    if (!old == !val) return;\n    if (val) setFullscreen(cm);\n    else setNormal(cm);\n  });\n\n  function setFullscreen(cm) {\n    var wrap = cm.getWrapperElement();\n    cm.state.fullScreenRestore = {scrollTop: window.pageYOffset, scrollLeft: window.pageXOffset,\n                                  width: wrap.style.width, height: wrap.style.height};\n    wrap.style.width = \"\";\n    wrap.style.height = \"auto\";\n    wrap.className += \" CodeMirror-fullscreen\";\n    document.documentElement.style.overflow = \"hidden\";\n    cm.refresh();\n  }\n\n  function setNormal(cm) {\n    var wrap = cm.getWrapperElement();\n    wrap.className = wrap.className.replace(/\\s*CodeMirror-fullscreen\\b/, \"\");\n    document.documentElement.style.overflow = \"\";\n    var info = cm.state.fullScreenRestore;\n    wrap.style.width = info.width; wrap.style.height = info.height;\n    window.scrollTo(info.scrollLeft, info.scrollTop);\n    cm.refresh();\n  }\n});\n\n},{\"codemirror\":undefined}],6:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n    (document.documentMode == null || document.documentMode < 8);\n\n  var Pos = CodeMirror.Pos;\n\n  var matching = {\"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\"};\n\n  function findMatchingBracket(cm, where, strict, config) {\n    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n    var match = (pos >= 0 && matching[line.text.charAt(pos)]) || matching[line.text.charAt(++pos)];\n    if (!match) return null;\n    var dir = match.charAt(1) == \">\" ? 1 : -1;\n    if (strict && (dir > 0) != (pos == where.ch)) return null;\n    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n\n    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n    if (found == null) return null;\n    return {from: Pos(where.line, pos), to: found && found.pos,\n            match: found && found.ch == match.charAt(0), forward: dir > 0};\n  }\n\n  // bracketRegex is used to specify which type of bracket to scan\n  // should be a regexp, e.g. /[[\\]]/\n  //\n  // Note: If \"where\" is on an open bracket, then this bracket is ignored.\n  //\n  // Returns false when no bracket was found, null when it reached\n  // maxScanLines and gave up\n  function scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n\n    var stack = [];\n    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\\]]/;\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n      var line = cm.getLine(lineNo);\n      if (!line) continue;\n      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n      if (line.length > maxScanLen) continue;\n      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n      for (; pos != end; pos += dir) {\n        var ch = line.charAt(pos);\n        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n          var match = matching[ch];\n          if ((match.charAt(1) == \">\") == (dir > 0)) stack.push(ch);\n          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n          else stack.pop();\n        }\n      }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n  }\n\n  function matchBrackets(cm, autoclear, config) {\n    // Disable brace matching in long lines, since it'll cause hugely slow updates\n    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n    var marks = [], ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, false, config);\n      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n        var style = match.match ? \"CodeMirror-matchingbracket\" : \"CodeMirror-nonmatchingbracket\";\n        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n      }\n    }\n\n    if (marks.length) {\n      // Kludge to work around the IE bug from issue #1193, where text\n      // input stops going to the textare whever this fires.\n      if (ie_lt8 && cm.state.focused) cm.focus();\n\n      var clear = function() {\n        cm.operation(function() {\n          for (var i = 0; i < marks.length; i++) marks[i].clear();\n        });\n      };\n      if (autoclear) setTimeout(clear, 800);\n      else return clear;\n    }\n  }\n\n  var currentlyHighlighted = null;\n  function doMatchBrackets(cm) {\n    cm.operation(function() {\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n    });\n  }\n\n  CodeMirror.defineOption(\"matchBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init)\n      cm.off(\"cursorActivity\", doMatchBrackets);\n    if (val) {\n      cm.state.matchBrackets = typeof val == \"object\" ? val : {};\n      cm.on(\"cursorActivity\", doMatchBrackets);\n    }\n  });\n\n  CodeMirror.defineExtension(\"matchBrackets\", function() {matchBrackets(this, true);});\n  CodeMirror.defineExtension(\"findMatchingBracket\", function(pos, strict, config){\n    return findMatchingBracket(this, pos, strict, config);\n  });\n  CodeMirror.defineExtension(\"scanForBracket\", function(pos, dir, style, config){\n    return scanForBracket(this, pos, dir, style, config);\n  });\n});\n\n},{\"codemirror\":undefined}],7:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n\n},{\"codemirror\":undefined}],8:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold && force !== \"fold\") {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: getOption(cm, options, \"clearOnEnter\"),\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options) {\n    var widget = getOption(cm, options, \"widget\");\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false,\n    clearOnEnter: true\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n\n},{\"codemirror\":undefined}],9:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(), require(\"./foldcode\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./foldcode\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.clearGutter(cm.state.foldGutter.options.gutter);\n      cm.state.foldGutter = null;\n      cm.off(\"gutterClick\", onGutterClick);\n      cm.off(\"change\", onChange);\n      cm.off(\"viewportChange\", onViewportChange);\n      cm.off(\"fold\", onFold);\n      cm.off(\"unfold\", onFold);\n      cm.off(\"swapDoc\", onChange);\n    }\n    if (val) {\n      cm.state.foldGutter = new State(parseOptions(val));\n      updateInViewport(cm);\n      cm.on(\"gutterClick\", onGutterClick);\n      cm.on(\"change\", onChange);\n      cm.on(\"viewportChange\", onViewportChange);\n      cm.on(\"fold\", onFold);\n      cm.on(\"unfold\", onFold);\n      cm.on(\"swapDoc\", onChange);\n    }\n  });\n\n  var Pos = CodeMirror.Pos;\n\n  function State(options) {\n    this.options = options;\n    this.from = this.to = 0;\n  }\n\n  function parseOptions(opts) {\n    if (opts === true) opts = {};\n    if (opts.gutter == null) opts.gutter = \"CodeMirror-foldgutter\";\n    if (opts.indicatorOpen == null) opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\n    if (opts.indicatorFolded == null) opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\n    return opts;\n  }\n\n  function isFolded(cm, line) {\n    var marks = cm.findMarks(Pos(line, 0), Pos(line + 1, 0));\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold && marks[i].find().from.line == line) return marks[i];\n  }\n\n  function marker(spec) {\n    if (typeof spec == \"string\") {\n      var elt = document.createElement(\"div\");\n      elt.className = spec + \" CodeMirror-guttermarker-subtle\";\n      return elt;\n    } else {\n      return spec.cloneNode(true);\n    }\n  }\n\n  function updateFoldInfo(cm, from, to) {\n    var opts = cm.state.foldGutter.options, cur = from;\n    var minSize = cm.foldOption(opts, \"minFoldSize\");\n    var func = cm.foldOption(opts, \"rangeFinder\");\n    cm.eachLine(from, to, function(line) {\n      var mark = null;\n      if (isFolded(cm, cur)) {\n        mark = marker(opts.indicatorFolded);\n      } else {\n        var pos = Pos(cur, 0);\n        var range = func && func(cm, pos);\n        if (range && range.to.line - range.from.line >= minSize)\n          mark = marker(opts.indicatorOpen);\n      }\n      cm.setGutterMarker(line, opts.gutter, mark);\n      ++cur;\n    });\n  }\n\n  function updateInViewport(cm) {\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\n    if (!state) return;\n    cm.operation(function() {\n      updateFoldInfo(cm, vp.from, vp.to);\n    });\n    state.from = vp.from; state.to = vp.to;\n  }\n\n  function onGutterClick(cm, line, gutter) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    if (gutter != opts.gutter) return;\n    var folded = isFolded(cm, line);\n    if (folded) folded.clear();\n    else cm.foldCode(Pos(line, 0), opts.rangeFinder);\n  }\n\n  function onChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    state.from = state.to = 0;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() { updateInViewport(cm); }, opts.foldOnChangeTimeSpan || 600);\n  }\n\n  function onViewportChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() {\n      var vp = cm.getViewport();\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        updateInViewport(cm);\n      } else {\n        cm.operation(function() {\n          if (vp.from < state.from) {\n            updateFoldInfo(cm, vp.from, state.from);\n            state.from = vp.from;\n          }\n          if (vp.to > state.to) {\n            updateFoldInfo(cm, state.to, vp.to);\n            state.to = vp.to;\n          }\n        });\n      }\n    }, opts.updateViewportTimeSpan || 400);\n  }\n\n  function onFold(cm, from) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var line = from.line;\n    if (line >= state.from && line < state.to)\n      updateFoldInfo(cm, line, line + 1);\n  }\n});\n\n},{\"./foldcode\":8,\"codemirror\":undefined}],10:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function cmp(a, b) { return a.line - b.line || a.ch - b.ch; }\n\n  var nameStartChar = \"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n  var nameChar = nameStartChar + \"\\-\\:\\.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n  var xmlTagStart = new RegExp(\"<(/?)([\" + nameStartChar + \"][\" + nameChar + \"]*)\", \"g\");\n\n  function Iter(cm, line, ch, range) {\n    this.line = line; this.ch = ch;\n    this.cm = cm; this.text = cm.getLine(line);\n    this.min = range ? range.from : cm.firstLine();\n    this.max = range ? range.to - 1 : cm.lastLine();\n  }\n\n  function tagAt(iter, ch) {\n    var type = iter.cm.getTokenTypeAt(Pos(iter.line, ch));\n    return type && /\\btag\\b/.test(type);\n  }\n\n  function nextLine(iter) {\n    if (iter.line >= iter.max) return;\n    iter.ch = 0;\n    iter.text = iter.cm.getLine(++iter.line);\n    return true;\n  }\n  function prevLine(iter) {\n    if (iter.line <= iter.min) return;\n    iter.text = iter.cm.getLine(--iter.line);\n    iter.ch = iter.text.length;\n    return true;\n  }\n\n  function toTagEnd(iter) {\n    for (;;) {\n      var gt = iter.text.indexOf(\">\", iter.ch);\n      if (gt == -1) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt + 1; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n  function toTagStart(iter) {\n    for (;;) {\n      var lt = iter.ch ? iter.text.lastIndexOf(\"<\", iter.ch - 1) : -1;\n      if (lt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, lt + 1)) { iter.ch = lt; continue; }\n      xmlTagStart.lastIndex = lt;\n      iter.ch = lt;\n      var match = xmlTagStart.exec(iter.text);\n      if (match && match.index == lt) return match;\n    }\n  }\n\n  function toNextTag(iter) {\n    for (;;) {\n      xmlTagStart.lastIndex = iter.ch;\n      var found = xmlTagStart.exec(iter.text);\n      if (!found) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, found.index + 1)) { iter.ch = found.index + 1; continue; }\n      iter.ch = found.index + found[0].length;\n      return found;\n    }\n  }\n  function toPrevTag(iter) {\n    for (;;) {\n      var gt = iter.ch ? iter.text.lastIndexOf(\">\", iter.ch - 1) : -1;\n      if (gt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n\n  function findMatchingClose(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var next = toNextTag(iter), end, startLine = iter.line, startCh = iter.ch - (next ? next[0].length : 0);\n      if (!next || !(end = toTagEnd(iter))) return;\n      if (end == \"selfClose\") continue;\n      if (next[1]) { // closing tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == next[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == next[2])) return {\n          tag: next[2],\n          from: Pos(startLine, startCh),\n          to: Pos(iter.line, iter.ch)\n        };\n      } else { // opening tag\n        stack.push(next[2]);\n      }\n    }\n  }\n  function findMatchingOpen(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var prev = toPrevTag(iter);\n      if (!prev) return;\n      if (prev == \"selfClose\") { toTagStart(iter); continue; }\n      var endLine = iter.line, endCh = iter.ch;\n      var start = toTagStart(iter);\n      if (!start) return;\n      if (start[1]) { // closing tag\n        stack.push(start[2]);\n      } else { // opening tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == start[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == start[2])) return {\n          tag: start[2],\n          from: Pos(iter.line, iter.ch),\n          to: Pos(endLine, endCh)\n        };\n      }\n    }\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"xml\", function(cm, start) {\n    var iter = new Iter(cm, start.line, 0);\n    for (;;) {\n      var openTag = toNextTag(iter), end;\n      if (!openTag || iter.line != start.line || !(end = toTagEnd(iter))) return;\n      if (!openTag[1] && end != \"selfClose\") {\n        var startPos = Pos(iter.line, iter.ch);\n        var endPos = findMatchingClose(iter, openTag[2]);\n        return endPos && {from: startPos, to: endPos.from};\n      }\n    }\n  });\n  CodeMirror.findMatchingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    if (iter.text.indexOf(\">\") == -1 && iter.text.indexOf(\"<\") == -1) return;\n    var end = toTagEnd(iter), to = end && Pos(iter.line, iter.ch);\n    var start = end && toTagStart(iter);\n    if (!end || !start || cmp(iter, pos) > 0) return;\n    var here = {from: Pos(iter.line, iter.ch), to: to, tag: start[2]};\n    if (end == \"selfClose\") return {open: here, close: null, at: \"open\"};\n\n    if (start[1]) { // closing tag\n      return {open: findMatchingOpen(iter, start[2]), close: here, at: \"close\"};\n    } else { // opening tag\n      iter = new Iter(cm, to.line, to.ch, range);\n      return {open: here, close: findMatchingClose(iter, start[2]), at: \"open\"};\n    }\n  };\n\n  CodeMirror.findEnclosingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    for (;;) {\n      var open = findMatchingOpen(iter);\n      if (!open) break;\n      var forward = new Iter(cm, pos.line, pos.ch, range);\n      var close = findMatchingClose(forward, open.tag);\n      if (close) return {open: open, close: close};\n    }\n  };\n\n  // Used by addon/edit/closetag.js\n  CodeMirror.scanForClosingTag = function(cm, pos, name, end) {\n    var iter = new Iter(cm, pos.line, pos.ch, end ? {from: 0, to: end} : null);\n    return findMatchingClose(iter, name);\n  };\n});\n\n},{\"codemirror\":undefined}],11:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    options = parseOptions(this, this.getCursor(\"start\"), options);\n    var selections = this.listSelections()\n    if (selections.length > 1) return;\n    // By default, don't allow completion when something is selected.\n    // A hint function can have a `supportsSelection` property to\n    // indicate that it can handle selections.\n    if (this.somethingSelected()) {\n      if (!options.hint.supportsSelection) return;\n      // Don't try with cross-line selections\n      for (var i = 0; i < selections.length; i++)\n        if (selections[i].head.line != selections[i].anchor.line) return;\n    }\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    if (!completion.options.hint) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    completion.update(true);\n  });\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.widget = null;\n    this.debounce = 0;\n    this.tick = 0;\n    this.startPos = this.cm.getCursor(\"start\");\n    this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n\n    var self = this;\n    cm.on(\"cursorActivity\", this.activityFunc = function() { self.cursorActivity(); });\n  }\n\n  var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n    return setTimeout(fn, 1000/60);\n  };\n  var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n      this.tick = null;\n      this.cm.off(\"cursorActivity\", this.activityFunc);\n\n      if (this.widget && this.data) CodeMirror.signal(this.data, \"close\");\n      if (this.widget) this.widget.close();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i];\n      if (completion.hint) completion.hint(this.cm, data, completion);\n      else this.cm.replaceRange(getText(completion), completion.from || data.from,\n                                completion.to || data.to, \"complete\");\n      CodeMirror.signal(data, \"pick\", completion);\n      this.close();\n    },\n\n    cursorActivity: function() {\n      if (this.debounce) {\n        cancelAnimationFrame(this.debounce);\n        this.debounce = 0;\n      }\n\n      var pos = this.cm.getCursor(), line = this.cm.getLine(pos.line);\n      if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch ||\n          pos.ch < this.startPos.ch || this.cm.somethingSelected() ||\n          (pos.ch && this.options.closeCharacters.test(line.charAt(pos.ch - 1)))) {\n        this.close();\n      } else {\n        var self = this;\n        this.debounce = requestAnimationFrame(function() {self.update();});\n        if (this.widget) this.widget.disable();\n      }\n    },\n\n    update: function(first) {\n      if (this.tick == null) return\n      var self = this, myTick = ++this.tick\n      fetchHints(this.options.hint, this.cm, this.options, function(data) {\n        if (self.tick == myTick) self.finishUpdate(data, first)\n      })\n    },\n\n    finishUpdate: function(data, first) {\n      if (this.data) CodeMirror.signal(this.data, \"update\");\n\n      var picked = (this.widget && this.widget.picked) || (first && this.options.completeSingle);\n      if (this.widget) this.widget.close();\n\n      if (data && this.data && isNewCompletion(this.data, data)) return;\n      this.data = data;\n\n      if (data && data.list.length) {\n        if (picked && data.list.length == 1) {\n          this.pick(data, 0);\n        } else {\n          this.widget = new Widget(this, data);\n          CodeMirror.signal(data, \"shown\");\n        }\n      }\n    }\n  };\n\n  function isNewCompletion(old, nw) {\n    var moved = CodeMirror.cmpPos(nw.from, old.from)\n    return moved > 0 && old.to.ch - old.from.ch != nw.to.ch - nw.from.ch\n  }\n\n  function parseOptions(cm, pos, options) {\n    var editor = cm.options.hintOptions;\n    var out = {};\n    for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n    if (editor) for (var prop in editor)\n      if (editor[prop] !== undefined) out[prop] = editor[prop];\n    if (options) for (var prop in options)\n      if (options[prop] !== undefined) out[prop] = options[prop];\n    if (out.hint.resolve) out.hint = out.hint.resolve(cm, pos)\n    return out;\n  }\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.completion = completion;\n    this.data = data;\n    this.picked = false;\n    var widget = this, cm = completion.cm;\n\n    var hints = this.hints = document.createElement(\"ul\");\n    hints.className = \"CodeMirror-hints\";\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(document.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    hints.style.left = left + \"px\";\n    hints.style.top = top + \"px\";\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);\n    var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);\n    (completion.options.container || document.body).appendChild(hints);\n    var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;\n    var scrolls = hints.scrollHeight > hints.clientHeight + 1\n    var startScroll = cm.getScrollInfo();\n\n    if (overlapY > 0) {\n      var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n      if (curTop - height > 0) { // Fits above cursor\n        hints.style.top = (top = pos.top - height) + \"px\";\n        below = false;\n      } else if (height > winH) {\n        hints.style.height = (winH - 5) + \"px\";\n        hints.style.top = (top = pos.bottom - box.top) + \"px\";\n        var cursor = cm.getCursor();\n        if (data.from.ch != cursor.ch) {\n          pos = cm.cursorCoords(cursor);\n          hints.style.left = (left = pos.left) + \"px\";\n          box = hints.getBoundingClientRect();\n        }\n      }\n    }\n    var overlapX = box.right - winW;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = pos.left - overlapX) + \"px\";\n    }\n    if (scrolls) for (var node = hints.firstChild; node; node = node.nextSibling)\n      node.style.paddingRight = cm.display.nativeBarWidth + \"px\"\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    CodeMirror.signal(data, \"select\", completions[0], hints.firstChild);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    disable: function() {\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var widget = this;\n      this.keyMap = {Enter: function() { widget.picked = true; }};\n      this.completion.cm.addKeyMap(this.keyMap);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      if (node.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node.offsetTop - 3;\n      else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    }\n  };\n\n  function applicableHelpers(cm, helpers) {\n    if (!cm.somethingSelected()) return helpers\n    var result = []\n    for (var i = 0; i < helpers.length; i++)\n      if (helpers[i].supportsSelection) result.push(helpers[i])\n    return result\n  }\n\n  function fetchHints(hint, cm, options, callback) {\n    if (hint.async) {\n      hint(cm, callback, options)\n    } else {\n      var result = hint(cm, options)\n      if (result && result.then) result.then(callback)\n      else callback(result)\n    }\n  }\n\n  function resolveAutoHints(cm, pos) {\n    var helpers = cm.getHelpers(pos, \"hint\"), words\n    if (helpers.length) {\n      var resolved = function(cm, callback, options) {\n        var app = applicableHelpers(cm, helpers);\n        function run(i) {\n          if (i == app.length) return callback(null)\n          fetchHints(app[i], cm, options, function(result) {\n            if (result && result.list.length > 0) callback(result)\n            else run(i + 1)\n          })\n        }\n        run(0)\n      }\n      resolved.async = true\n      resolved.supportsSelection = true\n      return resolved\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      return function(cm) { return CodeMirror.hint.fromList(cm, {words: words}) }\n    } else if (CodeMirror.hint.anyword) {\n      return function(cm, options) { return CodeMirror.hint.anyword(cm, options) }\n    } else {\n      return function() {}\n    }\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", {\n    resolve: resolveAutoHints\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n    var to = CodeMirror.Pos(cur.line, token.end);\n    if (token.string && /\\w/.test(token.string[token.string.length - 1])) {\n      var term = token.string, from = CodeMirror.Pos(cur.line, token.start);\n    } else {\n      var term = \"\", from = to;\n    }\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, term.length) == term)\n        found.push(word);\n    }\n\n    if (found.length) return {list: found, from: from, to: to};\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnUnfocus: true,\n    completeOnSingleClick: true,\n    container: null,\n    customKeys: null,\n    extraKeys: null\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n\n},{\"codemirror\":undefined}],12:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.runMode = function(string, modespec, callback, options) {\n  var mode = CodeMirror.getMode(CodeMirror.defaults, modespec);\n  var ie = /MSIE \\d/.test(navigator.userAgent);\n  var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);\n\n  if (callback.appendChild) {\n    var tabSize = (options && options.tabSize) || CodeMirror.defaults.tabSize;\n    var node = callback, col = 0;\n    node.innerHTML = \"\";\n    callback = function(text, style) {\n      if (text == \"\\n\") {\n        // Emitting LF or CRLF on IE8 or earlier results in an incorrect display.\n        // Emitting a carriage return makes everything ok.\n        node.appendChild(document.createTextNode(ie_lt9 ? '\\r' : text));\n        col = 0;\n        return;\n      }\n      var content = \"\";\n      // replace tabs\n      for (var pos = 0;;) {\n        var idx = text.indexOf(\"\\t\", pos);\n        if (idx == -1) {\n          content += text.slice(pos);\n          col += text.length - pos;\n          break;\n        } else {\n          col += idx - pos;\n          content += text.slice(pos, idx);\n          var size = tabSize - col % tabSize;\n          col += size;\n          for (var i = 0; i < size; ++i) content += \" \";\n          pos = idx + 1;\n        }\n      }\n\n      if (style) {\n        var sp = node.appendChild(document.createElement(\"span\"));\n        sp.className = \"cm-\" + style.replace(/ +/g, \" cm-\");\n        sp.appendChild(document.createTextNode(content));\n      } else {\n        node.appendChild(document.createTextNode(content));\n      }\n    };\n  }\n\n  var lines = CodeMirror.splitLines(string), state = (options && options.state) || CodeMirror.startState(mode);\n  for (var i = 0, e = lines.length; i < e; ++i) {\n    if (i) callback(\"\\n\");\n    var stream = new CodeMirror.StringStream(lines[i]);\n    if (!stream.string && mode.blankLine) mode.blankLine(state);\n    while (!stream.eol()) {\n      var style = mode.token(stream, state);\n      callback(stream.current(), style, i, stream.start, state);\n      stream.start = stream.pos;\n    }\n  }\n};\n\n});\n\n},{\"codemirror\":undefined}],13:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var Pos = CodeMirror.Pos;\n\n  function SearchCursor(doc, query, pos, caseFold) {\n    this.atOccurrence = false; this.doc = doc;\n    if (caseFold == null && typeof query == \"string\") caseFold = false;\n\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0);\n    this.pos = {from: pos, to: pos};\n\n    // The matches method is filled in based on the type of query.\n    // It takes a position and a direction, and returns an object\n    // describing the next occurrence of the query, or null if no\n    // more matches were found.\n    if (typeof query != \"string\") { // Regexp match\n      if (!query.global) query = new RegExp(query.source, query.ignoreCase ? \"ig\" : \"g\");\n      this.matches = function(reverse, pos) {\n        if (reverse) {\n          query.lastIndex = 0;\n          var line = doc.getLine(pos.line).slice(0, pos.ch), cutOff = 0, match, start;\n          for (;;) {\n            query.lastIndex = cutOff;\n            var newMatch = query.exec(line);\n            if (!newMatch) break;\n            match = newMatch;\n            start = match.index;\n            cutOff = match.index + (match[0].length || 1);\n            if (cutOff == line.length) break;\n          }\n          var matchLen = (match && match[0].length) || 0;\n          if (!matchLen) {\n            if (start == 0 && line.length == 0) {match = undefined;}\n            else if (start != doc.getLine(pos.line).length) {\n              matchLen++;\n            }\n          }\n        } else {\n          query.lastIndex = pos.ch;\n          var line = doc.getLine(pos.line), match = query.exec(line);\n          var matchLen = (match && match[0].length) || 0;\n          var start = match && match.index;\n          if (start + matchLen != line.length && !matchLen) matchLen = 1;\n        }\n        if (match && matchLen)\n          return {from: Pos(pos.line, start),\n                  to: Pos(pos.line, start + matchLen),\n                  match: match};\n      };\n    } else { // String query\n      var origQuery = query;\n      if (caseFold) query = query.toLowerCase();\n      var fold = caseFold ? function(str){return str.toLowerCase();} : function(str){return str;};\n      var target = query.split(\"\\n\");\n      // Different methods for single-line and multi-line queries\n      if (target.length == 1) {\n        if (!query.length) {\n          // Empty string would match anything and never progress, so\n          // we define it to match nothing instead.\n          this.matches = function() {};\n        } else {\n          this.matches = function(reverse, pos) {\n            if (reverse) {\n              var orig = doc.getLine(pos.line).slice(0, pos.ch), line = fold(orig);\n              var match = line.lastIndexOf(query);\n              if (match > -1) {\n                match = adjustPos(orig, line, match);\n                return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n              }\n             } else {\n               var orig = doc.getLine(pos.line).slice(pos.ch), line = fold(orig);\n               var match = line.indexOf(query);\n               if (match > -1) {\n                 match = adjustPos(orig, line, match) + pos.ch;\n                 return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n               }\n            }\n          };\n        }\n      } else {\n        var origTarget = origQuery.split(\"\\n\");\n        this.matches = function(reverse, pos) {\n          var last = target.length - 1;\n          if (reverse) {\n            if (pos.line - (target.length - 1) < doc.firstLine()) return;\n            if (fold(doc.getLine(pos.line).slice(0, origTarget[last].length)) != target[target.length - 1]) return;\n            var to = Pos(pos.line, origTarget[last].length);\n            for (var ln = pos.line - 1, i = last - 1; i >= 1; --i, --ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            var line = doc.getLine(ln), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            return {from: Pos(ln, cut), to: to};\n          } else {\n            if (pos.line + (target.length - 1) > doc.lastLine()) return;\n            var line = doc.getLine(pos.line), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            var from = Pos(pos.line, cut);\n            for (var ln = pos.line + 1, i = 1; i < last; ++i, ++ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            if (fold(doc.getLine(ln).slice(0, origTarget[last].length)) != target[last]) return;\n            return {from: from, to: Pos(ln, origTarget[last].length)};\n          }\n        };\n      }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false);},\n    findPrevious: function() {return this.find(true);},\n\n    find: function(reverse) {\n      var self = this, pos = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n      function savePosAndFail(line) {\n        var pos = Pos(line, 0);\n        self.pos = {from: pos, to: pos};\n        self.atOccurrence = false;\n        return false;\n      }\n\n      for (;;) {\n        if (this.pos = this.matches(reverse, pos)) {\n          this.atOccurrence = true;\n          return this.pos.match || true;\n        }\n        if (reverse) {\n          if (!pos.line) return savePosAndFail(0);\n          pos = Pos(pos.line-1, this.doc.getLine(pos.line-1).length);\n        }\n        else {\n          var maxLine = this.doc.lineCount();\n          if (pos.line == maxLine - 1) return savePosAndFail(maxLine);\n          pos = Pos(pos.line + 1, 0);\n        }\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from;},\n    to: function() {if (this.atOccurrence) return this.pos.to;},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return;\n      var lines = CodeMirror.splitLines(newText);\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin);\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0));\n    }\n  };\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos) {\n    if (orig.length == folded.length) return pos;\n    for (var pos1 = Math.min(pos, orig.length);;) {\n      var len1 = orig.slice(0, pos1).toLowerCase().length;\n      if (len1 < pos) ++pos1;\n      else if (len1 > pos) --pos1;\n      else return pos1;\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold);\n  });\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold);\n  });\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = [];\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold);\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break;\n      ranges.push({anchor: cur.from(), head: cur.to()});\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0);\n  });\n});\n\n},{\"codemirror\":undefined}],14:[function(require,module,exports){\n(function (global){\n\"use strict\"\n// Module export pattern from\n// https://github.com/umdjs/umd/blob/master/returnExports.js\n;(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.store = factory();\n  }\n}(this, function () {\n\t\n\t// Store.js\n\tvar store = {},\n\t\twin = (typeof window != 'undefined' ? window : global),\n\t\tdoc = win.document,\n\t\tlocalStorageName = 'localStorage',\n\t\tscriptTag = 'script',\n\t\tstorage\n\n\tstore.disabled = false\n\tstore.version = '1.3.20'\n\tstore.set = function(key, value) {}\n\tstore.get = function(key, defaultVal) {}\n\tstore.has = function(key) { return store.get(key) !== undefined }\n\tstore.remove = function(key) {}\n\tstore.clear = function() {}\n\tstore.transact = function(key, defaultVal, transactionFn) {\n\t\tif (transactionFn == null) {\n\t\t\ttransactionFn = defaultVal\n\t\t\tdefaultVal = null\n\t\t}\n\t\tif (defaultVal == null) {\n\t\t\tdefaultVal = {}\n\t\t}\n\t\tvar val = store.get(key, defaultVal)\n\t\ttransactionFn(val)\n\t\tstore.set(key, val)\n\t}\n\tstore.getAll = function() {}\n\tstore.forEach = function() {}\n\n\tstore.serialize = function(value) {\n\t\treturn JSON.stringify(value)\n\t}\n\tstore.deserialize = function(value) {\n\t\tif (typeof value != 'string') { return undefined }\n\t\ttry { return JSON.parse(value) }\n\t\tcatch(e) { return value || undefined }\n\t}\n\n\t// Functions to encapsulate questionable FireFox 3.6.13 behavior\n\t// when about.config::dom.storage.enabled === false\n\t// See https://github.com/marcuswestin/store.js/issues#issue/13\n\tfunction isLocalStorageNameSupported() {\n\t\ttry { return (localStorageName in win && win[localStorageName]) }\n\t\tcatch(err) { return false }\n\t}\n\n\tif (isLocalStorageNameSupported()) {\n\t\tstorage = win[localStorageName]\n\t\tstore.set = function(key, val) {\n\t\t\tif (val === undefined) { return store.remove(key) }\n\t\t\tstorage.setItem(key, store.serialize(val))\n\t\t\treturn val\n\t\t}\n\t\tstore.get = function(key, defaultVal) {\n\t\t\tvar val = store.deserialize(storage.getItem(key))\n\t\t\treturn (val === undefined ? defaultVal : val)\n\t\t}\n\t\tstore.remove = function(key) { storage.removeItem(key) }\n\t\tstore.clear = function() { storage.clear() }\n\t\tstore.getAll = function() {\n\t\t\tvar ret = {}\n\t\t\tstore.forEach(function(key, val) {\n\t\t\t\tret[key] = val\n\t\t\t})\n\t\t\treturn ret\n\t\t}\n\t\tstore.forEach = function(callback) {\n\t\t\tfor (var i=0; i<storage.length; i++) {\n\t\t\t\tvar key = storage.key(i)\n\t\t\t\tcallback(key, store.get(key))\n\t\t\t}\n\t\t}\n\t} else if (doc && doc.documentElement.addBehavior) {\n\t\tvar storageOwner,\n\t\t\tstorageContainer\n\t\t// Since #userData storage applies only to specific paths, we need to\n\t\t// somehow link our data to a specific path.  We choose /favicon.ico\n\t\t// as a pretty safe option, since all browsers already make a request to\n\t\t// this URL anyway and being a 404 will not hurt us here.  We wrap an\n\t\t// iframe pointing to the favicon in an ActiveXObject(htmlfile) object\n\t\t// (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)\n\t\t// since the iframe access rules appear to allow direct access and\n\t\t// manipulation of the document element, even for a 404 page.  This\n\t\t// document can be used instead of the current document (which would\n\t\t// have been limited to the current path) to perform #userData storage.\n\t\ttry {\n\t\t\tstorageContainer = new ActiveXObject('htmlfile')\n\t\t\tstorageContainer.open()\n\t\t\tstorageContainer.write('<'+scriptTag+'>document.w=window</'+scriptTag+'><iframe src=\"/favicon.ico\"></iframe>')\n\t\t\tstorageContainer.close()\n\t\t\tstorageOwner = storageContainer.w.frames[0].document\n\t\t\tstorage = storageOwner.createElement('div')\n\t\t} catch(e) {\n\t\t\t// somehow ActiveXObject instantiation failed (perhaps some special\n\t\t\t// security settings or otherwse), fall back to per-path storage\n\t\t\tstorage = doc.createElement('div')\n\t\t\tstorageOwner = doc.body\n\t\t}\n\t\tvar withIEStorage = function(storeFunction) {\n\t\t\treturn function() {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments, 0)\n\t\t\t\targs.unshift(storage)\n\t\t\t\t// See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx\n\t\t\t\t// and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx\n\t\t\t\tstorageOwner.appendChild(storage)\n\t\t\t\tstorage.addBehavior('#default#userData')\n\t\t\t\tstorage.load(localStorageName)\n\t\t\t\tvar result = storeFunction.apply(store, args)\n\t\t\t\tstorageOwner.removeChild(storage)\n\t\t\t\treturn result\n\t\t\t}\n\t\t}\n\n\t\t// In IE7, keys cannot start with a digit or contain certain chars.\n\t\t// See https://github.com/marcuswestin/store.js/issues/40\n\t\t// See https://github.com/marcuswestin/store.js/issues/83\n\t\tvar forbiddenCharsRegex = new RegExp(\"[!\\\"#$%&'()*+,/\\\\\\\\:;<=>?@[\\\\]^`{|}~]\", \"g\")\n\t\tvar ieKeyFix = function(key) {\n\t\t\treturn key.replace(/^d/, '___$&').replace(forbiddenCharsRegex, '___')\n\t\t}\n\t\tstore.set = withIEStorage(function(storage, key, val) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tif (val === undefined) { return store.remove(key) }\n\t\t\tstorage.setAttribute(key, store.serialize(val))\n\t\t\tstorage.save(localStorageName)\n\t\t\treturn val\n\t\t})\n\t\tstore.get = withIEStorage(function(storage, key, defaultVal) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tvar val = store.deserialize(storage.getAttribute(key))\n\t\t\treturn (val === undefined ? defaultVal : val)\n\t\t})\n\t\tstore.remove = withIEStorage(function(storage, key) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tstorage.removeAttribute(key)\n\t\t\tstorage.save(localStorageName)\n\t\t})\n\t\tstore.clear = withIEStorage(function(storage) {\n\t\t\tvar attributes = storage.XMLDocument.documentElement.attributes\n\t\t\tstorage.load(localStorageName)\n\t\t\tfor (var i=attributes.length-1; i>=0; i--) {\n\t\t\t\tstorage.removeAttribute(attributes[i].name)\n\t\t\t}\n\t\t\tstorage.save(localStorageName)\n\t\t})\n\t\tstore.getAll = function(storage) {\n\t\t\tvar ret = {}\n\t\t\tstore.forEach(function(key, val) {\n\t\t\t\tret[key] = val\n\t\t\t})\n\t\t\treturn ret\n\t\t}\n\t\tstore.forEach = withIEStorage(function(storage, callback) {\n\t\t\tvar attributes = storage.XMLDocument.documentElement.attributes\n\t\t\tfor (var i=0, attr; attr=attributes[i]; ++i) {\n\t\t\t\tcallback(attr.name, store.deserialize(storage.getAttribute(attr.name)))\n\t\t\t}\n\t\t})\n\t}\n\n\ttry {\n\t\tvar testKey = '__storejs__'\n\t\tstore.set(testKey, testKey)\n\t\tif (store.get(testKey) != testKey) { store.disabled = true }\n\t\tstore.remove(testKey)\n\t} catch(e) {\n\t\tstore.disabled = true\n\t}\n\tstore.enabled = !store.disabled\n\t\n\treturn store\n}));\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],15:[function(require,module,exports){\nmodule.exports={\n  \"_args\": [\n    [\n      \"yasgui-utils@^1.4.1\",\n      \"/home/lrd900/yasgui/yasqe\"\n    ]\n  ],\n  \"_from\": \"yasgui-utils@>=1.4.1 <2.0.0\",\n  \"_id\": \"yasgui-utils@1.6.0\",\n  \"_inCache\": true,\n  \"_installable\": true,\n  \"_location\": \"/yasgui-utils\",\n  \"_npmUser\": {\n    \"email\": \"laurens.rietveld@gmail.com\",\n    \"name\": \"laurens.rietveld\"\n  },\n  \"_npmVersion\": \"1.4.3\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"name\": \"yasgui-utils\",\n    \"raw\": \"yasgui-utils@^1.4.1\",\n    \"rawSpec\": \"^1.4.1\",\n    \"scope\": null,\n    \"spec\": \">=1.4.1 <2.0.0\",\n    \"type\": \"range\"\n  },\n  \"_requiredBy\": [\n    \"/\"\n  ],\n  \"_shrinkwrap\": null,\n  \"_spec\": \"yasgui-utils@^1.4.1\",\n  \"_where\": \"/home/lrd900/yasgui/yasqe\",\n  \"author\": {\n    \"name\": \"Laurens Rietveld\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/YASGUI/Utils/issues\"\n  },\n  \"dependencies\": {\n    \"store\": \"^1.3.14\"\n  },\n  \"description\": \"Utils for YASGUI libs\",\n  \"devDependencies\": {},\n  \"directories\": {},\n  \"dist\": {\n    \"shasum\": \"bcb9091109c233e3e82737c94c202e6512389c47\",\n    \"tarball\": \"http://registry.npmjs.org/yasgui-utils/-/yasgui-utils-1.6.0.tgz\"\n  },\n  \"homepage\": \"https://github.com/YASGUI/Utils\",\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://yasgui.github.io/license.txt\"\n    }\n  ],\n  \"main\": \"src/main.js\",\n  \"maintainers\": [\n    {\n      \"name\": \"laurens.rietveld\",\n      \"email\": \"laurens.rietveld@gmail.com\"\n    }\n  ],\n  \"name\": \"yasgui-utils\",\n  \"optionalDependencies\": {},\n  \"readme\": \"ERROR: No README data found!\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/YASGUI/Utils.git\"\n  },\n  \"version\": \"1.6.0\"\n}\n\n},{}],16:[function(require,module,exports){\nwindow.console = window.console || {\"log\":function(){}};//make sure any console statements don't break IE\nmodule.exports = {\n\tstorage: require(\"./storage.js\"),\n\tsvg: require(\"./svg.js\"),\n\tversion: {\n\t\t\"yasgui-utils\" : require(\"../package.json\").version,\n\t},\n\tnestedExists : function(obj) {\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\n\t\tfor (var i = 0; i < args.length; i++) {\n\t\t\tif (!obj || !obj.hasOwnProperty(args[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tobj = obj[args[i]];\n\t\t}\n\t\treturn true;\n\t}\n};\n\n},{\"../package.json\":15,\"./storage.js\":17,\"./svg.js\":18}],17:[function(require,module,exports){\nvar store = require(\"store\");\nvar times = {\n\tday: function() {\n\t\treturn 1000 * 3600 * 24;//millis to day\n\t},\n\tmonth: function() {\n\t\ttimes.day() * 30;\n\t},\n\tyear: function() {\n\t\ttimes.month() * 12;\n\t}\n};\n\nvar root = module.exports = {\n\tset : function(key, val, exp) {\n    if (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key && val !== undefined) {\n\t\t\tif (typeof exp == \"string\") {\n\t\t\t\texp = times[exp]();\n\t\t\t}\n\t\t\t//try to store string for dom objects (e.g. XML result). Otherwise, we might get a circular reference error when stringifying this\n\t\t\tif (val.documentElement) val = new XMLSerializer().serializeToString(val.documentElement);\n\t\t\tstore.set(key, {\n\t\t\t\tval : val,\n\t\t\t\texp : exp,\n\t\t\t\ttime : new Date().getTime()\n\t\t\t});\n\t\t}\n\t},\n\tremove: function(key) {\n\t\tif (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key) store.remove(key)\n\t},\n\tremoveAll: function(filter) {\n\t\tif (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (typeof filter === 'function') {\n\t\t\tfor (var key in store.getAll()) {\n\t\t\t\tif (filter(key, root.get(key))) root.remove(key);\n\t\t\t}\n\t\t}\n\t},\n\tget : function(key) {\n    if (!store.enabled) return null;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key) {\n\t\t\tvar info = store.get(key);\n\t\t\tif (!info) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (info.exp && new Date().getTime() - info.time > info.exp) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn info.val;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n};\n\n},{\"store\":14}],18:[function(require,module,exports){\nmodule.exports = {\n\tdraw: function(parent, svgString) {\n\t\tif (!parent) return;\n\t\tvar el = module.exports.getElement(svgString);\n\t\tif (el) {\n\t\t\tif (parent.append) {\n\t\t\t\tparent.append(el);\n\t\t\t} else {\n\t\t\t\t//regular dom doc\n\t\t\t\tparent.appendChild(el);\n\t\t\t}\n\t\t}\n\t},\n\tgetElement: function(svgString) {\n\t\tif (svgString && svgString.indexOf(\"<svg\") == 0) {\n\t\t\t//no style passed via config. guess own styles\n\t\t\tvar parser = new DOMParser();\n\t\t\tvar dom = parser.parseFromString(svgString, \"text/xml\");\n\t\t\tvar svg = dom.documentElement;\n\t\t\t\n\t\t\tvar svgContainer = document.createElement(\"div\");\n\t\t\tsvgContainer.className = 'svgImg';\n\t\t\tsvgContainer.appendChild(svg);\n\t\t\treturn svgContainer;\n\t\t}\n\t\treturn false;\n\t}\n};\n},{}],19:[function(require,module,exports){\nmodule.exports={\n  \"name\": \"yasgui-yasqe\",\n  \"description\": \"Yet Another SPARQL Query Editor\",\n  \"version\": \"2.10.1\",\n  \"main\": \"src/main.js\",\n  \"license\": \"MIT\",\n  \"author\": \"Laurens Rietveld\",\n  \"homepage\": \"http://yasqe.yasgui.org\",\n  \"scripts\": {\n    \"install\": \"gulp\",\n    \"dev\": \"gulp serve\",\n    \"build\": \"gulp\",\n    \"patch\": \"gulp patch\",\n    \"minor\": \"gulp minor\",\n    \"major\": \"gulp major\"\n  },\n  \"devDependencies\": {\n    \"gulp-bump\": \"^2.2.0\",\n    \"gulp-connect\": \"^4.2.0\",\n    \"gulp-embedlr\": \"^0.5.2\",\n    \"gulp-git\": \"^1.10.0\",\n    \"gulp-livereload\": \"^3.8.1\",\n    \"gulp-tag-version\": \"^1.3.0\",\n    \"watchify\": \"^3.7.0\"\n  },\n  \"bugs\": \"https://github.com/YASGUI/YASQE/issues/\",\n  \"keywords\": [\n    \"JavaScript\",\n    \"SPARQL\",\n    \"Editor\",\n    \"Semantic Web\",\n    \"Linked Data\"\n  ],\n  \"maintainers\": [\n    {\n      \"name\": \"Laurens Rietveld\",\n      \"email\": \"laurens.rietveld@gmail.com\",\n      \"web\": \"http://laurensrietveld.nl\"\n    }\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/YASGUI/YASQE.git\"\n  },\n  \"dependencies\": {\n    \"bootstrap-sass\": \"^3.3.7\",\n    \"browserify\": \"^13.1.0\",\n    \"browserify-transform-tools\": \"^1.6.0\",\n    \"exorcist\": \"^0.4.0\",\n    \"gulp-autoprefixer\": \"^3.1.0\",\n    \"gulp-concat\": \"^2.6.0\",\n    \"gulp-cssimport\": \"^3.1.0\",\n    \"gulp-cssnano\": \"^2.1.2\",\n    \"gulp-filter\": \"^4.0.0\",\n    \"gulp-jsvalidate\": \"^2.1.0\",\n    \"gulp-minify-css\": \"1.2.4\",\n    \"gulp-notify\": \"^2.2.0\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-sass\": \"^2.3.2\",\n    \"gulp-sourcemaps\": \"^1.6.0\",\n    \"gulp-streamify\": \"1.0.2\",\n    \"gulp-uglify\": \"^1.5.4\",\n    \"node-sass\": \"^3.8.0\",\n    \"require-dir\": \"^0.3.0\",\n    \"run-sequence\": \"^1.2.2\",\n    \"vinyl-buffer\": \"^1.0.0\",\n    \"vinyl-source-stream\": \"~1.1.0\",\n    \"vinyl-transform\": \"1.0.0\",\n    \"codemirror\": \"5.17.0\",\n    \"gulp\": \"^3.9.1\",\n    \"jquery\": \"~3.1.0\",\n    \"yasgui-utils\": \"^1.6.0\"\n  },\n  \"optionalShim\": {\n    \"codemirror\": {\n      \"require\": \"codemirror\",\n      \"global\": \"CodeMirror\"\n    },\n    \"jquery\": {\n      \"require\": \"jquery\",\n      \"global\": \"jQuery\"\n    },\n    \"../../lib/codemirror\": {\n      \"require\": \"codemirror\",\n      \"global\": \"CodeMirror\"\n    }\n  }\n}\n\n},{}],20:[function(require,module,exports){\n'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n\tutils = require('../utils.js'),\n\tyutils = require('yasgui-utils'),\n\tTrie = require('../../lib/trie.js'),\n\tYASQE = require('../main.js');\n\nmodule.exports = function(YASQE, yasqe) {\n\tvar completionNotifications = {};\n\tvar completers = {};\n\tvar tries = {};\n\n\tyasqe.on('cursorActivity', function(yasqe, eventInfo) {\n\t\tautoComplete(true);\n\t});\n\tyasqe.on('change', function() {\n\t\tvar needPossibleAdjustment = [];\n\t\tfor (var notificationName in completionNotifications) {\n\t\t\tif (completionNotifications[notificationName].is(':visible')) {\n\t\t\t\tneedPossibleAdjustment.push(completionNotifications[notificationName]);\n\t\t\t}\n\t\t}\n\t\tif (needPossibleAdjustment.length > 0) {\n\t\t\t//position completion notifications\n\t\t\tvar scrollBar = $(yasqe.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\n\t\t\tvar offset = 0;\n\t\t\tif (scrollBar.is(\":visible\")) {\n\t\t\t\toffset = scrollBar.outerWidth();\n\t\t\t}\n\t\t\tneedPossibleAdjustment.forEach(function(notification) {\n\t\t\t\tnotification.css(\"right\", offset)\n\t\t\t});\n\t\t}\n\t});\n\n\n\n\t/**\n\t * Store bulk completions in memory as trie, and store these in localstorage as well (if enabled)\n\t * \n\t * @method doc.storeBulkCompletions\n\t * @param completions {array}\n\t */\n\tvar storeBulkCompletions = function(completer, completions) {\n\t\t// store array as trie\n\t\ttries[completer.name] = new Trie();\n\t\tfor (var i = 0; i < completions.length; i++) {\n\t\t\ttries[completer.name].insert(completions[i]);\n\t\t}\n\t\t// store in localstorage as well\n\t\tvar storageId = utils.getPersistencyId(yasqe, completer.persistent);\n\t\tif (storageId) yutils.storage.set(storageId, completions, \"month\");\n\t};\n\n\tvar initCompleter = function(name, completionInit) {\n\t\tvar completer = completers[name] = new completionInit(yasqe, name);\n\t\tcompleter.name = name;\n\t\tif (completer.bulk) {\n\t\t\tvar storeArrayAsBulk = function(suggestions) {\n\t\t\t\tif (suggestions && suggestions instanceof Array && suggestions.length > 0) {\n\t\t\t\t\tstoreBulkCompletions(completer, suggestions);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (completer.get instanceof Array) {\n\t\t\t\t// we don't care whether the completions are already stored in\n\t\t\t\t// localstorage. just use this one\n\t\t\t\tstoreArrayAsBulk(completer.get);\n\t\t\t} else {\n\t\t\t\t// if completions are defined in localstorage, use those! (calling the\n\t\t\t\t// function may come with overhead (e.g. async calls))\n\t\t\t\tvar completionsFromStorage = null;\n\t\t\t\tvar persistencyIdentifier = utils.getPersistencyId(yasqe, completer.persistent);\n\t\t\t\tif (persistencyIdentifier)\n\t\t\t\t\tcompletionsFromStorage = yutils.storage.get(persistencyIdentifier);\n\t\t\t\tif (completionsFromStorage && completionsFromStorage.length > 0) {\n\t\t\t\t\tstoreArrayAsBulk(completionsFromStorage);\n\t\t\t\t} else {\n\t\t\t\t\t// nothing in storage. check whether we have a function via which we\n\t\t\t\t\t// can get our prefixes\n\t\t\t\t\tif (completer.get instanceof Function) {\n\t\t\t\t\t\tif (completer.async) {\n\t\t\t\t\t\t\tcompleter.get(null, storeArrayAsBulk);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstoreArrayAsBulk(completer.get());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tvar autoComplete = function(fromAutoShow) {\n\t\tif (yasqe.somethingSelected())\n\t\t\treturn;\n\t\tvar tryHintType = function(completer) {\n\t\t\tif (fromAutoShow // from autoShow, i.e. this gets called each time the editor content changes\n\t\t\t\t&& (!completer.autoShow // autoshow for  this particular type of autocompletion is -not- enabled\n\t\t\t\t\t|| (!completer.bulk && completer.async)) // async is enabled (don't want to re-do ajax-like request for every editor change)\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar hintConfig = {\n\t\t\t\tcloseCharacters: /(?=a)b/,\n\t\t\t\tcompleteSingle: false\n\t\t\t};\n\t\t\tif (!completer.bulk && completer.async) {\n\t\t\t\thintConfig.async = true;\n\t\t\t}\n\t\t\tvar wrappedHintCallback = function(yasqe, callback) {\n\t\t\t\treturn getCompletionHintsObject(completer, callback);\n\t\t\t};\n\t\t\tvar result = YASQE.showHint(yasqe, wrappedHintCallback, hintConfig);\n\t\t\treturn true;\n\t\t};\n\t\tfor (var completerName in completers) {\n\t\t\tif ($.inArray(completerName, yasqe.options.autocompleters) == -1) continue; //this completer is disabled\n\t\t\tvar completer = completers[completerName];\n\t\t\tif (!completer.isValidCompletionPosition) continue; //no way to check whether we are in a valid position\n\n\t\t\tif (!completer.isValidCompletionPosition()) {\n\t\t\t\t//if needed, fire callbacks for when we are -not- in valid completion position\n\t\t\t\tif (completer.callbacks && completer.callbacks.invalidPosition) {\n\t\t\t\t\tcompleter.callbacks.invalidPosition(yasqe, completer);\n\t\t\t\t}\n\t\t\t\t//not in a valid position, so continue to next completion candidate type\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// run valid position handler, if there is one (if it returns false, stop the autocompletion!)\n\t\t\tif (completer.callbacks && completer.callbacks.validPosition) {\n\t\t\t\tif (completer.callbacks.validPosition(yasqe, completer) === false)\n\t\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvar success = tryHintType(completer);\n\t\t\tif (success)\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\n\n\tvar getCompletionHintsObject = function(completer, callback) {\n\t\tvar getSuggestionsFromToken = function(partialToken) {\n\t\t\tvar stringToAutocomplete = partialToken.autocompletionString || partialToken.string;\n\t\t\tvar suggestions = [];\n\t\t\tif (tries[completer.name]) {\n\t\t\t\tsuggestions = tries[completer.name].autoComplete(stringToAutocomplete);\n\t\t\t} else if (typeof completer.get == \"function\" && completer.async == false) {\n\t\t\t\tsuggestions = completer.get(stringToAutocomplete);\n\t\t\t} else if (typeof completer.get == \"object\") {\n\t\t\t\tvar partialTokenLength = stringToAutocomplete.length;\n\t\t\t\tfor (var i = 0; i < completer.get.length; i++) {\n\t\t\t\t\tvar completion = completer.get[i];\n\t\t\t\t\tif (completion.slice(0, partialTokenLength) == stringToAutocomplete) {\n\t\t\t\t\t\tsuggestions.push(completion);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn getSuggestionsAsHintObject(suggestions, completer, partialToken);\n\n\t\t};\n\n\n\t\tvar token = yasqe.getCompleteToken();\n\t\tif (completer.preProcessToken) {\n\t\t\ttoken = completer.preProcessToken(token);\n\t\t}\n\n\t\tif (token) {\n\t\t\t// use custom completionhint function, to avoid reaching a loop when the\n\t\t\t// completionhint is the same as the current token\n\t\t\t// regular behaviour would keep changing the codemirror dom, hence\n\t\t\t// constantly calling this callback\n\t\t\tif (!completer.bulk && completer.async) {\n\t\t\t\tvar wrappedCallback = function(suggestions) {\n\t\t\t\t\tcallback(getSuggestionsAsHintObject(suggestions, completer, token));\n\t\t\t\t};\n\t\t\t\tcompleter.get(token, wrappedCallback);\n\t\t\t} else {\n\t\t\t\treturn getSuggestionsFromToken(token);\n\n\t\t\t}\n\t\t}\n\t};\n\n\n\t/**\n\t *  get our array of suggestions (strings) in the codemirror hint format\n\t */\n\tvar getSuggestionsAsHintObject = function(suggestions, completer, token) {\n\t\tvar hintList = [];\n\t\tfor (var i = 0; i < suggestions.length; i++) {\n\t\t\tvar suggestedString = suggestions[i];\n\t\t\tif (completer.postProcessToken) {\n\t\t\t\tsuggestedString = completer.postProcessToken(token, suggestedString);\n\t\t\t}\n\t\t\thintList.push({\n\t\t\t\ttext: suggestedString,\n\t\t\t\tdisplayText: suggestedString,\n\t\t\t\thint: selectHint,\n\t\t\t});\n\t\t}\n\n\t\tvar cur = yasqe.getCursor();\n\t\tvar returnObj = {\n\t\t\tcompletionToken: token.string,\n\t\t\tlist: hintList,\n\t\t\tfrom: {\n\t\t\t\tline: cur.line,\n\t\t\t\tch: token.start\n\t\t\t},\n\t\t\tto: {\n\t\t\t\tline: cur.line,\n\t\t\t\tch: token.end\n\t\t\t}\n\t\t};\n\t\t//if we have some autocompletion handlers specified, add these these to the object. Codemirror will take care of firing these\n\t\tif (completer.callbacks) {\n\t\t\tfor (var callbackName in completer.callbacks) {\n\t\t\t\tif (completer.callbacks[callbackName]) {\n\t\t\t\t\tYASQE.on(returnObj, callbackName, completer.callbacks[callbackName]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn returnObj;\n\t};\n\n\treturn {\n\t\tinit: initCompleter,\n\t\tcompleters: completers,\n\t\tnotifications: {\n\t\t\tgetEl: function(completer) {\n\t\t\t\treturn $(completionNotifications[completer.name]);\n\t\t\t},\n\t\t\tshow: function(yasqe, completer) {\n\t\t\t\t//only draw when the user needs to use a keypress to summon autocompletions\n\t\t\t\tif (!completer.autoshow) {\n\t\t\t\t\tif (!completionNotifications[completer.name]) completionNotifications[completer.name] = $(\"<div class='completionNotification'></div>\");\n\t\t\t\t\tcompletionNotifications[completer.name]\n\t\t\t\t\t\t.show()\n\t\t\t\t\t\t.text(\"Press \" + (navigator.userAgent.indexOf('Mac OS X') != -1 ? \"CMD\" : \"CTRL\") + \" - <spacebar> to autocomplete\")\n\t\t\t\t\t\t.appendTo($(yasqe.getWrapperElement()));\n\t\t\t\t}\n\t\t\t},\n\t\t\thide: function(yasqe, completer) {\n\t\t\t\tif (completionNotifications[completer.name]) {\n\t\t\t\t\tcompletionNotifications[completer.name].hide();\n\t\t\t\t}\n\t\t\t}\n\n\t\t},\n\t\tautoComplete: autoComplete,\n\t\tgetTrie: function(completer) {\n\t\t\treturn (typeof completer == \"string\" ? tries[completer] : tries[completer.name]);\n\t\t}\n\t}\n};\n\n\n\n\n\n\n\n\n\n/**\n * function which fires after the user selects a completion. this function checks whether we actually need to store this one (if completion is same as current token, don't do anything)\n */\nvar selectHint = function(yasqe, data, completion) {\n\tif (completion.text != yasqe.getTokenAt(yasqe.getCursor()).string) {\n\t\tyasqe.replaceRange(completion.text, data.from, data.to);\n\t}\n};\n\n\n\n\n\n//\n//module.exports = {\n//\tpreprocessPrefixTokenForCompletion: preprocessPrefixTokenForCompletion,\n//\tpostprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion,\n//\tpreprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\n//\tshowCompletionNotification: showCompletionNotification,\n//\thideCompletionNotification: hideCompletionNotification,\n//\tautoComplete: autoComplete,\n//\tautocompleteVariables: autocompleteVariables,\n//\tfetchFromPrefixCc: fetchFromPrefixCc,\n//\tfetchFromLov: fetchFromLov,\n////\tstoreBulkCompletions: storeBulkCompletions,\n//\tloadBulkCompletions: loadBulkCompletions,\n//};\n},{\"../../lib/trie.js\":4,\"../main.js\":30,\"../utils.js\":36,\"jquery\":undefined,\"yasgui-utils\":16}],21:[function(require,module,exports){\n'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\nmodule.exports = function(yasqe, name) {\n\treturn {\n\t\tisValidCompletionPosition: function() {\n\t\t\treturn module.exports.isValidCompletionPosition(yasqe);\n\t\t},\n\t\tget: function(token, callback) {\n\t\t\treturn require('./utils').fetchFromLov(yasqe, this, token, callback);\n\t\t},\n\t\tpreProcessToken: function(token) {\n\t\t\treturn module.exports.preProcessToken(yasqe, token)\n\t\t},\n\t\tpostProcessToken: function(token, suggestedString) {\n\t\t\treturn module.exports.postProcessToken(yasqe, token, suggestedString);\n\t\t},\n\t\tasync: true,\n\t\tbulk: false,\n\t\tautoShow: false,\n\t\tpersistent: name,\n\t\tcallbacks: {\n\t\t\tvalidPosition: yasqe.autocompleters.notifications.show,\n\t\t\tinvalidPosition: yasqe.autocompleters.notifications.hide,\n\t\t}\n\t}\n};\n\nmodule.exports.isValidCompletionPosition = function(yasqe) {\n\tvar token = yasqe.getCompleteToken();\n\tif (token.string.indexOf(\"?\") == 0)\n\t\treturn false;\n\tvar cur = yasqe.getCursor();\n\tvar previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\n\tif (previousToken.string == \"a\")\n\t\treturn true;\n\tif (previousToken.string == \"rdf:type\")\n\t\treturn true;\n\tif (previousToken.string == \"rdfs:domain\")\n\t\treturn true;\n\tif (previousToken.string == \"rdfs:range\")\n\t\treturn true;\n\treturn false;\n};\nmodule.exports.preProcessToken = function(yasqe, token) {\n\treturn require('./utils.js').preprocessResourceTokenForCompletion(yasqe, token);\n};\nmodule.exports.postProcessToken = function(yasqe, token, suggestedString) {\n\treturn require('./utils.js').postprocessResourceTokenForCompletion(yasqe, token, suggestedString)\n};\n},{\"./utils\":24,\"./utils.js\":24,\"jquery\":undefined}],22:[function(require,module,exports){\n'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\n//this is a mapping from the class names (generic ones, for compatability with codemirror themes), to what they -actually- represent\nvar tokenTypes = {\n\t\"string-2\": \"prefixed\",\n\t\"atom\": \"var\"\n};\n\nmodule.exports = function(yasqe, completerName) {\n\t//this autocompleter also fires on-change!\n\tyasqe.on(\"change\", function() {\n\t\tmodule.exports.appendPrefixIfNeeded(yasqe, completerName);\n\t});\n\n\n\treturn {\n\t\tisValidCompletionPosition: function() {\n\t\t\treturn module.exports.isValidCompletionPosition(yasqe);\n\t\t},\n\t\tget: function(token, callback) {\n\t\t\t$.get(module.exports.fetchFrom, function(data) {\n\t\t\t\tvar prefixArray = [];\n\t\t\t\tfor (var prefix in data) {\n\t\t\t\t\tif (prefix == \"bif\")\n\t\t\t\t\t\tcontinue; // skip this one! see #231\n\t\t\t\t\tvar completeString = prefix + \": <\" + data[prefix] + \">\";\n\t\t\t\t\tprefixArray.push(completeString); // the array we want to store in localstorage\n\t\t\t\t}\n\n\t\t\t\tprefixArray.sort();\n\t\t\t\tcallback(prefixArray);\n\t\t\t});\n\t\t},\n\t\tpreProcessToken: function(token) {\n\t\t\treturn module.exports.preprocessPrefixTokenForCompletion(yasqe, token)\n\t\t},\n\t\tasync: true,\n\t\tbulk: true,\n\t\tautoShow: true,\n\t\tpersistent: completerName,\n\t\tcallbacks: {\n\t\t\tpick: function() {\n\t\t\t\tyasqe.collapsePrefixes(false);\n\t\t\t}\n\t\t}\n\t};\n};\nmodule.exports.isValidCompletionPosition = function(yasqe) {\n\tvar cur = yasqe.getCursor(),\n\t\ttoken = yasqe.getTokenAt(cur);\n\n\t// not at end of line\n\tif (yasqe.getLine(cur.line).length > cur.ch)\n\t\treturn false;\n\n\tif (token.type != \"ws\") {\n\t\t// we want to complete token, e.g. when the prefix starts with an a\n\t\t// (treated as a token in itself..)\n\t\t// but we to avoid including the PREFIX tag. So when we have just\n\t\t// typed a space after the prefix tag, don't get the complete token\n\t\ttoken = yasqe.getCompleteToken();\n\t}\n\n\t// we shouldnt be at the uri part the prefix declaration\n\t// also check whether current token isnt 'a' (that makes codemirror\n\t// thing a namespace is a possiblecurrent\n\tif (!token.string.indexOf(\"a\") == 0 && $.inArray(\"PNAME_NS\", token.state.possibleCurrent) == -1)\n\t\treturn false;\n\n\t// First token of line needs to be PREFIX,\n\t// there should be no trailing text (otherwise, text is wrongly inserted\n\t// in between)\n\tvar previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\n\tif (!previousToken || previousToken.string.toUpperCase() != \"PREFIX\") return false;\n\treturn true;\n};\nmodule.exports.preprocessPrefixTokenForCompletion = function(yasqe, token) {\n\tvar previousToken = yasqe.getPreviousNonWsToken(yasqe.getCursor().line, token);\n\tif (previousToken && previousToken.string && previousToken.string.slice(-1) == \":\") {\n\t\t//combine both tokens! In this case we have the cursor at the end of line \"PREFIX bla: <\".\n\t\t//we want the token to be \"bla: <\", en not \"<\"\n\t\ttoken = {\n\t\t\tstart: previousToken.start,\n\t\t\tend: token.end,\n\t\t\tstring: previousToken.string + \" \" + token.string,\n\t\t\tstate: token.state\n\t\t};\n\t}\n\treturn token;\n};\n/**\n * Check whether typed prefix is declared. If not, automatically add declaration\n * using list from prefix.cc\n *\n * @param yasqe\n */\nmodule.exports.appendPrefixIfNeeded = function(yasqe, completerName) {\n\tif (!yasqe.autocompleters.getTrie(completerName))\n\t\treturn; // no prefixed defined. just stop\n\tif (!yasqe.options.autocompleters || yasqe.options.autocompleters.indexOf(completerName) == -1) return; //this autocompleter is disabled\n\tvar cur = yasqe.getCursor();\n\n\tvar token = yasqe.getTokenAt(cur);\n\tif (tokenTypes[token.type] == \"prefixed\") {\n\t\tvar colonIndex = token.string.indexOf(\":\");\n\t\tif (colonIndex !== -1) {\n\t\t\t// check previous token isnt PREFIX, or a '<'(which would mean we are in a uri)\n\t\t\t//\t\t\tvar firstTokenString = yasqe.getNextNonWsToken(cur.line).string.toUpperCase();\n\t\t\tvar lastNonWsTokenString = yasqe.getPreviousNonWsToken(cur.line, token).string.toUpperCase();\n\t\t\tvar previousToken = yasqe.getTokenAt({\n\t\t\t\tline: cur.line,\n\t\t\t\tch: token.start\n\t\t\t}); // needs to be null (beginning of line), or whitespace\n\t\t\tif (lastNonWsTokenString != \"PREFIX\" && (previousToken.type == \"ws\" || previousToken.type == null)) {\n\t\t\t\t// check whether it isnt defined already (saves us from looping\n\t\t\t\t// through the array)\n\t\t\t\tvar currentPrefix = token.string.substring(0, colonIndex + 1);\n\t\t\t\tvar queryPrefixes = yasqe.getPrefixesFromQuery();\n\t\t\t\tif (queryPrefixes[currentPrefix.slice(0, -1)] == null) {\n\t\t\t\t\t// ok, so it isnt added yet!\n\t\t\t\t\tvar completions = yasqe.autocompleters.getTrie(completerName).autoComplete(currentPrefix);\n\t\t\t\t\tif (completions.length > 0) {\n\t\t\t\t\t\tyasqe.addPrefixes(completions[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nmodule.exports.fetchFrom = (window.location.protocol.indexOf('http') === 0? '//': 'http://') + 'prefix.cc/popular/all.file.json'\n\n},{\"jquery\":undefined}],23:[function(require,module,exports){\n'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\nmodule.exports = function(yasqe, name) {\n\treturn {\n\t\tisValidCompletionPosition: function() {\n\t\t\treturn module.exports.isValidCompletionPosition(yasqe);\n\t\t},\n\t\tget: function(token, callback) {\n\t\t\treturn require('./utils').fetchFromLov(yasqe, this, token, callback);\n\t\t},\n\t\tpreProcessToken: function(token) {\n\t\t\treturn module.exports.preProcessToken(yasqe, token)\n\t\t},\n\t\tpostProcessToken: function(token, suggestedString) {\n\t\t\treturn module.exports.postProcessToken(yasqe, token, suggestedString);\n\t\t},\n\t\tasync: true,\n\t\tbulk: false,\n\t\tautoShow: false,\n\t\tpersistent: name,\n\t\tcallbacks: {\n\t\t\tvalidPosition: yasqe.autocompleters.notifications.show,\n\t\t\tinvalidPosition: yasqe.autocompleters.notifications.hide,\n\t\t}\n\t}\n};\n\nmodule.exports.isValidCompletionPosition = function(yasqe) {\n\tvar token = yasqe.getCompleteToken();\n\tif (token.string.length == 0)\n\t\treturn false; //we want -something- to autocomplete\n\tif (token.string.indexOf(\"?\") == 0)\n\t\treturn false; // we are typing a var\n\tif ($.inArray(\"a\", token.state.possibleCurrent) >= 0)\n\t\treturn true; // predicate pos\n\tvar cur = yasqe.getCursor();\n\tvar previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\n\tif (previousToken.string == \"rdfs:subPropertyOf\")\n\t\treturn true;\n\n\t// hmm, we would like -better- checks here, e.g. checking whether we are\n\t// in a subject, and whether next item is a rdfs:subpropertyof.\n\t// difficult though... the grammar we use is unreliable when the query\n\t// is invalid (i.e. during typing), and often the predicate is not typed\n\t// yet, when we are busy writing the subject...\n\treturn false;\n};\nmodule.exports.preProcessToken = function(yasqe, token) {\n\treturn require('./utils.js').preprocessResourceTokenForCompletion(yasqe, token);\n};\nmodule.exports.postProcessToken = function(yasqe, token, suggestedString) {\n\treturn require('./utils.js').postprocessResourceTokenForCompletion(yasqe, token, suggestedString)\n};\n},{\"./utils\":24,\"./utils.js\":24,\"jquery\":undefined}],24:[function(require,module,exports){\n'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n\tutils = require('./utils.js'),\n\tyutils = require('yasgui-utils');\n/**\n * Where the base class only contains functionality related to -all- completions, this class contains some utils used here and there in our autocompletions\n */\n\n\n\n/**\n * Converts rdf:type to http://.../type and converts <http://...> to http://...\n * Stores additional info such as the used namespace and prefix in the token object\n */\nvar preprocessResourceTokenForCompletion = function(yasqe, token) {\n\tvar queryPrefixes = yasqe.getPrefixesFromQuery();\n\tif (!token.string.indexOf(\"<\") == 0) {\n\t\ttoken.tokenPrefix = token.string.substring(0, token.string.indexOf(\":\") + 1);\n\n\t\tif (queryPrefixes[token.tokenPrefix.slice(0, -1)] != null) {\n\t\t\ttoken.tokenPrefixUri = queryPrefixes[token.tokenPrefix.slice(0, -1)];\n\t\t}\n\t}\n\n\ttoken.autocompletionString = token.string.trim();\n\tif (!token.string.indexOf(\"<\") == 0 && token.string.indexOf(\":\") > -1) {\n\t\t// hmm, the token is prefixed. We still need the complete uri for autocompletions. generate this!\n\t\tfor (var prefix in queryPrefixes) {\n\t\t\tif (token.string.indexOf(prefix) == 0) {\n\t\t\t\ttoken.autocompletionString = queryPrefixes[prefix];\n\t\t\t\ttoken.autocompletionString += token.string.substring(prefix.length + 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (token.autocompletionString.indexOf(\"<\") == 0) token.autocompletionString = token.autocompletionString.substring(1);\n\tif (token.autocompletionString.indexOf(\">\", token.length - 1) !== -1) token.autocompletionString = token.autocompletionString.substring(0, token.autocompletionString.length - 1);\n\treturn token;\n};\n\nvar postprocessResourceTokenForCompletion = function(yasqe, token, suggestedString) {\n\tif (token.tokenPrefix && token.autocompletionString && token.tokenPrefixUri) {\n\t\t// we need to get the suggested string back to prefixed form\n\t\tsuggestedString = token.tokenPrefix + suggestedString.substring(token.tokenPrefixUri.length);\n\t} else {\n\t\t// it is a regular uri. add '<' and '>' to string\n\t\tsuggestedString = \"<\" + suggestedString + \">\";\n\t}\n\treturn suggestedString;\n};\n\n//Use protocol relative request when served via http[s]*. Otherwise (e.g. file://, fetch via http)\nvar reqProtocol = (window.location.protocol.indexOf('http') === 0? '//': 'http://')\nvar fetchFromLov = function(yasqe, completer, token, callback) {\n\tif (!token || !token.string || token.string.trim().length == 0) {\n\t\tyasqe.autocompleters.notifications.getEl(completer)\n\t\t\t.empty()\n\t\t\t.append(\"Nothing to autocomplete yet!\");\n\t\treturn false;\n\t}\n\tvar maxResults = 50;\n\n\tvar args = {\n\t\tq: token.autocompletionString,\n\t\tpage: 1\n\t};\n\tif (completer.name == \"classes\") {\n\t\targs.type = \"class\";\n\t} else {\n\t\targs.type = \"property\";\n\t}\n\tvar results = [];\n\tvar url = \"\";\n\tvar updateUrl = function() {\n\t\turl = reqProtocol + \"lov.okfn.org/dataset/lov/api/v2/autocomplete/terms?\" + $.param(args);\n\t};\n\tupdateUrl();\n\tvar increasePage = function() {\n\t\targs.page++;\n\t\tupdateUrl();\n\t};\n\tvar doRequests = function() {\n\t\t$.get(\n\t\t\turl,\n\t\t\tfunction(data) {\n\t\t\t\tfor (var i = 0; i < data.results.length; i++) {\n\t\t\t\t\tif ($.isArray(data.results[i].uri) && data.results[i].uri.length > 0) {\n\t\t\t\t\t\tresults.push(data.results[i].uri[0]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresults.push(data.results[i].uri);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tif (results.length < data.total_results && results.length < maxResults) {\n\t\t\t\t\tincreasePage();\n\t\t\t\t\tdoRequests();\n\t\t\t\t} else {\n\t\t\t\t\t//if notification bar is there, show feedback, or close\n\t\t\t\t\tif (results.length > 0) {\n\t\t\t\t\t\tyasqe.autocompleters.notifications.hide(yasqe, completer)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tyasqe.autocompleters.notifications.getEl(completer).text(\"0 matches found...\");\n\t\t\t\t\t}\n\t\t\t\t\tcallback(results);\n\t\t\t\t\t// requests done! Don't call this function again\n\t\t\t\t}\n\t\t\t}).fail(function(jqXHR, textStatus, errorThrown) {\n\t\t\tyasqe.autocompleters.notifications.getEl(completer)\n\t\t\t\t.empty()\n\t\t\t\t.append(\"Failed fetching suggestions..\");\n\n\t\t});\n\t};\n\t//if notification bar is there, show a loader\n\tyasqe.autocompleters.notifications.getEl(completer)\n\t\t.empty()\n\t\t.append($(\"<span>Fetchting autocompletions &nbsp;</span>\"))\n\t\t.append($(yutils.svg.getElement(require('../imgs.js').loader)).addClass(\"notificationLoader\"));\n\tdoRequests();\n};\n\n\n\nmodule.exports = {\n\tfetchFromLov: fetchFromLov,\n\tpreprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\n\tpostprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion,\n};\n\n},{\"../imgs.js\":29,\"./utils.js\":24,\"jquery\":undefined,\"yasgui-utils\":16}],25:[function(require,module,exports){\n'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\nmodule.exports = function(yasqe) {\n\treturn {\n\t\tisValidCompletionPosition: function() {\n\t\t\tvar token = yasqe.getTokenAt(yasqe.getCursor());\n\t\t\tif (token.type != \"ws\") {\n\t\t\t\ttoken = yasqe.getCompleteToken(token);\n\t\t\t\tif (token && token.string.indexOf(\"?\") == 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tget: function(token) {\n\t\t\tif (token.trim().length == 0) return []; //nothing to autocomplete\n\t\t\tvar distinctVars = {};\n\t\t\t//do this outside of codemirror. I expect jquery to be faster here (just finding dom elements with classnames)\n\t\t\t$(yasqe.getWrapperElement()).find(\".cm-atom\").each(function() {\n\t\t\t\tvar variable = this.innerHTML;\n\t\t\t\tif (variable.indexOf(\"?\") == 0) {\n\t\t\t\t\t//ok, lets check if the next element in the div is an atom as well. In that case, they belong together (may happen sometimes when query is not syntactically valid)\n\t\t\t\t\tvar nextEl = $(this).next();\n\t\t\t\t\tvar nextElClass = nextEl.attr('class');\n\t\t\t\t\tif (nextElClass && nextEl.attr('class').indexOf(\"cm-atom\") >= 0) {\n\t\t\t\t\t\tvariable += nextEl.text();\n\t\t\t\t\t}\n\n\t\t\t\t\t//skip single questionmarks\n\t\t\t\t\tif (variable.length <= 1) return;\n\n\t\t\t\t\t//it should match our token ofcourse\n\t\t\t\t\tif (variable.indexOf(token) !== 0) return;\n\n\t\t\t\t\t//skip exact matches\n\t\t\t\t\tif (variable == token) return;\n\n\t\t\t\t\t//store in map so we have a unique list \n\t\t\t\t\tdistinctVars[variable] = true;\n\n\n\t\t\t\t}\n\t\t\t});\n\t\t\tvar variables = [];\n\t\t\tfor (var variable in distinctVars) {\n\t\t\t\tvariables.push(variable);\n\t\t\t}\n\t\t\tvariables.sort();\n\t\t\treturn variables;\n\t\t},\n\t\tasync: false,\n\t\tbulk: false,\n\t\tautoShow: true,\n\t}\n};\n},{\"jquery\":undefined}],26:[function(require,module,exports){\nvar sparql = require('./sparql.js'),\n    $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\nvar quote = function(string) {\n  return \"'\" + string + \"'\";\n}\nmodule.exports = {\n  createCurlString : function(yasqe, config) {\n    var ajaxConfig = sparql.getAjaxConfig(yasqe, config);\n    var url = ajaxConfig.url;\n    if (ajaxConfig.url.indexOf('http') !== 0) {\n      //this is either a relative or absolute url, which is not supported by CURL.\n      //Add domain, schema, etc etc\n      var url = window.location.protocol + '//' + window.location.host;\n      if (ajaxConfig.url.indexOf('/') === 0) {\n        //its an absolute path\n        url += ajaxConfig.url;\n      } else {\n        //relative, so append current location to url first\n        url += window.location.pathname + ajaxConfig.url;\n      }\n    }\n    var cmds = [\n      'curl', url,\n      '-X', yasqe.options.sparql.requestMethod\n    ];\n    if (yasqe.options.sparql.requestMethod == 'POST') {\n      cmds.push('--data ' + quote($.param(ajaxConfig.data)));\n    }\n    for (var header in ajaxConfig.headers) {\n      cmds.push('-H ' + quote(header + ': ' + ajaxConfig.headers[header]));\n    }\n    return cmds.join(' ');\n  }\n}\n\n},{\"./sparql.js\":33,\"jquery\":undefined}],27:[function(require,module,exports){\n/**\n * The default options of YASQE (check the CodeMirror documentation for even\n * more options, such as disabling line numbers, or changing keyboard shortcut\n * keys). Either change the default options by setting YASQE.defaults, or by\n * passing your own options as second argument to the YASQE constructor\n */\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n\tYASQE = require('./main.js');\nYASQE.defaults = $.extend(true, {}, YASQE.defaults, {\n\tmode: \"sparql11\",\n\t/**\n\t * Query string\n\t */\n\tvalue: \"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nSELECT * WHERE {\\n  ?sub ?pred ?obj .\\n} \\nLIMIT 10\",\n\thighlightSelectionMatches: {\n\t\tshowToken: /\\w/\n\t},\n\ttabMode: \"indent\",\n\tlineNumbers: true,\n\tlineWrapping: true,\n\tbackdrop: false,\n\tfoldGutter: {\n\t\trangeFinder: new YASQE.fold.combine(YASQE.fold.brace, YASQE.fold.prefix)\n\t},\n\tcollapsePrefixesOnLoad: false,\n\tgutters: [\"gutterErrorBar\", \"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\n\tmatchBrackets: true,\n\tfixedGutter: true,\n\tsyntaxErrorCheck: true,\n\t/**\n\t * Extra shortcut keys. Check the CodeMirror manual on how to add your own\n\t *\n\t * @property extraKeys\n\t * @type object\n\t */\n\textraKeys: {\n\t\t//\t\t\t\t\t\"Ctrl-Space\" : function(yasqe) {\n\t\t//\t\t\t\t\t\tYASQE.autoComplete(yasqe);\n\t\t//\t\t\t\t\t},\n\t\t\"Ctrl-Space\": YASQE.autoComplete,\n\n\t\t\"Cmd-Space\": YASQE.autoComplete,\n\t\t\"Ctrl-D\": YASQE.deleteLine,\n\t\t\"Ctrl-K\": YASQE.deleteLine,\n\t\t\"Cmd-D\": YASQE.deleteLine,\n\t\t\"Cmd-K\": YASQE.deleteLine,\n\t\t\"Ctrl-/\": YASQE.commentLines,\n\t\t\"Cmd-/\": YASQE.commentLines,\n\t\t\"Ctrl-Alt-Down\": YASQE.copyLineDown,\n\t\t\"Ctrl-Alt-Up\": YASQE.copyLineUp,\n\t\t\"Cmd-Alt-Down\": YASQE.copyLineDown,\n\t\t\"Cmd-Alt-Up\": YASQE.copyLineUp,\n\t\t\"Shift-Ctrl-F\": YASQE.doAutoFormat,\n\t\t\"Shift-Cmd-F\": YASQE.doAutoFormat,\n\t\t\"Ctrl-]\": YASQE.indentMore,\n\t\t\"Cmd-]\": YASQE.indentMore,\n\t\t\"Ctrl-[\": YASQE.indentLess,\n\t\t\"Cmd-[\": YASQE.indentLess,\n\t\t\"Ctrl-S\": YASQE.storeQuery,\n\t\t\"Cmd-S\": YASQE.storeQuery,\n\t\t\"Ctrl-Enter\": YASQE.executeQuery,\n\t\t\"Cmd-Enter\": YASQE.executeQuery,\n\t\t\"F11\": function(yasqe) {\n\t\t\tyasqe.setOption(\"fullScreen\", !yasqe.getOption(\"fullScreen\"));\n\t\t},\n\t\t\"Esc\": function(yasqe) {\n\t\t\tif (yasqe.getOption(\"fullScreen\")) yasqe.setOption(\"fullScreen\", false);\n\t\t}\n\t},\n\tcursorHeight: 0.9,\n\n\n\t/**\n\t * Show a button with which users can create a link to this query. Set this value to null to disable this functionality.\n\t * By default, this feature is enabled, and the only the query value is appended to the link.\n\t * ps. This function should return an object which is parseable by jQuery.param (http://api.jquery.com/jQuery.param/)\n\t */\n\tcreateShareLink: YASQE.createShareLink,\n\n\tcreateShortLink: null,\n\n\t/**\n\t * Consume links shared by others, by checking the url for arguments coming from a query link. Defaults by only checking the 'query=' argument in the url\n\t */\n\tconsumeShareLink: YASQE.consumeShareLink,\n\n\n\n\n\t/**\n\t * Change persistency settings for the YASQE query value. Setting the values\n\t * to null, will disable persistancy: nothing is stored between browser\n\t * sessions Setting the values to a string (or a function which returns a\n\t * string), will store the query in localstorage using the specified string.\n\t * By default, the ID is dynamically generated using the closest dom ID, to avoid collissions when using multiple YASQE items on one\n\t * page\n\t *\n\t * @type function|string\n\t */\n\tpersistent: function(yasqe) {\n\t\treturn \"yasqe_\" + $(yasqe.getWrapperElement()).closest('[id]').attr('id') + \"_queryVal\";\n\t},\n\n\n\t/**\n\t * Settings for querying sparql endpoints\n\t */\n\tsparql: {\n\t\tqueryName: function(yasqe) {return yasqe.getQueryMode()},\n\t\tshowQueryButton: false,\n\n\t\t/**f\n\t\t * Endpoint to query\n\t\t *\n\t\t * @property sparql.endpoint\n\t\t * @type String|function\n\t\t */\n\t\tendpoint: \"http://dbpedia.org/sparql\",\n\t\t/**\n\t\t * Request method via which to access SPARQL endpoint\n\t\t *\n\t\t * @property sparql.requestMethod\n\t\t * @type String|function\n\t\t */\n\t\trequestMethod: \"POST\",\n\n\t\t/**\n\t\t * @type String|function\n\t\t */\n\t\tacceptHeaderGraph: \"text/turtle,*/*;q=0.9\",\n\t\t/**\n\t\t * @type String|function\n\t\t */\n\t\tacceptHeaderSelect: \"application/sparql-results+json,*/*;q=0.9\",\n\t\t/**\n\t\t * @type String|function\n\t\t */\n\t\tacceptHeaderUpdate: \"text/plain,*/*;q=0.9\",\n\n\t\t/**\n\t\t * Named graphs to query.\n\t\t */\n\t\tnamedGraphs: [],\n\t\t/**\n\t\t * Default graphs to query.\n\t\t */\n\t\tdefaultGraphs: [],\n\n\t\t/**\n\t\t * Additional request arguments. Add them in the form: {name: \"name\", value: \"value\"}\n\t\t */\n\t\targs: [],\n\n\t\t/**\n\t\t * Additional request headers\n\t\t */\n\t\theaders: {},\n\n\t\tgetQueryForAjax: null,\n\t\t/**\n\t\t * Set of ajax callbacks\n\t\t */\n\t\tcallbacks: {\n\t\t\tbeforeSend: null,\n\t\t\tcomplete: null,\n\t\t\terror: null,\n\t\t\tsuccess: null\n\t\t},\n\t\thandlers: {} //keep here for backwards compatability\n\t},\n});\n\n},{\"./main.js\":30,\"jquery\":undefined}],28:[function(require,module,exports){\n//this is the entry-point for browserify.\n//the current browserify version does not support require-ing js files which are used as entry-point\n//this way, we can still require our main.js file\nmodule.exports = require('./main.js');\n},{\"./main.js\":30}],29:[function(require,module,exports){\n'use strict';\nmodule.exports = {\n\tquery: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 80 80\" enable-background=\"new 0 0 80 80\" xml:space=\"preserve\"><g ></g><g >\t<path d=\"M64.622,2.411H14.995c-6.627,0-12,5.373-12,12v49.897c0,6.627,5.373,12,12,12h49.627c6.627,0,12-5.373,12-12V14.411   C76.622,7.783,71.249,2.411,64.622,2.411z M24.125,63.906V15.093L61,39.168L24.125,63.906z\"/></g></svg>',\n\tqueryInvalid: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"0 0 73.627 73.897\"   enable-background=\"new 0 0 80 80\"   xml:space=\"preserve\"      inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"warning.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"1855\"     inkscape:window-height=\"1056\"          showgrid=\"false\"     inkscape:zoom=\"3.1936344\"     inkscape:cx=\"36.8135\"     inkscape:cy=\"36.9485\"     inkscape:window-x=\"2625\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"1\"     inkscape:current-layer=\"svg2\" /><g     transform=\"translate(-2.995,-2.411)\"      /><g     transform=\"translate(-2.995,-2.411)\"     ><path       d=\"M 64.622,2.411 H 14.995 c -6.627,0 -12,5.373 -12,12 v 49.897 c 0,6.627 5.373,12 12,12 h 49.627 c 6.627,0 12,-5.373 12,-12 V 14.411 c 0,-6.628 -5.373,-12 -12,-12 z M 24.125,63.906 V 15.093 L 61,39.168 24.125,63.906 z\"       inkscape:connector-curvature=\"0\"        /></g><path     d=\"M 66.129381,65.903784 H 49.769875 c -1.64721,0 -2.889385,-0.581146 -3.498678,-1.63595 -0.609293,-1.055608 -0.491079,-2.422161 0.332391,-3.848223 l 8.179753,-14.167069 c 0.822934,-1.42633 1.9477,-2.211737 3.166018,-2.211737 1.218319,0 2.343086,0.785407 3.166019,2.211737 l 8.179751,14.167069 c 0.823472,1.426062 0.941686,2.792615 0.33239,3.848223 -0.609023,1.054804 -1.851197,1.63595 -3.498138,1.63595 z M 59.618815,60.91766 c 0,-0.850276 -0.68944,-1.539719 -1.539717,-1.539719 -0.850276,0 -1.539718,0.689443 -1.539718,1.539719 0,0.850277 0.689442,1.539718 1.539718,1.539718 0.850277,0 1.539717,-0.689441 1.539717,-1.539718 z m 0.04155,-9.265919 c 0,-0.873061 -0.707939,-1.580998 -1.580999,-1.580998 -0.873061,0 -1.580999,0.707937 -1.580999,1.580998 l 0.373403,5.610965 h 0.0051 c 0.05415,0.619747 0.568548,1.10761 1.202504,1.10761 0.586239,0 1.075443,-0.415756 1.188563,-0.968489 0.0092,-0.04476 0.0099,-0.09248 0.01392,-0.138854 h 0.01072 l 0.367776,-5.611232 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#aa8800\" /></svg>',\n\tdownload: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" baseProfile=\"tiny\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" xml:space=\"preserve\"><g ></g><g >\t<path fill-rule=\"evenodd\" fill=\"#000000\" d=\"M88,84v-2c0-2.961-0.859-4-4-4H16c-2.961,0-4,0.98-4,4v2c0,3.102,1.039,4,4,4h68   C87.02,88,88,87.039,88,84z M58,12H42c-5,0-6,0.941-6,6v22H16l34,34l34-34H64V18C64,12.941,62.939,12,58,12z\"/></g></svg>',\n\tshare: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"  x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" style=\"enable-background:new 0 0 100 100;\" xml:space=\"preserve\"><path d=\"M36.764,50c0,0.308-0.07,0.598-0.088,0.905l32.247,16.119c2.76-2.338,6.293-3.797,10.195-3.797  C87.89,63.228,95,70.338,95,79.109C95,87.89,87.89,95,79.118,95c-8.78,0-15.882-7.11-15.882-15.891c0-0.316,0.07-0.598,0.088-0.905  L31.077,62.085c-2.769,2.329-6.293,3.788-10.195,3.788C12.11,65.873,5,58.771,5,50c0-8.78,7.11-15.891,15.882-15.891  c3.902,0,7.427,1.468,10.195,3.797l32.247-16.119c-0.018-0.308-0.088-0.598-0.088-0.914C63.236,12.11,70.338,5,79.118,5  C87.89,5,95,12.11,95,20.873c0,8.78-7.11,15.891-15.882,15.891c-3.911,0-7.436-1.468-10.195-3.806L36.676,49.086  C36.693,49.394,36.764,49.684,36.764,50z\"/></svg>',\n\twarning: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   x=\"0px\"   y=\"0px\"   viewBox=\"0 0 66.399998 66.399998\"   enable-background=\"new 0 0 69.3 69.3\"   xml:space=\"preserve\"   height=\"100%\"   width=\"100%\"   inkscape:version=\"0.48.4 r9939\"   ><g      transform=\"translate(-1.5,-1.5)\"     style=\"fill:#ff0000\"><path       d=\"M 34.7,1.5 C 16.4,1.5 1.5,16.4 1.5,34.7 1.5,53 16.4,67.9 34.7,67.9 53,67.9 67.9,53 67.9,34.7 67.9,16.4 53,1.5 34.7,1.5 z m 0,59.4 C 20.2,60.9 8.5,49.1 8.5,34.7 8.5,20.2 20.3,8.5 34.7,8.5 c 14.4,0 26.2,11.8 26.2,26.2 0,14.4 -11.8,26.2 -26.2,26.2 z\"      inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /><path       d=\"m 34.6,47.1 c -1.4,0 -2.5,0.5 -3.5,1.5 -0.9,1 -1.4,2.2 -1.4,3.6 0,1.6 0.5,2.8 1.5,3.8 1,0.9 2.1,1.3 3.4,1.3 1.3,0 2.4,-0.5 3.4,-1.4 1,-0.9 1.5,-2.2 1.5,-3.7 0,-1.4 -0.5,-2.6 -1.4,-3.6 -0.9,-1 -2.1,-1.5 -3.5,-1.5 z\"       inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /><path       d=\"m 34.8,13.9 c -1.5,0 -2.8,0.5 -3.7,1.6 -0.9,1 -1.4,2.4 -1.4,4.2 0,1.1 0.1,2.9 0.2,5.6 l 0.8,13.1 c 0.2,1.8 0.4,3.2 0.9,4.1 0.5,1.2 1.5,1.8 2.9,1.8 1.3,0 2.3,-0.7 2.9,-1.9 0.5,-1 0.7,-2.3 0.9,-4 L 39.4,25 c 0.1,-1.3 0.2,-2.5 0.2,-3.8 0,-2.2 -0.3,-3.9 -0.8,-5.1 -0.5,-1 -1.6,-2.2 -4,-2.2 z\"       inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /></g></svg>',\n\tfullscreen: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"      x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"5 -10 74.074074 100\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"   inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"noun_2186_cc.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"640\"     inkscape:window-height=\"480\"          showgrid=\"false\"     fit-margin-top=\"0\"     fit-margin-left=\"0\"     fit-margin-right=\"0\"     fit-margin-bottom=\"0\"     inkscape:zoom=\"2.36\"     inkscape:cx=\"44.101509\"     inkscape:cy=\"31.481481\"     inkscape:window-x=\"65\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"0\"     inkscape:current-layer=\"Layer_1\" /><path     d=\"m -7.962963,-10 v 38.889 l 16.667,-16.667 16.667,16.667 5.555,-5.555 -16.667,-16.667 16.667,-16.667 h -38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 92.037037,-10 v 38.889 l -16.667,-16.667 -16.666,16.667 -5.556,-5.555 16.666,-16.667 -16.666,-16.667 h 38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"M -7.962963,90 V 51.111 l 16.667,16.666 16.667,-16.666 5.555,5.556 -16.667,16.666 16.667,16.667 h -38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"M 92.037037,90 V 51.111 l -16.667,16.666 -16.666,-16.666 -5.556,5.556 16.666,16.666 -16.666,16.667 h 38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /></svg>',\n\tsmallscreen: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"      x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"5 -10 74.074074 100\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"   inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"noun_2186_cc.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"1855\"     inkscape:window-height=\"1056\"          showgrid=\"false\"     fit-margin-top=\"0\"     fit-margin-left=\"0\"     fit-margin-right=\"0\"     fit-margin-bottom=\"0\"     inkscape:zoom=\"2.36\"     inkscape:cx=\"44.101509\"     inkscape:cy=\"31.481481\"     inkscape:window-x=\"65\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"1\"     inkscape:current-layer=\"Layer_1\" /><path     d=\"m 30.926037,28.889 0,-38.889 -16.667,16.667 -16.667,-16.667 -5.555,5.555 16.667,16.667 -16.667,16.667 38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 53.148037,28.889 0,-38.889 16.667,16.667 16.666,-16.667 5.556,5.555 -16.666,16.667 16.666,16.667 -38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 30.926037,51.111 0,38.889 -16.667,-16.666 -16.667,16.666 -5.555,-5.556 16.667,-16.666 -16.667,-16.667 38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 53.148037,51.111 0,38.889 16.667,-16.666 16.666,16.666 5.556,-5.556 -16.666,-16.666 16.666,-16.667 -38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /></svg>',\n};\n\n},{}],30:[function(require,module,exports){\n'use strict';\n//make sure any console statements\nwindow.console = window.console || {\n\t\"log\": function() {}\n};\n\n/**\n * Load libraries\n */\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n\tCodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(),\n\tutils = require('./utils.js'),\n\tyutils = require('yasgui-utils'),\n\timgs = require('./imgs.js');\n\nrequire(\"../lib/deparam.js\");\nrequire('codemirror/addon/fold/foldcode.js');\nrequire('codemirror/addon/fold/foldgutter.js');\nrequire('codemirror/addon/fold/xml-fold.js');\nrequire('codemirror/addon/fold/brace-fold.js');\nrequire('./prefixFold.js');\nrequire('codemirror/addon/hint/show-hint.js');\nrequire('codemirror/addon/search/searchcursor.js');\nrequire('codemirror/addon/edit/matchbrackets.js');\nrequire('codemirror/addon/runmode/runmode.js');\nrequire('codemirror/addon/display/fullscreen.js');\nrequire('../lib/grammar/tokenizer.js');\n\n\n\n/**\n * Main YASQE constructor. Pass a DOM element as argument to append the editor to, and (optionally) pass along config settings (see the YASQE.defaults object below, as well as the regular CodeMirror documentation, for more information on configurability)\n *\n * @constructor\n * @param {DOM-Element} parent element to append editor to.\n * @param {object} settings\n * @class YASQE\n * @return {doc} YASQE document\n */\nvar root = module.exports = function(parent, config) {\n\tvar rootEl = $(\"<div>\", {\n\t\tclass: 'yasqe'\n\t}).appendTo($(parent));\n\tconfig = extendConfig(config);\n\tvar yasqe = extendCmInstance(CodeMirror(rootEl[0], config));\n\tpostProcessCmElement(yasqe);\n\treturn yasqe;\n};\n\n/**\n * Extend config object, which we will pass on to the CM constructor later on.\n * Need this, to make sure our own 'onBlur' etc events do not get overwritten by\n * people who add their own onblur events to the config Additionally, need this\n * to include the CM defaults ourselves. CodeMirror has a method for including\n * defaults, but we can't rely on that one: it assumes flat config object, where\n * we have nested objects (e.g. the persistency option)\n *\n * @private\n */\nvar extendConfig = function(config) {\n\tvar extendedConfig = $.extend(true, {}, root.defaults, config);\n\n\t// I know, codemirror deals with  default options as well.\n\t//However, it does not do this recursively (i.e. the persistency option)\n\n\n\treturn extendedConfig;\n};\n/**\n * Add extra functions to the CM document (i.e. the codemirror instantiated\n * object)\n *\n * @private\n */\nvar extendCmInstance = function(yasqe) {\n\t//instantiate autocompleters\n\tyasqe.autocompleters = require('./autocompleters/autocompleterBase.js')(root, yasqe);\n\tif (yasqe.options.autocompleters) {\n\t\tyasqe.options.autocompleters.forEach(function(name) {\n\t\t\tif (root.Autocompleters[name]) yasqe.autocompleters.init(name, root.Autocompleters[name]);\n\t\t})\n\t}\n\tyasqe.lastQueryDuration = null;\n\tyasqe.getCompleteToken = function(token, cur) {\n\t\treturn require('./tokenUtils.js').getCompleteToken(yasqe, token, cur);\n\t};\n\tyasqe.getPreviousNonWsToken = function(line, token) {\n\t\treturn require('./tokenUtils.js').getPreviousNonWsToken(yasqe, line, token);\n\t};\n\tyasqe.getNextNonWsToken = function(lineNumber, charNumber) {\n\t\treturn require('./tokenUtils.js').getNextNonWsToken(yasqe, lineNumber, charNumber);\n\t};\n\tyasqe.collapsePrefixes = function(collapse) {\n\t\tif (collapse === undefined) collapse = true;\n\t\tyasqe.foldCode(require('./prefixFold.js').findFirstPrefixLine(yasqe), root.fold.prefix, (collapse ? \"fold\" : \"unfold\"));\n\t};\n\tvar backdrop = null;\n\tvar animateSpeed = null;\n\tyasqe.setBackdrop = function(show) {\n\n\n\t\tif (yasqe.options.backdrop || yasqe.options.backdrop === 0 || yasqe.options.backdrop === '0') {\n\t\t\tif (animateSpeed === null) {\n\t\t\t\tanimateSpeed = +yasqe.options.backdrop;\n\t\t\t\tif (animateSpeed === 1) {\n\t\t\t\t\t//ah, yasqe.options.backdrop was 'true'. Set this to default animate speed 400\n\t\t\t\t\tanimateSpeed = 400;\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tif (!backdrop) {\n\t\t\t\tbackdrop = $('<div>', {\n\t\t\t\t\t\tclass: 'backdrop'\n\t\t\t\t\t})\n\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t$(this).hide();\n\t\t\t\t\t})\n\t\t\t\t\t.insertAfter($(yasqe.getWrapperElement()));\n\t\t\t}\n\t\t\tif (show) {\n\t\t\t\tbackdrop.show(animateSpeed);\n\t\t\t} else {\n\t\t\t\tbackdrop.hide(animateSpeed);\n\t\t\t}\n\t\t}\n\t};\n\t/**\n\t * Execute query. Pass a callback function, or a configuration object (see\n\t * default settings below for possible values) I.e., you can change the\n\t * query configuration by either changing the default settings, changing the\n\t * settings of this document, or by passing query settings to this function\n\t *\n\t * @method doc.query\n\t * @param function|object\n\t */\n\tyasqe.query = function(callbackOrConfig) {\n\t\troot.executeQuery(yasqe, callbackOrConfig);\n\t};\n\n\tyasqe.getUrlArguments = function(config) {\n\t\treturn root.getUrlArguments(yasqe, config);\n\t};\n\n\t/**\n\t * Fetch defined prefixes from query string\n\t *\n\t * @method doc.getPrefixesFromQuery\n\t * @return object\n\t */\n\tyasqe.getPrefixesFromQuery = function() {\n\t\treturn require('./prefixUtils.js').getPrefixesFromQuery(yasqe);\n\t};\n\n\tyasqe.addPrefixes = function(prefixes) {\n\t\treturn require('./prefixUtils.js').addPrefixes(yasqe, prefixes);\n\t};\n\tyasqe.removePrefixes = function(prefixes) {\n\t\treturn require('./prefixUtils.js').removePrefixes(yasqe, prefixes);\n\t};\n\n\tyasqe.getValueWithoutComments = function() {\n\t\tvar cleanedQuery = \"\";\n\t\troot.runMode(yasqe.getValue(), \"sparql11\", function(stringVal, className) {\n\t\t\tif (className != \"comment\") {\n\t\t\t\tcleanedQuery += stringVal;\n\t\t\t}\n\t\t});\n\t\treturn cleanedQuery;\n\t};\n\t/**\n\t * Fetch the query type (e.g., SELECT||DESCRIBE||INSERT||DELETE||ASK||CONSTRUCT)\n\t *\n\t * @method doc.getQueryType\n\t * @return string\n\t *\n\t */\n\tyasqe.getQueryType = function() {\n\t\treturn yasqe.queryType;\n\t};\n\t/**\n\t * Fetch the query mode: 'query' or 'update'\n\t *\n\t * @method doc.getQueryMode\n\t * @return string\n\t *\n\t */\n\tyasqe.getQueryMode = function() {\n\t\tvar type = yasqe.getQueryType();\n\t\tif (type == \"INSERT\" || type == \"DELETE\" || type == \"LOAD\" || type == \"CLEAR\" || type == \"CREATE\" || type == \"DROP\" || type == \"COPY\" || type == \"MOVE\" || type == \"ADD\") {\n\t\t\treturn \"update\";\n\t\t} else {\n\t\t\treturn \"query\";\n\t\t}\n\n\t};\n\n\tyasqe.setCheckSyntaxErrors = function(isEnabled) {\n\t\tyasqe.options.syntaxErrorCheck = isEnabled;\n\t\tcheckSyntax(yasqe);\n\t};\n\n\tyasqe.enableCompleter = function(name) {\n\t\taddCompleterToSettings(yasqe.options, name);\n\t\tif (root.Autocompleters[name]) yasqe.autocompleters.init(name, root.Autocompleters[name]);\n\t};\n\tyasqe.disableCompleter = function(name) {\n\t\tremoveCompleterFromSettings(yasqe.options, name);\n\t};\n\treturn yasqe;\n};\n\nvar addCompleterToSettings = function(settings, name) {\n\tif (!settings.autocompleters) settings.autocompleters = [];\n\tsettings.autocompleters.push(name);\n};\nvar removeCompleterFromSettings = function(settings, name) {\n\tif (typeof settings.autocompleters == \"object\") {\n\t\tvar index = $.inArray(name, settings.autocompleters);\n\t\tif (index >= 0) {\n\t\t\tsettings.autocompleters.splice(index, 1);\n\t\t\tremoveCompleterFromSettings(settings, name); //just in case. suppose 1 completer is listed twice\n\t\t}\n\t}\n};\nvar postProcessCmElement = function(yasqe) {\n\t/**\n\t * Set doc value\n\t */\n\tvar storageId = utils.getPersistencyId(yasqe, yasqe.options.persistent);\n\tif (storageId) {\n\t\tvar valueFromStorage = yutils.storage.get(storageId);\n\t\tif (valueFromStorage)\n\t\t\tyasqe.setValue(valueFromStorage);\n\t}\n\n\troot.drawButtons(yasqe);\n\n\t/**\n\t * Add event handlers\n\t */\n\tyasqe.on('blur', function(yasqe, eventInfo) {\n\t\troot.storeQuery(yasqe);\n\t});\n\tyasqe.on('change', function(yasqe, eventInfo) {\n\t\tcheckSyntax(yasqe);\n\t\troot.updateQueryButton(yasqe);\n\t\troot.positionButtons(yasqe);\n\t});\n\tyasqe.on('changes', function() {\n\t\t//e.g. on paste\n\t\tcheckSyntax(yasqe);\n\t\troot.updateQueryButton(yasqe);\n\t\troot.positionButtons(yasqe);\n\t});\n\n\tyasqe.on('cursorActivity', function(yasqe, eventInfo) {\n\t\tupdateButtonsTransparency(yasqe);\n\t});\n\tyasqe.prevQueryValid = false;\n\tcheckSyntax(yasqe); // on first load, check as well (our stored or default query might be incorrect)\n\troot.positionButtons(yasqe);\n\n\t$(yasqe.getWrapperElement()).on('mouseenter', '.cm-atom', function() {\n\t\tvar matchText = $(this).text();\n\t\t$(yasqe.getWrapperElement()).find('.cm-atom').filter(function() {\n\t\t\treturn $(this).text() === matchText;\n\t\t}).addClass('matchingVar');\n\t}).on('mouseleave', '.cm-atom', function() {\n\t\t$(yasqe.getWrapperElement()).find('.matchingVar').removeClass('matchingVar');\n\t});\n\t/**\n\t * check url args and modify yasqe settings if needed\n\t */\n\tif (yasqe.options.consumeShareLink) {\n\t\tyasqe.options.consumeShareLink(yasqe, getUrlParams());\n\t\t//and: add a hash listener!\n\t\twindow.addEventListener(\"hashchange\", function() {\n\t\t\tyasqe.options.consumeShareLink(yasqe, getUrlParams());\n\t\t});\n\t}\n\tif (yasqe.options.collapsePrefixesOnLoad) yasqe.collapsePrefixes(true);\n};\n\n/**\n * get url params. first try fetching using hash. If it fails, try the regular query parameters (for backwards compatability)\n */\nvar getUrlParams = function() {\n\t//first try hash\n\tvar urlParams = null;\n\tif (window.location.hash.length > 1) {\n\t\t//firefox does some decoding if we're using window.location.hash (e.g. the + sign in contentType settings)\n\t\t//Don't want this. So simply get the hash string ourselves\n\t\turlParams = $.deparam(location.href.split(\"#\")[1])\n\t}\n\tif ((!urlParams || !('query' in urlParams)) && window.location.search.length > 1) {\n\t\t//ok, then just try regular url params\n\t\turlParams = $.deparam(window.location.search.substring(1));\n\t}\n\treturn urlParams;\n};\n\n\n\n/**\n * Update transparency of buttons. Increase transparency when cursor is below buttons\n */\n\nvar updateButtonsTransparency = function(yasqe) {\n\tyasqe.cursor = $(\".CodeMirror-cursor\");\n\tif (yasqe.buttons && yasqe.buttons.is(\":visible\") && yasqe.cursor.length > 0) {\n\t\tif (utils.elementsOverlap(yasqe.cursor, yasqe.buttons)) {\n\t\t\tyasqe.buttons.find(\"svg\").attr(\"opacity\", \"0.2\");\n\t\t} else {\n\t\t\tyasqe.buttons.find(\"svg\").attr(\"opacity\", \"1.0\");\n\t\t}\n\t}\n};\n\n\n\n\n\n\n\n\n\nvar clearError = null;\nvar checkSyntax = function(yasqe, deepcheck) {\n\n\tyasqe.queryValid = true;\n\n\tyasqe.clearGutter(\"gutterErrorBar\");\n\n\tvar state = null;\n\tfor (var l = 0; l < yasqe.lineCount(); ++l) {\n\t\tvar precise = false;\n\t\tif (!yasqe.prevQueryValid) {\n\t\t\t// we don't want cached information in this case, otherwise the\n\t\t\t// previous error sign might still show up,\n\t\t\t// even though the syntax error might be gone already\n\t\t\tprecise = true;\n\t\t}\n\n\t\tvar token = yasqe.getTokenAt({\n\t\t\tline: l,\n\t\t\tch: yasqe.getLine(l).length\n\t\t}, precise);\n\t\tvar state = token.state;\n\t\tyasqe.queryType = state.queryType;\n\t\tif (state.OK == false) {\n\t\t\tif (!yasqe.options.syntaxErrorCheck) {\n\t\t\t\t//the library we use already marks everything as being an error. Overwrite this class attribute.\n\t\t\t\t$(yasqe.getWrapperElement).find(\".sp-error\").css(\"color\", \"black\");\n\t\t\t\t//we don't want to gutter error, so return\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar warningEl = yutils.svg.getElement(imgs.warning);\n\t\t\tif (state.possibleCurrent && state.possibleCurrent.length > 0) {\n\t\t\t\t//\t\t\t\twarningEl.style.zIndex = \"99999999\";\n\t\t\t\trequire('./tooltip')(yasqe, warningEl, function() {\n\t\t\t\t\tvar expectedEncoded = [];\n\t\t\t\t\tstate.possibleCurrent.forEach(function(expected) {\n\t\t\t\t\t\texpectedEncoded.push(\"<strong style='text-decoration:underline'>\" + $(\"<div/>\").text(expected).html() + \"</strong>\");\n\t\t\t\t\t});\n\t\t\t\t\treturn \"This line is invalid. Expected: \" + expectedEncoded.join(\", \");\n\t\t\t\t});\n\t\t\t}\n\t\t\twarningEl.style.marginTop = \"2px\";\n\t\t\twarningEl.style.marginLeft = \"2px\";\n\t\t\twarningEl.className = 'parseErrorIcon';\n\t\t\tyasqe.setGutterMarker(l, \"gutterErrorBar\", warningEl);\n\n\t\t\tyasqe.queryValid = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tyasqe.prevQueryValid = yasqe.queryValid;\n\tif (deepcheck) {\n\t\tif (state != null && state.stack != undefined) {\n\t\t\tvar stack = state.stack,\n\t\t\t\tlen = state.stack.length;\n\t\t\t// Because incremental parser doesn't receive end-of-input\n\t\t\t// it can't clear stack, so we have to check that whatever\n\t\t\t// is left on the stack is nillable\n\t\t\tif (len > 1)\n\t\t\t\tyasqe.queryValid = false;\n\t\t\telse if (len == 1) {\n\t\t\t\tif (stack[0] != \"solutionModifier\" && stack[0] != \"?limitOffsetClauses\" && stack[0] != \"?offsetClause\")\n\t\t\t\t\tyasqe.queryValid = false;\n\t\t\t}\n\t\t}\n\t}\n};\n/**\n * Static Utils\n */\n// first take all CodeMirror references and store them in the YASQE object\n$.extend(root, CodeMirror);\n\n\n//add registrar for autocompleters\nroot.Autocompleters = {};\nroot.registerAutocompleter = function(name, constructor) {\n\troot.Autocompleters[name] = constructor;\n\taddCompleterToSettings(root.defaults, name);\n}\n\nroot.autoComplete = function(yasqe) {\n\t//this function gets called when pressing the keyboard shortcut. I.e., autoShow = false\n\tyasqe.autocompleters.autoComplete(false);\n};\n//include the autocompleters we provide out-of-the-box\nroot.registerAutocompleter(\"prefixes\", require(\"./autocompleters/prefixes.js\"));\nroot.registerAutocompleter(\"properties\", require(\"./autocompleters/properties.js\"));\nroot.registerAutocompleter(\"classes\", require(\"./autocompleters/classes.js\"));\nroot.registerAutocompleter(\"variables\", require(\"./autocompleters/variables.js\"));\n\n\nroot.positionButtons = function(yasqe) {\n\tvar scrollBar = $(yasqe.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\n\tvar offset = 0;\n\tif (scrollBar.is(\":visible\")) {\n\t\toffset = scrollBar.outerWidth();\n\t}\n\tif (yasqe.buttons.is(\":visible\")) yasqe.buttons.css(\"right\", offset + 4);\n};\n\n/**\n * Create a share link\n *\n * @method YASQE.createShareLink\n * @param {doc} YASQE document\n * @default {query: doc.getValue()}\n * @return object\n */\nroot.createShareLink = function(yasqe) {\n\t//extend existing link, so first fetch current arguments\n\tvar urlParams = {};\n\tif (window.location.hash.length > 1) urlParams = $.deparam(window.location.hash.substring(1));\n\turlParams['query'] = yasqe.getValue();\n\treturn urlParams;\n};\nroot.getAsCurl = function(yasqe, ajaxConfig) {\n\tvar curl = require('./curl.js');\n\treturn curl.createCurlString(yasqe, ajaxConfig);\n};\n/**\n * Consume the share link, by parsing the document URL for possible yasqe arguments, and setting the appropriate values in the YASQE doc\n *\n * @method YASQE.consumeShareLink\n * @param {doc} YASQE document\n */\nroot.consumeShareLink = function(yasqe, urlParams) {\n\tif (urlParams && urlParams.query) {\n\t\tyasqe.setValue(urlParams.query);\n\t}\n};\nroot.drawButtons = function(yasqe) {\n\tyasqe.buttons = $(\"<div class='yasqe_buttons'></div>\").appendTo($(yasqe.getWrapperElement()));\n\n\t/**\n\t * draw share link button\n\t */\n\tif (yasqe.options.createShareLink) {\n\n\t\tvar svgShare = $(yutils.svg.getElement(imgs.share));\n\t\tsvgShare.click(function(event) {\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tvar popup = $(\"<div class='yasqe_sharePopup'></div>\").appendTo(yasqe.buttons);\n\t\t\t\t$('html').click(function() {\n\t\t\t\t\tif (popup) popup.remove();\n\t\t\t\t});\n\n\t\t\t\tpopup.click(function(event) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t});\n\t\t\t\tvar $input = $(\"<input>\").val(location.protocol + '//' + location.host + location.pathname + location.search + \"#\" + $.param(yasqe.options.createShareLink(yasqe)));\n\n\t\t\t\t$input.focus(function() {\n\t\t\t\t\tvar $this = $(this);\n\t\t\t\t\t$this.select();\n\n\t\t\t\t\t// Work around Chrome's little problem\n\t\t\t\t\t$this.mouseup(function() {\n\t\t\t\t\t\t// Prevent further mouseup intervention\n\t\t\t\t\t\t$this.unbind(\"mouseup\");\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tpopup.empty().append($('<div>', {class:'inputWrapper'}).append($input));\n\t\t\t\tif (yasqe.options.createShortLink) {\n\t\t\t\t\tpopup.addClass('enableShort');\n\t\t\t\t\t$('<button>Shorten</button>')\n\t\t\t\t\t\t.addClass('yasqe_btn yasqe_btn-sm yasqe_btn-primary')\n\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t$(this).parent().find('button').attr('disabled', 'disabled');\n\t\t\t\t\t\t\tyasqe.options.createShortLink($input.val(), function(errString, shortLink) {\n\t\t\t\t\t\t\t\tif (errString) {\n\t\t\t\t\t\t\t\t\t$input.remove();\n\t\t\t\t\t\t\t\t\tpopup.find('.inputWrapper').append($('<span>', {class:\"shortlinkErr\"}).text(errString));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$input.val(shortLink).focus();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}).appendTo(popup);\n\t\t\t\t}\n\t\t\t\t$('<button>CURL</button>')\n\t\t\t\t\t.addClass('yasqe_btn yasqe_btn-sm yasqe_btn-primary')\n\t\t\t\t\t.click(function() {\n\n\t\t\t\t\t\t$(this).parent().find('button').attr('disabled', 'disabled');\n\t\t\t\t\t\t$input.val(root.getAsCurl(yasqe)).focus();\n\t\t\t\t\t}).appendTo(popup);\n\t\t\t\tvar positions = svgShare.position();\n\t\t\t\tpopup.css(\"top\", (positions.top + svgShare.outerHeight() + parseInt(popup.css('padding-top')) ) + \"px\").css(\"left\", ((positions.left + svgShare.outerWidth()) - popup.outerWidth()) + \"px\");\n\t\t\t\t$input.focus();\n\t\t\t})\n\t\t\t.addClass(\"yasqe_share\")\n\t\t\t.attr(\"title\", \"Share your query\")\n\t\t\t.appendTo(yasqe.buttons);\n\n\t}\n\n\n\t/**\n\t * draw fullscreen button\n\t */\n\n\tvar toggleFullscreen = $('<div>', {\n\t\t\tclass: 'fullscreenToggleBtns'\n\t\t})\n\t\t.append($(yutils.svg.getElement(imgs.fullscreen))\n\t\t\t.addClass(\"yasqe_fullscreenBtn\")\n\t\t\t.attr(\"title\", \"Set editor full screen\")\n\t\t\t.click(function() {\n\t\t\t\tyasqe.setOption(\"fullScreen\", true);\n\t\t\t}))\n\t\t.append($(yutils.svg.getElement(imgs.smallscreen))\n\t\t\t.addClass(\"yasqe_smallscreenBtn\")\n\t\t\t.attr(\"title\", \"Set editor to normale size\")\n\t\t\t.click(function() {\n\t\t\t\tyasqe.setOption(\"fullScreen\", false);\n\t\t\t}))\n\tyasqe.buttons.append(toggleFullscreen);\n\n\n\tif (yasqe.options.sparql.showQueryButton) {\n\t\t$(\"<div>\", {\n\t\t\t\tclass: 'yasqe_queryButton'\n\t\t\t})\n\t\t\t.click(function() {\n\t\t\t\tif ($(this).hasClass(\"query_busy\")) {\n\t\t\t\t\tif (yasqe.xhr) yasqe.xhr.abort();\n\t\t\t\t\troot.updateQueryButton(yasqe);\n\t\t\t\t} else {\n\t\t\t\t\tyasqe.query();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.appendTo(yasqe.buttons);\n\t\troot.updateQueryButton(yasqe);\n\t}\n\n};\n\n\nvar queryButtonIds = {\n\t\"busy\": \"loader\",\n\t\"valid\": \"query\",\n\t\"error\": \"queryInvalid\"\n};\n\n/**\n * Update the query button depending on current query status. If no query status is passed via the parameter, it auto-detects the current query status\n *\n * @param {doc} YASQE document\n * @param status {string|null, \"busy\"|\"valid\"|\"error\"}\n */\nroot.updateQueryButton = function(yasqe, status) {\n\tvar queryButton = $(yasqe.getWrapperElement()).find(\".yasqe_queryButton\");\n\tif (queryButton.length == 0) return; //no query button drawn\n\n\t//detect status\n\tif (!status) {\n\t\tstatus = \"valid\";\n\t\tif (yasqe.queryValid === false) status = \"error\";\n\t}\n\n\tif (status != yasqe.queryStatus) {\n\t\tqueryButton\n\t\t\t.empty()\n\t\t\t.removeClass(function(index, classNames) {\n\t\t\t\treturn classNames.split(\" \").filter(function(c) {\n\t\t\t\t\t//remove classname from previous status\n\t\t\t\t\treturn c.indexOf(\"query_\") == 0;\n\t\t\t\t}).join(\" \");\n\t\t\t});\n\n\t\tif (status == \"busy\") {\n\t\t\tqueryButton.append($('<div>', {\n\t\t\t\tclass: 'loader',\n\t\t\t}));\n\t\t\tyasqe.queryStatus = status;\n\t\t} else if (status == \"valid\" || status == \"error\") {\n\t\t\tqueryButton.addClass(\"query_\" + status);\n\t\t\tyutils.svg.draw(queryButton, imgs[queryButtonIds[status]]);\n\t\t\tyasqe.queryStatus = status;\n\t\t}\n\t}\n};\n/**\n * Initialize YASQE from an existing text area (see http://codemirror.net/doc/manual.html#fromTextArea for more info)\n *\n * @method YASQE.fromTextArea\n * @param textArea {DOM element}\n * @param config {object}\n * @returns {doc} YASQE document\n */\nroot.fromTextArea = function(textAreaEl, config) {\n\tconfig = extendConfig(config);\n\t//add yasqe div as parent (needed for styles to be manageable and scoped).\n\t//In this case, I -also- put it as parent el of the text area. This is wrapped in a div now\n\tvar rootEl = $(\"<div>\", {\n\t\tclass: 'yasqe'\n\t}).insertBefore($(textAreaEl)).append($(textAreaEl));\n\tvar yasqe = extendCmInstance(CodeMirror.fromTextArea(textAreaEl, config));\n\tpostProcessCmElement(yasqe);\n\treturn yasqe;\n};\n\n\nroot.storeQuery = function(yasqe) {\n\tvar storageId = utils.getPersistencyId(yasqe, yasqe.options.persistent);\n\tif (storageId) {\n\t\tyutils.storage.set(storageId, yasqe.getValue(), \"month\");\n\t}\n};\nroot.commentLines = function(yasqe) {\n\tvar startLine = yasqe.getCursor(true).line;\n\tvar endLine = yasqe.getCursor(false).line;\n\tvar min = Math.min(startLine, endLine);\n\tvar max = Math.max(startLine, endLine);\n\n\t// if all lines start with #, remove this char. Otherwise add this char\n\tvar linesAreCommented = true;\n\tfor (var i = min; i <= max; i++) {\n\t\tvar line = yasqe.getLine(i);\n\t\tif (line.length == 0 || line.substring(0, 1) != \"#\") {\n\t\t\tlinesAreCommented = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (var i = min; i <= max; i++) {\n\t\tif (linesAreCommented) {\n\t\t\t// lines are commented, so remove comments\n\t\t\tyasqe.replaceRange(\"\", {\n\t\t\t\tline: i,\n\t\t\t\tch: 0\n\t\t\t}, {\n\t\t\t\tline: i,\n\t\t\t\tch: 1\n\t\t\t});\n\t\t} else {\n\t\t\t// Not all lines are commented, so add comments\n\t\t\tyasqe.replaceRange(\"#\", {\n\t\t\t\tline: i,\n\t\t\t\tch: 0\n\t\t\t});\n\t\t}\n\n\t}\n};\n\nroot.copyLineUp = function(yasqe) {\n\tvar cursor = yasqe.getCursor();\n\tvar lineCount = yasqe.lineCount();\n\t// First create new empty line at end of text\n\tyasqe.replaceRange(\"\\n\", {\n\t\tline: lineCount - 1,\n\t\tch: yasqe.getLine(lineCount - 1).length\n\t});\n\t// Copy all lines to their next line\n\tfor (var i = lineCount; i > cursor.line; i--) {\n\t\tvar line = yasqe.getLine(i - 1);\n\t\tyasqe.replaceRange(line, {\n\t\t\tline: i,\n\t\t\tch: 0\n\t\t}, {\n\t\t\tline: i,\n\t\t\tch: yasqe.getLine(i).length\n\t\t});\n\t}\n};\nroot.copyLineDown = function(yasqe) {\n\troot.copyLineUp(yasqe);\n\t// Make sure cursor goes one down (we are copying downwards)\n\tvar cursor = yasqe.getCursor();\n\tcursor.line++;\n\tyasqe.setCursor(cursor);\n};\nroot.doAutoFormat = function(yasqe) {\n\tif (yasqe.somethingSelected()) {\n\t\tvar to = {\n\t\t\tline: yasqe.getCursor(false).line,\n\t\t\tch: yasqe.getSelection().length\n\t\t};\n\t\tautoFormatRange(yasqe, yasqe.getCursor(true), to);\n\t} else {\n\t\tvar totalLines = yasqe.lineCount();\n\t\tvar totalChars = yasqe.getTextArea().value.length;\n\t\tautoFormatRange(yasqe, {\n\t\t\tline: 0,\n\t\t\tch: 0\n\t\t}, {\n\t\t\tline: totalLines,\n\t\t\tch: totalChars\n\t\t});\n\t}\n\n};\n\n\nvar autoFormatRange = function(yasqe, from, to) {\n\tvar absStart = yasqe.indexFromPos(from);\n\tvar absEnd = yasqe.indexFromPos(to);\n\t// Insert additional line breaks where necessary according to the\n\t// mode's syntax\n\tvar res = autoFormatLineBreaks(yasqe.getValue(), absStart, absEnd);\n\n\t// Replace and auto-indent the range\n\tyasqe.operation(function() {\n\t\tyasqe.replaceRange(res, from, to);\n\t\tvar startLine = yasqe.posFromIndex(absStart).line;\n\t\tvar endLine = yasqe.posFromIndex(absStart + res.length).line;\n\t\tfor (var i = startLine; i <= endLine; i++) {\n\t\t\tyasqe.indentLine(i, \"smart\");\n\t\t}\n\t});\n};\n\nvar autoFormatLineBreaks = function(text, start, end) {\n\ttext = text.substring(start, end);\n\tvar breakAfterArray = [\n\t\t[\"keyword\", \"ws\", \"prefixed\", \"ws\", \"uri\"], // i.e. prefix declaration\n\t\t[\"keyword\", \"ws\", \"uri\"] // i.e. base\n\t];\n\tvar breakAfterCharacters = [\"{\", \".\", \";\"];\n\tvar breakBeforeCharacters = [\"}\"];\n\tvar getBreakType = function(stringVal, type) {\n\t\tfor (var i = 0; i < breakAfterArray.length; i++) {\n\t\t\tif (stackTrace.valueOf().toString() == breakAfterArray[i].valueOf()\n\t\t\t\t.toString()) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0; i < breakAfterCharacters.length; i++) {\n\t\t\tif (stringVal == breakAfterCharacters[i]) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0; i < breakBeforeCharacters.length; i++) {\n\t\t\t// don't want to issue 'breakbefore' AND 'breakafter', so check\n\t\t\t// current line\n\t\t\tif ($.trim(currentLine) != '' && stringVal == breakBeforeCharacters[i]) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t};\n\tvar formattedQuery = \"\";\n\tvar currentLine = \"\";\n\tvar stackTrace = [];\n\tCodeMirror.runMode(text, \"sparql11\", function(stringVal, type) {\n\t\tstackTrace.push(type);\n\t\tvar breakType = getBreakType(stringVal, type);\n\t\tif (breakType != 0) {\n\t\t\tif (breakType == 1) {\n\t\t\t\tformattedQuery += stringVal + \"\\n\";\n\t\t\t\tcurrentLine = \"\";\n\t\t\t} else { // (-1)\n\t\t\t\tformattedQuery += \"\\n\" + stringVal;\n\t\t\t\tcurrentLine = stringVal;\n\t\t\t}\n\t\t\tstackTrace = [];\n\t\t} else {\n\t\t\tcurrentLine += stringVal;\n\t\t\tformattedQuery += stringVal;\n\t\t}\n\t\tif (stackTrace.length == 1 && stackTrace[0] == \"sp-ws\")\n\t\t\tstackTrace = [];\n\t});\n\treturn $.trim(formattedQuery.replace(/\\n\\s*\\n/g, '\\n'));\n};\n\nrequire('./sparql.js'),\n\trequire('./defaults.js');\nroot.$ = $;\nroot.version = {\n\t\"CodeMirror\": CodeMirror.version,\n\t\"YASQE\": require(\"../package.json\").version,\n\t\"jquery\": $.fn.jquery,\n\t\"yasgui-utils\": yutils.version\n};\n\n},{\"../lib/deparam.js\":1,\"../lib/grammar/tokenizer.js\":3,\"../package.json\":19,\"./autocompleters/autocompleterBase.js\":20,\"./autocompleters/classes.js\":21,\"./autocompleters/prefixes.js\":22,\"./autocompleters/properties.js\":23,\"./autocompleters/variables.js\":25,\"./curl.js\":26,\"./defaults.js\":27,\"./imgs.js\":29,\"./prefixFold.js\":31,\"./prefixUtils.js\":32,\"./sparql.js\":33,\"./tokenUtils.js\":34,\"./tooltip\":35,\"./utils.js\":36,\"codemirror\":undefined,\"codemirror/addon/display/fullscreen.js\":5,\"codemirror/addon/edit/matchbrackets.js\":6,\"codemirror/addon/fold/brace-fold.js\":7,\"codemirror/addon/fold/foldcode.js\":8,\"codemirror/addon/fold/foldgutter.js\":9,\"codemirror/addon/fold/xml-fold.js\":10,\"codemirror/addon/hint/show-hint.js\":11,\"codemirror/addon/runmode/runmode.js\":12,\"codemirror/addon/search/searchcursor.js\":13,\"jquery\":undefined,\"yasgui-utils\":16}],31:[function(require,module,exports){\nvar CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(),\n\ttokenUtils = require('./tokenUtils.js');\n\n\"use strict\";\nvar lookFor = \"PREFIX\";\nmodule.exports = {\n\tfindFirstPrefixLine: function(cm) {\n\t\tvar lastLine = cm.lastLine();\n\t\tfor (var i = 0; i <= lastLine; ++i) {\n\t\t\tif (findFirstPrefix(cm, i) >= 0) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction findFirstPrefix(cm, line, ch, lineText) {\n\tif (!ch) ch = 0;\n\tif (!lineText) lineText = cm.getLine(line);\n\tlineText = lineText.toUpperCase();\n\tfor (var at = ch, pass = 0;;) {\n\t\tvar found = lineText.indexOf(lookFor, at);\n\t\tif (found == -1) {\n\t\t\tif (pass == 1)\n\t\t\t\tbreak;\n\t\t\tpass = 1;\n\t\t\tat = lineText.length;\n\t\t\tcontinue;\n\t\t}\n\t\tif (pass == 1 && found < ch)\n\t\t\tbreak;\n\t\ttokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n\t\tif (!/^(comment|string)/.test(tokenType))\n\t\t\treturn found + 1;\n\t\tat = found - 1;\n\t}\n}\n\nCodeMirror.registerHelper(\"fold\", \"prefix\", function(cm, start) {\n\tvar line = start.line,\n\t\tlineText = cm.getLine(line);\n\n\tvar startCh, tokenType;\n\n\tfunction hasPreviousPrefix() {\n\t\tvar hasPreviousPrefix = false;\n\t\tfor (var i = line - 1; i >= 0; i--) {\n\t\t\tif (cm.getLine(i).toUpperCase().indexOf(lookFor) >= 0) {\n\t\t\t\thasPreviousPrefix = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn hasPreviousPrefix;\n\t}\n\n\n\tfunction findOpening(openCh) {\n\t\tfor (var at = start.ch, pass = 0;;) {\n\t\t\tvar found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n\t\t\tif (found == -1) {\n\t\t\t\tif (pass == 1)\n\t\t\t\t\tbreak;\n\t\t\t\tpass = 1;\n\t\t\t\tat = lineText.length;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (pass == 1 && found < start.ch)\n\t\t\t\tbreak;\n\t\t\ttokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n\t\t\tif (!/^(comment|string)/.test(tokenType))\n\t\t\t\treturn found + 1;\n\t\t\tat = found - 1;\n\t\t}\n\t}\n\tvar getLastPrefixPos = function(line, ch) {\n\t\tvar prefixKeywordToken = cm.getTokenAt(CodeMirror.Pos(line, ch + 1));\n\t\tif (!prefixKeywordToken || prefixKeywordToken.type != \"keyword\") return -1;\n\t\tvar prefixShortname = tokenUtils.getNextNonWsToken(cm, line, prefixKeywordToken.end + 1);\n\t\tif (!prefixShortname || prefixShortname.type != \"string-2\") return -1; //missing prefix keyword shortname\n\t\tvar prefixUri = tokenUtils.getNextNonWsToken(cm, line, prefixShortname.end + 1);\n\t\tif (!prefixUri || prefixUri.type != \"variable-3\") return -1; //missing prefix uri\n\t\treturn prefixUri.end;\n\t}\n\n\t//only use opening prefix declaration\n\tif (hasPreviousPrefix())\n\t\treturn;\n\tvar prefixStart = findFirstPrefix(cm, line, start.ch, lineText);\n\n\tif (prefixStart == null)\n\t\treturn;\n\tvar stopAt = '{'; //if this char is there, we won't have a chance of finding more prefixes\n\tvar stopAtNextLine = false;\n\tvar count = 1,\n\t\tlastLine = cm.lastLine(),\n\t\tend, endCh;\n\tvar prefixEndChar = getLastPrefixPos(line, prefixStart);\n\tvar prefixEndLine = line;\n\n\touter: for (var i = line; i <= lastLine; ++i) {\n\t\tif (stopAtNextLine)\n\t\t\tbreak;\n\t\tvar text = cm.getLine(i),\n\t\t\tpos = i == line ? prefixStart + 1 : 0;\n\n\t\tfor (;;) {\n\t\t\tif (!stopAtNextLine && text.indexOf(stopAt) >= 0)\n\t\t\t\tstopAtNextLine = true;\n\n\t\t\tvar nextPrefixDeclaration = text.toUpperCase()\n\t\t\t\t.indexOf(lookFor, pos);\n\n\t\t\tif (nextPrefixDeclaration >= 0) {\n\t\t\t\tif ((endCh = getLastPrefixPos(i, nextPrefixDeclaration)) > 0) {\n\t\t\t\t\tprefixEndChar = endCh;\n\t\t\t\t\tprefixEndLine = i;\n\t\t\t\t\tpos = prefixEndChar;\n\t\t\t\t}\n\t\t\t\tpos++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\tfrom: CodeMirror.Pos(line, prefixStart + lookFor.length),\n\t\tto: CodeMirror.Pos(prefixEndLine, prefixEndChar)\n\t};\n});\n},{\"./tokenUtils.js\":34,\"codemirror\":undefined}],32:[function(require,module,exports){\n'use strict';\n/**\n * Append prefix declaration to list of prefixes in query window.\n * \n * @param yasqe\n * @param prefix\n */\nvar addPrefixes = function(yasqe, prefixes) {\n\tvar existingPrefixes = yasqe.getPrefixesFromQuery();\n\t//for backwards compatability, we stil support prefixes value as string (e.g. 'rdf: <http://fbfgfgf>'\n\tif (typeof prefixes == \"string\") {\n\t\taddPrefixAsString(yasqe, prefixes);\n\t} else {\n\t\tfor (var pref in prefixes) {\n\t\t\tif (!(pref in existingPrefixes))\n\t\t\t\taddPrefixAsString(yasqe, pref + \": <\" + prefixes[pref] + \">\");\n\t\t}\n\t}\n\tyasqe.collapsePrefixes(false);\n};\n\nvar addPrefixAsString = function(yasqe, prefixString) {\n\tvar lastPrefix = null;\n\tvar lastPrefixLine = 0;\n\tvar numLines = yasqe.lineCount();\n\tfor (var i = 0; i < numLines; i++) {\n\t\tvar firstToken = yasqe.getNextNonWsToken(i);\n\t\tif (firstToken != null && (firstToken.string == \"PREFIX\" || firstToken.string == \"BASE\")) {\n\t\t\tlastPrefix = firstToken;\n\t\t\tlastPrefixLine = i;\n\t\t}\n\t}\n\n\tif (lastPrefix == null) {\n\t\tyasqe.replaceRange(\"PREFIX \" + prefixString + \"\\n\", {\n\t\t\tline: 0,\n\t\t\tch: 0\n\t\t});\n\t} else {\n\t\tvar previousIndent = getIndentFromLine(yasqe, lastPrefixLine);\n\t\tyasqe.replaceRange(\"\\n\" + previousIndent + \"PREFIX \" + prefixString, {\n\t\t\tline: lastPrefixLine\n\t\t});\n\t}\n\tyasqe.collapsePrefixes(false);\n};\nvar removePrefixes = function(yasqe, prefixes) {\n\tvar escapeRegex = function(string) {\n\t\t//taken from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript/3561711#3561711\n\t\treturn string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\t}\n\tfor (var pref in prefixes) {\n\t\tyasqe.setValue(yasqe.getValue().replace(new RegExp(\"PREFIX\\\\s*\" + pref + \":\\\\s*\" + escapeRegex(\"<\" + prefixes[pref] + \">\") + \"\\\\s*\", \"ig\"), ''));\n\t}\n\tyasqe.collapsePrefixes(false);\n\n};\n\n/**\n * Get defined prefixes from query as array, in format {\"prefix:\" \"uri\"}\n * \n * @param cm\n * @returns {Array}\n */\nvar getPrefixesFromQuery = function(yasqe) {\n\tvar queryPrefixes = {};\n\tvar shouldContinue = true;\n\tvar getPrefixesFromLine = function(lineOffset, colOffset) {\n\t\tif (!shouldContinue) return;\n\t\tif (!colOffset) colOffset = 1;\n\t\tvar token = yasqe.getNextNonWsToken(i, colOffset);\n\t\tif (token) {\n\t\t\tif (token.state.possibleCurrent.indexOf(\"PREFIX\") == -1 && token.state.possibleNext.indexOf(\"PREFIX\") == -1) shouldContinue = false; //we are beyond the place in the query where we can enter prefixes\n\t\t\tif (token.string.toUpperCase() == \"PREFIX\") {\n\t\t\t\tvar prefix = yasqe.getNextNonWsToken(i, token.end + 1);\n\t\t\t\tif (prefix) {\n\t\t\t\t\tvar uri = yasqe.getNextNonWsToken(i, prefix.end + 1);\n\t\t\t\t\tif (uri) {\n\t\t\t\t\t\tvar uriString = uri.string;\n\t\t\t\t\t\tif (uriString.indexOf(\"<\") == 0)\n\t\t\t\t\t\t\turiString = uriString.substring(1);\n\t\t\t\t\t\tif (uriString.slice(-1) == \">\")\n\t\t\t\t\t\t\turiString = uriString\n\t\t\t\t\t\t\t.substring(0, uriString.length - 1);\n\t\t\t\t\t\tqueryPrefixes[prefix.string.slice(0, -1)] = uriString;\n\n\t\t\t\t\t\tgetPrefixesFromLine(lineOffset, uri.end + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetPrefixesFromLine(lineOffset, prefix.end + 1);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tgetPrefixesFromLine(lineOffset, token.end + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgetPrefixesFromLine(lineOffset, token.end + 1);\n\t\t\t}\n\t\t}\n\t};\n\n\n\tvar numLines = yasqe.lineCount();\n\tfor (var i = 0; i < numLines; i++) {\n\t\tif (!shouldContinue) break;\n\t\tgetPrefixesFromLine(i);\n\n\t}\n\treturn queryPrefixes;\n};\n\n/**\n * Get the used indentation for a certain line\n * \n * @param yasqe\n * @param line\n * @param charNumber\n * @returns\n */\nvar getIndentFromLine = function(yasqe, line, charNumber) {\n\tif (charNumber == undefined)\n\t\tcharNumber = 1;\n\tvar token = yasqe.getTokenAt({\n\t\tline: line,\n\t\tch: charNumber\n\t});\n\tif (token == null || token == undefined || token.type != \"ws\") {\n\t\treturn \"\";\n\t} else {\n\t\treturn token.string + getIndentFromLine(yasqe, line, token.end + 1);\n\t};\n};\n\nmodule.exports = {\n\taddPrefixes: addPrefixes,\n\tgetPrefixesFromQuery: getPrefixesFromQuery,\n\tremovePrefixes: removePrefixes\n};\n},{}],33:[function(require,module,exports){\n'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n\tutils = require('./utils.js'),\n\tYASQE = require('./main.js');\n\nYASQE.getAjaxConfig = function(yasqe, callbackOrConfig) {\n\tvar callback = (typeof callbackOrConfig == \"function\" ? callbackOrConfig : null);\n\tvar config = (typeof callbackOrConfig == \"object\" ? callbackOrConfig : {});\n\n\tif (yasqe.options.sparql)\n\t\tconfig = $.extend({}, yasqe.options.sparql, config);\n\n\t//for backwards compatability, make sure we copy sparql handlers to sparql callbacks\n\tif (config.handlers)\n\t\t$.extend(true, config.callbacks, config.handlers);\n\n\n\tif (!config.endpoint || config.endpoint.length == 0)\n\t\treturn; // nothing to query!\n\n\t/**\n\t * initialize ajax config\n\t */\n\tvar ajaxConfig = {\n\t\turl: (typeof config.endpoint == \"function\" ? config.endpoint(yasqe) : config.endpoint),\n\t\ttype: (typeof config.requestMethod == \"function\" ? config.requestMethod(yasqe) : config.requestMethod),\n\t\theaders: {\n\t\t\tAccept: getAcceptHeader(yasqe, config),\n\t\t}\n\t};\n\tif (config.xhrFields) ajaxConfig.xhrFields = config.xhrFields;\n\t/**\n\t * add complete, beforesend, etc callbacks (if specified)\n\t */\n\tvar handlerDefined = false;\n\tif (config.callbacks) {\n\t\tfor (var handler in config.callbacks) {\n\t\t\tif (config.callbacks[handler]) {\n\t\t\t\thandlerDefined = true;\n\t\t\t\tajaxConfig[handler] = config.callbacks[handler];\n\t\t\t}\n\t\t}\n\t}\n\tif (ajaxConfig.type === 'GET') {\n\t\t//we need to do encoding ourselve, as jquery does not properly encode the url string\n\t\t//https://github.com/OpenTriply/YASGUI/issues/75\n\t\tvar first = true;\n\t\t$.each(yasqe.getUrlArguments(config), function(key, val) {\n\t\t\tajaxConfig.url += (first?'?': '&') + val.name + '=' + encodeURIComponent(val.value);\n\t\t\tfirst = false;\n\t\t});\n\t} else {\n\t\tajaxConfig.data = yasqe.getUrlArguments(config);\n\t}\n\tif (!handlerDefined && !callback)\n\t\treturn; // ok, we can query, but have no callbacks. just stop now\n\n\t// if only callback is passed as arg, add that on as 'onComplete' callback\n\tif (callback)\n\t\tajaxConfig.complete = callback;\n\n\n\n\t/**\n\t * merge additional request headers\n\t */\n\tif (config.headers && !$.isEmptyObject(config.headers))\n\t\t$.extend(ajaxConfig.headers, config.headers);\n\n\n\tvar queryStart = new Date();\n\tvar updateYasqe = function() {\n\t\tyasqe.lastQueryDuration = new Date() - queryStart;\n\t\tYASQE.updateQueryButton(yasqe);\n\t\tyasqe.setBackdrop(false);\n\t};\n\t//Make sure the query button is updated again on complete\n\tvar completeCallbacks = [\n\t\tfunction(){require('./main.js').signal(yasqe, 'queryFinish', arguments)},\n\t\tupdateYasqe\n\t];\n\n\tif (ajaxConfig.complete) {\n\t\tcompleteCallbacks.push(ajaxConfig.complete);\n\t}\n\tajaxConfig.complete = completeCallbacks;\n\treturn ajaxConfig;\n};\n\n\n\nYASQE.executeQuery = function(yasqe, callbackOrConfig) {\n\tYASQE.signal(yasqe, 'query', yasqe, callbackOrConfig);\n\tYASQE.updateQueryButton(yasqe, \"busy\");\n\tyasqe.setBackdrop(true);\n\tyasqe.xhr = $.ajax(YASQE.getAjaxConfig(yasqe, callbackOrConfig));\n};\n\n\nYASQE.getUrlArguments = function(yasqe, config) {\n\tvar queryMode = yasqe.getQueryMode();\n\tvar data = [{\n\t\tname: utils.getString(yasqe, yasqe.options.sparql.queryName),\n\t\tvalue: (config.getQueryForAjax? config.getQueryForAjax(yasqe): yasqe.getValue())\n\t}];\n\n\t/**\n\t * add named graphs to ajax config\n\t */\n\tif (config.namedGraphs && config.namedGraphs.length > 0) {\n\t\tvar argName = (queryMode == \"query\" ? \"named-graph-uri\" : \"using-named-graph-uri \");\n\t\tfor (var i = 0; i < config.namedGraphs.length; i++)\n\t\t\tdata.push({\n\t\t\t\tname: argName,\n\t\t\t\tvalue: config.namedGraphs[i]\n\t\t\t});\n\t}\n\t/**\n\t * add default graphs to ajax config\n\t */\n\tif (config.defaultGraphs && config.defaultGraphs.length > 0) {\n\t\tvar argName = (queryMode == \"query\" ? \"default-graph-uri\" : \"using-graph-uri \");\n\t\tfor (var i = 0; i < config.defaultGraphs.length; i++)\n\t\t\tdata.push({\n\t\t\t\tname: argName,\n\t\t\t\tvalue: config.defaultGraphs[i]\n\t\t\t});\n\t}\n\n\t/**\n\t * add additional request args\n\t */\n\tif (config.args && config.args.length > 0) $.merge(data, config.args);\n\n\treturn data;\n}\nvar getAcceptHeader = function(yasqe, config) {\n\tvar acceptHeader = null;\n\tif (config.acceptHeader && !config.acceptHeaderGraph && !config.acceptHeaderSelect && !config.acceptHeaderUpdate) {\n\t\t//this is the old config. For backwards compatability, keep supporting it\n\t\tif (typeof config.acceptHeader == \"function\") {\n\t\t\tacceptHeader = config.acceptHeader(yasqe);\n\t\t} else {\n\t\t\tacceptHeader = config.acceptHeader;\n\t\t}\n\t} else {\n\t\tif (yasqe.getQueryMode() == \"update\") {\n\t\t\tacceptHeader = (typeof config.acceptHeader == \"function\" ? config.acceptHeaderUpdate(yasqe) : config.acceptHeaderUpdate);\n\t\t} else {\n\t\t\tvar qType = yasqe.getQueryType();\n\t\t\tif (qType == \"DESCRIBE\" || qType == \"CONSTRUCT\") {\n\t\t\t\tacceptHeader = (typeof config.acceptHeaderGraph == \"function\" ? config.acceptHeaderGraph(yasqe) : config.acceptHeaderGraph);\n\t\t\t} else {\n\t\t\t\tacceptHeader = (typeof config.acceptHeaderSelect == \"function\" ? config.acceptHeaderSelect(yasqe) : config.acceptHeaderSelect);\n\t\t\t}\n\t\t}\n\t}\n\treturn acceptHeader;\n};\n\nmodule.exports = {\n\tgetAjaxConfig: YASQE.getAjaxConfig\n}\n\n},{\"./main.js\":30,\"./utils.js\":36,\"jquery\":undefined}],34:[function(require,module,exports){\n'use strict';\n/**\n * When typing a query, this query is sometimes syntactically invalid, causing\n * the current tokens to be incorrect This causes problem for autocompletion.\n * http://bla might result in two tokens: http:// and bla. We'll want to combine\n * these\n * \n * @param yasqe {doc}\n * @param token {object}\n * @param cursor {object}\n * @return token {object}\n * @method YASQE.getCompleteToken\n */\nvar getCompleteToken = function(yasqe, token, cur) {\n\tif (!cur) {\n\t\tcur = yasqe.getCursor();\n\t}\n\tif (!token) {\n\t\ttoken = yasqe.getTokenAt(cur);\n\t}\n\tvar prevToken = yasqe.getTokenAt({\n\t\tline: cur.line,\n\t\tch: token.start\n\t});\n\t// not start of line, and not whitespace\n\tif (\n\t\tprevToken.type != null && prevToken.type != \"ws\" && token.type != null && token.type != \"ws\"\n\t) {\n\t\ttoken.start = prevToken.start;\n\t\ttoken.string = prevToken.string + token.string;\n\t\treturn getCompleteToken(yasqe, token, {\n\t\t\tline: cur.line,\n\t\t\tch: prevToken.start\n\t\t}); // recursively, might have multiple tokens which it should include\n\t} else if (token.type != null && token.type == \"ws\") {\n\t\t//always keep 1 char of whitespace between tokens. Otherwise, autocompletions might end up next to the previous node, without whitespace between them\n\t\ttoken.start = token.start + 1;\n\t\ttoken.string = token.string.substring(1);\n\t\treturn token;\n\t} else {\n\t\treturn token;\n\t}\n};\nvar getPreviousNonWsToken = function(yasqe, line, token) {\n\tvar previousToken = yasqe.getTokenAt({\n\t\tline: line,\n\t\tch: token.start\n\t});\n\tif (previousToken != null && previousToken.type == \"ws\") {\n\t\tpreviousToken = getPreviousNonWsToken(yasqe, line, previousToken);\n\t}\n\treturn previousToken;\n}\nvar getNextNonWsToken = function(yasqe, lineNumber, charNumber) {\n\tif (charNumber == undefined)\n\t\tcharNumber = 1;\n\tvar token = yasqe.getTokenAt({\n\t\tline: lineNumber,\n\t\tch: charNumber\n\t});\n\tif (token == null || token == undefined || token.end < charNumber) {\n\t\treturn null;\n\t}\n\tif (token.type == \"ws\") {\n\t\treturn getNextNonWsToken(yasqe, lineNumber, token.end + 1);\n\t}\n\treturn token;\n};\n\nmodule.exports = {\n\tgetPreviousNonWsToken: getPreviousNonWsToken,\n\tgetCompleteToken: getCompleteToken,\n\tgetNextNonWsToken: getNextNonWsToken,\n};\n},{}],35:[function(require,module,exports){\n'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n\tutils = require('./utils.js');\n\n/**\n * Write our own tooltip, to avoid loading another library for just this functionality. For now, we only use tooltip for showing parse errors, so this is quite a tailored solution\n * Requirements: \n * \t\tposition tooltip within codemirror frame as much as possible, to avoid z-index issues with external things on page\n * \t\tuse html as content\n */\nmodule.exports = function(yasqe, parent, html) {\n\tvar parent = $(parent);\n\tvar tooltip;\n\tparent.hover(function() {\n\t\t\tif (typeof html == \"function\") html = html();\n\t\t\ttooltip = $(\"<div>\").addClass('yasqe_tooltip').html(html).appendTo(parent);\n\t\t\trepositionTooltip();\n\t\t},\n\t\tfunction() {\n\t\t\t$(\".yasqe_tooltip\").remove();\n\t\t});\n\n\n\n\t/**\n\t * only need to take into account top and bottom offset for this usecase\n\t */\n\tvar repositionTooltip = function() {\n\t\tif ($(yasqe.getWrapperElement()).offset().top >= tooltip.offset().top) {\n\t\t\t//shit, move the tooltip down. The tooltip now hovers over the top edge of the yasqe instance\n\t\t\ttooltip.css('bottom', 'auto');\n\t\t\ttooltip.css('top', '26px');\n\t\t}\n\t};\n};\n},{\"./utils.js\":36,\"jquery\":undefined}],36:[function(require,module,exports){\n'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\n\nvar keyExists = function(objectToTest, key) {\n\tvar exists = false;\n\ttry {\n\t\tif (objectToTest[key] !== undefined)\n\t\t\texists = true;\n\t} catch (e) {}\n\treturn exists;\n};\n\nvar getPersistencyId = function(yasqe, persistentIdCreator) {\n\tvar persistencyId = null;\n\n\tif (persistentIdCreator) {\n\t\tif (typeof persistentIdCreator == \"string\") {\n\t\t\tpersistencyId = persistentIdCreator;\n\t\t} else {\n\t\t\tpersistencyId = persistentIdCreator(yasqe);\n\t\t}\n\t}\n\treturn persistencyId;\n};\n\nvar elementsOverlap = (function() {\n\tfunction getPositions(elem) {\n\t\tvar pos, width, height;\n\t\tpos = $(elem).offset();\n\t\twidth = $(elem).width();\n\t\theight = $(elem).height();\n\t\treturn [\n\t\t\t[pos.left, pos.left + width],\n\t\t\t[pos.top, pos.top + height]\n\t\t];\n\t}\n\n\tfunction comparePositions(p1, p2) {\n\t\tvar r1, r2;\n\t\tr1 = p1[0] < p2[0] ? p1 : p2;\n\t\tr2 = p1[0] < p2[0] ? p2 : p1;\n\t\treturn r1[1] > r2[0] || r1[0] === r2[0];\n\t}\n\n\treturn function(a, b) {\n\t\tvar pos1 = getPositions(a),\n\t\t\tpos2 = getPositions(b);\n\t\treturn comparePositions(pos1[0], pos2[0]) && comparePositions(pos1[1], pos2[1]);\n\t};\n})();\n\nvar getString = function(yasqe, item) {\n\tif (typeof item == \"function\") {\n\t\treturn item(yasqe);\n\t} else {\n\t\treturn item;\n\t}\n}\nmodule.exports = {\n\tkeyExists: keyExists,\n\tgetPersistencyId: getPersistencyId,\n\telementsOverlap: elementsOverlap,\n\tgetString:getString\n};\n\n},{\"jquery\":undefined}]},{},[28])(28)\n});\n\n","module.exports = {table:\n{\n  \"*[&&,valueLogical]\" : {\n     \"&&\": [\"[&&,valueLogical]\",\"*[&&,valueLogical]\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"||\": [], \n     \";\": []}, \n  \"*[,,expression]\" : {\n     \",\": [\"[,,expression]\",\"*[,,expression]\"], \n     \")\": []}, \n  \"*[,,objectPath]\" : {\n     \",\": [\"[,,objectPath]\",\"*[,,objectPath]\"], \n     \".\": [], \n     \";\": [], \n     \"]\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"*[,,object]\" : {\n     \",\": [\"[,,object]\",\"*[,,object]\"], \n     \".\": [], \n     \";\": [], \n     \"]\": [], \n     \"}\": [], \n     \"GRAPH\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": []}, \n  \"*[/,pathEltOrInverse]\" : {\n     \"/\": [\"[/,pathEltOrInverse]\",\"*[/,pathEltOrInverse]\"], \n     \"|\": [], \n     \")\": [], \n     \"(\": [], \n     \"[\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"IRI_REF\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": []}, \n  \"*[;,?[or([verbPath,verbSimple]),objectList]]\" : {\n     \";\": [\"[;,?[or([verbPath,verbSimple]),objectList]]\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \".\": [], \n     \"]\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"*[;,?[verb,objectList]]\" : {\n     \";\": [\"[;,?[verb,objectList]]\",\"*[;,?[verb,objectList]]\"], \n     \".\": [], \n     \"]\": [], \n     \"}\": [], \n     \"GRAPH\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": []}, \n  \"*[UNION,groupGraphPattern]\" : {\n     \"UNION\": [\"[UNION,groupGraphPattern]\",\"*[UNION,groupGraphPattern]\"], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"(\": [], \n     \"[\": [], \n     \"IRI_REF\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \".\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"*[graphPatternNotTriples,?.,?triplesBlock]\" : {\n     \"{\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"OPTIONAL\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"MINUS\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"GRAPH\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"SERVICE\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"FILTER\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"BIND\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"VALUES\": [\"[graphPatternNotTriples,?.,?triplesBlock]\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"}\": []}, \n  \"*[quadsNotTriples,?.,?triplesTemplate]\" : {\n     \"GRAPH\": [\"[quadsNotTriples,?.,?triplesTemplate]\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"}\": []}, \n  \"*[|,pathOneInPropertySet]\" : {\n     \"|\": [\"[|,pathOneInPropertySet]\",\"*[|,pathOneInPropertySet]\"], \n     \")\": []}, \n  \"*[|,pathSequence]\" : {\n     \"|\": [\"[|,pathSequence]\",\"*[|,pathSequence]\"], \n     \")\": [], \n     \"(\": [], \n     \"[\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"IRI_REF\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": []}, \n  \"*[||,conditionalAndExpression]\" : {\n     \"||\": [\"[||,conditionalAndExpression]\",\"*[||,conditionalAndExpression]\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \";\": []}, \n  \"*dataBlockValue\" : {\n     \"UNDEF\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"IRI_REF\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"TRUE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"FALSE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"PNAME_LN\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"PNAME_NS\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"STRING_LITERAL1\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"STRING_LITERAL2\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"STRING_LITERAL_LONG1\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"STRING_LITERAL_LONG2\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"INTEGER\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DECIMAL\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DOUBLE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"INTEGER_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DECIMAL_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DOUBLE_POSITIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"INTEGER_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DECIMAL_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"DOUBLE_NEGATIVE\": [\"dataBlockValue\",\"*dataBlockValue\"], \n     \"}\": [], \n     \")\": []}, \n  \"*datasetClause\" : {\n     \"FROM\": [\"datasetClause\",\"*datasetClause\"], \n     \"WHERE\": [], \n     \"{\": []}, \n  \"*describeDatasetClause\" : {\n     \"FROM\": [\"describeDatasetClause\",\"*describeDatasetClause\"], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"WHERE\": [], \n     \"{\": [], \n     \"VALUES\": [], \n     \"$\": []}, \n  \"*graphNode\" : {\n     \"(\": [\"graphNode\",\"*graphNode\"], \n     \"[\": [\"graphNode\",\"*graphNode\"], \n     \"VAR1\": [\"graphNode\",\"*graphNode\"], \n     \"VAR2\": [\"graphNode\",\"*graphNode\"], \n     \"NIL\": [\"graphNode\",\"*graphNode\"], \n     \"IRI_REF\": [\"graphNode\",\"*graphNode\"], \n     \"TRUE\": [\"graphNode\",\"*graphNode\"], \n     \"FALSE\": [\"graphNode\",\"*graphNode\"], \n     \"BLANK_NODE_LABEL\": [\"graphNode\",\"*graphNode\"], \n     \"ANON\": [\"graphNode\",\"*graphNode\"], \n     \"PNAME_LN\": [\"graphNode\",\"*graphNode\"], \n     \"PNAME_NS\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL1\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL2\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \")\": []}, \n  \"*graphNodePath\" : {\n     \"(\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"[\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"VAR1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"VAR2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"NIL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"IRI_REF\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"TRUE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"FALSE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"BLANK_NODE_LABEL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"ANON\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"PNAME_LN\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"PNAME_NS\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \")\": []}, \n  \"*groupCondition\" : {\n     \"(\": [\"groupCondition\",\"*groupCondition\"], \n     \"STR\": [\"groupCondition\",\"*groupCondition\"], \n     \"LANG\": [\"groupCondition\",\"*groupCondition\"], \n     \"LANGMATCHES\": [\"groupCondition\",\"*groupCondition\"], \n     \"DATATYPE\": [\"groupCondition\",\"*groupCondition\"], \n     \"BOUND\": [\"groupCondition\",\"*groupCondition\"], \n     \"IRI\": [\"groupCondition\",\"*groupCondition\"], \n     \"URI\": [\"groupCondition\",\"*groupCondition\"], \n     \"BNODE\": [\"groupCondition\",\"*groupCondition\"], \n     \"RAND\": [\"groupCondition\",\"*groupCondition\"], \n     \"ABS\": [\"groupCondition\",\"*groupCondition\"], \n     \"CEIL\": [\"groupCondition\",\"*groupCondition\"], \n     \"FLOOR\": [\"groupCondition\",\"*groupCondition\"], \n     \"ROUND\": [\"groupCondition\",\"*groupCondition\"], \n     \"CONCAT\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRLEN\": [\"groupCondition\",\"*groupCondition\"], \n     \"UCASE\": [\"groupCondition\",\"*groupCondition\"], \n     \"LCASE\": [\"groupCondition\",\"*groupCondition\"], \n     \"ENCODE_FOR_URI\": [\"groupCondition\",\"*groupCondition\"], \n     \"CONTAINS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRSTARTS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRENDS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRBEFORE\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRAFTER\": [\"groupCondition\",\"*groupCondition\"], \n     \"YEAR\": [\"groupCondition\",\"*groupCondition\"], \n     \"MONTH\": [\"groupCondition\",\"*groupCondition\"], \n     \"DAY\": [\"groupCondition\",\"*groupCondition\"], \n     \"HOURS\": [\"groupCondition\",\"*groupCondition\"], \n     \"MINUTES\": [\"groupCondition\",\"*groupCondition\"], \n     \"SECONDS\": [\"groupCondition\",\"*groupCondition\"], \n     \"TIMEZONE\": [\"groupCondition\",\"*groupCondition\"], \n     \"TZ\": [\"groupCondition\",\"*groupCondition\"], \n     \"NOW\": [\"groupCondition\",\"*groupCondition\"], \n     \"UUID\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRUUID\": [\"groupCondition\",\"*groupCondition\"], \n     \"MD5\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA1\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA256\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA384\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA512\": [\"groupCondition\",\"*groupCondition\"], \n     \"COALESCE\": [\"groupCondition\",\"*groupCondition\"], \n     \"IF\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRLANG\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRDT\": [\"groupCondition\",\"*groupCondition\"], \n     \"SAMETERM\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISIRI\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISURI\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISBLANK\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISLITERAL\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISNUMERIC\": [\"groupCondition\",\"*groupCondition\"], \n     \"VAR1\": [\"groupCondition\",\"*groupCondition\"], \n     \"VAR2\": [\"groupCondition\",\"*groupCondition\"], \n     \"SUBSTR\": [\"groupCondition\",\"*groupCondition\"], \n     \"REPLACE\": [\"groupCondition\",\"*groupCondition\"], \n     \"REGEX\": [\"groupCondition\",\"*groupCondition\"], \n     \"EXISTS\": [\"groupCondition\",\"*groupCondition\"], \n     \"NOT\": [\"groupCondition\",\"*groupCondition\"], \n     \"IRI_REF\": [\"groupCondition\",\"*groupCondition\"], \n     \"PNAME_LN\": [\"groupCondition\",\"*groupCondition\"], \n     \"PNAME_NS\": [\"groupCondition\",\"*groupCondition\"], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"*havingCondition\" : {\n     \"(\": [\"havingCondition\",\"*havingCondition\"], \n     \"STR\": [\"havingCondition\",\"*havingCondition\"], \n     \"LANG\": [\"havingCondition\",\"*havingCondition\"], \n     \"LANGMATCHES\": [\"havingCondition\",\"*havingCondition\"], \n     \"DATATYPE\": [\"havingCondition\",\"*havingCondition\"], \n     \"BOUND\": [\"havingCondition\",\"*havingCondition\"], \n     \"IRI\": [\"havingCondition\",\"*havingCondition\"], \n     \"URI\": [\"havingCondition\",\"*havingCondition\"], \n     \"BNODE\": [\"havingCondition\",\"*havingCondition\"], \n     \"RAND\": [\"havingCondition\",\"*havingCondition\"], \n     \"ABS\": [\"havingCondition\",\"*havingCondition\"], \n     \"CEIL\": [\"havingCondition\",\"*havingCondition\"], \n     \"FLOOR\": [\"havingCondition\",\"*havingCondition\"], \n     \"ROUND\": [\"havingCondition\",\"*havingCondition\"], \n     \"CONCAT\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRLEN\": [\"havingCondition\",\"*havingCondition\"], \n     \"UCASE\": [\"havingCondition\",\"*havingCondition\"], \n     \"LCASE\": [\"havingCondition\",\"*havingCondition\"], \n     \"ENCODE_FOR_URI\": [\"havingCondition\",\"*havingCondition\"], \n     \"CONTAINS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRSTARTS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRENDS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRBEFORE\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRAFTER\": [\"havingCondition\",\"*havingCondition\"], \n     \"YEAR\": [\"havingCondition\",\"*havingCondition\"], \n     \"MONTH\": [\"havingCondition\",\"*havingCondition\"], \n     \"DAY\": [\"havingCondition\",\"*havingCondition\"], \n     \"HOURS\": [\"havingCondition\",\"*havingCondition\"], \n     \"MINUTES\": [\"havingCondition\",\"*havingCondition\"], \n     \"SECONDS\": [\"havingCondition\",\"*havingCondition\"], \n     \"TIMEZONE\": [\"havingCondition\",\"*havingCondition\"], \n     \"TZ\": [\"havingCondition\",\"*havingCondition\"], \n     \"NOW\": [\"havingCondition\",\"*havingCondition\"], \n     \"UUID\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRUUID\": [\"havingCondition\",\"*havingCondition\"], \n     \"MD5\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA1\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA256\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA384\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA512\": [\"havingCondition\",\"*havingCondition\"], \n     \"COALESCE\": [\"havingCondition\",\"*havingCondition\"], \n     \"IF\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRLANG\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRDT\": [\"havingCondition\",\"*havingCondition\"], \n     \"SAMETERM\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISIRI\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISURI\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISBLANK\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISLITERAL\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISNUMERIC\": [\"havingCondition\",\"*havingCondition\"], \n     \"SUBSTR\": [\"havingCondition\",\"*havingCondition\"], \n     \"REPLACE\": [\"havingCondition\",\"*havingCondition\"], \n     \"REGEX\": [\"havingCondition\",\"*havingCondition\"], \n     \"EXISTS\": [\"havingCondition\",\"*havingCondition\"], \n     \"NOT\": [\"havingCondition\",\"*havingCondition\"], \n     \"IRI_REF\": [\"havingCondition\",\"*havingCondition\"], \n     \"PNAME_LN\": [\"havingCondition\",\"*havingCondition\"], \n     \"PNAME_NS\": [\"havingCondition\",\"*havingCondition\"], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"ORDER\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"*or([[ (,*dataBlockValue,)],NIL])\" : {\n     \"(\": [\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"], \n     \"NIL\": [\"or([[ (,*dataBlockValue,)],NIL])\",\"*or([[ (,*dataBlockValue,)],NIL])\"], \n     \"}\": []}, \n  \"*or([[*,unaryExpression],[/,unaryExpression]])\" : {\n     \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \"+\": [], \n     \"-\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \";\": []}, \n  \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\" : {\n     \"+\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"-\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE_POSITIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE_NEGATIVE\": [\"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \";\": []}, \n  \"*or([baseDecl,prefixDecl])\" : {\n     \"BASE\": [\"or([baseDecl,prefixDecl])\",\"*or([baseDecl,prefixDecl])\"], \n     \"PREFIX\": [\"or([baseDecl,prefixDecl])\",\"*or([baseDecl,prefixDecl])\"], \n     \"$\": [], \n     \"CONSTRUCT\": [], \n     \"DESCRIBE\": [], \n     \"ASK\": [], \n     \"INSERT\": [], \n     \"DELETE\": [], \n     \"SELECT\": [], \n     \"LOAD\": [], \n     \"CLEAR\": [], \n     \"DROP\": [], \n     \"ADD\": [], \n     \"MOVE\": [], \n     \"COPY\": [], \n     \"CREATE\": [], \n     \"WITH\": []}, \n  \"*or([var,[ (,expression,AS,var,)]])\" : {\n     \"(\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR1\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR2\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"WHERE\": [], \n     \"{\": [], \n     \"FROM\": []}, \n  \"*orderCondition\" : {\n     \"ASC\": [\"orderCondition\",\"*orderCondition\"], \n     \"DESC\": [\"orderCondition\",\"*orderCondition\"], \n     \"VAR1\": [\"orderCondition\",\"*orderCondition\"], \n     \"VAR2\": [\"orderCondition\",\"*orderCondition\"], \n     \"(\": [\"orderCondition\",\"*orderCondition\"], \n     \"STR\": [\"orderCondition\",\"*orderCondition\"], \n     \"LANG\": [\"orderCondition\",\"*orderCondition\"], \n     \"LANGMATCHES\": [\"orderCondition\",\"*orderCondition\"], \n     \"DATATYPE\": [\"orderCondition\",\"*orderCondition\"], \n     \"BOUND\": [\"orderCondition\",\"*orderCondition\"], \n     \"IRI\": [\"orderCondition\",\"*orderCondition\"], \n     \"URI\": [\"orderCondition\",\"*orderCondition\"], \n     \"BNODE\": [\"orderCondition\",\"*orderCondition\"], \n     \"RAND\": [\"orderCondition\",\"*orderCondition\"], \n     \"ABS\": [\"orderCondition\",\"*orderCondition\"], \n     \"CEIL\": [\"orderCondition\",\"*orderCondition\"], \n     \"FLOOR\": [\"orderCondition\",\"*orderCondition\"], \n     \"ROUND\": [\"orderCondition\",\"*orderCondition\"], \n     \"CONCAT\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRLEN\": [\"orderCondition\",\"*orderCondition\"], \n     \"UCASE\": [\"orderCondition\",\"*orderCondition\"], \n     \"LCASE\": [\"orderCondition\",\"*orderCondition\"], \n     \"ENCODE_FOR_URI\": [\"orderCondition\",\"*orderCondition\"], \n     \"CONTAINS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRSTARTS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRENDS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRBEFORE\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRAFTER\": [\"orderCondition\",\"*orderCondition\"], \n     \"YEAR\": [\"orderCondition\",\"*orderCondition\"], \n     \"MONTH\": [\"orderCondition\",\"*orderCondition\"], \n     \"DAY\": [\"orderCondition\",\"*orderCondition\"], \n     \"HOURS\": [\"orderCondition\",\"*orderCondition\"], \n     \"MINUTES\": [\"orderCondition\",\"*orderCondition\"], \n     \"SECONDS\": [\"orderCondition\",\"*orderCondition\"], \n     \"TIMEZONE\": [\"orderCondition\",\"*orderCondition\"], \n     \"TZ\": [\"orderCondition\",\"*orderCondition\"], \n     \"NOW\": [\"orderCondition\",\"*orderCondition\"], \n     \"UUID\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRUUID\": [\"orderCondition\",\"*orderCondition\"], \n     \"MD5\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA1\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA256\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA384\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA512\": [\"orderCondition\",\"*orderCondition\"], \n     \"COALESCE\": [\"orderCondition\",\"*orderCondition\"], \n     \"IF\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRLANG\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRDT\": [\"orderCondition\",\"*orderCondition\"], \n     \"SAMETERM\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISIRI\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISURI\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISBLANK\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISLITERAL\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISNUMERIC\": [\"orderCondition\",\"*orderCondition\"], \n     \"SUBSTR\": [\"orderCondition\",\"*orderCondition\"], \n     \"REPLACE\": [\"orderCondition\",\"*orderCondition\"], \n     \"REGEX\": [\"orderCondition\",\"*orderCondition\"], \n     \"EXISTS\": [\"orderCondition\",\"*orderCondition\"], \n     \"NOT\": [\"orderCondition\",\"*orderCondition\"], \n     \"IRI_REF\": [\"orderCondition\",\"*orderCondition\"], \n     \"PNAME_LN\": [\"orderCondition\",\"*orderCondition\"], \n     \"PNAME_NS\": [\"orderCondition\",\"*orderCondition\"], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"*usingClause\" : {\n     \"USING\": [\"usingClause\",\"*usingClause\"], \n     \"WHERE\": []}, \n  \"*var\" : {\n     \"VAR1\": [\"var\",\"*var\"], \n     \"VAR2\": [\"var\",\"*var\"], \n     \")\": []}, \n  \"*varOrIRIref\" : {\n     \"VAR1\": [\"varOrIRIref\",\"*varOrIRIref\"], \n     \"VAR2\": [\"varOrIRIref\",\"*varOrIRIref\"], \n     \"IRI_REF\": [\"varOrIRIref\",\"*varOrIRIref\"], \n     \"PNAME_LN\": [\"varOrIRIref\",\"*varOrIRIref\"], \n     \"PNAME_NS\": [\"varOrIRIref\",\"*varOrIRIref\"], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"WHERE\": [], \n     \"{\": [], \n     \"FROM\": [], \n     \"VALUES\": [], \n     \"$\": []}, \n  \"+graphNode\" : {\n     \"(\": [\"graphNode\",\"*graphNode\"], \n     \"[\": [\"graphNode\",\"*graphNode\"], \n     \"VAR1\": [\"graphNode\",\"*graphNode\"], \n     \"VAR2\": [\"graphNode\",\"*graphNode\"], \n     \"NIL\": [\"graphNode\",\"*graphNode\"], \n     \"IRI_REF\": [\"graphNode\",\"*graphNode\"], \n     \"TRUE\": [\"graphNode\",\"*graphNode\"], \n     \"FALSE\": [\"graphNode\",\"*graphNode\"], \n     \"BLANK_NODE_LABEL\": [\"graphNode\",\"*graphNode\"], \n     \"ANON\": [\"graphNode\",\"*graphNode\"], \n     \"PNAME_LN\": [\"graphNode\",\"*graphNode\"], \n     \"PNAME_NS\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL1\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL2\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNode\",\"*graphNode\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE_POSITIVE\": [\"graphNode\",\"*graphNode\"], \n     \"INTEGER_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNode\",\"*graphNode\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNode\",\"*graphNode\"]}, \n  \"+graphNodePath\" : {\n     \"(\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"[\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"VAR1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"VAR2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"NIL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"IRI_REF\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"TRUE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"FALSE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"BLANK_NODE_LABEL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"ANON\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"PNAME_LN\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"PNAME_NS\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE_POSITIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"INTEGER_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNodePath\",\"*graphNodePath\"]}, \n  \"+groupCondition\" : {\n     \"(\": [\"groupCondition\",\"*groupCondition\"], \n     \"STR\": [\"groupCondition\",\"*groupCondition\"], \n     \"LANG\": [\"groupCondition\",\"*groupCondition\"], \n     \"LANGMATCHES\": [\"groupCondition\",\"*groupCondition\"], \n     \"DATATYPE\": [\"groupCondition\",\"*groupCondition\"], \n     \"BOUND\": [\"groupCondition\",\"*groupCondition\"], \n     \"IRI\": [\"groupCondition\",\"*groupCondition\"], \n     \"URI\": [\"groupCondition\",\"*groupCondition\"], \n     \"BNODE\": [\"groupCondition\",\"*groupCondition\"], \n     \"RAND\": [\"groupCondition\",\"*groupCondition\"], \n     \"ABS\": [\"groupCondition\",\"*groupCondition\"], \n     \"CEIL\": [\"groupCondition\",\"*groupCondition\"], \n     \"FLOOR\": [\"groupCondition\",\"*groupCondition\"], \n     \"ROUND\": [\"groupCondition\",\"*groupCondition\"], \n     \"CONCAT\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRLEN\": [\"groupCondition\",\"*groupCondition\"], \n     \"UCASE\": [\"groupCondition\",\"*groupCondition\"], \n     \"LCASE\": [\"groupCondition\",\"*groupCondition\"], \n     \"ENCODE_FOR_URI\": [\"groupCondition\",\"*groupCondition\"], \n     \"CONTAINS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRSTARTS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRENDS\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRBEFORE\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRAFTER\": [\"groupCondition\",\"*groupCondition\"], \n     \"YEAR\": [\"groupCondition\",\"*groupCondition\"], \n     \"MONTH\": [\"groupCondition\",\"*groupCondition\"], \n     \"DAY\": [\"groupCondition\",\"*groupCondition\"], \n     \"HOURS\": [\"groupCondition\",\"*groupCondition\"], \n     \"MINUTES\": [\"groupCondition\",\"*groupCondition\"], \n     \"SECONDS\": [\"groupCondition\",\"*groupCondition\"], \n     \"TIMEZONE\": [\"groupCondition\",\"*groupCondition\"], \n     \"TZ\": [\"groupCondition\",\"*groupCondition\"], \n     \"NOW\": [\"groupCondition\",\"*groupCondition\"], \n     \"UUID\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRUUID\": [\"groupCondition\",\"*groupCondition\"], \n     \"MD5\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA1\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA256\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA384\": [\"groupCondition\",\"*groupCondition\"], \n     \"SHA512\": [\"groupCondition\",\"*groupCondition\"], \n     \"COALESCE\": [\"groupCondition\",\"*groupCondition\"], \n     \"IF\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRLANG\": [\"groupCondition\",\"*groupCondition\"], \n     \"STRDT\": [\"groupCondition\",\"*groupCondition\"], \n     \"SAMETERM\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISIRI\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISURI\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISBLANK\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISLITERAL\": [\"groupCondition\",\"*groupCondition\"], \n     \"ISNUMERIC\": [\"groupCondition\",\"*groupCondition\"], \n     \"VAR1\": [\"groupCondition\",\"*groupCondition\"], \n     \"VAR2\": [\"groupCondition\",\"*groupCondition\"], \n     \"SUBSTR\": [\"groupCondition\",\"*groupCondition\"], \n     \"REPLACE\": [\"groupCondition\",\"*groupCondition\"], \n     \"REGEX\": [\"groupCondition\",\"*groupCondition\"], \n     \"EXISTS\": [\"groupCondition\",\"*groupCondition\"], \n     \"NOT\": [\"groupCondition\",\"*groupCondition\"], \n     \"IRI_REF\": [\"groupCondition\",\"*groupCondition\"], \n     \"PNAME_LN\": [\"groupCondition\",\"*groupCondition\"], \n     \"PNAME_NS\": [\"groupCondition\",\"*groupCondition\"]}, \n  \"+havingCondition\" : {\n     \"(\": [\"havingCondition\",\"*havingCondition\"], \n     \"STR\": [\"havingCondition\",\"*havingCondition\"], \n     \"LANG\": [\"havingCondition\",\"*havingCondition\"], \n     \"LANGMATCHES\": [\"havingCondition\",\"*havingCondition\"], \n     \"DATATYPE\": [\"havingCondition\",\"*havingCondition\"], \n     \"BOUND\": [\"havingCondition\",\"*havingCondition\"], \n     \"IRI\": [\"havingCondition\",\"*havingCondition\"], \n     \"URI\": [\"havingCondition\",\"*havingCondition\"], \n     \"BNODE\": [\"havingCondition\",\"*havingCondition\"], \n     \"RAND\": [\"havingCondition\",\"*havingCondition\"], \n     \"ABS\": [\"havingCondition\",\"*havingCondition\"], \n     \"CEIL\": [\"havingCondition\",\"*havingCondition\"], \n     \"FLOOR\": [\"havingCondition\",\"*havingCondition\"], \n     \"ROUND\": [\"havingCondition\",\"*havingCondition\"], \n     \"CONCAT\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRLEN\": [\"havingCondition\",\"*havingCondition\"], \n     \"UCASE\": [\"havingCondition\",\"*havingCondition\"], \n     \"LCASE\": [\"havingCondition\",\"*havingCondition\"], \n     \"ENCODE_FOR_URI\": [\"havingCondition\",\"*havingCondition\"], \n     \"CONTAINS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRSTARTS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRENDS\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRBEFORE\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRAFTER\": [\"havingCondition\",\"*havingCondition\"], \n     \"YEAR\": [\"havingCondition\",\"*havingCondition\"], \n     \"MONTH\": [\"havingCondition\",\"*havingCondition\"], \n     \"DAY\": [\"havingCondition\",\"*havingCondition\"], \n     \"HOURS\": [\"havingCondition\",\"*havingCondition\"], \n     \"MINUTES\": [\"havingCondition\",\"*havingCondition\"], \n     \"SECONDS\": [\"havingCondition\",\"*havingCondition\"], \n     \"TIMEZONE\": [\"havingCondition\",\"*havingCondition\"], \n     \"TZ\": [\"havingCondition\",\"*havingCondition\"], \n     \"NOW\": [\"havingCondition\",\"*havingCondition\"], \n     \"UUID\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRUUID\": [\"havingCondition\",\"*havingCondition\"], \n     \"MD5\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA1\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA256\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA384\": [\"havingCondition\",\"*havingCondition\"], \n     \"SHA512\": [\"havingCondition\",\"*havingCondition\"], \n     \"COALESCE\": [\"havingCondition\",\"*havingCondition\"], \n     \"IF\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRLANG\": [\"havingCondition\",\"*havingCondition\"], \n     \"STRDT\": [\"havingCondition\",\"*havingCondition\"], \n     \"SAMETERM\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISIRI\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISURI\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISBLANK\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISLITERAL\": [\"havingCondition\",\"*havingCondition\"], \n     \"ISNUMERIC\": [\"havingCondition\",\"*havingCondition\"], \n     \"SUBSTR\": [\"havingCondition\",\"*havingCondition\"], \n     \"REPLACE\": [\"havingCondition\",\"*havingCondition\"], \n     \"REGEX\": [\"havingCondition\",\"*havingCondition\"], \n     \"EXISTS\": [\"havingCondition\",\"*havingCondition\"], \n     \"NOT\": [\"havingCondition\",\"*havingCondition\"], \n     \"IRI_REF\": [\"havingCondition\",\"*havingCondition\"], \n     \"PNAME_LN\": [\"havingCondition\",\"*havingCondition\"], \n     \"PNAME_NS\": [\"havingCondition\",\"*havingCondition\"]}, \n  \"+or([var,[ (,expression,AS,var,)]])\" : {\n     \"(\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR1\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR2\": [\"or([var,[ (,expression,AS,var,)]])\",\"*or([var,[ (,expression,AS,var,)]])\"]}, \n  \"+orderCondition\" : {\n     \"ASC\": [\"orderCondition\",\"*orderCondition\"], \n     \"DESC\": [\"orderCondition\",\"*orderCondition\"], \n     \"VAR1\": [\"orderCondition\",\"*orderCondition\"], \n     \"VAR2\": [\"orderCondition\",\"*orderCondition\"], \n     \"(\": [\"orderCondition\",\"*orderCondition\"], \n     \"STR\": [\"orderCondition\",\"*orderCondition\"], \n     \"LANG\": [\"orderCondition\",\"*orderCondition\"], \n     \"LANGMATCHES\": [\"orderCondition\",\"*orderCondition\"], \n     \"DATATYPE\": [\"orderCondition\",\"*orderCondition\"], \n     \"BOUND\": [\"orderCondition\",\"*orderCondition\"], \n     \"IRI\": [\"orderCondition\",\"*orderCondition\"], \n     \"URI\": [\"orderCondition\",\"*orderCondition\"], \n     \"BNODE\": [\"orderCondition\",\"*orderCondition\"], \n     \"RAND\": [\"orderCondition\",\"*orderCondition\"], \n     \"ABS\": [\"orderCondition\",\"*orderCondition\"], \n     \"CEIL\": [\"orderCondition\",\"*orderCondition\"], \n     \"FLOOR\": [\"orderCondition\",\"*orderCondition\"], \n     \"ROUND\": [\"orderCondition\",\"*orderCondition\"], \n     \"CONCAT\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRLEN\": [\"orderCondition\",\"*orderCondition\"], \n     \"UCASE\": [\"orderCondition\",\"*orderCondition\"], \n     \"LCASE\": [\"orderCondition\",\"*orderCondition\"], \n     \"ENCODE_FOR_URI\": [\"orderCondition\",\"*orderCondition\"], \n     \"CONTAINS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRSTARTS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRENDS\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRBEFORE\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRAFTER\": [\"orderCondition\",\"*orderCondition\"], \n     \"YEAR\": [\"orderCondition\",\"*orderCondition\"], \n     \"MONTH\": [\"orderCondition\",\"*orderCondition\"], \n     \"DAY\": [\"orderCondition\",\"*orderCondition\"], \n     \"HOURS\": [\"orderCondition\",\"*orderCondition\"], \n     \"MINUTES\": [\"orderCondition\",\"*orderCondition\"], \n     \"SECONDS\": [\"orderCondition\",\"*orderCondition\"], \n     \"TIMEZONE\": [\"orderCondition\",\"*orderCondition\"], \n     \"TZ\": [\"orderCondition\",\"*orderCondition\"], \n     \"NOW\": [\"orderCondition\",\"*orderCondition\"], \n     \"UUID\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRUUID\": [\"orderCondition\",\"*orderCondition\"], \n     \"MD5\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA1\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA256\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA384\": [\"orderCondition\",\"*orderCondition\"], \n     \"SHA512\": [\"orderCondition\",\"*orderCondition\"], \n     \"COALESCE\": [\"orderCondition\",\"*orderCondition\"], \n     \"IF\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRLANG\": [\"orderCondition\",\"*orderCondition\"], \n     \"STRDT\": [\"orderCondition\",\"*orderCondition\"], \n     \"SAMETERM\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISIRI\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISURI\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISBLANK\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISLITERAL\": [\"orderCondition\",\"*orderCondition\"], \n     \"ISNUMERIC\": [\"orderCondition\",\"*orderCondition\"], \n     \"SUBSTR\": [\"orderCondition\",\"*orderCondition\"], \n     \"REPLACE\": [\"orderCondition\",\"*orderCondition\"], \n     \"REGEX\": [\"orderCondition\",\"*orderCondition\"], \n     \"EXISTS\": [\"orderCondition\",\"*orderCondition\"], \n     \"NOT\": [\"orderCondition\",\"*orderCondition\"], \n     \"IRI_REF\": [\"orderCondition\",\"*orderCondition\"], \n     \"PNAME_LN\": [\"orderCondition\",\"*orderCondition\"], \n     \"PNAME_NS\": [\"orderCondition\",\"*orderCondition\"]}, \n  \"+varOrIRIref\" : {\n     \"VAR1\": [\"varOrIRIref\",\"*varOrIRIref\"], \n     \"VAR2\": [\"varOrIRIref\",\"*varOrIRIref\"], \n     \"IRI_REF\": [\"varOrIRIref\",\"*varOrIRIref\"], \n     \"PNAME_LN\": [\"varOrIRIref\",\"*varOrIRIref\"], \n     \"PNAME_NS\": [\"varOrIRIref\",\"*varOrIRIref\"]}, \n  \"?.\" : {\n     \".\": [\".\"], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"(\": [], \n     \"[\": [], \n     \"IRI_REF\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"GRAPH\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"?DISTINCT\" : {\n     \"DISTINCT\": [\"DISTINCT\"], \n     \"!\": [], \n     \"+\": [], \n     \"-\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"(\": [], \n     \"STR\": [], \n     \"LANG\": [], \n     \"LANGMATCHES\": [], \n     \"DATATYPE\": [], \n     \"BOUND\": [], \n     \"IRI\": [], \n     \"URI\": [], \n     \"BNODE\": [], \n     \"RAND\": [], \n     \"ABS\": [], \n     \"CEIL\": [], \n     \"FLOOR\": [], \n     \"ROUND\": [], \n     \"CONCAT\": [], \n     \"STRLEN\": [], \n     \"UCASE\": [], \n     \"LCASE\": [], \n     \"ENCODE_FOR_URI\": [], \n     \"CONTAINS\": [], \n     \"STRSTARTS\": [], \n     \"STRENDS\": [], \n     \"STRBEFORE\": [], \n     \"STRAFTER\": [], \n     \"YEAR\": [], \n     \"MONTH\": [], \n     \"DAY\": [], \n     \"HOURS\": [], \n     \"MINUTES\": [], \n     \"SECONDS\": [], \n     \"TIMEZONE\": [], \n     \"TZ\": [], \n     \"NOW\": [], \n     \"UUID\": [], \n     \"STRUUID\": [], \n     \"MD5\": [], \n     \"SHA1\": [], \n     \"SHA256\": [], \n     \"SHA384\": [], \n     \"SHA512\": [], \n     \"COALESCE\": [], \n     \"IF\": [], \n     \"STRLANG\": [], \n     \"STRDT\": [], \n     \"SAMETERM\": [], \n     \"ISIRI\": [], \n     \"ISURI\": [], \n     \"ISBLANK\": [], \n     \"ISLITERAL\": [], \n     \"ISNUMERIC\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"COUNT\": [], \n     \"SUM\": [], \n     \"MIN\": [], \n     \"MAX\": [], \n     \"AVG\": [], \n     \"SAMPLE\": [], \n     \"GROUP_CONCAT\": [], \n     \"SUBSTR\": [], \n     \"REPLACE\": [], \n     \"REGEX\": [], \n     \"EXISTS\": [], \n     \"NOT\": [], \n     \"IRI_REF\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"*\": []}, \n  \"?GRAPH\" : {\n     \"GRAPH\": [\"GRAPH\"], \n     \"IRI_REF\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": []}, \n  \"?SILENT\" : {\n     \"SILENT\": [\"SILENT\"], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"IRI_REF\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": []}, \n  \"?SILENT_1\" : {\n     \"SILENT\": [\"SILENT\"], \n     \"IRI_REF\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": []}, \n  \"?SILENT_2\" : {\n     \"SILENT\": [\"SILENT\"], \n     \"GRAPH\": [], \n     \"DEFAULT\": [], \n     \"NAMED\": [], \n     \"ALL\": []}, \n  \"?SILENT_3\" : {\n     \"SILENT\": [\"SILENT\"], \n     \"GRAPH\": []}, \n  \"?SILENT_4\" : {\n     \"SILENT\": [\"SILENT\"], \n     \"DEFAULT\": [], \n     \"GRAPH\": [], \n     \"IRI_REF\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": []}, \n  \"?WHERE\" : {\n     \"WHERE\": [\"WHERE\"], \n     \"{\": []}, \n  \"?[,,expression]\" : {\n     \",\": [\"[,,expression]\"], \n     \")\": []}, \n  \"?[.,?constructTriples]\" : {\n     \".\": [\"[.,?constructTriples]\"], \n     \"}\": []}, \n  \"?[.,?triplesBlock]\" : {\n     \".\": [\"[.,?triplesBlock]\"], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"?[.,?triplesTemplate]\" : {\n     \".\": [\"[.,?triplesTemplate]\"], \n     \"}\": [], \n     \"GRAPH\": []}, \n  \"?[;,SEPARATOR,=,string]\" : {\n     \";\": [\"[;,SEPARATOR,=,string]\"], \n     \")\": []}, \n  \"?[;,update]\" : {\n     \";\": [\"[;,update]\"], \n     \"$\": []}, \n  \"?[AS,var]\" : {\n     \"AS\": [\"[AS,var]\"], \n     \")\": []}, \n  \"?[INTO,graphRef]\" : {\n     \"INTO\": [\"[INTO,graphRef]\"], \n     \";\": [], \n     \"$\": []}, \n  \"?[or([verbPath,verbSimple]),objectList]\" : {\n     \"VAR1\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"VAR2\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"^\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"a\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"!\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"(\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"IRI_REF\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"PNAME_LN\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \"PNAME_NS\": [\"[or([verbPath,verbSimple]),objectList]\"], \n     \";\": [], \n     \".\": [], \n     \"]\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\" : {\n     \"a\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \"^\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \"IRI_REF\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \"PNAME_LN\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \"PNAME_NS\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"], \n     \")\": []}, \n  \"?[update1,?[;,update]]\" : {\n     \"INSERT\": [\"[update1,?[;,update]]\"], \n     \"DELETE\": [\"[update1,?[;,update]]\"], \n     \"LOAD\": [\"[update1,?[;,update]]\"], \n     \"CLEAR\": [\"[update1,?[;,update]]\"], \n     \"DROP\": [\"[update1,?[;,update]]\"], \n     \"ADD\": [\"[update1,?[;,update]]\"], \n     \"MOVE\": [\"[update1,?[;,update]]\"], \n     \"COPY\": [\"[update1,?[;,update]]\"], \n     \"CREATE\": [\"[update1,?[;,update]]\"], \n     \"WITH\": [\"[update1,?[;,update]]\"], \n     \"$\": []}, \n  \"?[verb,objectList]\" : {\n     \"a\": [\"[verb,objectList]\"], \n     \"VAR1\": [\"[verb,objectList]\"], \n     \"VAR2\": [\"[verb,objectList]\"], \n     \"IRI_REF\": [\"[verb,objectList]\"], \n     \"PNAME_LN\": [\"[verb,objectList]\"], \n     \"PNAME_NS\": [\"[verb,objectList]\"], \n     \";\": [], \n     \".\": [], \n     \"]\": [], \n     \"}\": [], \n     \"GRAPH\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": []}, \n  \"?argList\" : {\n     \"NIL\": [\"argList\"], \n     \"(\": [\"argList\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \"+\": [], \n     \"-\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"*\": [], \n     \"/\": [], \n     \";\": []}, \n  \"?constructTriples\" : {\n     \"VAR1\": [\"constructTriples\"], \n     \"VAR2\": [\"constructTriples\"], \n     \"NIL\": [\"constructTriples\"], \n     \"(\": [\"constructTriples\"], \n     \"[\": [\"constructTriples\"], \n     \"IRI_REF\": [\"constructTriples\"], \n     \"TRUE\": [\"constructTriples\"], \n     \"FALSE\": [\"constructTriples\"], \n     \"BLANK_NODE_LABEL\": [\"constructTriples\"], \n     \"ANON\": [\"constructTriples\"], \n     \"PNAME_LN\": [\"constructTriples\"], \n     \"PNAME_NS\": [\"constructTriples\"], \n     \"STRING_LITERAL1\": [\"constructTriples\"], \n     \"STRING_LITERAL2\": [\"constructTriples\"], \n     \"STRING_LITERAL_LONG1\": [\"constructTriples\"], \n     \"STRING_LITERAL_LONG2\": [\"constructTriples\"], \n     \"INTEGER\": [\"constructTriples\"], \n     \"DECIMAL\": [\"constructTriples\"], \n     \"DOUBLE\": [\"constructTriples\"], \n     \"INTEGER_POSITIVE\": [\"constructTriples\"], \n     \"DECIMAL_POSITIVE\": [\"constructTriples\"], \n     \"DOUBLE_POSITIVE\": [\"constructTriples\"], \n     \"INTEGER_NEGATIVE\": [\"constructTriples\"], \n     \"DECIMAL_NEGATIVE\": [\"constructTriples\"], \n     \"DOUBLE_NEGATIVE\": [\"constructTriples\"], \n     \"}\": []}, \n  \"?groupClause\" : {\n     \"GROUP\": [\"groupClause\"], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?havingClause\" : {\n     \"HAVING\": [\"havingClause\"], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"ORDER\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?insertClause\" : {\n     \"INSERT\": [\"insertClause\"], \n     \"WHERE\": [], \n     \"USING\": []}, \n  \"?limitClause\" : {\n     \"LIMIT\": [\"limitClause\"], \n     \"VALUES\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?limitOffsetClauses\" : {\n     \"LIMIT\": [\"limitOffsetClauses\"], \n     \"OFFSET\": [\"limitOffsetClauses\"], \n     \"VALUES\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?offsetClause\" : {\n     \"OFFSET\": [\"offsetClause\"], \n     \"VALUES\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?or([DISTINCT,REDUCED])\" : {\n     \"DISTINCT\": [\"or([DISTINCT,REDUCED])\"], \n     \"REDUCED\": [\"or([DISTINCT,REDUCED])\"], \n     \"*\": [], \n     \"(\": [], \n     \"VAR1\": [], \n     \"VAR2\": []}, \n  \"?or([LANGTAG,[^^,iriRef]])\" : {\n     \"LANGTAG\": [\"or([LANGTAG,[^^,iriRef]])\"], \n     \"^^\": [\"or([LANGTAG,[^^,iriRef]])\"], \n     \"UNDEF\": [], \n     \"IRI_REF\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"a\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"^\": [], \n     \"!\": [], \n     \"(\": [], \n     \".\": [], \n     \";\": [], \n     \",\": [], \n     \"AS\": [], \n     \")\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \"+\": [], \n     \"-\": [], \n     \"*\": [], \n     \"/\": [], \n     \"}\": [], \n     \"[\": [], \n     \"NIL\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"]\": [], \n     \"GRAPH\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": []}, \n  \"?or([[*,unaryExpression],[/,unaryExpression]])\" : {\n     \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"+\": [], \n     \"-\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": [], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"||\": [], \n     \"&&\": [], \n     \"=\": [], \n     \"!=\": [], \n     \"<\": [], \n     \">\": [], \n     \"<=\": [], \n     \">=\": [], \n     \"IN\": [], \n     \"NOT\": [], \n     \";\": []}, \n  \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\" : {\n     \"=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"!=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"<\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \">\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"<=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \">=\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"IN\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"NOT\": [\"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"AS\": [], \n     \")\": [], \n     \",\": [], \n     \"||\": [], \n     \"&&\": [], \n     \";\": []}, \n  \"?orderClause\" : {\n     \"ORDER\": [\"orderClause\"], \n     \"VALUES\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"$\": [], \n     \"}\": []}, \n  \"?pathMod\" : {\n     \"*\": [\"pathMod\"], \n     \"?\": [\"pathMod\"], \n     \"+\": [\"pathMod\"], \n     \"{\": [\"pathMod\"], \n     \"|\": [], \n     \"/\": [], \n     \")\": [], \n     \"(\": [], \n     \"[\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"IRI_REF\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": []}, \n  \"?triplesBlock\" : {\n     \"VAR1\": [\"triplesBlock\"], \n     \"VAR2\": [\"triplesBlock\"], \n     \"NIL\": [\"triplesBlock\"], \n     \"(\": [\"triplesBlock\"], \n     \"[\": [\"triplesBlock\"], \n     \"IRI_REF\": [\"triplesBlock\"], \n     \"TRUE\": [\"triplesBlock\"], \n     \"FALSE\": [\"triplesBlock\"], \n     \"BLANK_NODE_LABEL\": [\"triplesBlock\"], \n     \"ANON\": [\"triplesBlock\"], \n     \"PNAME_LN\": [\"triplesBlock\"], \n     \"PNAME_NS\": [\"triplesBlock\"], \n     \"STRING_LITERAL1\": [\"triplesBlock\"], \n     \"STRING_LITERAL2\": [\"triplesBlock\"], \n     \"STRING_LITERAL_LONG1\": [\"triplesBlock\"], \n     \"STRING_LITERAL_LONG2\": [\"triplesBlock\"], \n     \"INTEGER\": [\"triplesBlock\"], \n     \"DECIMAL\": [\"triplesBlock\"], \n     \"DOUBLE\": [\"triplesBlock\"], \n     \"INTEGER_POSITIVE\": [\"triplesBlock\"], \n     \"DECIMAL_POSITIVE\": [\"triplesBlock\"], \n     \"DOUBLE_POSITIVE\": [\"triplesBlock\"], \n     \"INTEGER_NEGATIVE\": [\"triplesBlock\"], \n     \"DECIMAL_NEGATIVE\": [\"triplesBlock\"], \n     \"DOUBLE_NEGATIVE\": [\"triplesBlock\"], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"?triplesTemplate\" : {\n     \"VAR1\": [\"triplesTemplate\"], \n     \"VAR2\": [\"triplesTemplate\"], \n     \"NIL\": [\"triplesTemplate\"], \n     \"(\": [\"triplesTemplate\"], \n     \"[\": [\"triplesTemplate\"], \n     \"IRI_REF\": [\"triplesTemplate\"], \n     \"TRUE\": [\"triplesTemplate\"], \n     \"FALSE\": [\"triplesTemplate\"], \n     \"BLANK_NODE_LABEL\": [\"triplesTemplate\"], \n     \"ANON\": [\"triplesTemplate\"], \n     \"PNAME_LN\": [\"triplesTemplate\"], \n     \"PNAME_NS\": [\"triplesTemplate\"], \n     \"STRING_LITERAL1\": [\"triplesTemplate\"], \n     \"STRING_LITERAL2\": [\"triplesTemplate\"], \n     \"STRING_LITERAL_LONG1\": [\"triplesTemplate\"], \n     \"STRING_LITERAL_LONG2\": [\"triplesTemplate\"], \n     \"INTEGER\": [\"triplesTemplate\"], \n     \"DECIMAL\": [\"triplesTemplate\"], \n     \"DOUBLE\": [\"triplesTemplate\"], \n     \"INTEGER_POSITIVE\": [\"triplesTemplate\"], \n     \"DECIMAL_POSITIVE\": [\"triplesTemplate\"], \n     \"DOUBLE_POSITIVE\": [\"triplesTemplate\"], \n     \"INTEGER_NEGATIVE\": [\"triplesTemplate\"], \n     \"DECIMAL_NEGATIVE\": [\"triplesTemplate\"], \n     \"DOUBLE_NEGATIVE\": [\"triplesTemplate\"], \n     \"}\": [], \n     \"GRAPH\": []}, \n  \"?whereClause\" : {\n     \"WHERE\": [\"whereClause\"], \n     \"{\": [\"whereClause\"], \n     \"ORDER\": [], \n     \"HAVING\": [], \n     \"GROUP\": [], \n     \"LIMIT\": [], \n     \"OFFSET\": [], \n     \"VALUES\": [], \n     \"$\": []}, \n  \"[ (,*dataBlockValue,)]\" : {\n     \"(\": [\"(\",\"*dataBlockValue\",\")\"]}, \n  \"[ (,*var,)]\" : {\n     \"(\": [\"(\",\"*var\",\")\"]}, \n  \"[ (,expression,)]\" : {\n     \"(\": [\"(\",\"expression\",\")\"]}, \n  \"[ (,expression,AS,var,)]\" : {\n     \"(\": [\"(\",\"expression\",\"AS\",\"var\",\")\"]}, \n  \"[!=,numericExpression]\" : {\n     \"!=\": [\"!=\",\"numericExpression\"]}, \n  \"[&&,valueLogical]\" : {\n     \"&&\": [\"&&\",\"valueLogical\"]}, \n  \"[*,unaryExpression]\" : {\n     \"*\": [\"*\",\"unaryExpression\"]}, \n  \"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\" : {\n     \"WHERE\": [\"*datasetClause\",\"WHERE\",\"{\",\"?triplesTemplate\",\"}\",\"solutionModifier\"], \n     \"FROM\": [\"*datasetClause\",\"WHERE\",\"{\",\"?triplesTemplate\",\"}\",\"solutionModifier\"]}, \n  \"[+,multiplicativeExpression]\" : {\n     \"+\": [\"+\",\"multiplicativeExpression\"]}, \n  \"[,,expression]\" : {\n     \",\": [\",\",\"expression\"]}, \n  \"[,,integer,}]\" : {\n     \",\": [\",\",\"integer\",\"}\"]}, \n  \"[,,objectPath]\" : {\n     \",\": [\",\",\"objectPath\"]}, \n  \"[,,object]\" : {\n     \",\": [\",\",\"object\"]}, \n  \"[,,or([},[integer,}]])]\" : {\n     \",\": [\",\",\"or([},[integer,}]])\"]}, \n  \"[-,multiplicativeExpression]\" : {\n     \"-\": [\"-\",\"multiplicativeExpression\"]}, \n  \"[.,?constructTriples]\" : {\n     \".\": [\".\",\"?constructTriples\"]}, \n  \"[.,?triplesBlock]\" : {\n     \".\": [\".\",\"?triplesBlock\"]}, \n  \"[.,?triplesTemplate]\" : {\n     \".\": [\".\",\"?triplesTemplate\"]}, \n  \"[/,pathEltOrInverse]\" : {\n     \"/\": [\"/\",\"pathEltOrInverse\"]}, \n  \"[/,unaryExpression]\" : {\n     \"/\": [\"/\",\"unaryExpression\"]}, \n  \"[;,?[or([verbPath,verbSimple]),objectList]]\" : {\n     \";\": [\";\",\"?[or([verbPath,verbSimple]),objectList]\"]}, \n  \"[;,?[verb,objectList]]\" : {\n     \";\": [\";\",\"?[verb,objectList]\"]}, \n  \"[;,SEPARATOR,=,string]\" : {\n     \";\": [\";\",\"SEPARATOR\",\"=\",\"string\"]}, \n  \"[;,update]\" : {\n     \";\": [\";\",\"update\"]}, \n  \"[<,numericExpression]\" : {\n     \"<\": [\"<\",\"numericExpression\"]}, \n  \"[<=,numericExpression]\" : {\n     \"<=\": [\"<=\",\"numericExpression\"]}, \n  \"[=,numericExpression]\" : {\n     \"=\": [\"=\",\"numericExpression\"]}, \n  \"[>,numericExpression]\" : {\n     \">\": [\">\",\"numericExpression\"]}, \n  \"[>=,numericExpression]\" : {\n     \">=\": [\">=\",\"numericExpression\"]}, \n  \"[AS,var]\" : {\n     \"AS\": [\"AS\",\"var\"]}, \n  \"[IN,expressionList]\" : {\n     \"IN\": [\"IN\",\"expressionList\"]}, \n  \"[INTO,graphRef]\" : {\n     \"INTO\": [\"INTO\",\"graphRef\"]}, \n  \"[NAMED,iriRef]\" : {\n     \"NAMED\": [\"NAMED\",\"iriRef\"]}, \n  \"[NOT,IN,expressionList]\" : {\n     \"NOT\": [\"NOT\",\"IN\",\"expressionList\"]}, \n  \"[UNION,groupGraphPattern]\" : {\n     \"UNION\": [\"UNION\",\"groupGraphPattern\"]}, \n  \"[^^,iriRef]\" : {\n     \"^^\": [\"^^\",\"iriRef\"]}, \n  \"[constructTemplate,*datasetClause,whereClause,solutionModifier]\" : {\n     \"{\": [\"constructTemplate\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]}, \n  \"[deleteClause,?insertClause]\" : {\n     \"DELETE\": [\"deleteClause\",\"?insertClause\"]}, \n  \"[graphPatternNotTriples,?.,?triplesBlock]\" : {\n     \"{\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"OPTIONAL\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"MINUS\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"GRAPH\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"SERVICE\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"FILTER\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"BIND\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"], \n     \"VALUES\": [\"graphPatternNotTriples\",\"?.\",\"?triplesBlock\"]}, \n  \"[integer,or([[,,or([},[integer,}]])],}])]\" : {\n     \"INTEGER\": [\"integer\",\"or([[,,or([},[integer,}]])],}])\"]}, \n  \"[integer,}]\" : {\n     \"INTEGER\": [\"integer\",\"}\"]}, \n  \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\" : {\n     \"INTEGER_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE_POSITIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"INTEGER_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE_NEGATIVE\": [\"or([numericLiteralPositive,numericLiteralNegative])\",\"?or([[*,unaryExpression],[/,unaryExpression]])\"]}, \n  \"[or([verbPath,verbSimple]),objectList]\" : {\n     \"VAR1\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"VAR2\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"^\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"a\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"!\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"(\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"IRI_REF\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"PNAME_LN\": [\"or([verbPath,verbSimple])\",\"objectList\"], \n     \"PNAME_NS\": [\"or([verbPath,verbSimple])\",\"objectList\"]}, \n  \"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\" : {\n     \"a\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n     \"^\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n     \"IRI_REF\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n     \"PNAME_LN\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"], \n     \"PNAME_NS\": [\"pathOneInPropertySet\",\"*[|,pathOneInPropertySet]\"]}, \n  \"[quadsNotTriples,?.,?triplesTemplate]\" : {\n     \"GRAPH\": [\"quadsNotTriples\",\"?.\",\"?triplesTemplate\"]}, \n  \"[update1,?[;,update]]\" : {\n     \"INSERT\": [\"update1\",\"?[;,update]\"], \n     \"DELETE\": [\"update1\",\"?[;,update]\"], \n     \"LOAD\": [\"update1\",\"?[;,update]\"], \n     \"CLEAR\": [\"update1\",\"?[;,update]\"], \n     \"DROP\": [\"update1\",\"?[;,update]\"], \n     \"ADD\": [\"update1\",\"?[;,update]\"], \n     \"MOVE\": [\"update1\",\"?[;,update]\"], \n     \"COPY\": [\"update1\",\"?[;,update]\"], \n     \"CREATE\": [\"update1\",\"?[;,update]\"], \n     \"WITH\": [\"update1\",\"?[;,update]\"]}, \n  \"[verb,objectList]\" : {\n     \"a\": [\"verb\",\"objectList\"], \n     \"VAR1\": [\"verb\",\"objectList\"], \n     \"VAR2\": [\"verb\",\"objectList\"], \n     \"IRI_REF\": [\"verb\",\"objectList\"], \n     \"PNAME_LN\": [\"verb\",\"objectList\"], \n     \"PNAME_NS\": [\"verb\",\"objectList\"]}, \n  \"[|,pathOneInPropertySet]\" : {\n     \"|\": [\"|\",\"pathOneInPropertySet\"]}, \n  \"[|,pathSequence]\" : {\n     \"|\": [\"|\",\"pathSequence\"]}, \n  \"[||,conditionalAndExpression]\" : {\n     \"||\": [\"||\",\"conditionalAndExpression\"]}, \n  \"add\" : {\n     \"ADD\": [\"ADD\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]}, \n  \"additiveExpression\" : {\n     \"!\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"+\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"-\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"VAR1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"VAR2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"(\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"LANG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"LANGMATCHES\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DATATYPE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"BOUND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"IRI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"URI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"BNODE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"RAND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ABS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"CEIL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"FLOOR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ROUND\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"CONCAT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRLEN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"UCASE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"LCASE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ENCODE_FOR_URI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"CONTAINS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRSTARTS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRENDS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRBEFORE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRAFTER\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"YEAR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MONTH\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DAY\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"HOURS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MINUTES\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SECONDS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"TIMEZONE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"TZ\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"NOW\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"UUID\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRUUID\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MD5\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SHA1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SHA256\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SHA384\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SHA512\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"COALESCE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"IF\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRLANG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRDT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SAMETERM\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISIRI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISURI\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISBLANK\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISLITERAL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"ISNUMERIC\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"TRUE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"FALSE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"COUNT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SUM\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MIN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"MAX\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"AVG\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SAMPLE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"GROUP_CONCAT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"SUBSTR\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"REPLACE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"REGEX\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"EXISTS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"NOT\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"IRI_REF\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL_LONG1\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"STRING_LITERAL_LONG2\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE_POSITIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"INTEGER_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DECIMAL_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"DOUBLE_NEGATIVE\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"PNAME_LN\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"], \n     \"PNAME_NS\": [\"multiplicativeExpression\",\"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"]}, \n  \"aggregate\" : {\n     \"COUNT\": [\"COUNT\",\"(\",\"?DISTINCT\",\"or([*,expression])\",\")\"], \n     \"SUM\": [\"SUM\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"MIN\": [\"MIN\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"MAX\": [\"MAX\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"AVG\": [\"AVG\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"SAMPLE\": [\"SAMPLE\",\"(\",\"?DISTINCT\",\"expression\",\")\"], \n     \"GROUP_CONCAT\": [\"GROUP_CONCAT\",\"(\",\"?DISTINCT\",\"expression\",\"?[;,SEPARATOR,=,string]\",\")\"]}, \n  \"allowBnodes\" : {\n     \"}\": []}, \n  \"allowVars\" : {\n     \"}\": []}, \n  \"argList\" : {\n     \"NIL\": [\"NIL\"], \n     \"(\": [\"(\",\"?DISTINCT\",\"expression\",\"*[,,expression]\",\")\"]}, \n  \"askQuery\" : {\n     \"ASK\": [\"ASK\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]}, \n  \"baseDecl\" : {\n     \"BASE\": [\"BASE\",\"IRI_REF\"]}, \n  \"bind\" : {\n     \"BIND\": [\"BIND\",\"(\",\"expression\",\"AS\",\"var\",\")\"]}, \n  \"blankNode\" : {\n     \"BLANK_NODE_LABEL\": [\"BLANK_NODE_LABEL\"], \n     \"ANON\": [\"ANON\"]}, \n  \"blankNodePropertyList\" : {\n     \"[\": [\"[\",\"propertyListNotEmpty\",\"]\"]}, \n  \"blankNodePropertyListPath\" : {\n     \"[\": [\"[\",\"propertyListPathNotEmpty\",\"]\"]}, \n  \"booleanLiteral\" : {\n     \"TRUE\": [\"TRUE\"], \n     \"FALSE\": [\"FALSE\"]}, \n  \"brackettedExpression\" : {\n     \"(\": [\"(\",\"expression\",\")\"]}, \n  \"builtInCall\" : {\n     \"STR\": [\"STR\",\"(\",\"expression\",\")\"], \n     \"LANG\": [\"LANG\",\"(\",\"expression\",\")\"], \n     \"LANGMATCHES\": [\"LANGMATCHES\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"DATATYPE\": [\"DATATYPE\",\"(\",\"expression\",\")\"], \n     \"BOUND\": [\"BOUND\",\"(\",\"var\",\")\"], \n     \"IRI\": [\"IRI\",\"(\",\"expression\",\")\"], \n     \"URI\": [\"URI\",\"(\",\"expression\",\")\"], \n     \"BNODE\": [\"BNODE\",\"or([[ (,expression,)],NIL])\"], \n     \"RAND\": [\"RAND\",\"NIL\"], \n     \"ABS\": [\"ABS\",\"(\",\"expression\",\")\"], \n     \"CEIL\": [\"CEIL\",\"(\",\"expression\",\")\"], \n     \"FLOOR\": [\"FLOOR\",\"(\",\"expression\",\")\"], \n     \"ROUND\": [\"ROUND\",\"(\",\"expression\",\")\"], \n     \"CONCAT\": [\"CONCAT\",\"expressionList\"], \n     \"SUBSTR\": [\"substringExpression\"], \n     \"STRLEN\": [\"STRLEN\",\"(\",\"expression\",\")\"], \n     \"REPLACE\": [\"strReplaceExpression\"], \n     \"UCASE\": [\"UCASE\",\"(\",\"expression\",\")\"], \n     \"LCASE\": [\"LCASE\",\"(\",\"expression\",\")\"], \n     \"ENCODE_FOR_URI\": [\"ENCODE_FOR_URI\",\"(\",\"expression\",\")\"], \n     \"CONTAINS\": [\"CONTAINS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRSTARTS\": [\"STRSTARTS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRENDS\": [\"STRENDS\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRBEFORE\": [\"STRBEFORE\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRAFTER\": [\"STRAFTER\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"YEAR\": [\"YEAR\",\"(\",\"expression\",\")\"], \n     \"MONTH\": [\"MONTH\",\"(\",\"expression\",\")\"], \n     \"DAY\": [\"DAY\",\"(\",\"expression\",\")\"], \n     \"HOURS\": [\"HOURS\",\"(\",\"expression\",\")\"], \n     \"MINUTES\": [\"MINUTES\",\"(\",\"expression\",\")\"], \n     \"SECONDS\": [\"SECONDS\",\"(\",\"expression\",\")\"], \n     \"TIMEZONE\": [\"TIMEZONE\",\"(\",\"expression\",\")\"], \n     \"TZ\": [\"TZ\",\"(\",\"expression\",\")\"], \n     \"NOW\": [\"NOW\",\"NIL\"], \n     \"UUID\": [\"UUID\",\"NIL\"], \n     \"STRUUID\": [\"STRUUID\",\"NIL\"], \n     \"MD5\": [\"MD5\",\"(\",\"expression\",\")\"], \n     \"SHA1\": [\"SHA1\",\"(\",\"expression\",\")\"], \n     \"SHA256\": [\"SHA256\",\"(\",\"expression\",\")\"], \n     \"SHA384\": [\"SHA384\",\"(\",\"expression\",\")\"], \n     \"SHA512\": [\"SHA512\",\"(\",\"expression\",\")\"], \n     \"COALESCE\": [\"COALESCE\",\"expressionList\"], \n     \"IF\": [\"IF\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRLANG\": [\"STRLANG\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"STRDT\": [\"STRDT\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"SAMETERM\": [\"SAMETERM\",\"(\",\"expression\",\",\",\"expression\",\")\"], \n     \"ISIRI\": [\"ISIRI\",\"(\",\"expression\",\")\"], \n     \"ISURI\": [\"ISURI\",\"(\",\"expression\",\")\"], \n     \"ISBLANK\": [\"ISBLANK\",\"(\",\"expression\",\")\"], \n     \"ISLITERAL\": [\"ISLITERAL\",\"(\",\"expression\",\")\"], \n     \"ISNUMERIC\": [\"ISNUMERIC\",\"(\",\"expression\",\")\"], \n     \"REGEX\": [\"regexExpression\"], \n     \"EXISTS\": [\"existsFunc\"], \n     \"NOT\": [\"notExistsFunc\"]}, \n  \"clear\" : {\n     \"CLEAR\": [\"CLEAR\",\"?SILENT_2\",\"graphRefAll\"]}, \n  \"collection\" : {\n     \"(\": [\"(\",\"+graphNode\",\")\"]}, \n  \"collectionPath\" : {\n     \"(\": [\"(\",\"+graphNodePath\",\")\"]}, \n  \"conditionalAndExpression\" : {\n     \"!\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"+\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"-\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"VAR1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"VAR2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"(\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"LANG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"LANGMATCHES\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DATATYPE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"BOUND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"IRI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"URI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"BNODE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"RAND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ABS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"CEIL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"FLOOR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ROUND\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"CONCAT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRLEN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"UCASE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"LCASE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ENCODE_FOR_URI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"CONTAINS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRSTARTS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRENDS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRBEFORE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRAFTER\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"YEAR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MONTH\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DAY\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"HOURS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MINUTES\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SECONDS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"TIMEZONE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"TZ\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"NOW\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"UUID\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRUUID\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MD5\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SHA1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SHA256\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SHA384\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SHA512\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"COALESCE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"IF\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRLANG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRDT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SAMETERM\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISIRI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISURI\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISBLANK\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISLITERAL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"ISNUMERIC\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"TRUE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"FALSE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"COUNT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SUM\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MIN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"MAX\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"AVG\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SAMPLE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"GROUP_CONCAT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"SUBSTR\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"REPLACE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"REGEX\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"EXISTS\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"NOT\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"IRI_REF\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL_LONG1\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"STRING_LITERAL_LONG2\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"INTEGER\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DECIMAL\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DOUBLE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"INTEGER_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DECIMAL_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DOUBLE_POSITIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"INTEGER_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DECIMAL_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"DOUBLE_NEGATIVE\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"PNAME_LN\": [\"valueLogical\",\"*[&&,valueLogical]\"], \n     \"PNAME_NS\": [\"valueLogical\",\"*[&&,valueLogical]\"]}, \n  \"conditionalOrExpression\" : {\n     \"!\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"+\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"-\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"VAR1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"VAR2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"(\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"LANG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"LANGMATCHES\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DATATYPE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"BOUND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"IRI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"URI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"BNODE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"RAND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ABS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"CEIL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"FLOOR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ROUND\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"CONCAT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRLEN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"UCASE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"LCASE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ENCODE_FOR_URI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"CONTAINS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRSTARTS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRENDS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRBEFORE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRAFTER\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"YEAR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MONTH\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DAY\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"HOURS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MINUTES\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SECONDS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"TIMEZONE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"TZ\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"NOW\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"UUID\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRUUID\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MD5\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SHA1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SHA256\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SHA384\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SHA512\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"COALESCE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"IF\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRLANG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRDT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SAMETERM\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISIRI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISURI\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISBLANK\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISLITERAL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"ISNUMERIC\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"TRUE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"FALSE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"COUNT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SUM\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MIN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"MAX\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"AVG\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SAMPLE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"GROUP_CONCAT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"SUBSTR\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"REPLACE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"REGEX\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"EXISTS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"NOT\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"IRI_REF\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL_LONG1\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"STRING_LITERAL_LONG2\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"INTEGER\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DECIMAL\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DOUBLE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"INTEGER_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DECIMAL_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DOUBLE_POSITIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"INTEGER_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DECIMAL_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"DOUBLE_NEGATIVE\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"PNAME_LN\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"], \n     \"PNAME_NS\": [\"conditionalAndExpression\",\"*[||,conditionalAndExpression]\"]}, \n  \"constraint\" : {\n     \"(\": [\"brackettedExpression\"], \n     \"STR\": [\"builtInCall\"], \n     \"LANG\": [\"builtInCall\"], \n     \"LANGMATCHES\": [\"builtInCall\"], \n     \"DATATYPE\": [\"builtInCall\"], \n     \"BOUND\": [\"builtInCall\"], \n     \"IRI\": [\"builtInCall\"], \n     \"URI\": [\"builtInCall\"], \n     \"BNODE\": [\"builtInCall\"], \n     \"RAND\": [\"builtInCall\"], \n     \"ABS\": [\"builtInCall\"], \n     \"CEIL\": [\"builtInCall\"], \n     \"FLOOR\": [\"builtInCall\"], \n     \"ROUND\": [\"builtInCall\"], \n     \"CONCAT\": [\"builtInCall\"], \n     \"STRLEN\": [\"builtInCall\"], \n     \"UCASE\": [\"builtInCall\"], \n     \"LCASE\": [\"builtInCall\"], \n     \"ENCODE_FOR_URI\": [\"builtInCall\"], \n     \"CONTAINS\": [\"builtInCall\"], \n     \"STRSTARTS\": [\"builtInCall\"], \n     \"STRENDS\": [\"builtInCall\"], \n     \"STRBEFORE\": [\"builtInCall\"], \n     \"STRAFTER\": [\"builtInCall\"], \n     \"YEAR\": [\"builtInCall\"], \n     \"MONTH\": [\"builtInCall\"], \n     \"DAY\": [\"builtInCall\"], \n     \"HOURS\": [\"builtInCall\"], \n     \"MINUTES\": [\"builtInCall\"], \n     \"SECONDS\": [\"builtInCall\"], \n     \"TIMEZONE\": [\"builtInCall\"], \n     \"TZ\": [\"builtInCall\"], \n     \"NOW\": [\"builtInCall\"], \n     \"UUID\": [\"builtInCall\"], \n     \"STRUUID\": [\"builtInCall\"], \n     \"MD5\": [\"builtInCall\"], \n     \"SHA1\": [\"builtInCall\"], \n     \"SHA256\": [\"builtInCall\"], \n     \"SHA384\": [\"builtInCall\"], \n     \"SHA512\": [\"builtInCall\"], \n     \"COALESCE\": [\"builtInCall\"], \n     \"IF\": [\"builtInCall\"], \n     \"STRLANG\": [\"builtInCall\"], \n     \"STRDT\": [\"builtInCall\"], \n     \"SAMETERM\": [\"builtInCall\"], \n     \"ISIRI\": [\"builtInCall\"], \n     \"ISURI\": [\"builtInCall\"], \n     \"ISBLANK\": [\"builtInCall\"], \n     \"ISLITERAL\": [\"builtInCall\"], \n     \"ISNUMERIC\": [\"builtInCall\"], \n     \"SUBSTR\": [\"builtInCall\"], \n     \"REPLACE\": [\"builtInCall\"], \n     \"REGEX\": [\"builtInCall\"], \n     \"EXISTS\": [\"builtInCall\"], \n     \"NOT\": [\"builtInCall\"], \n     \"IRI_REF\": [\"functionCall\"], \n     \"PNAME_LN\": [\"functionCall\"], \n     \"PNAME_NS\": [\"functionCall\"]}, \n  \"constructQuery\" : {\n     \"CONSTRUCT\": [\"CONSTRUCT\",\"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\"]}, \n  \"constructTemplate\" : {\n     \"{\": [\"{\",\"?constructTriples\",\"}\"]}, \n  \"constructTriples\" : {\n     \"VAR1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"VAR2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"NIL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"(\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"[\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"IRI_REF\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"TRUE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"FALSE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"BLANK_NODE_LABEL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"ANON\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"PNAME_LN\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"PNAME_NS\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL_LONG1\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"STRING_LITERAL_LONG2\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"INTEGER\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DECIMAL\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DOUBLE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"INTEGER_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DECIMAL_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DOUBLE_POSITIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"INTEGER_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DECIMAL_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"], \n     \"DOUBLE_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?constructTriples]\"]}, \n  \"copy\" : {\n     \"COPY\": [\"COPY\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]}, \n  \"create\" : {\n     \"CREATE\": [\"CREATE\",\"?SILENT_3\",\"graphRef\"]}, \n  \"dataBlock\" : {\n     \"NIL\": [\"or([inlineDataOneVar,inlineDataFull])\"], \n     \"(\": [\"or([inlineDataOneVar,inlineDataFull])\"], \n     \"VAR1\": [\"or([inlineDataOneVar,inlineDataFull])\"], \n     \"VAR2\": [\"or([inlineDataOneVar,inlineDataFull])\"]}, \n  \"dataBlockValue\" : {\n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"], \n     \"STRING_LITERAL1\": [\"rdfLiteral\"], \n     \"STRING_LITERAL2\": [\"rdfLiteral\"], \n     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \n     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \n     \"INTEGER\": [\"numericLiteral\"], \n     \"DECIMAL\": [\"numericLiteral\"], \n     \"DOUBLE\": [\"numericLiteral\"], \n     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \n     \"TRUE\": [\"booleanLiteral\"], \n     \"FALSE\": [\"booleanLiteral\"], \n     \"UNDEF\": [\"UNDEF\"]}, \n  \"datasetClause\" : {\n     \"FROM\": [\"FROM\",\"or([defaultGraphClause,namedGraphClause])\"]}, \n  \"defaultGraphClause\" : {\n     \"IRI_REF\": [\"sourceSelector\"], \n     \"PNAME_LN\": [\"sourceSelector\"], \n     \"PNAME_NS\": [\"sourceSelector\"]}, \n  \"delete1\" : {\n     \"DATA\": [\"DATA\",\"quadDataNoBnodes\"], \n     \"WHERE\": [\"WHERE\",\"quadPatternNoBnodes\"], \n     \"{\": [\"quadPatternNoBnodes\",\"?insertClause\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]}, \n  \"deleteClause\" : {\n     \"DELETE\": [\"DELETE\",\"quadPattern\"]}, \n  \"describeDatasetClause\" : {\n     \"FROM\": [\"FROM\",\"or([defaultGraphClause,namedGraphClause])\"]}, \n  \"describeQuery\" : {\n     \"DESCRIBE\": [\"DESCRIBE\",\"or([+varOrIRIref,*])\",\"*describeDatasetClause\",\"?whereClause\",\"solutionModifier\"]}, \n  \"disallowBnodes\" : {\n     \"}\": [], \n     \"GRAPH\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"(\": [], \n     \"[\": [], \n     \"IRI_REF\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": []}, \n  \"disallowVars\" : {\n     \"}\": [], \n     \"GRAPH\": [], \n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"NIL\": [], \n     \"(\": [], \n     \"[\": [], \n     \"IRI_REF\": [], \n     \"TRUE\": [], \n     \"FALSE\": [], \n     \"BLANK_NODE_LABEL\": [], \n     \"ANON\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"STRING_LITERAL1\": [], \n     \"STRING_LITERAL2\": [], \n     \"STRING_LITERAL_LONG1\": [], \n     \"STRING_LITERAL_LONG2\": [], \n     \"INTEGER\": [], \n     \"DECIMAL\": [], \n     \"DOUBLE\": [], \n     \"INTEGER_POSITIVE\": [], \n     \"DECIMAL_POSITIVE\": [], \n     \"DOUBLE_POSITIVE\": [], \n     \"INTEGER_NEGATIVE\": [], \n     \"DECIMAL_NEGATIVE\": [], \n     \"DOUBLE_NEGATIVE\": []}, \n  \"drop\" : {\n     \"DROP\": [\"DROP\",\"?SILENT_2\",\"graphRefAll\"]}, \n  \"existsFunc\" : {\n     \"EXISTS\": [\"EXISTS\",\"groupGraphPattern\"]}, \n  \"expression\" : {\n     \"!\": [\"conditionalOrExpression\"], \n     \"+\": [\"conditionalOrExpression\"], \n     \"-\": [\"conditionalOrExpression\"], \n     \"VAR1\": [\"conditionalOrExpression\"], \n     \"VAR2\": [\"conditionalOrExpression\"], \n     \"(\": [\"conditionalOrExpression\"], \n     \"STR\": [\"conditionalOrExpression\"], \n     \"LANG\": [\"conditionalOrExpression\"], \n     \"LANGMATCHES\": [\"conditionalOrExpression\"], \n     \"DATATYPE\": [\"conditionalOrExpression\"], \n     \"BOUND\": [\"conditionalOrExpression\"], \n     \"IRI\": [\"conditionalOrExpression\"], \n     \"URI\": [\"conditionalOrExpression\"], \n     \"BNODE\": [\"conditionalOrExpression\"], \n     \"RAND\": [\"conditionalOrExpression\"], \n     \"ABS\": [\"conditionalOrExpression\"], \n     \"CEIL\": [\"conditionalOrExpression\"], \n     \"FLOOR\": [\"conditionalOrExpression\"], \n     \"ROUND\": [\"conditionalOrExpression\"], \n     \"CONCAT\": [\"conditionalOrExpression\"], \n     \"STRLEN\": [\"conditionalOrExpression\"], \n     \"UCASE\": [\"conditionalOrExpression\"], \n     \"LCASE\": [\"conditionalOrExpression\"], \n     \"ENCODE_FOR_URI\": [\"conditionalOrExpression\"], \n     \"CONTAINS\": [\"conditionalOrExpression\"], \n     \"STRSTARTS\": [\"conditionalOrExpression\"], \n     \"STRENDS\": [\"conditionalOrExpression\"], \n     \"STRBEFORE\": [\"conditionalOrExpression\"], \n     \"STRAFTER\": [\"conditionalOrExpression\"], \n     \"YEAR\": [\"conditionalOrExpression\"], \n     \"MONTH\": [\"conditionalOrExpression\"], \n     \"DAY\": [\"conditionalOrExpression\"], \n     \"HOURS\": [\"conditionalOrExpression\"], \n     \"MINUTES\": [\"conditionalOrExpression\"], \n     \"SECONDS\": [\"conditionalOrExpression\"], \n     \"TIMEZONE\": [\"conditionalOrExpression\"], \n     \"TZ\": [\"conditionalOrExpression\"], \n     \"NOW\": [\"conditionalOrExpression\"], \n     \"UUID\": [\"conditionalOrExpression\"], \n     \"STRUUID\": [\"conditionalOrExpression\"], \n     \"MD5\": [\"conditionalOrExpression\"], \n     \"SHA1\": [\"conditionalOrExpression\"], \n     \"SHA256\": [\"conditionalOrExpression\"], \n     \"SHA384\": [\"conditionalOrExpression\"], \n     \"SHA512\": [\"conditionalOrExpression\"], \n     \"COALESCE\": [\"conditionalOrExpression\"], \n     \"IF\": [\"conditionalOrExpression\"], \n     \"STRLANG\": [\"conditionalOrExpression\"], \n     \"STRDT\": [\"conditionalOrExpression\"], \n     \"SAMETERM\": [\"conditionalOrExpression\"], \n     \"ISIRI\": [\"conditionalOrExpression\"], \n     \"ISURI\": [\"conditionalOrExpression\"], \n     \"ISBLANK\": [\"conditionalOrExpression\"], \n     \"ISLITERAL\": [\"conditionalOrExpression\"], \n     \"ISNUMERIC\": [\"conditionalOrExpression\"], \n     \"TRUE\": [\"conditionalOrExpression\"], \n     \"FALSE\": [\"conditionalOrExpression\"], \n     \"COUNT\": [\"conditionalOrExpression\"], \n     \"SUM\": [\"conditionalOrExpression\"], \n     \"MIN\": [\"conditionalOrExpression\"], \n     \"MAX\": [\"conditionalOrExpression\"], \n     \"AVG\": [\"conditionalOrExpression\"], \n     \"SAMPLE\": [\"conditionalOrExpression\"], \n     \"GROUP_CONCAT\": [\"conditionalOrExpression\"], \n     \"SUBSTR\": [\"conditionalOrExpression\"], \n     \"REPLACE\": [\"conditionalOrExpression\"], \n     \"REGEX\": [\"conditionalOrExpression\"], \n     \"EXISTS\": [\"conditionalOrExpression\"], \n     \"NOT\": [\"conditionalOrExpression\"], \n     \"IRI_REF\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL1\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL2\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL_LONG1\": [\"conditionalOrExpression\"], \n     \"STRING_LITERAL_LONG2\": [\"conditionalOrExpression\"], \n     \"INTEGER\": [\"conditionalOrExpression\"], \n     \"DECIMAL\": [\"conditionalOrExpression\"], \n     \"DOUBLE\": [\"conditionalOrExpression\"], \n     \"INTEGER_POSITIVE\": [\"conditionalOrExpression\"], \n     \"DECIMAL_POSITIVE\": [\"conditionalOrExpression\"], \n     \"DOUBLE_POSITIVE\": [\"conditionalOrExpression\"], \n     \"INTEGER_NEGATIVE\": [\"conditionalOrExpression\"], \n     \"DECIMAL_NEGATIVE\": [\"conditionalOrExpression\"], \n     \"DOUBLE_NEGATIVE\": [\"conditionalOrExpression\"], \n     \"PNAME_LN\": [\"conditionalOrExpression\"], \n     \"PNAME_NS\": [\"conditionalOrExpression\"]}, \n  \"expressionList\" : {\n     \"NIL\": [\"NIL\"], \n     \"(\": [\"(\",\"expression\",\"*[,,expression]\",\")\"]}, \n  \"filter\" : {\n     \"FILTER\": [\"FILTER\",\"constraint\"]}, \n  \"functionCall\" : {\n     \"IRI_REF\": [\"iriRef\",\"argList\"], \n     \"PNAME_LN\": [\"iriRef\",\"argList\"], \n     \"PNAME_NS\": [\"iriRef\",\"argList\"]}, \n  \"graphGraphPattern\" : {\n     \"GRAPH\": [\"GRAPH\",\"varOrIRIref\",\"groupGraphPattern\"]}, \n  \"graphNode\" : {\n     \"VAR1\": [\"varOrTerm\"], \n     \"VAR2\": [\"varOrTerm\"], \n     \"NIL\": [\"varOrTerm\"], \n     \"IRI_REF\": [\"varOrTerm\"], \n     \"TRUE\": [\"varOrTerm\"], \n     \"FALSE\": [\"varOrTerm\"], \n     \"BLANK_NODE_LABEL\": [\"varOrTerm\"], \n     \"ANON\": [\"varOrTerm\"], \n     \"PNAME_LN\": [\"varOrTerm\"], \n     \"PNAME_NS\": [\"varOrTerm\"], \n     \"STRING_LITERAL1\": [\"varOrTerm\"], \n     \"STRING_LITERAL2\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\"], \n     \"INTEGER\": [\"varOrTerm\"], \n     \"DECIMAL\": [\"varOrTerm\"], \n     \"DOUBLE\": [\"varOrTerm\"], \n     \"INTEGER_POSITIVE\": [\"varOrTerm\"], \n     \"DECIMAL_POSITIVE\": [\"varOrTerm\"], \n     \"DOUBLE_POSITIVE\": [\"varOrTerm\"], \n     \"INTEGER_NEGATIVE\": [\"varOrTerm\"], \n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\"], \n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\"], \n     \"(\": [\"triplesNode\"], \n     \"[\": [\"triplesNode\"]}, \n  \"graphNodePath\" : {\n     \"VAR1\": [\"varOrTerm\"], \n     \"VAR2\": [\"varOrTerm\"], \n     \"NIL\": [\"varOrTerm\"], \n     \"IRI_REF\": [\"varOrTerm\"], \n     \"TRUE\": [\"varOrTerm\"], \n     \"FALSE\": [\"varOrTerm\"], \n     \"BLANK_NODE_LABEL\": [\"varOrTerm\"], \n     \"ANON\": [\"varOrTerm\"], \n     \"PNAME_LN\": [\"varOrTerm\"], \n     \"PNAME_NS\": [\"varOrTerm\"], \n     \"STRING_LITERAL1\": [\"varOrTerm\"], \n     \"STRING_LITERAL2\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\"], \n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\"], \n     \"INTEGER\": [\"varOrTerm\"], \n     \"DECIMAL\": [\"varOrTerm\"], \n     \"DOUBLE\": [\"varOrTerm\"], \n     \"INTEGER_POSITIVE\": [\"varOrTerm\"], \n     \"DECIMAL_POSITIVE\": [\"varOrTerm\"], \n     \"DOUBLE_POSITIVE\": [\"varOrTerm\"], \n     \"INTEGER_NEGATIVE\": [\"varOrTerm\"], \n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\"], \n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\"], \n     \"(\": [\"triplesNodePath\"], \n     \"[\": [\"triplesNodePath\"]}, \n  \"graphOrDefault\" : {\n     \"DEFAULT\": [\"DEFAULT\"], \n     \"IRI_REF\": [\"?GRAPH\",\"iriRef\"], \n     \"PNAME_LN\": [\"?GRAPH\",\"iriRef\"], \n     \"PNAME_NS\": [\"?GRAPH\",\"iriRef\"], \n     \"GRAPH\": [\"?GRAPH\",\"iriRef\"]}, \n  \"graphPatternNotTriples\" : {\n     \"{\": [\"groupOrUnionGraphPattern\"], \n     \"OPTIONAL\": [\"optionalGraphPattern\"], \n     \"MINUS\": [\"minusGraphPattern\"], \n     \"GRAPH\": [\"graphGraphPattern\"], \n     \"SERVICE\": [\"serviceGraphPattern\"], \n     \"FILTER\": [\"filter\"], \n     \"BIND\": [\"bind\"], \n     \"VALUES\": [\"inlineData\"]}, \n  \"graphRef\" : {\n     \"GRAPH\": [\"GRAPH\",\"iriRef\"]}, \n  \"graphRefAll\" : {\n     \"GRAPH\": [\"graphRef\"], \n     \"DEFAULT\": [\"DEFAULT\"], \n     \"NAMED\": [\"NAMED\"], \n     \"ALL\": [\"ALL\"]}, \n  \"graphTerm\" : {\n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"], \n     \"STRING_LITERAL1\": [\"rdfLiteral\"], \n     \"STRING_LITERAL2\": [\"rdfLiteral\"], \n     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \n     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \n     \"INTEGER\": [\"numericLiteral\"], \n     \"DECIMAL\": [\"numericLiteral\"], \n     \"DOUBLE\": [\"numericLiteral\"], \n     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \n     \"TRUE\": [\"booleanLiteral\"], \n     \"FALSE\": [\"booleanLiteral\"], \n     \"BLANK_NODE_LABEL\": [\"blankNode\"], \n     \"ANON\": [\"blankNode\"], \n     \"NIL\": [\"NIL\"]}, \n  \"groupClause\" : {\n     \"GROUP\": [\"GROUP\",\"BY\",\"+groupCondition\"]}, \n  \"groupCondition\" : {\n     \"STR\": [\"builtInCall\"], \n     \"LANG\": [\"builtInCall\"], \n     \"LANGMATCHES\": [\"builtInCall\"], \n     \"DATATYPE\": [\"builtInCall\"], \n     \"BOUND\": [\"builtInCall\"], \n     \"IRI\": [\"builtInCall\"], \n     \"URI\": [\"builtInCall\"], \n     \"BNODE\": [\"builtInCall\"], \n     \"RAND\": [\"builtInCall\"], \n     \"ABS\": [\"builtInCall\"], \n     \"CEIL\": [\"builtInCall\"], \n     \"FLOOR\": [\"builtInCall\"], \n     \"ROUND\": [\"builtInCall\"], \n     \"CONCAT\": [\"builtInCall\"], \n     \"STRLEN\": [\"builtInCall\"], \n     \"UCASE\": [\"builtInCall\"], \n     \"LCASE\": [\"builtInCall\"], \n     \"ENCODE_FOR_URI\": [\"builtInCall\"], \n     \"CONTAINS\": [\"builtInCall\"], \n     \"STRSTARTS\": [\"builtInCall\"], \n     \"STRENDS\": [\"builtInCall\"], \n     \"STRBEFORE\": [\"builtInCall\"], \n     \"STRAFTER\": [\"builtInCall\"], \n     \"YEAR\": [\"builtInCall\"], \n     \"MONTH\": [\"builtInCall\"], \n     \"DAY\": [\"builtInCall\"], \n     \"HOURS\": [\"builtInCall\"], \n     \"MINUTES\": [\"builtInCall\"], \n     \"SECONDS\": [\"builtInCall\"], \n     \"TIMEZONE\": [\"builtInCall\"], \n     \"TZ\": [\"builtInCall\"], \n     \"NOW\": [\"builtInCall\"], \n     \"UUID\": [\"builtInCall\"], \n     \"STRUUID\": [\"builtInCall\"], \n     \"MD5\": [\"builtInCall\"], \n     \"SHA1\": [\"builtInCall\"], \n     \"SHA256\": [\"builtInCall\"], \n     \"SHA384\": [\"builtInCall\"], \n     \"SHA512\": [\"builtInCall\"], \n     \"COALESCE\": [\"builtInCall\"], \n     \"IF\": [\"builtInCall\"], \n     \"STRLANG\": [\"builtInCall\"], \n     \"STRDT\": [\"builtInCall\"], \n     \"SAMETERM\": [\"builtInCall\"], \n     \"ISIRI\": [\"builtInCall\"], \n     \"ISURI\": [\"builtInCall\"], \n     \"ISBLANK\": [\"builtInCall\"], \n     \"ISLITERAL\": [\"builtInCall\"], \n     \"ISNUMERIC\": [\"builtInCall\"], \n     \"SUBSTR\": [\"builtInCall\"], \n     \"REPLACE\": [\"builtInCall\"], \n     \"REGEX\": [\"builtInCall\"], \n     \"EXISTS\": [\"builtInCall\"], \n     \"NOT\": [\"builtInCall\"], \n     \"IRI_REF\": [\"functionCall\"], \n     \"PNAME_LN\": [\"functionCall\"], \n     \"PNAME_NS\": [\"functionCall\"], \n     \"(\": [\"(\",\"expression\",\"?[AS,var]\",\")\"], \n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"]}, \n  \"groupGraphPattern\" : {\n     \"{\": [\"{\",\"or([subSelect,groupGraphPatternSub])\",\"}\"]}, \n  \"groupGraphPatternSub\" : {\n     \"{\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"OPTIONAL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"MINUS\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"GRAPH\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"SERVICE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"FILTER\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"BIND\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"VALUES\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"VAR1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"VAR2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"NIL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"(\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"[\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"IRI_REF\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"TRUE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"FALSE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"BLANK_NODE_LABEL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"ANON\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"PNAME_LN\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"PNAME_NS\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG1\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG2\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"INTEGER\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DECIMAL\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DOUBLE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"INTEGER_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DECIMAL_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DOUBLE_POSITIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"INTEGER_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DECIMAL_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"DOUBLE_NEGATIVE\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"], \n     \"}\": [\"?triplesBlock\",\"*[graphPatternNotTriples,?.,?triplesBlock]\"]}, \n  \"groupOrUnionGraphPattern\" : {\n     \"{\": [\"groupGraphPattern\",\"*[UNION,groupGraphPattern]\"]}, \n  \"havingClause\" : {\n     \"HAVING\": [\"HAVING\",\"+havingCondition\"]}, \n  \"havingCondition\" : {\n     \"(\": [\"constraint\"], \n     \"STR\": [\"constraint\"], \n     \"LANG\": [\"constraint\"], \n     \"LANGMATCHES\": [\"constraint\"], \n     \"DATATYPE\": [\"constraint\"], \n     \"BOUND\": [\"constraint\"], \n     \"IRI\": [\"constraint\"], \n     \"URI\": [\"constraint\"], \n     \"BNODE\": [\"constraint\"], \n     \"RAND\": [\"constraint\"], \n     \"ABS\": [\"constraint\"], \n     \"CEIL\": [\"constraint\"], \n     \"FLOOR\": [\"constraint\"], \n     \"ROUND\": [\"constraint\"], \n     \"CONCAT\": [\"constraint\"], \n     \"STRLEN\": [\"constraint\"], \n     \"UCASE\": [\"constraint\"], \n     \"LCASE\": [\"constraint\"], \n     \"ENCODE_FOR_URI\": [\"constraint\"], \n     \"CONTAINS\": [\"constraint\"], \n     \"STRSTARTS\": [\"constraint\"], \n     \"STRENDS\": [\"constraint\"], \n     \"STRBEFORE\": [\"constraint\"], \n     \"STRAFTER\": [\"constraint\"], \n     \"YEAR\": [\"constraint\"], \n     \"MONTH\": [\"constraint\"], \n     \"DAY\": [\"constraint\"], \n     \"HOURS\": [\"constraint\"], \n     \"MINUTES\": [\"constraint\"], \n     \"SECONDS\": [\"constraint\"], \n     \"TIMEZONE\": [\"constraint\"], \n     \"TZ\": [\"constraint\"], \n     \"NOW\": [\"constraint\"], \n     \"UUID\": [\"constraint\"], \n     \"STRUUID\": [\"constraint\"], \n     \"MD5\": [\"constraint\"], \n     \"SHA1\": [\"constraint\"], \n     \"SHA256\": [\"constraint\"], \n     \"SHA384\": [\"constraint\"], \n     \"SHA512\": [\"constraint\"], \n     \"COALESCE\": [\"constraint\"], \n     \"IF\": [\"constraint\"], \n     \"STRLANG\": [\"constraint\"], \n     \"STRDT\": [\"constraint\"], \n     \"SAMETERM\": [\"constraint\"], \n     \"ISIRI\": [\"constraint\"], \n     \"ISURI\": [\"constraint\"], \n     \"ISBLANK\": [\"constraint\"], \n     \"ISLITERAL\": [\"constraint\"], \n     \"ISNUMERIC\": [\"constraint\"], \n     \"SUBSTR\": [\"constraint\"], \n     \"REPLACE\": [\"constraint\"], \n     \"REGEX\": [\"constraint\"], \n     \"EXISTS\": [\"constraint\"], \n     \"NOT\": [\"constraint\"], \n     \"IRI_REF\": [\"constraint\"], \n     \"PNAME_LN\": [\"constraint\"], \n     \"PNAME_NS\": [\"constraint\"]}, \n  \"inlineData\" : {\n     \"VALUES\": [\"VALUES\",\"dataBlock\"]}, \n  \"inlineDataFull\" : {\n     \"NIL\": [\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"], \n     \"(\": [\"or([NIL,[ (,*var,)]])\",\"{\",\"*or([[ (,*dataBlockValue,)],NIL])\",\"}\"]}, \n  \"inlineDataOneVar\" : {\n     \"VAR1\": [\"var\",\"{\",\"*dataBlockValue\",\"}\"], \n     \"VAR2\": [\"var\",\"{\",\"*dataBlockValue\",\"}\"]}, \n  \"insert1\" : {\n     \"DATA\": [\"DATA\",\"quadData\"], \n     \"{\": [\"quadPattern\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]}, \n  \"insertClause\" : {\n     \"INSERT\": [\"INSERT\",\"quadPattern\"]}, \n  \"integer\" : {\n     \"INTEGER\": [\"INTEGER\"]}, \n  \"iriRef\" : {\n     \"IRI_REF\": [\"IRI_REF\"], \n     \"PNAME_LN\": [\"prefixedName\"], \n     \"PNAME_NS\": [\"prefixedName\"]}, \n  \"iriRefOrFunction\" : {\n     \"IRI_REF\": [\"iriRef\",\"?argList\"], \n     \"PNAME_LN\": [\"iriRef\",\"?argList\"], \n     \"PNAME_NS\": [\"iriRef\",\"?argList\"]}, \n  \"limitClause\" : {\n     \"LIMIT\": [\"LIMIT\",\"INTEGER\"]}, \n  \"limitOffsetClauses\" : {\n     \"LIMIT\": [\"limitClause\",\"?offsetClause\"], \n     \"OFFSET\": [\"offsetClause\",\"?limitClause\"]}, \n  \"load\" : {\n     \"LOAD\": [\"LOAD\",\"?SILENT_1\",\"iriRef\",\"?[INTO,graphRef]\"]}, \n  \"minusGraphPattern\" : {\n     \"MINUS\": [\"MINUS\",\"groupGraphPattern\"]}, \n  \"modify\" : {\n     \"WITH\": [\"WITH\",\"iriRef\",\"or([[deleteClause,?insertClause],insertClause])\",\"*usingClause\",\"WHERE\",\"groupGraphPattern\"]}, \n  \"move\" : {\n     \"MOVE\": [\"MOVE\",\"?SILENT_4\",\"graphOrDefault\",\"TO\",\"graphOrDefault\"]}, \n  \"multiplicativeExpression\" : {\n     \"!\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"+\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"-\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"VAR1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"VAR2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"(\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"LANG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"LANGMATCHES\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DATATYPE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"BOUND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"IRI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"URI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"BNODE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"RAND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ABS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"CEIL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"FLOOR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ROUND\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"CONCAT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRLEN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"UCASE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"LCASE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ENCODE_FOR_URI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"CONTAINS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRSTARTS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRENDS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRBEFORE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRAFTER\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"YEAR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MONTH\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DAY\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"HOURS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MINUTES\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SECONDS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"TIMEZONE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"TZ\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"NOW\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"UUID\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRUUID\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MD5\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SHA1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SHA256\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SHA384\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SHA512\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"COALESCE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"IF\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRLANG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRDT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SAMETERM\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISIRI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISURI\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISBLANK\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISLITERAL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"ISNUMERIC\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"TRUE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"FALSE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"COUNT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SUM\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MIN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"MAX\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"AVG\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SAMPLE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"GROUP_CONCAT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"SUBSTR\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"REPLACE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"REGEX\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"EXISTS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"NOT\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"IRI_REF\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL_LONG1\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"STRING_LITERAL_LONG2\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"INTEGER\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"INTEGER_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE_POSITIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"INTEGER_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DECIMAL_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"DOUBLE_NEGATIVE\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"PNAME_LN\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"], \n     \"PNAME_NS\": [\"unaryExpression\",\"*or([[*,unaryExpression],[/,unaryExpression]])\"]}, \n  \"namedGraphClause\" : {\n     \"NAMED\": [\"NAMED\",\"sourceSelector\"]}, \n  \"notExistsFunc\" : {\n     \"NOT\": [\"NOT\",\"EXISTS\",\"groupGraphPattern\"]}, \n  \"numericExpression\" : {\n     \"!\": [\"additiveExpression\"], \n     \"+\": [\"additiveExpression\"], \n     \"-\": [\"additiveExpression\"], \n     \"VAR1\": [\"additiveExpression\"], \n     \"VAR2\": [\"additiveExpression\"], \n     \"(\": [\"additiveExpression\"], \n     \"STR\": [\"additiveExpression\"], \n     \"LANG\": [\"additiveExpression\"], \n     \"LANGMATCHES\": [\"additiveExpression\"], \n     \"DATATYPE\": [\"additiveExpression\"], \n     \"BOUND\": [\"additiveExpression\"], \n     \"IRI\": [\"additiveExpression\"], \n     \"URI\": [\"additiveExpression\"], \n     \"BNODE\": [\"additiveExpression\"], \n     \"RAND\": [\"additiveExpression\"], \n     \"ABS\": [\"additiveExpression\"], \n     \"CEIL\": [\"additiveExpression\"], \n     \"FLOOR\": [\"additiveExpression\"], \n     \"ROUND\": [\"additiveExpression\"], \n     \"CONCAT\": [\"additiveExpression\"], \n     \"STRLEN\": [\"additiveExpression\"], \n     \"UCASE\": [\"additiveExpression\"], \n     \"LCASE\": [\"additiveExpression\"], \n     \"ENCODE_FOR_URI\": [\"additiveExpression\"], \n     \"CONTAINS\": [\"additiveExpression\"], \n     \"STRSTARTS\": [\"additiveExpression\"], \n     \"STRENDS\": [\"additiveExpression\"], \n     \"STRBEFORE\": [\"additiveExpression\"], \n     \"STRAFTER\": [\"additiveExpression\"], \n     \"YEAR\": [\"additiveExpression\"], \n     \"MONTH\": [\"additiveExpression\"], \n     \"DAY\": [\"additiveExpression\"], \n     \"HOURS\": [\"additiveExpression\"], \n     \"MINUTES\": [\"additiveExpression\"], \n     \"SECONDS\": [\"additiveExpression\"], \n     \"TIMEZONE\": [\"additiveExpression\"], \n     \"TZ\": [\"additiveExpression\"], \n     \"NOW\": [\"additiveExpression\"], \n     \"UUID\": [\"additiveExpression\"], \n     \"STRUUID\": [\"additiveExpression\"], \n     \"MD5\": [\"additiveExpression\"], \n     \"SHA1\": [\"additiveExpression\"], \n     \"SHA256\": [\"additiveExpression\"], \n     \"SHA384\": [\"additiveExpression\"], \n     \"SHA512\": [\"additiveExpression\"], \n     \"COALESCE\": [\"additiveExpression\"], \n     \"IF\": [\"additiveExpression\"], \n     \"STRLANG\": [\"additiveExpression\"], \n     \"STRDT\": [\"additiveExpression\"], \n     \"SAMETERM\": [\"additiveExpression\"], \n     \"ISIRI\": [\"additiveExpression\"], \n     \"ISURI\": [\"additiveExpression\"], \n     \"ISBLANK\": [\"additiveExpression\"], \n     \"ISLITERAL\": [\"additiveExpression\"], \n     \"ISNUMERIC\": [\"additiveExpression\"], \n     \"TRUE\": [\"additiveExpression\"], \n     \"FALSE\": [\"additiveExpression\"], \n     \"COUNT\": [\"additiveExpression\"], \n     \"SUM\": [\"additiveExpression\"], \n     \"MIN\": [\"additiveExpression\"], \n     \"MAX\": [\"additiveExpression\"], \n     \"AVG\": [\"additiveExpression\"], \n     \"SAMPLE\": [\"additiveExpression\"], \n     \"GROUP_CONCAT\": [\"additiveExpression\"], \n     \"SUBSTR\": [\"additiveExpression\"], \n     \"REPLACE\": [\"additiveExpression\"], \n     \"REGEX\": [\"additiveExpression\"], \n     \"EXISTS\": [\"additiveExpression\"], \n     \"NOT\": [\"additiveExpression\"], \n     \"IRI_REF\": [\"additiveExpression\"], \n     \"STRING_LITERAL1\": [\"additiveExpression\"], \n     \"STRING_LITERAL2\": [\"additiveExpression\"], \n     \"STRING_LITERAL_LONG1\": [\"additiveExpression\"], \n     \"STRING_LITERAL_LONG2\": [\"additiveExpression\"], \n     \"INTEGER\": [\"additiveExpression\"], \n     \"DECIMAL\": [\"additiveExpression\"], \n     \"DOUBLE\": [\"additiveExpression\"], \n     \"INTEGER_POSITIVE\": [\"additiveExpression\"], \n     \"DECIMAL_POSITIVE\": [\"additiveExpression\"], \n     \"DOUBLE_POSITIVE\": [\"additiveExpression\"], \n     \"INTEGER_NEGATIVE\": [\"additiveExpression\"], \n     \"DECIMAL_NEGATIVE\": [\"additiveExpression\"], \n     \"DOUBLE_NEGATIVE\": [\"additiveExpression\"], \n     \"PNAME_LN\": [\"additiveExpression\"], \n     \"PNAME_NS\": [\"additiveExpression\"]}, \n  \"numericLiteral\" : {\n     \"INTEGER\": [\"numericLiteralUnsigned\"], \n     \"DECIMAL\": [\"numericLiteralUnsigned\"], \n     \"DOUBLE\": [\"numericLiteralUnsigned\"], \n     \"INTEGER_POSITIVE\": [\"numericLiteralPositive\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteralPositive\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteralPositive\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteralNegative\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteralNegative\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteralNegative\"]}, \n  \"numericLiteralNegative\" : {\n     \"INTEGER_NEGATIVE\": [\"INTEGER_NEGATIVE\"], \n     \"DECIMAL_NEGATIVE\": [\"DECIMAL_NEGATIVE\"], \n     \"DOUBLE_NEGATIVE\": [\"DOUBLE_NEGATIVE\"]}, \n  \"numericLiteralPositive\" : {\n     \"INTEGER_POSITIVE\": [\"INTEGER_POSITIVE\"], \n     \"DECIMAL_POSITIVE\": [\"DECIMAL_POSITIVE\"], \n     \"DOUBLE_POSITIVE\": [\"DOUBLE_POSITIVE\"]}, \n  \"numericLiteralUnsigned\" : {\n     \"INTEGER\": [\"INTEGER\"], \n     \"DECIMAL\": [\"DECIMAL\"], \n     \"DOUBLE\": [\"DOUBLE\"]}, \n  \"object\" : {\n     \"(\": [\"graphNode\"], \n     \"[\": [\"graphNode\"], \n     \"VAR1\": [\"graphNode\"], \n     \"VAR2\": [\"graphNode\"], \n     \"NIL\": [\"graphNode\"], \n     \"IRI_REF\": [\"graphNode\"], \n     \"TRUE\": [\"graphNode\"], \n     \"FALSE\": [\"graphNode\"], \n     \"BLANK_NODE_LABEL\": [\"graphNode\"], \n     \"ANON\": [\"graphNode\"], \n     \"PNAME_LN\": [\"graphNode\"], \n     \"PNAME_NS\": [\"graphNode\"], \n     \"STRING_LITERAL1\": [\"graphNode\"], \n     \"STRING_LITERAL2\": [\"graphNode\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNode\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNode\"], \n     \"INTEGER\": [\"graphNode\"], \n     \"DECIMAL\": [\"graphNode\"], \n     \"DOUBLE\": [\"graphNode\"], \n     \"INTEGER_POSITIVE\": [\"graphNode\"], \n     \"DECIMAL_POSITIVE\": [\"graphNode\"], \n     \"DOUBLE_POSITIVE\": [\"graphNode\"], \n     \"INTEGER_NEGATIVE\": [\"graphNode\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNode\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNode\"]}, \n  \"objectList\" : {\n     \"(\": [\"object\",\"*[,,object]\"], \n     \"[\": [\"object\",\"*[,,object]\"], \n     \"VAR1\": [\"object\",\"*[,,object]\"], \n     \"VAR2\": [\"object\",\"*[,,object]\"], \n     \"NIL\": [\"object\",\"*[,,object]\"], \n     \"IRI_REF\": [\"object\",\"*[,,object]\"], \n     \"TRUE\": [\"object\",\"*[,,object]\"], \n     \"FALSE\": [\"object\",\"*[,,object]\"], \n     \"BLANK_NODE_LABEL\": [\"object\",\"*[,,object]\"], \n     \"ANON\": [\"object\",\"*[,,object]\"], \n     \"PNAME_LN\": [\"object\",\"*[,,object]\"], \n     \"PNAME_NS\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL1\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL2\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL_LONG1\": [\"object\",\"*[,,object]\"], \n     \"STRING_LITERAL_LONG2\": [\"object\",\"*[,,object]\"], \n     \"INTEGER\": [\"object\",\"*[,,object]\"], \n     \"DECIMAL\": [\"object\",\"*[,,object]\"], \n     \"DOUBLE\": [\"object\",\"*[,,object]\"], \n     \"INTEGER_POSITIVE\": [\"object\",\"*[,,object]\"], \n     \"DECIMAL_POSITIVE\": [\"object\",\"*[,,object]\"], \n     \"DOUBLE_POSITIVE\": [\"object\",\"*[,,object]\"], \n     \"INTEGER_NEGATIVE\": [\"object\",\"*[,,object]\"], \n     \"DECIMAL_NEGATIVE\": [\"object\",\"*[,,object]\"], \n     \"DOUBLE_NEGATIVE\": [\"object\",\"*[,,object]\"]}, \n  \"objectListPath\" : {\n     \"(\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"[\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"VAR1\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"VAR2\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"NIL\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"IRI_REF\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"TRUE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"FALSE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"BLANK_NODE_LABEL\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"ANON\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"PNAME_LN\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"PNAME_NS\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL1\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL2\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL_LONG1\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"STRING_LITERAL_LONG2\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"INTEGER\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DECIMAL\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DOUBLE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"INTEGER_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DECIMAL_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DOUBLE_POSITIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"INTEGER_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DECIMAL_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"], \n     \"DOUBLE_NEGATIVE\": [\"objectPath\",\"*[,,objectPath]\"]}, \n  \"objectPath\" : {\n     \"(\": [\"graphNodePath\"], \n     \"[\": [\"graphNodePath\"], \n     \"VAR1\": [\"graphNodePath\"], \n     \"VAR2\": [\"graphNodePath\"], \n     \"NIL\": [\"graphNodePath\"], \n     \"IRI_REF\": [\"graphNodePath\"], \n     \"TRUE\": [\"graphNodePath\"], \n     \"FALSE\": [\"graphNodePath\"], \n     \"BLANK_NODE_LABEL\": [\"graphNodePath\"], \n     \"ANON\": [\"graphNodePath\"], \n     \"PNAME_LN\": [\"graphNodePath\"], \n     \"PNAME_NS\": [\"graphNodePath\"], \n     \"STRING_LITERAL1\": [\"graphNodePath\"], \n     \"STRING_LITERAL2\": [\"graphNodePath\"], \n     \"STRING_LITERAL_LONG1\": [\"graphNodePath\"], \n     \"STRING_LITERAL_LONG2\": [\"graphNodePath\"], \n     \"INTEGER\": [\"graphNodePath\"], \n     \"DECIMAL\": [\"graphNodePath\"], \n     \"DOUBLE\": [\"graphNodePath\"], \n     \"INTEGER_POSITIVE\": [\"graphNodePath\"], \n     \"DECIMAL_POSITIVE\": [\"graphNodePath\"], \n     \"DOUBLE_POSITIVE\": [\"graphNodePath\"], \n     \"INTEGER_NEGATIVE\": [\"graphNodePath\"], \n     \"DECIMAL_NEGATIVE\": [\"graphNodePath\"], \n     \"DOUBLE_NEGATIVE\": [\"graphNodePath\"]}, \n  \"offsetClause\" : {\n     \"OFFSET\": [\"OFFSET\",\"INTEGER\"]}, \n  \"optionalGraphPattern\" : {\n     \"OPTIONAL\": [\"OPTIONAL\",\"groupGraphPattern\"]}, \n  \"or([*,expression])\" : {\n     \"*\": [\"*\"], \n     \"!\": [\"expression\"], \n     \"+\": [\"expression\"], \n     \"-\": [\"expression\"], \n     \"VAR1\": [\"expression\"], \n     \"VAR2\": [\"expression\"], \n     \"(\": [\"expression\"], \n     \"STR\": [\"expression\"], \n     \"LANG\": [\"expression\"], \n     \"LANGMATCHES\": [\"expression\"], \n     \"DATATYPE\": [\"expression\"], \n     \"BOUND\": [\"expression\"], \n     \"IRI\": [\"expression\"], \n     \"URI\": [\"expression\"], \n     \"BNODE\": [\"expression\"], \n     \"RAND\": [\"expression\"], \n     \"ABS\": [\"expression\"], \n     \"CEIL\": [\"expression\"], \n     \"FLOOR\": [\"expression\"], \n     \"ROUND\": [\"expression\"], \n     \"CONCAT\": [\"expression\"], \n     \"STRLEN\": [\"expression\"], \n     \"UCASE\": [\"expression\"], \n     \"LCASE\": [\"expression\"], \n     \"ENCODE_FOR_URI\": [\"expression\"], \n     \"CONTAINS\": [\"expression\"], \n     \"STRSTARTS\": [\"expression\"], \n     \"STRENDS\": [\"expression\"], \n     \"STRBEFORE\": [\"expression\"], \n     \"STRAFTER\": [\"expression\"], \n     \"YEAR\": [\"expression\"], \n     \"MONTH\": [\"expression\"], \n     \"DAY\": [\"expression\"], \n     \"HOURS\": [\"expression\"], \n     \"MINUTES\": [\"expression\"], \n     \"SECONDS\": [\"expression\"], \n     \"TIMEZONE\": [\"expression\"], \n     \"TZ\": [\"expression\"], \n     \"NOW\": [\"expression\"], \n     \"UUID\": [\"expression\"], \n     \"STRUUID\": [\"expression\"], \n     \"MD5\": [\"expression\"], \n     \"SHA1\": [\"expression\"], \n     \"SHA256\": [\"expression\"], \n     \"SHA384\": [\"expression\"], \n     \"SHA512\": [\"expression\"], \n     \"COALESCE\": [\"expression\"], \n     \"IF\": [\"expression\"], \n     \"STRLANG\": [\"expression\"], \n     \"STRDT\": [\"expression\"], \n     \"SAMETERM\": [\"expression\"], \n     \"ISIRI\": [\"expression\"], \n     \"ISURI\": [\"expression\"], \n     \"ISBLANK\": [\"expression\"], \n     \"ISLITERAL\": [\"expression\"], \n     \"ISNUMERIC\": [\"expression\"], \n     \"TRUE\": [\"expression\"], \n     \"FALSE\": [\"expression\"], \n     \"COUNT\": [\"expression\"], \n     \"SUM\": [\"expression\"], \n     \"MIN\": [\"expression\"], \n     \"MAX\": [\"expression\"], \n     \"AVG\": [\"expression\"], \n     \"SAMPLE\": [\"expression\"], \n     \"GROUP_CONCAT\": [\"expression\"], \n     \"SUBSTR\": [\"expression\"], \n     \"REPLACE\": [\"expression\"], \n     \"REGEX\": [\"expression\"], \n     \"EXISTS\": [\"expression\"], \n     \"NOT\": [\"expression\"], \n     \"IRI_REF\": [\"expression\"], \n     \"STRING_LITERAL1\": [\"expression\"], \n     \"STRING_LITERAL2\": [\"expression\"], \n     \"STRING_LITERAL_LONG1\": [\"expression\"], \n     \"STRING_LITERAL_LONG2\": [\"expression\"], \n     \"INTEGER\": [\"expression\"], \n     \"DECIMAL\": [\"expression\"], \n     \"DOUBLE\": [\"expression\"], \n     \"INTEGER_POSITIVE\": [\"expression\"], \n     \"DECIMAL_POSITIVE\": [\"expression\"], \n     \"DOUBLE_POSITIVE\": [\"expression\"], \n     \"INTEGER_NEGATIVE\": [\"expression\"], \n     \"DECIMAL_NEGATIVE\": [\"expression\"], \n     \"DOUBLE_NEGATIVE\": [\"expression\"], \n     \"PNAME_LN\": [\"expression\"], \n     \"PNAME_NS\": [\"expression\"]}, \n  \"or([+or([var,[ (,expression,AS,var,)]]),*])\" : {\n     \"(\": [\"+or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR1\": [\"+or([var,[ (,expression,AS,var,)]])\"], \n     \"VAR2\": [\"+or([var,[ (,expression,AS,var,)]])\"], \n     \"*\": [\"*\"]}, \n  \"or([+varOrIRIref,*])\" : {\n     \"VAR1\": [\"+varOrIRIref\"], \n     \"VAR2\": [\"+varOrIRIref\"], \n     \"IRI_REF\": [\"+varOrIRIref\"], \n     \"PNAME_LN\": [\"+varOrIRIref\"], \n     \"PNAME_NS\": [\"+varOrIRIref\"], \n     \"*\": [\"*\"]}, \n  \"or([ASC,DESC])\" : {\n     \"ASC\": [\"ASC\"], \n     \"DESC\": [\"DESC\"]}, \n  \"or([DISTINCT,REDUCED])\" : {\n     \"DISTINCT\": [\"DISTINCT\"], \n     \"REDUCED\": [\"REDUCED\"]}, \n  \"or([LANGTAG,[^^,iriRef]])\" : {\n     \"LANGTAG\": [\"LANGTAG\"], \n     \"^^\": [\"[^^,iriRef]\"]}, \n  \"or([NIL,[ (,*var,)]])\" : {\n     \"NIL\": [\"NIL\"], \n     \"(\": [\"[ (,*var,)]\"]}, \n  \"or([[ (,*dataBlockValue,)],NIL])\" : {\n     \"(\": [\"[ (,*dataBlockValue,)]\"], \n     \"NIL\": [\"NIL\"]}, \n  \"or([[ (,expression,)],NIL])\" : {\n     \"(\": [\"[ (,expression,)]\"], \n     \"NIL\": [\"NIL\"]}, \n  \"or([[*,unaryExpression],[/,unaryExpression]])\" : {\n     \"*\": [\"[*,unaryExpression]\"], \n     \"/\": [\"[/,unaryExpression]\"]}, \n  \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\" : {\n     \"+\": [\"[+,multiplicativeExpression]\"], \n     \"-\": [\"[-,multiplicativeExpression]\"], \n     \"INTEGER_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"DECIMAL_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"DOUBLE_POSITIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"INTEGER_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"DECIMAL_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"], \n     \"DOUBLE_NEGATIVE\": [\"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"]}, \n  \"or([[,,or([},[integer,}]])],}])\" : {\n     \",\": [\"[,,or([},[integer,}]])]\"], \n     \"}\": [\"}\"]}, \n  \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\" : {\n     \"=\": [\"[=,numericExpression]\"], \n     \"!=\": [\"[!=,numericExpression]\"], \n     \"<\": [\"[<,numericExpression]\"], \n     \">\": [\"[>,numericExpression]\"], \n     \"<=\": [\"[<=,numericExpression]\"], \n     \">=\": [\"[>=,numericExpression]\"], \n     \"IN\": [\"[IN,expressionList]\"], \n     \"NOT\": [\"[NOT,IN,expressionList]\"]}, \n  \"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\" : {\n     \"{\": [\"[constructTemplate,*datasetClause,whereClause,solutionModifier]\"], \n     \"WHERE\": [\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"], \n     \"FROM\": [\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"]}, \n  \"or([[deleteClause,?insertClause],insertClause])\" : {\n     \"DELETE\": [\"[deleteClause,?insertClause]\"], \n     \"INSERT\": [\"insertClause\"]}, \n  \"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\" : {\n     \"INTEGER\": [\"[integer,or([[,,or([},[integer,}]])],}])]\"], \n     \",\": [\"[,,integer,}]\"]}, \n  \"or([baseDecl,prefixDecl])\" : {\n     \"BASE\": [\"baseDecl\"], \n     \"PREFIX\": [\"prefixDecl\"]}, \n  \"or([defaultGraphClause,namedGraphClause])\" : {\n     \"IRI_REF\": [\"defaultGraphClause\"], \n     \"PNAME_LN\": [\"defaultGraphClause\"], \n     \"PNAME_NS\": [\"defaultGraphClause\"], \n     \"NAMED\": [\"namedGraphClause\"]}, \n  \"or([inlineDataOneVar,inlineDataFull])\" : {\n     \"VAR1\": [\"inlineDataOneVar\"], \n     \"VAR2\": [\"inlineDataOneVar\"], \n     \"NIL\": [\"inlineDataFull\"], \n     \"(\": [\"inlineDataFull\"]}, \n  \"or([iriRef,[NAMED,iriRef]])\" : {\n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"], \n     \"NAMED\": [\"[NAMED,iriRef]\"]}, \n  \"or([iriRef,a])\" : {\n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"], \n     \"a\": [\"a\"]}, \n  \"or([numericLiteralPositive,numericLiteralNegative])\" : {\n     \"INTEGER_POSITIVE\": [\"numericLiteralPositive\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteralPositive\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteralPositive\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteralNegative\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteralNegative\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteralNegative\"]}, \n  \"or([queryAll,updateAll])\" : {\n     \"CONSTRUCT\": [\"queryAll\"], \n     \"DESCRIBE\": [\"queryAll\"], \n     \"ASK\": [\"queryAll\"], \n     \"SELECT\": [\"queryAll\"], \n     \"INSERT\": [\"updateAll\"], \n     \"DELETE\": [\"updateAll\"], \n     \"LOAD\": [\"updateAll\"], \n     \"CLEAR\": [\"updateAll\"], \n     \"DROP\": [\"updateAll\"], \n     \"ADD\": [\"updateAll\"], \n     \"MOVE\": [\"updateAll\"], \n     \"COPY\": [\"updateAll\"], \n     \"CREATE\": [\"updateAll\"], \n     \"WITH\": [\"updateAll\"], \n     \"$\": [\"updateAll\"]}, \n  \"or([selectQuery,constructQuery,describeQuery,askQuery])\" : {\n     \"SELECT\": [\"selectQuery\"], \n     \"CONSTRUCT\": [\"constructQuery\"], \n     \"DESCRIBE\": [\"describeQuery\"], \n     \"ASK\": [\"askQuery\"]}, \n  \"or([subSelect,groupGraphPatternSub])\" : {\n     \"SELECT\": [\"subSelect\"], \n     \"{\": [\"groupGraphPatternSub\"], \n     \"OPTIONAL\": [\"groupGraphPatternSub\"], \n     \"MINUS\": [\"groupGraphPatternSub\"], \n     \"GRAPH\": [\"groupGraphPatternSub\"], \n     \"SERVICE\": [\"groupGraphPatternSub\"], \n     \"FILTER\": [\"groupGraphPatternSub\"], \n     \"BIND\": [\"groupGraphPatternSub\"], \n     \"VALUES\": [\"groupGraphPatternSub\"], \n     \"VAR1\": [\"groupGraphPatternSub\"], \n     \"VAR2\": [\"groupGraphPatternSub\"], \n     \"NIL\": [\"groupGraphPatternSub\"], \n     \"(\": [\"groupGraphPatternSub\"], \n     \"[\": [\"groupGraphPatternSub\"], \n     \"IRI_REF\": [\"groupGraphPatternSub\"], \n     \"TRUE\": [\"groupGraphPatternSub\"], \n     \"FALSE\": [\"groupGraphPatternSub\"], \n     \"BLANK_NODE_LABEL\": [\"groupGraphPatternSub\"], \n     \"ANON\": [\"groupGraphPatternSub\"], \n     \"PNAME_LN\": [\"groupGraphPatternSub\"], \n     \"PNAME_NS\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL1\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL2\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL_LONG1\": [\"groupGraphPatternSub\"], \n     \"STRING_LITERAL_LONG2\": [\"groupGraphPatternSub\"], \n     \"INTEGER\": [\"groupGraphPatternSub\"], \n     \"DECIMAL\": [\"groupGraphPatternSub\"], \n     \"DOUBLE\": [\"groupGraphPatternSub\"], \n     \"INTEGER_POSITIVE\": [\"groupGraphPatternSub\"], \n     \"DECIMAL_POSITIVE\": [\"groupGraphPatternSub\"], \n     \"DOUBLE_POSITIVE\": [\"groupGraphPatternSub\"], \n     \"INTEGER_NEGATIVE\": [\"groupGraphPatternSub\"], \n     \"DECIMAL_NEGATIVE\": [\"groupGraphPatternSub\"], \n     \"DOUBLE_NEGATIVE\": [\"groupGraphPatternSub\"], \n     \"}\": [\"groupGraphPatternSub\"]}, \n  \"or([var,[ (,expression,AS,var,)]])\" : {\n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"], \n     \"(\": [\"[ (,expression,AS,var,)]\"]}, \n  \"or([verbPath,verbSimple])\" : {\n     \"^\": [\"verbPath\"], \n     \"a\": [\"verbPath\"], \n     \"!\": [\"verbPath\"], \n     \"(\": [\"verbPath\"], \n     \"IRI_REF\": [\"verbPath\"], \n     \"PNAME_LN\": [\"verbPath\"], \n     \"PNAME_NS\": [\"verbPath\"], \n     \"VAR1\": [\"verbSimple\"], \n     \"VAR2\": [\"verbSimple\"]}, \n  \"or([},[integer,}]])\" : {\n     \"}\": [\"}\"], \n     \"INTEGER\": [\"[integer,}]\"]}, \n  \"orderClause\" : {\n     \"ORDER\": [\"ORDER\",\"BY\",\"+orderCondition\"]}, \n  \"orderCondition\" : {\n     \"ASC\": [\"or([ASC,DESC])\",\"brackettedExpression\"], \n     \"DESC\": [\"or([ASC,DESC])\",\"brackettedExpression\"], \n     \"(\": [\"constraint\"], \n     \"STR\": [\"constraint\"], \n     \"LANG\": [\"constraint\"], \n     \"LANGMATCHES\": [\"constraint\"], \n     \"DATATYPE\": [\"constraint\"], \n     \"BOUND\": [\"constraint\"], \n     \"IRI\": [\"constraint\"], \n     \"URI\": [\"constraint\"], \n     \"BNODE\": [\"constraint\"], \n     \"RAND\": [\"constraint\"], \n     \"ABS\": [\"constraint\"], \n     \"CEIL\": [\"constraint\"], \n     \"FLOOR\": [\"constraint\"], \n     \"ROUND\": [\"constraint\"], \n     \"CONCAT\": [\"constraint\"], \n     \"STRLEN\": [\"constraint\"], \n     \"UCASE\": [\"constraint\"], \n     \"LCASE\": [\"constraint\"], \n     \"ENCODE_FOR_URI\": [\"constraint\"], \n     \"CONTAINS\": [\"constraint\"], \n     \"STRSTARTS\": [\"constraint\"], \n     \"STRENDS\": [\"constraint\"], \n     \"STRBEFORE\": [\"constraint\"], \n     \"STRAFTER\": [\"constraint\"], \n     \"YEAR\": [\"constraint\"], \n     \"MONTH\": [\"constraint\"], \n     \"DAY\": [\"constraint\"], \n     \"HOURS\": [\"constraint\"], \n     \"MINUTES\": [\"constraint\"], \n     \"SECONDS\": [\"constraint\"], \n     \"TIMEZONE\": [\"constraint\"], \n     \"TZ\": [\"constraint\"], \n     \"NOW\": [\"constraint\"], \n     \"UUID\": [\"constraint\"], \n     \"STRUUID\": [\"constraint\"], \n     \"MD5\": [\"constraint\"], \n     \"SHA1\": [\"constraint\"], \n     \"SHA256\": [\"constraint\"], \n     \"SHA384\": [\"constraint\"], \n     \"SHA512\": [\"constraint\"], \n     \"COALESCE\": [\"constraint\"], \n     \"IF\": [\"constraint\"], \n     \"STRLANG\": [\"constraint\"], \n     \"STRDT\": [\"constraint\"], \n     \"SAMETERM\": [\"constraint\"], \n     \"ISIRI\": [\"constraint\"], \n     \"ISURI\": [\"constraint\"], \n     \"ISBLANK\": [\"constraint\"], \n     \"ISLITERAL\": [\"constraint\"], \n     \"ISNUMERIC\": [\"constraint\"], \n     \"SUBSTR\": [\"constraint\"], \n     \"REPLACE\": [\"constraint\"], \n     \"REGEX\": [\"constraint\"], \n     \"EXISTS\": [\"constraint\"], \n     \"NOT\": [\"constraint\"], \n     \"IRI_REF\": [\"constraint\"], \n     \"PNAME_LN\": [\"constraint\"], \n     \"PNAME_NS\": [\"constraint\"], \n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"]}, \n  \"path\" : {\n     \"^\": [\"pathAlternative\"], \n     \"a\": [\"pathAlternative\"], \n     \"!\": [\"pathAlternative\"], \n     \"(\": [\"pathAlternative\"], \n     \"IRI_REF\": [\"pathAlternative\"], \n     \"PNAME_LN\": [\"pathAlternative\"], \n     \"PNAME_NS\": [\"pathAlternative\"]}, \n  \"pathAlternative\" : {\n     \"^\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"a\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"!\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"(\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"IRI_REF\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"PNAME_LN\": [\"pathSequence\",\"*[|,pathSequence]\"], \n     \"PNAME_NS\": [\"pathSequence\",\"*[|,pathSequence]\"]}, \n  \"pathElt\" : {\n     \"a\": [\"pathPrimary\",\"?pathMod\"], \n     \"!\": [\"pathPrimary\",\"?pathMod\"], \n     \"(\": [\"pathPrimary\",\"?pathMod\"], \n     \"IRI_REF\": [\"pathPrimary\",\"?pathMod\"], \n     \"PNAME_LN\": [\"pathPrimary\",\"?pathMod\"], \n     \"PNAME_NS\": [\"pathPrimary\",\"?pathMod\"]}, \n  \"pathEltOrInverse\" : {\n     \"a\": [\"pathElt\"], \n     \"!\": [\"pathElt\"], \n     \"(\": [\"pathElt\"], \n     \"IRI_REF\": [\"pathElt\"], \n     \"PNAME_LN\": [\"pathElt\"], \n     \"PNAME_NS\": [\"pathElt\"], \n     \"^\": [\"^\",\"pathElt\"]}, \n  \"pathMod\" : {\n     \"*\": [\"*\"], \n     \"?\": [\"?\"], \n     \"+\": [\"+\"], \n     \"{\": [\"{\",\"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\"]}, \n  \"pathNegatedPropertySet\" : {\n     \"a\": [\"pathOneInPropertySet\"], \n     \"^\": [\"pathOneInPropertySet\"], \n     \"IRI_REF\": [\"pathOneInPropertySet\"], \n     \"PNAME_LN\": [\"pathOneInPropertySet\"], \n     \"PNAME_NS\": [\"pathOneInPropertySet\"], \n     \"(\": [\"(\",\"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\",\")\"]}, \n  \"pathOneInPropertySet\" : {\n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"], \n     \"a\": [\"a\"], \n     \"^\": [\"^\",\"or([iriRef,a])\"]}, \n  \"pathPrimary\" : {\n     \"IRI_REF\": [\"storeProperty\",\"iriRef\"], \n     \"PNAME_LN\": [\"storeProperty\",\"iriRef\"], \n     \"PNAME_NS\": [\"storeProperty\",\"iriRef\"], \n     \"a\": [\"storeProperty\",\"a\"], \n     \"!\": [\"!\",\"pathNegatedPropertySet\"], \n     \"(\": [\"(\",\"path\",\")\"]}, \n  \"pathSequence\" : {\n     \"^\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"a\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"!\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"(\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"IRI_REF\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"PNAME_LN\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"], \n     \"PNAME_NS\": [\"pathEltOrInverse\",\"*[/,pathEltOrInverse]\"]}, \n  \"prefixDecl\" : {\n     \"PREFIX\": [\"PREFIX\",\"PNAME_NS\",\"IRI_REF\"]}, \n  \"prefixedName\" : {\n     \"PNAME_LN\": [\"PNAME_LN\"], \n     \"PNAME_NS\": [\"PNAME_NS\"]}, \n  \"primaryExpression\" : {\n     \"(\": [\"brackettedExpression\"], \n     \"STR\": [\"builtInCall\"], \n     \"LANG\": [\"builtInCall\"], \n     \"LANGMATCHES\": [\"builtInCall\"], \n     \"DATATYPE\": [\"builtInCall\"], \n     \"BOUND\": [\"builtInCall\"], \n     \"IRI\": [\"builtInCall\"], \n     \"URI\": [\"builtInCall\"], \n     \"BNODE\": [\"builtInCall\"], \n     \"RAND\": [\"builtInCall\"], \n     \"ABS\": [\"builtInCall\"], \n     \"CEIL\": [\"builtInCall\"], \n     \"FLOOR\": [\"builtInCall\"], \n     \"ROUND\": [\"builtInCall\"], \n     \"CONCAT\": [\"builtInCall\"], \n     \"STRLEN\": [\"builtInCall\"], \n     \"UCASE\": [\"builtInCall\"], \n     \"LCASE\": [\"builtInCall\"], \n     \"ENCODE_FOR_URI\": [\"builtInCall\"], \n     \"CONTAINS\": [\"builtInCall\"], \n     \"STRSTARTS\": [\"builtInCall\"], \n     \"STRENDS\": [\"builtInCall\"], \n     \"STRBEFORE\": [\"builtInCall\"], \n     \"STRAFTER\": [\"builtInCall\"], \n     \"YEAR\": [\"builtInCall\"], \n     \"MONTH\": [\"builtInCall\"], \n     \"DAY\": [\"builtInCall\"], \n     \"HOURS\": [\"builtInCall\"], \n     \"MINUTES\": [\"builtInCall\"], \n     \"SECONDS\": [\"builtInCall\"], \n     \"TIMEZONE\": [\"builtInCall\"], \n     \"TZ\": [\"builtInCall\"], \n     \"NOW\": [\"builtInCall\"], \n     \"UUID\": [\"builtInCall\"], \n     \"STRUUID\": [\"builtInCall\"], \n     \"MD5\": [\"builtInCall\"], \n     \"SHA1\": [\"builtInCall\"], \n     \"SHA256\": [\"builtInCall\"], \n     \"SHA384\": [\"builtInCall\"], \n     \"SHA512\": [\"builtInCall\"], \n     \"COALESCE\": [\"builtInCall\"], \n     \"IF\": [\"builtInCall\"], \n     \"STRLANG\": [\"builtInCall\"], \n     \"STRDT\": [\"builtInCall\"], \n     \"SAMETERM\": [\"builtInCall\"], \n     \"ISIRI\": [\"builtInCall\"], \n     \"ISURI\": [\"builtInCall\"], \n     \"ISBLANK\": [\"builtInCall\"], \n     \"ISLITERAL\": [\"builtInCall\"], \n     \"ISNUMERIC\": [\"builtInCall\"], \n     \"SUBSTR\": [\"builtInCall\"], \n     \"REPLACE\": [\"builtInCall\"], \n     \"REGEX\": [\"builtInCall\"], \n     \"EXISTS\": [\"builtInCall\"], \n     \"NOT\": [\"builtInCall\"], \n     \"IRI_REF\": [\"iriRefOrFunction\"], \n     \"PNAME_LN\": [\"iriRefOrFunction\"], \n     \"PNAME_NS\": [\"iriRefOrFunction\"], \n     \"STRING_LITERAL1\": [\"rdfLiteral\"], \n     \"STRING_LITERAL2\": [\"rdfLiteral\"], \n     \"STRING_LITERAL_LONG1\": [\"rdfLiteral\"], \n     \"STRING_LITERAL_LONG2\": [\"rdfLiteral\"], \n     \"INTEGER\": [\"numericLiteral\"], \n     \"DECIMAL\": [\"numericLiteral\"], \n     \"DOUBLE\": [\"numericLiteral\"], \n     \"INTEGER_POSITIVE\": [\"numericLiteral\"], \n     \"DECIMAL_POSITIVE\": [\"numericLiteral\"], \n     \"DOUBLE_POSITIVE\": [\"numericLiteral\"], \n     \"INTEGER_NEGATIVE\": [\"numericLiteral\"], \n     \"DECIMAL_NEGATIVE\": [\"numericLiteral\"], \n     \"DOUBLE_NEGATIVE\": [\"numericLiteral\"], \n     \"TRUE\": [\"booleanLiteral\"], \n     \"FALSE\": [\"booleanLiteral\"], \n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"], \n     \"COUNT\": [\"aggregate\"], \n     \"SUM\": [\"aggregate\"], \n     \"MIN\": [\"aggregate\"], \n     \"MAX\": [\"aggregate\"], \n     \"AVG\": [\"aggregate\"], \n     \"SAMPLE\": [\"aggregate\"], \n     \"GROUP_CONCAT\": [\"aggregate\"]}, \n  \"prologue\" : {\n     \"BASE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"PREFIX\": [\"*or([baseDecl,prefixDecl])\"], \n     \"$\": [\"*or([baseDecl,prefixDecl])\"], \n     \"CONSTRUCT\": [\"*or([baseDecl,prefixDecl])\"], \n     \"DESCRIBE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"ASK\": [\"*or([baseDecl,prefixDecl])\"], \n     \"INSERT\": [\"*or([baseDecl,prefixDecl])\"], \n     \"DELETE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"SELECT\": [\"*or([baseDecl,prefixDecl])\"], \n     \"LOAD\": [\"*or([baseDecl,prefixDecl])\"], \n     \"CLEAR\": [\"*or([baseDecl,prefixDecl])\"], \n     \"DROP\": [\"*or([baseDecl,prefixDecl])\"], \n     \"ADD\": [\"*or([baseDecl,prefixDecl])\"], \n     \"MOVE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"COPY\": [\"*or([baseDecl,prefixDecl])\"], \n     \"CREATE\": [\"*or([baseDecl,prefixDecl])\"], \n     \"WITH\": [\"*or([baseDecl,prefixDecl])\"]}, \n  \"propertyList\" : {\n     \"a\": [\"propertyListNotEmpty\"], \n     \"VAR1\": [\"propertyListNotEmpty\"], \n     \"VAR2\": [\"propertyListNotEmpty\"], \n     \"IRI_REF\": [\"propertyListNotEmpty\"], \n     \"PNAME_LN\": [\"propertyListNotEmpty\"], \n     \"PNAME_NS\": [\"propertyListNotEmpty\"], \n     \".\": [], \n     \"}\": [], \n     \"GRAPH\": []}, \n  \"propertyListNotEmpty\" : {\n     \"a\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"VAR1\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"VAR2\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"IRI_REF\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"PNAME_LN\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"], \n     \"PNAME_NS\": [\"verb\",\"objectList\",\"*[;,?[verb,objectList]]\"]}, \n  \"propertyListPath\" : {\n     \"a\": [\"propertyListNotEmpty\"], \n     \"VAR1\": [\"propertyListNotEmpty\"], \n     \"VAR2\": [\"propertyListNotEmpty\"], \n     \"IRI_REF\": [\"propertyListNotEmpty\"], \n     \"PNAME_LN\": [\"propertyListNotEmpty\"], \n     \"PNAME_NS\": [\"propertyListNotEmpty\"], \n     \".\": [], \n     \"{\": [], \n     \"OPTIONAL\": [], \n     \"MINUS\": [], \n     \"GRAPH\": [], \n     \"SERVICE\": [], \n     \"FILTER\": [], \n     \"BIND\": [], \n     \"VALUES\": [], \n     \"}\": []}, \n  \"propertyListPathNotEmpty\" : {\n     \"VAR1\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"VAR2\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"^\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"a\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"!\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"(\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"IRI_REF\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"PNAME_LN\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"], \n     \"PNAME_NS\": [\"or([verbPath,verbSimple])\",\"objectListPath\",\"*[;,?[or([verbPath,verbSimple]),objectList]]\"]}, \n  \"quadData\" : {\n     \"{\": [\"{\",\"disallowVars\",\"quads\",\"allowVars\",\"}\"]}, \n  \"quadDataNoBnodes\" : {\n     \"{\": [\"{\",\"disallowBnodes\",\"disallowVars\",\"quads\",\"allowVars\",\"allowBnodes\",\"}\"]}, \n  \"quadPattern\" : {\n     \"{\": [\"{\",\"quads\",\"}\"]}, \n  \"quadPatternNoBnodes\" : {\n     \"{\": [\"{\",\"disallowBnodes\",\"quads\",\"allowBnodes\",\"}\"]}, \n  \"quads\" : {\n     \"GRAPH\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"VAR1\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"VAR2\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"NIL\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"(\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"[\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"IRI_REF\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"TRUE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"FALSE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"BLANK_NODE_LABEL\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"ANON\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"PNAME_LN\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"PNAME_NS\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"STRING_LITERAL1\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"STRING_LITERAL2\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"STRING_LITERAL_LONG1\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"STRING_LITERAL_LONG2\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"INTEGER\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"DECIMAL\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"DOUBLE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"INTEGER_POSITIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"DECIMAL_POSITIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"DOUBLE_POSITIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"INTEGER_NEGATIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"DECIMAL_NEGATIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"DOUBLE_NEGATIVE\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"], \n     \"}\": [\"?triplesTemplate\",\"*[quadsNotTriples,?.,?triplesTemplate]\"]}, \n  \"quadsNotTriples\" : {\n     \"GRAPH\": [\"GRAPH\",\"varOrIRIref\",\"{\",\"?triplesTemplate\",\"}\"]}, \n  \"queryAll\" : {\n     \"CONSTRUCT\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"], \n     \"DESCRIBE\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"], \n     \"ASK\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"], \n     \"SELECT\": [\"or([selectQuery,constructQuery,describeQuery,askQuery])\",\"valuesClause\"]}, \n  \"rdfLiteral\" : {\n     \"STRING_LITERAL1\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \n     \"STRING_LITERAL2\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \n     \"STRING_LITERAL_LONG1\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"], \n     \"STRING_LITERAL_LONG2\": [\"string\",\"?or([LANGTAG,[^^,iriRef]])\"]}, \n  \"regexExpression\" : {\n     \"REGEX\": [\"REGEX\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \n  \"relationalExpression\" : {\n     \"!\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"+\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"-\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"VAR1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"VAR2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"(\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"LANG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"LANGMATCHES\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DATATYPE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"BOUND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"IRI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"URI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"BNODE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"RAND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ABS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"CEIL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"FLOOR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ROUND\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"CONCAT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRLEN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"UCASE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"LCASE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ENCODE_FOR_URI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"CONTAINS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRSTARTS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRENDS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRBEFORE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRAFTER\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"YEAR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MONTH\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DAY\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"HOURS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MINUTES\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SECONDS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"TIMEZONE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"TZ\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"NOW\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"UUID\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRUUID\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MD5\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SHA1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SHA256\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SHA384\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SHA512\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"COALESCE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"IF\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRLANG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRDT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SAMETERM\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISIRI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISURI\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISBLANK\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISLITERAL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"ISNUMERIC\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"TRUE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"FALSE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"COUNT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SUM\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MIN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"MAX\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"AVG\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SAMPLE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"GROUP_CONCAT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"SUBSTR\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"REPLACE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"REGEX\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"EXISTS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"NOT\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"IRI_REF\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL_LONG1\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"STRING_LITERAL_LONG2\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"INTEGER\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DECIMAL\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DOUBLE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"INTEGER_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DECIMAL_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DOUBLE_POSITIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"INTEGER_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DECIMAL_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"DOUBLE_NEGATIVE\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"PNAME_LN\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"], \n     \"PNAME_NS\": [\"numericExpression\",\"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"]}, \n  \"selectClause\" : {\n     \"SELECT\": [\"SELECT\",\"?or([DISTINCT,REDUCED])\",\"or([+or([var,[ (,expression,AS,var,)]]),*])\"]}, \n  \"selectQuery\" : {\n     \"SELECT\": [\"selectClause\",\"*datasetClause\",\"whereClause\",\"solutionModifier\"]}, \n  \"serviceGraphPattern\" : {\n     \"SERVICE\": [\"SERVICE\",\"?SILENT\",\"varOrIRIref\",\"groupGraphPattern\"]}, \n  \"solutionModifier\" : {\n     \"LIMIT\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"OFFSET\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"ORDER\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"HAVING\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"GROUP\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"VALUES\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"$\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"], \n     \"}\": [\"?groupClause\",\"?havingClause\",\"?orderClause\",\"?limitOffsetClauses\"]}, \n  \"sourceSelector\" : {\n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"]}, \n  \"sparql11\" : {\n     \"$\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"CONSTRUCT\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"DESCRIBE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"ASK\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"INSERT\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"DELETE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"SELECT\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"LOAD\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"CLEAR\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"DROP\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"ADD\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"MOVE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"COPY\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"CREATE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"WITH\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"BASE\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"], \n     \"PREFIX\": [\"prologue\",\"or([queryAll,updateAll])\",\"$\"]}, \n  \"storeProperty\" : {\n     \"VAR1\": [], \n     \"VAR2\": [], \n     \"IRI_REF\": [], \n     \"PNAME_LN\": [], \n     \"PNAME_NS\": [], \n     \"a\": []}, \n  \"strReplaceExpression\" : {\n     \"REPLACE\": [\"REPLACE\",\"(\",\"expression\",\",\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \n  \"string\" : {\n     \"STRING_LITERAL1\": [\"STRING_LITERAL1\"], \n     \"STRING_LITERAL2\": [\"STRING_LITERAL2\"], \n     \"STRING_LITERAL_LONG1\": [\"STRING_LITERAL_LONG1\"], \n     \"STRING_LITERAL_LONG2\": [\"STRING_LITERAL_LONG2\"]}, \n  \"subSelect\" : {\n     \"SELECT\": [\"selectClause\",\"whereClause\",\"solutionModifier\",\"valuesClause\"]}, \n  \"substringExpression\" : {\n     \"SUBSTR\": [\"SUBSTR\",\"(\",\"expression\",\",\",\"expression\",\"?[,,expression]\",\")\"]}, \n  \"triplesBlock\" : {\n     \"VAR1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"VAR2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"NIL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"(\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"[\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"IRI_REF\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"TRUE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"FALSE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"BLANK_NODE_LABEL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"ANON\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"PNAME_LN\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"PNAME_NS\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG1\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"STRING_LITERAL_LONG2\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"INTEGER\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DECIMAL\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DOUBLE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"INTEGER_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DECIMAL_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DOUBLE_POSITIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"INTEGER_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DECIMAL_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"], \n     \"DOUBLE_NEGATIVE\": [\"triplesSameSubjectPath\",\"?[.,?triplesBlock]\"]}, \n  \"triplesNode\" : {\n     \"(\": [\"collection\"], \n     \"[\": [\"blankNodePropertyList\"]}, \n  \"triplesNodePath\" : {\n     \"(\": [\"collectionPath\"], \n     \"[\": [\"blankNodePropertyListPath\"]}, \n  \"triplesSameSubject\" : {\n     \"VAR1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"VAR2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"NIL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"IRI_REF\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"TRUE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"FALSE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"BLANK_NODE_LABEL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"ANON\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"PNAME_LN\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"PNAME_NS\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"INTEGER\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DECIMAL\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DOUBLE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"INTEGER_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DECIMAL_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DOUBLE_POSITIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"INTEGER_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\",\"propertyListNotEmpty\"], \n     \"(\": [\"triplesNode\",\"propertyList\"], \n     \"[\": [\"triplesNode\",\"propertyList\"]}, \n  \"triplesSameSubjectPath\" : {\n     \"VAR1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"VAR2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"NIL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"IRI_REF\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"TRUE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"FALSE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"BLANK_NODE_LABEL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"ANON\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"PNAME_LN\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"PNAME_NS\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL_LONG1\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"STRING_LITERAL_LONG2\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"INTEGER\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DECIMAL\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DOUBLE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"INTEGER_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DECIMAL_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DOUBLE_POSITIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"INTEGER_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DECIMAL_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"DOUBLE_NEGATIVE\": [\"varOrTerm\",\"propertyListPathNotEmpty\"], \n     \"(\": [\"triplesNodePath\",\"propertyListPath\"], \n     \"[\": [\"triplesNodePath\",\"propertyListPath\"]}, \n  \"triplesTemplate\" : {\n     \"VAR1\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"VAR2\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"NIL\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"(\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"[\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"IRI_REF\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"TRUE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"FALSE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"BLANK_NODE_LABEL\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"ANON\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"PNAME_LN\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"PNAME_NS\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"STRING_LITERAL1\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"STRING_LITERAL2\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"STRING_LITERAL_LONG1\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"STRING_LITERAL_LONG2\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"INTEGER\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"DECIMAL\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"DOUBLE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"INTEGER_POSITIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"DECIMAL_POSITIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"DOUBLE_POSITIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"INTEGER_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"DECIMAL_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"], \n     \"DOUBLE_NEGATIVE\": [\"triplesSameSubject\",\"?[.,?triplesTemplate]\"]}, \n  \"unaryExpression\" : {\n     \"!\": [\"!\",\"primaryExpression\"], \n     \"+\": [\"+\",\"primaryExpression\"], \n     \"-\": [\"-\",\"primaryExpression\"], \n     \"VAR1\": [\"primaryExpression\"], \n     \"VAR2\": [\"primaryExpression\"], \n     \"(\": [\"primaryExpression\"], \n     \"STR\": [\"primaryExpression\"], \n     \"LANG\": [\"primaryExpression\"], \n     \"LANGMATCHES\": [\"primaryExpression\"], \n     \"DATATYPE\": [\"primaryExpression\"], \n     \"BOUND\": [\"primaryExpression\"], \n     \"IRI\": [\"primaryExpression\"], \n     \"URI\": [\"primaryExpression\"], \n     \"BNODE\": [\"primaryExpression\"], \n     \"RAND\": [\"primaryExpression\"], \n     \"ABS\": [\"primaryExpression\"], \n     \"CEIL\": [\"primaryExpression\"], \n     \"FLOOR\": [\"primaryExpression\"], \n     \"ROUND\": [\"primaryExpression\"], \n     \"CONCAT\": [\"primaryExpression\"], \n     \"STRLEN\": [\"primaryExpression\"], \n     \"UCASE\": [\"primaryExpression\"], \n     \"LCASE\": [\"primaryExpression\"], \n     \"ENCODE_FOR_URI\": [\"primaryExpression\"], \n     \"CONTAINS\": [\"primaryExpression\"], \n     \"STRSTARTS\": [\"primaryExpression\"], \n     \"STRENDS\": [\"primaryExpression\"], \n     \"STRBEFORE\": [\"primaryExpression\"], \n     \"STRAFTER\": [\"primaryExpression\"], \n     \"YEAR\": [\"primaryExpression\"], \n     \"MONTH\": [\"primaryExpression\"], \n     \"DAY\": [\"primaryExpression\"], \n     \"HOURS\": [\"primaryExpression\"], \n     \"MINUTES\": [\"primaryExpression\"], \n     \"SECONDS\": [\"primaryExpression\"], \n     \"TIMEZONE\": [\"primaryExpression\"], \n     \"TZ\": [\"primaryExpression\"], \n     \"NOW\": [\"primaryExpression\"], \n     \"UUID\": [\"primaryExpression\"], \n     \"STRUUID\": [\"primaryExpression\"], \n     \"MD5\": [\"primaryExpression\"], \n     \"SHA1\": [\"primaryExpression\"], \n     \"SHA256\": [\"primaryExpression\"], \n     \"SHA384\": [\"primaryExpression\"], \n     \"SHA512\": [\"primaryExpression\"], \n     \"COALESCE\": [\"primaryExpression\"], \n     \"IF\": [\"primaryExpression\"], \n     \"STRLANG\": [\"primaryExpression\"], \n     \"STRDT\": [\"primaryExpression\"], \n     \"SAMETERM\": [\"primaryExpression\"], \n     \"ISIRI\": [\"primaryExpression\"], \n     \"ISURI\": [\"primaryExpression\"], \n     \"ISBLANK\": [\"primaryExpression\"], \n     \"ISLITERAL\": [\"primaryExpression\"], \n     \"ISNUMERIC\": [\"primaryExpression\"], \n     \"TRUE\": [\"primaryExpression\"], \n     \"FALSE\": [\"primaryExpression\"], \n     \"COUNT\": [\"primaryExpression\"], \n     \"SUM\": [\"primaryExpression\"], \n     \"MIN\": [\"primaryExpression\"], \n     \"MAX\": [\"primaryExpression\"], \n     \"AVG\": [\"primaryExpression\"], \n     \"SAMPLE\": [\"primaryExpression\"], \n     \"GROUP_CONCAT\": [\"primaryExpression\"], \n     \"SUBSTR\": [\"primaryExpression\"], \n     \"REPLACE\": [\"primaryExpression\"], \n     \"REGEX\": [\"primaryExpression\"], \n     \"EXISTS\": [\"primaryExpression\"], \n     \"NOT\": [\"primaryExpression\"], \n     \"IRI_REF\": [\"primaryExpression\"], \n     \"STRING_LITERAL1\": [\"primaryExpression\"], \n     \"STRING_LITERAL2\": [\"primaryExpression\"], \n     \"STRING_LITERAL_LONG1\": [\"primaryExpression\"], \n     \"STRING_LITERAL_LONG2\": [\"primaryExpression\"], \n     \"INTEGER\": [\"primaryExpression\"], \n     \"DECIMAL\": [\"primaryExpression\"], \n     \"DOUBLE\": [\"primaryExpression\"], \n     \"INTEGER_POSITIVE\": [\"primaryExpression\"], \n     \"DECIMAL_POSITIVE\": [\"primaryExpression\"], \n     \"DOUBLE_POSITIVE\": [\"primaryExpression\"], \n     \"INTEGER_NEGATIVE\": [\"primaryExpression\"], \n     \"DECIMAL_NEGATIVE\": [\"primaryExpression\"], \n     \"DOUBLE_NEGATIVE\": [\"primaryExpression\"], \n     \"PNAME_LN\": [\"primaryExpression\"], \n     \"PNAME_NS\": [\"primaryExpression\"]}, \n  \"update\" : {\n     \"INSERT\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"DELETE\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"LOAD\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"CLEAR\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"DROP\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"ADD\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"MOVE\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"COPY\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"CREATE\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"WITH\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"BASE\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"PREFIX\": [\"prologue\",\"?[update1,?[;,update]]\"], \n     \"$\": [\"prologue\",\"?[update1,?[;,update]]\"]}, \n  \"update1\" : {\n     \"LOAD\": [\"load\"], \n     \"CLEAR\": [\"clear\"], \n     \"DROP\": [\"drop\"], \n     \"ADD\": [\"add\"], \n     \"MOVE\": [\"move\"], \n     \"COPY\": [\"copy\"], \n     \"CREATE\": [\"create\"], \n     \"INSERT\": [\"INSERT\",\"insert1\"], \n     \"DELETE\": [\"DELETE\",\"delete1\"], \n     \"WITH\": [\"modify\"]}, \n  \"updateAll\" : {\n     \"INSERT\": [\"?[update1,?[;,update]]\"], \n     \"DELETE\": [\"?[update1,?[;,update]]\"], \n     \"LOAD\": [\"?[update1,?[;,update]]\"], \n     \"CLEAR\": [\"?[update1,?[;,update]]\"], \n     \"DROP\": [\"?[update1,?[;,update]]\"], \n     \"ADD\": [\"?[update1,?[;,update]]\"], \n     \"MOVE\": [\"?[update1,?[;,update]]\"], \n     \"COPY\": [\"?[update1,?[;,update]]\"], \n     \"CREATE\": [\"?[update1,?[;,update]]\"], \n     \"WITH\": [\"?[update1,?[;,update]]\"], \n     \"$\": [\"?[update1,?[;,update]]\"]}, \n  \"usingClause\" : {\n     \"USING\": [\"USING\",\"or([iriRef,[NAMED,iriRef]])\"]}, \n  \"valueLogical\" : {\n     \"!\": [\"relationalExpression\"], \n     \"+\": [\"relationalExpression\"], \n     \"-\": [\"relationalExpression\"], \n     \"VAR1\": [\"relationalExpression\"], \n     \"VAR2\": [\"relationalExpression\"], \n     \"(\": [\"relationalExpression\"], \n     \"STR\": [\"relationalExpression\"], \n     \"LANG\": [\"relationalExpression\"], \n     \"LANGMATCHES\": [\"relationalExpression\"], \n     \"DATATYPE\": [\"relationalExpression\"], \n     \"BOUND\": [\"relationalExpression\"], \n     \"IRI\": [\"relationalExpression\"], \n     \"URI\": [\"relationalExpression\"], \n     \"BNODE\": [\"relationalExpression\"], \n     \"RAND\": [\"relationalExpression\"], \n     \"ABS\": [\"relationalExpression\"], \n     \"CEIL\": [\"relationalExpression\"], \n     \"FLOOR\": [\"relationalExpression\"], \n     \"ROUND\": [\"relationalExpression\"], \n     \"CONCAT\": [\"relationalExpression\"], \n     \"STRLEN\": [\"relationalExpression\"], \n     \"UCASE\": [\"relationalExpression\"], \n     \"LCASE\": [\"relationalExpression\"], \n     \"ENCODE_FOR_URI\": [\"relationalExpression\"], \n     \"CONTAINS\": [\"relationalExpression\"], \n     \"STRSTARTS\": [\"relationalExpression\"], \n     \"STRENDS\": [\"relationalExpression\"], \n     \"STRBEFORE\": [\"relationalExpression\"], \n     \"STRAFTER\": [\"relationalExpression\"], \n     \"YEAR\": [\"relationalExpression\"], \n     \"MONTH\": [\"relationalExpression\"], \n     \"DAY\": [\"relationalExpression\"], \n     \"HOURS\": [\"relationalExpression\"], \n     \"MINUTES\": [\"relationalExpression\"], \n     \"SECONDS\": [\"relationalExpression\"], \n     \"TIMEZONE\": [\"relationalExpression\"], \n     \"TZ\": [\"relationalExpression\"], \n     \"NOW\": [\"relationalExpression\"], \n     \"UUID\": [\"relationalExpression\"], \n     \"STRUUID\": [\"relationalExpression\"], \n     \"MD5\": [\"relationalExpression\"], \n     \"SHA1\": [\"relationalExpression\"], \n     \"SHA256\": [\"relationalExpression\"], \n     \"SHA384\": [\"relationalExpression\"], \n     \"SHA512\": [\"relationalExpression\"], \n     \"COALESCE\": [\"relationalExpression\"], \n     \"IF\": [\"relationalExpression\"], \n     \"STRLANG\": [\"relationalExpression\"], \n     \"STRDT\": [\"relationalExpression\"], \n     \"SAMETERM\": [\"relationalExpression\"], \n     \"ISIRI\": [\"relationalExpression\"], \n     \"ISURI\": [\"relationalExpression\"], \n     \"ISBLANK\": [\"relationalExpression\"], \n     \"ISLITERAL\": [\"relationalExpression\"], \n     \"ISNUMERIC\": [\"relationalExpression\"], \n     \"TRUE\": [\"relationalExpression\"], \n     \"FALSE\": [\"relationalExpression\"], \n     \"COUNT\": [\"relationalExpression\"], \n     \"SUM\": [\"relationalExpression\"], \n     \"MIN\": [\"relationalExpression\"], \n     \"MAX\": [\"relationalExpression\"], \n     \"AVG\": [\"relationalExpression\"], \n     \"SAMPLE\": [\"relationalExpression\"], \n     \"GROUP_CONCAT\": [\"relationalExpression\"], \n     \"SUBSTR\": [\"relationalExpression\"], \n     \"REPLACE\": [\"relationalExpression\"], \n     \"REGEX\": [\"relationalExpression\"], \n     \"EXISTS\": [\"relationalExpression\"], \n     \"NOT\": [\"relationalExpression\"], \n     \"IRI_REF\": [\"relationalExpression\"], \n     \"STRING_LITERAL1\": [\"relationalExpression\"], \n     \"STRING_LITERAL2\": [\"relationalExpression\"], \n     \"STRING_LITERAL_LONG1\": [\"relationalExpression\"], \n     \"STRING_LITERAL_LONG2\": [\"relationalExpression\"], \n     \"INTEGER\": [\"relationalExpression\"], \n     \"DECIMAL\": [\"relationalExpression\"], \n     \"DOUBLE\": [\"relationalExpression\"], \n     \"INTEGER_POSITIVE\": [\"relationalExpression\"], \n     \"DECIMAL_POSITIVE\": [\"relationalExpression\"], \n     \"DOUBLE_POSITIVE\": [\"relationalExpression\"], \n     \"INTEGER_NEGATIVE\": [\"relationalExpression\"], \n     \"DECIMAL_NEGATIVE\": [\"relationalExpression\"], \n     \"DOUBLE_NEGATIVE\": [\"relationalExpression\"], \n     \"PNAME_LN\": [\"relationalExpression\"], \n     \"PNAME_NS\": [\"relationalExpression\"]}, \n  \"valuesClause\" : {\n     \"VALUES\": [\"VALUES\",\"dataBlock\"], \n     \"$\": [], \n     \"}\": []}, \n  \"var\" : {\n     \"VAR1\": [\"VAR1\"], \n     \"VAR2\": [\"VAR2\"]}, \n  \"varOrIRIref\" : {\n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"], \n     \"IRI_REF\": [\"iriRef\"], \n     \"PNAME_LN\": [\"iriRef\"], \n     \"PNAME_NS\": [\"iriRef\"]}, \n  \"varOrTerm\" : {\n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"], \n     \"NIL\": [\"graphTerm\"], \n     \"IRI_REF\": [\"graphTerm\"], \n     \"TRUE\": [\"graphTerm\"], \n     \"FALSE\": [\"graphTerm\"], \n     \"BLANK_NODE_LABEL\": [\"graphTerm\"], \n     \"ANON\": [\"graphTerm\"], \n     \"PNAME_LN\": [\"graphTerm\"], \n     \"PNAME_NS\": [\"graphTerm\"], \n     \"STRING_LITERAL1\": [\"graphTerm\"], \n     \"STRING_LITERAL2\": [\"graphTerm\"], \n     \"STRING_LITERAL_LONG1\": [\"graphTerm\"], \n     \"STRING_LITERAL_LONG2\": [\"graphTerm\"], \n     \"INTEGER\": [\"graphTerm\"], \n     \"DECIMAL\": [\"graphTerm\"], \n     \"DOUBLE\": [\"graphTerm\"], \n     \"INTEGER_POSITIVE\": [\"graphTerm\"], \n     \"DECIMAL_POSITIVE\": [\"graphTerm\"], \n     \"DOUBLE_POSITIVE\": [\"graphTerm\"], \n     \"INTEGER_NEGATIVE\": [\"graphTerm\"], \n     \"DECIMAL_NEGATIVE\": [\"graphTerm\"], \n     \"DOUBLE_NEGATIVE\": [\"graphTerm\"]}, \n  \"verb\" : {\n     \"VAR1\": [\"storeProperty\",\"varOrIRIref\"], \n     \"VAR2\": [\"storeProperty\",\"varOrIRIref\"], \n     \"IRI_REF\": [\"storeProperty\",\"varOrIRIref\"], \n     \"PNAME_LN\": [\"storeProperty\",\"varOrIRIref\"], \n     \"PNAME_NS\": [\"storeProperty\",\"varOrIRIref\"], \n     \"a\": [\"storeProperty\",\"a\"]}, \n  \"verbPath\" : {\n     \"^\": [\"path\"], \n     \"a\": [\"path\"], \n     \"!\": [\"path\"], \n     \"(\": [\"path\"], \n     \"IRI_REF\": [\"path\"], \n     \"PNAME_LN\": [\"path\"], \n     \"PNAME_NS\": [\"path\"]}, \n  \"verbSimple\" : {\n     \"VAR1\": [\"var\"], \n     \"VAR2\": [\"var\"]}, \n  \"whereClause\" : {\n     \"{\": [\"?WHERE\",\"groupGraphPattern\"], \n     \"WHERE\": [\"?WHERE\",\"groupGraphPattern\"]}\n},\n\nkeywords:/^(GROUP_CONCAT|DATATYPE|BASE|PREFIX|SELECT|CONSTRUCT|DESCRIBE|ASK|FROM|NAMED|ORDER|BY|LIMIT|ASC|DESC|OFFSET|DISTINCT|REDUCED|WHERE|GRAPH|OPTIONAL|UNION|FILTER|GROUP|HAVING|AS|VALUES|LOAD|CLEAR|DROP|CREATE|MOVE|COPY|SILENT|INSERT|DELETE|DATA|WITH|TO|USING|NAMED|MINUS|BIND|LANGMATCHES|LANG|BOUND|SAMETERM|ISIRI|ISURI|ISBLANK|ISLITERAL|REGEX|TRUE|FALSE|UNDEF|ADD|DEFAULT|ALL|SERVICE|INTO|IN|NOT|IRI|URI|BNODE|RAND|ABS|CEIL|FLOOR|ROUND|CONCAT|STRLEN|UCASE|LCASE|ENCODE_FOR_URI|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|NOW|UUID|STRUUID|MD5|SHA1|SHA256|SHA384|SHA512|COALESCE|IF|STRLANG|STRDT|ISNUMERIC|SUBSTR|REPLACE|EXISTS|COUNT|SUM|MIN|MAX|AVG|SAMPLE|SEPARATOR|STR)/i ,\n\npunct:/^(\\*|a|\\.|\\{|\\}|,|\\(|\\)|;|\\[|\\]|\\|\\||&&|=|!=|!|<=|>=|<|>|\\+|-|\\/|\\^\\^|\\?|\\||\\^)/ ,\n\nstartSymbol:\"sparql11\",\nacceptEmpty:true,\n}","\"use strict\";\nvar CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})();\nCodeMirror.defineMode(\"sparql11\", function(config, parserConfig) {\n\n\tvar indentUnit = config.indentUnit;\n\n\tvar grammar = require('./_tokenizer-table.js');\n\tvar ll1_table = grammar.table;\n\n\tvar IRI_REF = '<[^<>\\\"\\'\\|\\{\\}\\^\\\\\\x00-\\x20]*>';\n\t/*\n\t * PN_CHARS_BASE =\n\t * '[A-Z]|[a-z]|[\\\\u00C0-\\\\u00D6]|[\\\\u00D8-\\\\u00F6]|[\\\\u00F8-\\\\u02FF]|[\\\\u0370-\\\\u037D]|[\\\\u037F-\\\\u1FFF]|[\\\\u200C-\\\\u200D]|[\\\\u2070-\\\\u218F]|[\\\\u2C00-\\\\u2FEF]|[\\\\u3001-\\\\uD7FF]|[\\\\uF900-\\\\uFDCF]|[\\\\uFDF0-\\\\uFFFD]|[\\\\u10000-\\\\uEFFFF]';\n\t */\n\n\tvar PN_CHARS_BASE =\n\t\t'[A-Za-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD]';\n\tvar PN_CHARS_U = PN_CHARS_BASE+'|_';\n\n\tvar PN_CHARS= '('+PN_CHARS_U+'|-|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])';\n\tvar VARNAME = '('+PN_CHARS_U+'|[0-9])'+\n\t\t'('+PN_CHARS_U+'|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])*';\n\tvar VAR1 = '\\\\?'+VARNAME;\n\tvar VAR2 = '\\\\$'+VARNAME;\n\n\tvar PN_PREFIX= '('+PN_CHARS_BASE+')((('+PN_CHARS+')|\\\\.)*('+PN_CHARS+'))?';\n\n\tvar HEX= '[0-9A-Fa-f]';\n\tvar PERCENT='(%'+HEX+HEX+')';\n\tvar PN_LOCAL_ESC='(\\\\\\\\[_~\\\\.\\\\-!\\\\$&\\'\\\\(\\\\)\\\\*\\\\+,;=/\\\\?#@%])';\n\tvar PLX= '('+PERCENT+'|'+PN_LOCAL_ESC+')';\n\tvar PN_LOCAL= '('+PN_CHARS_U+'|:|[0-9]|'+PLX+')(('+PN_CHARS+'|\\\\.|:|'+PLX+')*('+PN_CHARS+'|:|'+PLX+'))?';\n\tvar BLANK_NODE_LABEL = '_:('+PN_CHARS_U+'|[0-9])(('+PN_CHARS+'|\\\\.)*'+PN_CHARS+')?';\n\tvar PNAME_NS = '('+PN_PREFIX+')?:';\n\tvar PNAME_LN = PNAME_NS+PN_LOCAL;\n\tvar LANGTAG = '@[a-zA-Z]+(-[a-zA-Z0-9]+)*';\n\n\tvar EXPONENT = '[eE][\\\\+-]?[0-9]+';\n\tvar INTEGER = '[0-9]+';\n\tvar DECIMAL = '(([0-9]+\\\\.[0-9]*)|(\\\\.[0-9]+))';\n\tvar DOUBLE =\n\t\t'(([0-9]+\\\\.[0-9]*'+EXPONENT+')|'+\n\t\t'(\\\\.[0-9]+'+EXPONENT+')|'+\n\t\t'([0-9]+'+EXPONENT+'))';\n\n\tvar INTEGER_POSITIVE = '\\\\+' + INTEGER;\n\tvar DECIMAL_POSITIVE = '\\\\+' + DECIMAL;\n\tvar DOUBLE_POSITIVE  = '\\\\+' + DOUBLE;\n\tvar INTEGER_NEGATIVE = '-' + INTEGER;\n\tvar DECIMAL_NEGATIVE = '-' + DECIMAL;\n\tvar DOUBLE_NEGATIVE  = '-' + DOUBLE;\n\n\tvar ECHAR = '\\\\\\\\[tbnrf\\\\\\\\\"\\']';\n\t\n\t\n\t //IMPORTANT: this unicode rule is not in the official grammar.\n      //Reason: https://github.com/YASGUI/YASQE/issues/49\n      //unicode escape sequences (which the sparql spec considers part of the pre-processing of sparql queries)\n      //are marked as invalid. We have little choice (other than adding a layer of complixity) than to modify the grammar accordingly\n      //however, for now only allow these escape sequences in literals (where actually, this should be allows in e.g. prefixes as well)\n\tvar hex4 = HEX + '{4}'\n\tvar unicode = '(\\\\\\\\u' + hex4 +'|\\\\\\\\U00(10|0' + HEX + ')'+ hex4 + ')';\n\tvar LINE_BREAK = \"\\n\";\n\tvar STRING_LITERAL1 = \"'(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D])|\"+ECHAR+\"|\" + unicode + \")*'\";\n\tvar STRING_LITERAL2 = '\"(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D])|'+ECHAR+'|' + unicode + ')*\"';\n\t\n\tvar STRING_LITERAL_LONG = {\n\t\tSINGLE: {\n\t\t\tCAT: \"STRING_LITERAL_LONG1\",\n\t\t\tQUOTES: \"'''\",\n\t\t\tCONTENTS: \"(('|'')?([^'\\\\\\\\]|\"+ECHAR+\"|\"+unicode+\"))*\",\n\t\t\t\n\t\t},\n\t\tDOUBLE: {\n\t\t\tCAT: \"STRING_LITERAL_LONG2\",\n\t\t\tQUOTES: '\"\"\"',\n\t\t\tCONTENTS: '((\"|\"\")?([^\"\\\\\\\\]|'+ECHAR+'|'+unicode+'))*',\n\t\t}\n\t};\n\tfor (var key in STRING_LITERAL_LONG) {\n\t\tSTRING_LITERAL_LONG[key].COMPLETE = STRING_LITERAL_LONG[key].QUOTES + STRING_LITERAL_LONG[key].CONTENTS + STRING_LITERAL_LONG[key].QUOTES;\n\t}\n//\tvar STRING_LITERAL_LONG_QUOTES = {\n//\t\t\"STRING_LITERAL_LONG_QUOTES1\": \"'''\",\n//\t\t\"STRING_LITERAL_LONG_QUOTES2\": '\"\"\"',\n//\t}\n//\tvar STRING_LITERAL_LONG_CONTENTS = {\n//\t\t\"STRING_LITERAL_LONG_QUOTES1\": \"(('|'')?([^'\\\\\\\\]|\"+ECHAR+\"|\"+unicode+\"))*\",\n//\t\t\"STRING_LITERAL_LONG_QUOTES2\": '((\"|\"\")?([^\"\\\\\\\\]|'+ECHAR+'|'+unicode+'))*'\n//\t};\n//\tvar STRING_LITERAL_LONG1 = STRING_LITERAL_LONG['SINGLE'].QUOTES + STRING_LITERAL_LONG['SINGLE'].CONTENTS + STRING_LITERAL_LONG['SINGLE'].QUOTES;\n//\tvar STRING_LITERAL_LONG2 = STRING_LITERAL_LONG['DOUBLE'].QUOTES + STRING_LITERAL_LONG['DOUBLE'].CONTENTS + STRING_LITERAL_LONG['DOUBLE'].QUOTES;\n\t\n//\tvar stringLiteralLongContentTerminals = {};\n//\tfor (var key in STRING_LITERAL_LONG) {\n//\t\tstringLiteralLongContentTerminals[key] = {\n//\t\t\tname: key,\n//\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG_CONTENTS[key]),\n//\t\t\tstyle:\"string\"\n//\t\t};\n//\t}\n\t//some regular expressions not used in regular terminals, because this is used accross lines\n\tvar stringLiteralLongRegex = {};\n\tfor (var key in STRING_LITERAL_LONG) {\n\t\tstringLiteralLongRegex[key] = {\n\t\t\tcomplete: {\n\t\t\t\tname: \"STRING_LITERAL_LONG_\" + key,\n\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG[key].COMPLETE),\n\t\t\t\tstyle:\"string\"\n\t\t\t},\n\t\t\tcontents: {\n\t\t\t\tname: \"STRING_LITERAL_LONG_\" + key,\n\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG[key].CONTENTS),\n\t\t\t\tstyle:\"string\"\n\t\t\t},\n\t\t\tclosing: {\n\t\t\t\tname: \"STRING_LITERAL_LONG_\" + key,\n\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG[key].CONTENTS + STRING_LITERAL_LONG[key].QUOTES),\n\t\t\t\tstyle:\"string\"\n\t\t\t},\n\t\t\tquotes: {\n\t\t\t\tname: \"STRING_LITERAL_LONG_QUOTES_\" + key,\n\t\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG[key].QUOTES),\n\t\t\t\tstyle:\"string\"\n\t\t\t},\n\t\t\n\t\t}\n\t}\n\t\n\tvar WS    =        '[\\\\x20\\\\x09\\\\x0D\\\\x0A]';\n\t// Careful! Code mirror feeds one line at a time with no \\n\n\t// ... but otherwise comment is terminated by \\n\n\tvar COMMENT = '#([^\\\\n\\\\r]*[\\\\n\\\\r]|[^\\\\n\\\\r]*$)';\n\tvar WS_OR_COMMENT_STAR = '('+WS+'|('+COMMENT+'))*';\n\tvar NIL   = '\\\\('+WS_OR_COMMENT_STAR+'\\\\)';\n\tvar ANON  = '\\\\['+WS_OR_COMMENT_STAR+'\\\\]';\n\tvar terminals= [\n\t\t{ name: \"WS\",\n\t\t\tregex:new RegExp(\"^\"+WS+\"+\"),\n\t\t\tstyle:\"ws\" },\n\n\t\t{ name: \"COMMENT\",\n\t\t\tregex:new RegExp(\"^\"+COMMENT),\n\t\t\tstyle:\"comment\" },\n\n\t\t{ name: \"IRI_REF\",\n\t\t\tregex:new RegExp(\"^\"+IRI_REF),\n\t\t\tstyle:\"variable-3\" },\n\n\t\t{ name: \"VAR1\",\n\t\t\tregex:new RegExp(\"^\"+VAR1),\n\t\t\tstyle:\"atom\"},\n\n\t\t{ name: \"VAR2\",\n\t\t\tregex:new RegExp(\"^\"+VAR2),\n\t\t\tstyle:\"atom\"},\n\n\t\t{ name: \"LANGTAG\",\n\t\t\tregex:new RegExp(\"^\"+LANGTAG),\n\t\t\tstyle:\"meta\"},\n\n\t\t{ name: \"DOUBLE\",\n\t\t\tregex:new RegExp(\"^\"+DOUBLE),\n\t\t\tstyle:\"number\" },\n\n\t\t{ name: \"DECIMAL\",\n\t\t\tregex:new RegExp(\"^\"+DECIMAL),\n\t\t\tstyle:\"number\" },\n\n\t\t{ name: \"INTEGER\",\n\t\t\tregex:new RegExp(\"^\"+INTEGER),\n\t\t\tstyle:\"number\" },\n\n\t\t{ name: \"DOUBLE_POSITIVE\",\n\t\t\tregex:new RegExp(\"^\"+DOUBLE_POSITIVE),\n\t\t\tstyle:\"number\" },\n\n\t\t{ name: \"DECIMAL_POSITIVE\",\n\t\t\tregex:new RegExp(\"^\"+DECIMAL_POSITIVE),\n\t\t\tstyle:\"number\" },\n\n\t\t{ name: \"INTEGER_POSITIVE\",\n\t\t\tregex:new RegExp(\"^\"+INTEGER_POSITIVE),\n\t\t\tstyle:\"number\" },\n\n\t\t{ name: \"DOUBLE_NEGATIVE\",\n\t\t\tregex:new RegExp(\"^\"+DOUBLE_NEGATIVE),\n\t\t\tstyle:\"number\" },\n\n\t\t{ name: \"DECIMAL_NEGATIVE\",\n\t\t\tregex:new RegExp(\"^\"+DECIMAL_NEGATIVE),\n\t\t\tstyle:\"number\" },\n\n\t\t{ name: \"INTEGER_NEGATIVE\",\n\t\t\tregex:new RegExp(\"^\"+INTEGER_NEGATIVE),\n\t\t\tstyle:\"number\" },\n//\t\tstringLiteralLongRegex.SINGLE.complete,\n//\t\tstringLiteralLongRegex.DOUBLE.complete,\n//\t\tstringLiteralLongRegex.SINGLE.quotes,\n//\t\tstringLiteralLongRegex.DOUBLE.quotes,\n\t\t\n\t\t{ name: \"STRING_LITERAL1\",\n\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL1),\n\t\t\tstyle:\"string\" },\n\n\t\t{ name: \"STRING_LITERAL2\",\n\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL2),\n\t\t\tstyle:\"string\" },\n\n\t\t// Enclosed comments won't be highlighted\n\t\t{ name: \"NIL\",\n\t\t\tregex:new RegExp(\"^\"+NIL),\n\t\t\tstyle:\"punc\" },\n\n\t\t// Enclosed comments won't be highlighted\n\t\t{ name: \"ANON\",\n\t\t\tregex:new RegExp(\"^\"+ANON),\n\t\t\tstyle:\"punc\" },\n\n\t\t{ name: \"PNAME_LN\",\n\t\t\tregex:new RegExp(\"^\"+PNAME_LN),\n\t\t\tstyle:\"string-2\" },\n\n\t\t{ name: \"PNAME_NS\",\n\t\t\tregex:new RegExp(\"^\"+PNAME_NS),\n\t\t\tstyle:\"string-2\" },\n\n\t\t{ name: \"BLANK_NODE_LABEL\",\n\t\t\tregex:new RegExp(\"^\"+BLANK_NODE_LABEL),\n\t\t\tstyle:\"string-2\" }\n\t];\n\n\tfunction getPossibles(symbol) {\n\t\tvar possibles=[], possiblesOb=ll1_table[symbol];\n\t\tif (possiblesOb!=undefined) {\n\t\t\tfor (var property in possiblesOb) {\n\t\t\t\tpossibles.push(property.toString());\n\t\t\t}\n\t\t} else {\n\t\t\tpossibles.push(symbol);\n\t\t}\n\t\treturn possibles;\n\t}\n\n\n\tfunction tokenBase(stream, state) {\n\n\t\tfunction nextToken() {\n\t\t\tvar consumed=null;\n\t\t\tif (state.inLiteral) {\n\t\t\t\t\n\t\t\t\tvar closingQuotes = false;\n\t\t\t\t//multi-line literal. try to parse contents.\n\t\t\t\tconsumed = stream.match(stringLiteralLongRegex[state.inLiteral].contents.regex, true, false);\n\t\t\t\tif (consumed && consumed[0].length == 0) {\n\t\t\t\t\t//try seeing whether we can consume closing quotes, to avoid stopping\n\t\t\t\t\tconsumed = stream.match(stringLiteralLongRegex[state.inLiteral].closing.regex, true, false);\n\t\t\t\t\tclosingQuotes = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (consumed && consumed[0].length > 0) {\n\t\t\t\t\t//some string content here. \n\t\t\t\t\t var returnObj = {\n\t\t\t\t\t\tquotePos: (closingQuotes? 'end': 'content'),\n\t\t\t\t\t\tcat: STRING_LITERAL_LONG[state.inLiteral].CAT,\n\t\t\t\t\t\tstyle: stringLiteralLongRegex[state.inLiteral].complete.style,\n\t\t\t\t\t\ttext: consumed[0],\n\t\t\t\t\t\tstart: stream.start\n\t\t\t\t\t};\n\t\t\t\t\t if (closingQuotes) state.inLiteral = false;\n\t\t\t\t\t return returnObj;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//Multiline literals\n\t\t\tfor (var quoteType in stringLiteralLongRegex) {\n\t\t\t\tconsumed= stream.match(stringLiteralLongRegex[quoteType].quotes.regex,true,false);\n\t\t\t\tif (consumed) {\n\t\t\t\t\tvar quotePos;\n\t\t\t\t\tif (state.inLiteral) {\n\t\t\t\t\t\t//end of literal. everything is fine\n\t\t\t\t\t\tstate.inLiteral = false;\n\t\t\t\t\t\tquotePos = 'end';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.inLiteral = quoteType;\n\t\t\t\t\t\tquotePos = 'start';\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcat: STRING_LITERAL_LONG[quoteType].CAT,\n\t\t\t\t\t\tstyle: stringLiteralLongRegex[quoteType].quotes.style,\n\t\t\t\t\t\ttext: consumed[0],\n\t\t\t\t\t\tquotePos: quotePos,\n\t\t\t\t\t\tstart: stream.start\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t// Tokens defined by individual regular expressions\n\t\t\tfor (var i=0; i<terminals.length; ++i) {\n\t\t\t\tconsumed= stream.match(terminals[i].regex,true,false);\n\t\t\t\tif (consumed) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcat: terminals[i].name,\n\t\t\t\t\t\tstyle: terminals[i].style,\n\t\t\t\t\t\ttext: consumed[0],\n\t\t\t\t\t\tstart: stream.start\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Keywords\n\t\t\tconsumed= stream.match(grammar.keywords,true,false);\n\t\t\tif (consumed)\n\t\t\t\treturn { cat: stream.current().toUpperCase(),\n\t\t\t\t\t\t\t\t style: \"keyword\",\n\t\t\t\t\t\t\t\t text: consumed[0],\n\t\t\t\t\t\t\t\t start: stream.start\n\t\t\t\t\t\t\t };\n\n\t\t\t// Punctuation\n\t\t\tconsumed= stream.match(grammar.punct,true,false);\n\t\t\tif (consumed)\n\t\t\t\treturn { cat: stream.current(),\n\t\t\t\t\t\t\t\t style: \"punc\",\n\t\t\t\t\t\t\t\t text: consumed[0],\n\t\t\t\t\t\t\t\t start: stream.start\n\t\t\t\t\t\t\t };\n\n\t\t\t// Token is invalid\n\t\t\t// better consume something anyway, or else we're stuck\n\t\t\tconsumed= stream.match(/^.[A-Za-z0-9]*/,true,false);\n\t\t\treturn { cat:\"<invalid_token>\",\n\t\t\t\t\t\t\t style: \"error\",\n\t\t\t\t\t\t\t text: consumed[0],\n\t\t\t\t\t\t\t start: stream.start\n\t\t\t\t\t\t };\n\t\t}\n\n\t\tfunction recordFailurePos() {\n\t\t\t// tokenOb.style= \"sp-invalid\";\n\t\t\tvar col= stream.column();\n\t\t\tstate.errorStartPos= col;\n\t\t\tstate.errorEndPos= col+tokenOb.text.length;\n\t\t};\n\n\t\tfunction setQueryType(s) {\n\t\t\tif (state.queryType==null) {\n\t\t\t\tif (s ==\"SELECT\" || s==\"CONSTRUCT\" || s==\"ASK\" || s==\"DESCRIBE\" || s==\"INSERT\" || s==\"DELETE\" || s==\"LOAD\" || s==\"CLEAR\" || s==\"CREATE\" || s==\"DROP\" || s==\"COPY\" || s==\"MOVE\" || s==\"ADD\")\n\t\t\t\t\tstate.queryType=s;\n\t\t\t}\n\t\t}\n\n\t\t// Some fake non-terminals are just there to have side-effect on state\n\t\t// - i.e. allow or disallow variables and bnodes in certain non-nesting\n\t\t// contexts\n\t\tfunction setSideConditions(topSymbol) {\n\t\t\tif (topSymbol==\"disallowVars\") state.allowVars=false;\n\t\t\telse if (topSymbol==\"allowVars\") state.allowVars=true;\n\t\t\telse if (topSymbol==\"disallowBnodes\") state.allowBnodes=false;\n\t\t\telse if (topSymbol==\"allowBnodes\") state.allowBnodes=true;\n\t\t\telse if (topSymbol==\"storeProperty\") state.storeProperty=true;\n\t\t}\n\n\t\tfunction checkSideConditions(topSymbol) {\n\t\t\treturn(\n\t\t\t\t(state.allowVars || topSymbol!=\"var\") &&\n\t\t\t\t\t(state.allowBnodes ||\n\t\t\t\t\t (topSymbol!=\"blankNode\" &&\n\t\t\t\t\t\ttopSymbol!=\"blankNodePropertyList\" &&\n\t\t\t\t\t\ttopSymbol!=\"blankNodePropertyListPath\")));\n\t\t}\n\n\t\t// CodeMirror works with one line at a time,\n\t\t// but newline should behave like whitespace\n\t\t// - i.e. a definite break between tokens (for autocompleter)\n\t\tif (stream.pos==0)\n\t\t\tstate.possibleCurrent= state.possibleNext;\n\n\t\tvar tokenOb= nextToken();\n\n\n\t\tif (tokenOb.cat==\"<invalid_token>\") {\n\t\t\t// set error state, and\n\t\t\tif (state.OK==true) {\n\t\t\t\tstate.OK=false;\n\t\t\t\trecordFailurePos();\n\t\t\t}\n\t\t\tstate.complete=false;\n\t\t\t// alert(\"Invalid:\"+tokenOb.text);\n\t\t\treturn tokenOb.style;\n\t\t}\n\n\t\tif (tokenOb.cat == \"WS\" || tokenOb.cat == \"COMMENT\" || (tokenOb.quotePos && tokenOb.quotePos != 'end')) {\n\t\t\tstate.possibleCurrent = state.possibleNext;\n\t\t\treturn(tokenOb.style);\n\t\t}\n\t\t// Otherwise, run the parser until the token is digested\n\t\t// or failure\n\t\tvar finished= false;\n\t\tvar topSymbol;\n\t\tvar token= tokenOb.cat;\n\t\t\n\t\tif (!tokenOb.quotePos || tokenOb.quotePos == 'end') {\n\t\t// Incremental LL1 parse\n\t\t\twhile(state.stack.length>0 && token && state.OK && !finished ) {\n\t\t\t\ttopSymbol= state.stack.pop();\n\t\n\t\t\t\tif (!ll1_table[topSymbol]) {\n\t\t\t\t\t// Top symbol is a terminal\n\t\t\t\t\tif (topSymbol == token) {\n\t\t\t\t\t\t// Matching terminals\n\t\t\t\t\t\t// - consume token from input stream\n\t\t\t\t\t\tfinished=true;\n\t\t\t\t\t\tsetQueryType(topSymbol);\n\t\t\t\t\t\t// Check whether $ (end of input token) is poss next\n\t\t\t\t\t\t// for everything on stack\n\t\t\t\t\t\tvar allNillable=true;\n\t\t\t\t\t\tfor(var sp=state.stack.length;sp>0;--sp) {\n\t\t\t\t\t\t\tvar item=ll1_table[state.stack[sp-1]];\n\t\t\t\t\t\t\tif (!item || !item[\"$\"])\n\t\t\t\t\t\t\t\tallNillable=false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstate.complete= allNillable;\n\t\t\t\t\t\tif (state.storeProperty && token.cat != \"punc\") {\n\t\t\t\t\t\t\tstate.lastProperty = tokenOb.text;\n\t\t\t\t\t\t\tstate.storeProperty = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.OK=false;\n\t\t\t\t\t\tstate.complete=false;\n\t\t\t\t\t\trecordFailurePos();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// topSymbol is nonterminal\n\t\t\t\t\t// - see if there is an entry for topSymbol\n\t\t\t\t\t// and nextToken in table\n\t\t\t\t\tvar nextSymbols= ll1_table[topSymbol][token];\n\t\t\t\t\tif (nextSymbols!=undefined && checkSideConditions(topSymbol)) {\n\t\t\t\t\t\t// Match - copy RHS of rule to stack\n\t\t\t\t\t\tfor (var i=nextSymbols.length-1; i>=0; --i) {\n\t\t\t\t\t\t\tstate.stack.push(nextSymbols[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Peform any non-grammatical side-effects\n\t\t\t\t\t\tsetSideConditions(topSymbol);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// No match in table - fail\n\t\t\t\t\t\tstate.OK=false;\n\t\t\t\t\t\tstate.complete=false;\n\t\t\t\t\t\trecordFailurePos();\n\t\t\t\t\t\tstate.stack.push(topSymbol);  // Shove topSymbol back on stack\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!finished && state.OK) { \n\t\t\tstate.OK=false; state.complete=false; recordFailurePos(); \n\t\t}\n\t\t\n\t\tif (state.possibleCurrent.indexOf('a') >= 0){\n\t\t\tstate.lastPredicateOffset = tokenOb.start;\n\t\t}\n\t\tstate.possibleCurrent = state.possibleNext;\n\t\t\n\t\tstate.possibleNext = getPossibles(state.stack[state.stack.length-1]);\n\n\t\treturn tokenOb.style;\n\t}\n\n\tvar indentTop={\n\t\t\"*[,, object]\": 3,\n\t\t\"*[(,),object]\": 3,\n\t\t\"*[(,),objectPath]\": 3,\n\t\t\"*[/,pathEltOrInverse]\": 2,\n\t\t\"object\": 2,\n\t\t\"objectPath\": 2,\n\t\t\"objectList\": 2,\n\t\t\"objectListPath\": 2,\n\t\t\"storeProperty\": 2,\n\t\t\"pathMod\": 2,\n\t\t\"?pathMod\": 2,\n\t\t\"propertyListNotEmpty\": 1,\n\t\t\"propertyList\": 1,\n\t\t\"propertyListPath\": 1,\n\t\t\"propertyListPathNotEmpty\": 1,\n\t\t\"?[verb,objectList]\": 1,\n//\t\t\"?[or([verbPath, verbSimple]),objectList]\": 1,\n\t};\n\n\tvar indentTable={\n\t\t\"}\":1,\n\t\t\"]\":0,\n\t\t\")\":1,\n\t\t\"{\":-1,\n\t\t\"(\":-1,\n//\t\t\"*[;,?[or([verbPath,verbSimple]),objectList]]\": 1,\n\t};\n\t\n\n\tfunction indent(state, textAfter) {\n\t\t//just avoid we don't indent multi-line  literals\n\t\tif (state.inLiteral) return 0;\n\t\tif (state.stack.length && state.stack[state.stack.length-1] == \"?[or([verbPath,verbSimple]),objectList]\") {\n\t\t\t//we are after a semi-colon. I.e., nicely align this line with predicate position of previous line\n\t\t\treturn state.lastPredicateOffset;\n\t\t} else {\n\t\t\tvar n = 0; // indent level\n\t\t\tvar i = state.stack.length-1;\n\t\t\tif (/^[\\}\\]\\)]/.test(textAfter)) {\n\t\t\t\t// Skip stack items until after matching bracket\n\t\t\t\tvar closeBracket=textAfter.substr(0,1);\n\t\t\t\tfor( ;i>=0;--i)\t{\n\t\t\t\t\tif (state.stack[i]==closeBracket) {\n\t\t\t\t\t\t--i; \n\t\t\t\t\t\tbreak;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Consider nullable non-terminals if at top of stack\n\t\t\t\tvar dn = indentTop[state.stack[i]];\n\t\t\t\tif (dn) { \n\t\t\t\t\tn += dn; \n\t\t\t\t\t--i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor( ;i>=0;--i)\t{\n\t\t\t\tvar dn = indentTable[state.stack[i]];\n\t\t\t\tif (dn) {\n\t\t\t\t\tn+=dn;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn n * config.indentUnit;\n\t\t}\n\t};\n\n\treturn {\n\t\ttoken: tokenBase,\n\t\tstartState: function(base) {\n\t\t\treturn {\n\t\t\t\ttokenize: tokenBase,\n\t\t\t\tOK: true,\n\t\t\t\tcomplete: grammar.acceptEmpty,\n\t\t\t\terrorStartPos: null,\n\t\t\t\terrorEndPos: null,\n\t\t\t\tqueryType: null,\n\t\t\t\tpossibleCurrent: getPossibles(grammar.startSymbol),\n\t\t\t\tpossibleNext: getPossibles(grammar.startSymbol),\n\t\t\t\tallowVars : true,\n\t\t\t\tallowBnodes : true,\n\t\t\t\tstoreProperty : false,\n\t\t\t\tlastProperty : \"\",\n\t\t\t\tinLiteral: false,\n\t\t\t\tstack: [grammar.startSymbol],\n\t\t\t\tlastPredicateOffset: config.indentUnit,\n\t\t\t}; \n\t\t},\n\t\tindent: indent,\n\t\telectricChars: \"}])\"\n\t};\n}\n);\nCodeMirror.defineMIME(\"application/x-sparql-query\", \"sparql11\");\n","/*\n* TRIE implementation in Javascript\n* Copyright (c) 2010 Saurabh Odhyan | http://odhyan.com\n* \n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n* \n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n* \n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n* THE SOFTWARE.\n*\n* Date: Nov 7, 2010\n*/\n\n/*\n* A trie, or prefix tree, is a multi-way tree structure useful for storing strings over an alphabet. \n* It has been used to store large dictionaries of English (say) words in spell-checking programs \n* and in natural-language \"understanding\" programs.    \n* @see http://en.wikipedia.org/wiki/Trie\n* @see http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Trie/\n/*\n\n* @class Trie\n* @constructor\n*/  \nvar Trie = module.exports = function() {\n    this.words = 0;\n    this.prefixes = 0;\n    this.children = [];\n};\n\nTrie.prototype = {\n    \n    /*\n    * Insert a word into the dictionary. \n    * Recursively traverse through the trie nodes, and create new node if does not already exist.\n    *\n    * @method insert\n    * @param {String} str Word to insert in the dictionary\n    * @param {Integer} pos Current index of the string to be inserted\n    * @return {Void}\n    */\n    insert: function(str, pos) {\n        if(str.length == 0) { //blank string cannot be inserted\n            return;\n        }\n        \n        var T = this,\n            k,\n            child;\n            \n        if(pos === undefined) {\n            pos = 0;\n        }\n        if(pos === str.length) {\n            T.words ++;\n            return;\n        }\n        T.prefixes ++;\n        k = str[pos];\n        if(T.children[k] === undefined) { //if node for this char doesn't exist, create one\n            T.children[k] = new Trie();\n        }\n        child = T.children[k];\n        child.insert(str, pos + 1);\n    },\n    \n    /*\n    * Remove a word from the dictionary.\n    *\n    * @method remove\n    * @param {String} str Word to be removed\n    * @param {Integer} pos Current index of the string to be removed\n    * @return {Void}\n    */\n    remove: function(str, pos) {\n        if(str.length == 0) {\n            return;\n        }\n        \n        var T = this,\n            k,\n            child;\n        \n        if(pos === undefined) {\n            pos = 0;\n        }   \n        if(T === undefined) {\n            return;\n        }\n        if(pos === str.length) {\n            T.words --;\n            return;\n        }\n        T.prefixes --;\n        k = str[pos];\n        child = T.children[k];\n        child.remove(str, pos + 1);\n    },\n    \n    /*\n    * Update an existing word in the dictionary. \n    * This method removes the old word from the dictionary and inserts the new word.\n    *\n    * @method update\n    * @param {String} strOld The old word to be replaced\n    * @param {String} strNew The new word to be inserted\n    * @return {Void}\n    */\n    update: function(strOld, strNew) {\n        if(strOld.length == 0 || strNew.length == 0) {\n            return;\n        }\n        this.remove(strOld);\n        this.insert(strNew);\n    },\n    \n    /*\n    * Count the number of times a given word has been inserted into the dictionary\n    *\n    * @method countWord\n    * @param {String} str Word to get count of\n    * @param {Integer} pos Current index of the given word\n    * @return {Integer} The number of times a given word exists in the dictionary\n    */\n    countWord: function(str, pos) {\n        if(str.length == 0) {\n            return 0;\n        }\n        \n        var T = this,\n            k,\n            child,\n            ret = 0;\n        \n        if(pos === undefined) {\n            pos = 0;\n        }   \n        if(pos === str.length) {\n            return T.words;\n        }\n        k = str[pos];\n        child = T.children[k];\n        if(child !== undefined) { //node exists\n            ret = child.countWord(str, pos + 1);\n        }\n        return ret;\n    },\n    \n    /*\n    * Count the number of times a given prefix exists in the dictionary\n    *\n    * @method countPrefix\n    * @param {String} str Prefix to get count of\n    * @param {Integer} pos Current index of the given prefix\n    * @return {Integer} The number of times a given prefix exists in the dictionary\n    */\n    countPrefix: function(str, pos) {\n        if(str.length == 0) {\n            return 0;\n        }\n        \n        var T = this,\n            k,\n            child,\n            ret = 0;\n\n        if(pos === undefined) {\n            pos = 0;\n        }\n        if(pos === str.length) {\n            return T.prefixes;\n        }\n        var k = str[pos];\n        child = T.children[k];\n        if(child !== undefined) { //node exists\n            ret = child.countPrefix(str, pos + 1); \n        }\n        return ret; \n    },\n    \n    /*\n    * Find a word in the dictionary\n    *\n    * @method find\n    * @param {String} str The word to find in the dictionary\n    * @return {Boolean} True if the word exists in the dictionary, else false\n    */\n    find: function(str) {\n        if(str.length == 0) {\n            return false;\n        }\n        \n        if(this.countWord(str) > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    },\n    \n    /*\n    * Get all words in the dictionary\n    *\n    * @method getAllWords\n    * @param {String} str Prefix of current word\n    * @return {Array} Array of words in the dictionary\n    */\n    getAllWords: function(str) {\n        var T = this,\n            k,\n            child,\n            ret = [];\n        if(str === undefined) {\n            str = \"\";\n        }\n        if(T === undefined) {\n            return [];\n        }\n        if(T.words > 0) {\n            ret.push(str);\n        }\n        for(k in T.children) {\n            child = T.children[k];\n            ret = ret.concat(child.getAllWords(str + k));\n        }\n        return ret;\n    },\n    \n    /*\n    * Autocomplete a given prefix\n    *\n    * @method autoComplete\n    * @param {String} str Prefix to be completed based on dictionary entries\n    * @param {Integer} pos Current index of the prefix\n    * @return {Array} Array of possible suggestions\n    */\n    autoComplete: function(str, pos) {\n        \n        \n        var T = this,\n            k,\n            child;\n        if(str.length == 0) {\n\t\t\tif (pos === undefined) {\n\t\t\t\treturn T.getAllWords(str);\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n        }\n        if(pos === undefined) {\n            pos = 0;\n        }   \n        k = str[pos];\n        child = T.children[k];\n        if(child === undefined) { //node doesn't exist\n            return [];\n        }\n        if(pos === str.length - 1) {\n            return child.getAllWords(str);\n        }\n        return child.autoComplete(str, pos + 1);\n    }\n};\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"fullScreen\", false, function(cm, val, old) {\n    if (old == CodeMirror.Init) old = false;\n    if (!old == !val) return;\n    if (val) setFullscreen(cm);\n    else setNormal(cm);\n  });\n\n  function setFullscreen(cm) {\n    var wrap = cm.getWrapperElement();\n    cm.state.fullScreenRestore = {scrollTop: window.pageYOffset, scrollLeft: window.pageXOffset,\n                                  width: wrap.style.width, height: wrap.style.height};\n    wrap.style.width = \"\";\n    wrap.style.height = \"auto\";\n    wrap.className += \" CodeMirror-fullscreen\";\n    document.documentElement.style.overflow = \"hidden\";\n    cm.refresh();\n  }\n\n  function setNormal(cm) {\n    var wrap = cm.getWrapperElement();\n    wrap.className = wrap.className.replace(/\\s*CodeMirror-fullscreen\\b/, \"\");\n    document.documentElement.style.overflow = \"\";\n    var info = cm.state.fullScreenRestore;\n    wrap.style.width = info.width; wrap.style.height = info.height;\n    window.scrollTo(info.scrollLeft, info.scrollTop);\n    cm.refresh();\n  }\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n    (document.documentMode == null || document.documentMode < 8);\n\n  var Pos = CodeMirror.Pos;\n\n  var matching = {\"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\"};\n\n  function findMatchingBracket(cm, where, strict, config) {\n    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n    var match = (pos >= 0 && matching[line.text.charAt(pos)]) || matching[line.text.charAt(++pos)];\n    if (!match) return null;\n    var dir = match.charAt(1) == \">\" ? 1 : -1;\n    if (strict && (dir > 0) != (pos == where.ch)) return null;\n    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n\n    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n    if (found == null) return null;\n    return {from: Pos(where.line, pos), to: found && found.pos,\n            match: found && found.ch == match.charAt(0), forward: dir > 0};\n  }\n\n  // bracketRegex is used to specify which type of bracket to scan\n  // should be a regexp, e.g. /[[\\]]/\n  //\n  // Note: If \"where\" is on an open bracket, then this bracket is ignored.\n  //\n  // Returns false when no bracket was found, null when it reached\n  // maxScanLines and gave up\n  function scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n\n    var stack = [];\n    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\\]]/;\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n      var line = cm.getLine(lineNo);\n      if (!line) continue;\n      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n      if (line.length > maxScanLen) continue;\n      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n      for (; pos != end; pos += dir) {\n        var ch = line.charAt(pos);\n        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n          var match = matching[ch];\n          if ((match.charAt(1) == \">\") == (dir > 0)) stack.push(ch);\n          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n          else stack.pop();\n        }\n      }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n  }\n\n  function matchBrackets(cm, autoclear, config) {\n    // Disable brace matching in long lines, since it'll cause hugely slow updates\n    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n    var marks = [], ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, false, config);\n      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n        var style = match.match ? \"CodeMirror-matchingbracket\" : \"CodeMirror-nonmatchingbracket\";\n        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n      }\n    }\n\n    if (marks.length) {\n      // Kludge to work around the IE bug from issue #1193, where text\n      // input stops going to the textare whever this fires.\n      if (ie_lt8 && cm.state.focused) cm.focus();\n\n      var clear = function() {\n        cm.operation(function() {\n          for (var i = 0; i < marks.length; i++) marks[i].clear();\n        });\n      };\n      if (autoclear) setTimeout(clear, 800);\n      else return clear;\n    }\n  }\n\n  var currentlyHighlighted = null;\n  function doMatchBrackets(cm) {\n    cm.operation(function() {\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n    });\n  }\n\n  CodeMirror.defineOption(\"matchBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init)\n      cm.off(\"cursorActivity\", doMatchBrackets);\n    if (val) {\n      cm.state.matchBrackets = typeof val == \"object\" ? val : {};\n      cm.on(\"cursorActivity\", doMatchBrackets);\n    }\n  });\n\n  CodeMirror.defineExtension(\"matchBrackets\", function() {matchBrackets(this, true);});\n  CodeMirror.defineExtension(\"findMatchingBracket\", function(pos, strict, config){\n    return findMatchingBracket(this, pos, strict, config);\n  });\n  CodeMirror.defineExtension(\"scanForBracket\", function(pos, dir, style, config){\n    return scanForBracket(this, pos, dir, style, config);\n  });\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold && force !== \"fold\") {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: getOption(cm, options, \"clearOnEnter\"),\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options) {\n    var widget = getOption(cm, options, \"widget\");\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false,\n    clearOnEnter: true\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(), require(\"./foldcode\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./foldcode\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.clearGutter(cm.state.foldGutter.options.gutter);\n      cm.state.foldGutter = null;\n      cm.off(\"gutterClick\", onGutterClick);\n      cm.off(\"change\", onChange);\n      cm.off(\"viewportChange\", onViewportChange);\n      cm.off(\"fold\", onFold);\n      cm.off(\"unfold\", onFold);\n      cm.off(\"swapDoc\", onChange);\n    }\n    if (val) {\n      cm.state.foldGutter = new State(parseOptions(val));\n      updateInViewport(cm);\n      cm.on(\"gutterClick\", onGutterClick);\n      cm.on(\"change\", onChange);\n      cm.on(\"viewportChange\", onViewportChange);\n      cm.on(\"fold\", onFold);\n      cm.on(\"unfold\", onFold);\n      cm.on(\"swapDoc\", onChange);\n    }\n  });\n\n  var Pos = CodeMirror.Pos;\n\n  function State(options) {\n    this.options = options;\n    this.from = this.to = 0;\n  }\n\n  function parseOptions(opts) {\n    if (opts === true) opts = {};\n    if (opts.gutter == null) opts.gutter = \"CodeMirror-foldgutter\";\n    if (opts.indicatorOpen == null) opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\n    if (opts.indicatorFolded == null) opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\n    return opts;\n  }\n\n  function isFolded(cm, line) {\n    var marks = cm.findMarks(Pos(line, 0), Pos(line + 1, 0));\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold && marks[i].find().from.line == line) return marks[i];\n  }\n\n  function marker(spec) {\n    if (typeof spec == \"string\") {\n      var elt = document.createElement(\"div\");\n      elt.className = spec + \" CodeMirror-guttermarker-subtle\";\n      return elt;\n    } else {\n      return spec.cloneNode(true);\n    }\n  }\n\n  function updateFoldInfo(cm, from, to) {\n    var opts = cm.state.foldGutter.options, cur = from;\n    var minSize = cm.foldOption(opts, \"minFoldSize\");\n    var func = cm.foldOption(opts, \"rangeFinder\");\n    cm.eachLine(from, to, function(line) {\n      var mark = null;\n      if (isFolded(cm, cur)) {\n        mark = marker(opts.indicatorFolded);\n      } else {\n        var pos = Pos(cur, 0);\n        var range = func && func(cm, pos);\n        if (range && range.to.line - range.from.line >= minSize)\n          mark = marker(opts.indicatorOpen);\n      }\n      cm.setGutterMarker(line, opts.gutter, mark);\n      ++cur;\n    });\n  }\n\n  function updateInViewport(cm) {\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\n    if (!state) return;\n    cm.operation(function() {\n      updateFoldInfo(cm, vp.from, vp.to);\n    });\n    state.from = vp.from; state.to = vp.to;\n  }\n\n  function onGutterClick(cm, line, gutter) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    if (gutter != opts.gutter) return;\n    var folded = isFolded(cm, line);\n    if (folded) folded.clear();\n    else cm.foldCode(Pos(line, 0), opts.rangeFinder);\n  }\n\n  function onChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    state.from = state.to = 0;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() { updateInViewport(cm); }, opts.foldOnChangeTimeSpan || 600);\n  }\n\n  function onViewportChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() {\n      var vp = cm.getViewport();\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        updateInViewport(cm);\n      } else {\n        cm.operation(function() {\n          if (vp.from < state.from) {\n            updateFoldInfo(cm, vp.from, state.from);\n            state.from = vp.from;\n          }\n          if (vp.to > state.to) {\n            updateFoldInfo(cm, state.to, vp.to);\n            state.to = vp.to;\n          }\n        });\n      }\n    }, opts.updateViewportTimeSpan || 400);\n  }\n\n  function onFold(cm, from) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var line = from.line;\n    if (line >= state.from && line < state.to)\n      updateFoldInfo(cm, line, line + 1);\n  }\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function cmp(a, b) { return a.line - b.line || a.ch - b.ch; }\n\n  var nameStartChar = \"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n  var nameChar = nameStartChar + \"\\-\\:\\.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n  var xmlTagStart = new RegExp(\"<(/?)([\" + nameStartChar + \"][\" + nameChar + \"]*)\", \"g\");\n\n  function Iter(cm, line, ch, range) {\n    this.line = line; this.ch = ch;\n    this.cm = cm; this.text = cm.getLine(line);\n    this.min = range ? range.from : cm.firstLine();\n    this.max = range ? range.to - 1 : cm.lastLine();\n  }\n\n  function tagAt(iter, ch) {\n    var type = iter.cm.getTokenTypeAt(Pos(iter.line, ch));\n    return type && /\\btag\\b/.test(type);\n  }\n\n  function nextLine(iter) {\n    if (iter.line >= iter.max) return;\n    iter.ch = 0;\n    iter.text = iter.cm.getLine(++iter.line);\n    return true;\n  }\n  function prevLine(iter) {\n    if (iter.line <= iter.min) return;\n    iter.text = iter.cm.getLine(--iter.line);\n    iter.ch = iter.text.length;\n    return true;\n  }\n\n  function toTagEnd(iter) {\n    for (;;) {\n      var gt = iter.text.indexOf(\">\", iter.ch);\n      if (gt == -1) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt + 1; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n  function toTagStart(iter) {\n    for (;;) {\n      var lt = iter.ch ? iter.text.lastIndexOf(\"<\", iter.ch - 1) : -1;\n      if (lt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, lt + 1)) { iter.ch = lt; continue; }\n      xmlTagStart.lastIndex = lt;\n      iter.ch = lt;\n      var match = xmlTagStart.exec(iter.text);\n      if (match && match.index == lt) return match;\n    }\n  }\n\n  function toNextTag(iter) {\n    for (;;) {\n      xmlTagStart.lastIndex = iter.ch;\n      var found = xmlTagStart.exec(iter.text);\n      if (!found) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, found.index + 1)) { iter.ch = found.index + 1; continue; }\n      iter.ch = found.index + found[0].length;\n      return found;\n    }\n  }\n  function toPrevTag(iter) {\n    for (;;) {\n      var gt = iter.ch ? iter.text.lastIndexOf(\">\", iter.ch - 1) : -1;\n      if (gt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n\n  function findMatchingClose(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var next = toNextTag(iter), end, startLine = iter.line, startCh = iter.ch - (next ? next[0].length : 0);\n      if (!next || !(end = toTagEnd(iter))) return;\n      if (end == \"selfClose\") continue;\n      if (next[1]) { // closing tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == next[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == next[2])) return {\n          tag: next[2],\n          from: Pos(startLine, startCh),\n          to: Pos(iter.line, iter.ch)\n        };\n      } else { // opening tag\n        stack.push(next[2]);\n      }\n    }\n  }\n  function findMatchingOpen(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var prev = toPrevTag(iter);\n      if (!prev) return;\n      if (prev == \"selfClose\") { toTagStart(iter); continue; }\n      var endLine = iter.line, endCh = iter.ch;\n      var start = toTagStart(iter);\n      if (!start) return;\n      if (start[1]) { // closing tag\n        stack.push(start[2]);\n      } else { // opening tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == start[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == start[2])) return {\n          tag: start[2],\n          from: Pos(iter.line, iter.ch),\n          to: Pos(endLine, endCh)\n        };\n      }\n    }\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"xml\", function(cm, start) {\n    var iter = new Iter(cm, start.line, 0);\n    for (;;) {\n      var openTag = toNextTag(iter), end;\n      if (!openTag || iter.line != start.line || !(end = toTagEnd(iter))) return;\n      if (!openTag[1] && end != \"selfClose\") {\n        var startPos = Pos(iter.line, iter.ch);\n        var endPos = findMatchingClose(iter, openTag[2]);\n        return endPos && {from: startPos, to: endPos.from};\n      }\n    }\n  });\n  CodeMirror.findMatchingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    if (iter.text.indexOf(\">\") == -1 && iter.text.indexOf(\"<\") == -1) return;\n    var end = toTagEnd(iter), to = end && Pos(iter.line, iter.ch);\n    var start = end && toTagStart(iter);\n    if (!end || !start || cmp(iter, pos) > 0) return;\n    var here = {from: Pos(iter.line, iter.ch), to: to, tag: start[2]};\n    if (end == \"selfClose\") return {open: here, close: null, at: \"open\"};\n\n    if (start[1]) { // closing tag\n      return {open: findMatchingOpen(iter, start[2]), close: here, at: \"close\"};\n    } else { // opening tag\n      iter = new Iter(cm, to.line, to.ch, range);\n      return {open: here, close: findMatchingClose(iter, start[2]), at: \"open\"};\n    }\n  };\n\n  CodeMirror.findEnclosingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    for (;;) {\n      var open = findMatchingOpen(iter);\n      if (!open) break;\n      var forward = new Iter(cm, pos.line, pos.ch, range);\n      var close = findMatchingClose(forward, open.tag);\n      if (close) return {open: open, close: close};\n    }\n  };\n\n  // Used by addon/edit/closetag.js\n  CodeMirror.scanForClosingTag = function(cm, pos, name, end) {\n    var iter = new Iter(cm, pos.line, pos.ch, end ? {from: 0, to: end} : null);\n    return findMatchingClose(iter, name);\n  };\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    options = parseOptions(this, this.getCursor(\"start\"), options);\n    var selections = this.listSelections()\n    if (selections.length > 1) return;\n    // By default, don't allow completion when something is selected.\n    // A hint function can have a `supportsSelection` property to\n    // indicate that it can handle selections.\n    if (this.somethingSelected()) {\n      if (!options.hint.supportsSelection) return;\n      // Don't try with cross-line selections\n      for (var i = 0; i < selections.length; i++)\n        if (selections[i].head.line != selections[i].anchor.line) return;\n    }\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    if (!completion.options.hint) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    completion.update(true);\n  });\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.widget = null;\n    this.debounce = 0;\n    this.tick = 0;\n    this.startPos = this.cm.getCursor(\"start\");\n    this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n\n    var self = this;\n    cm.on(\"cursorActivity\", this.activityFunc = function() { self.cursorActivity(); });\n  }\n\n  var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n    return setTimeout(fn, 1000/60);\n  };\n  var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n      this.tick = null;\n      this.cm.off(\"cursorActivity\", this.activityFunc);\n\n      if (this.widget && this.data) CodeMirror.signal(this.data, \"close\");\n      if (this.widget) this.widget.close();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i];\n      if (completion.hint) completion.hint(this.cm, data, completion);\n      else this.cm.replaceRange(getText(completion), completion.from || data.from,\n                                completion.to || data.to, \"complete\");\n      CodeMirror.signal(data, \"pick\", completion);\n      this.close();\n    },\n\n    cursorActivity: function() {\n      if (this.debounce) {\n        cancelAnimationFrame(this.debounce);\n        this.debounce = 0;\n      }\n\n      var pos = this.cm.getCursor(), line = this.cm.getLine(pos.line);\n      if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch ||\n          pos.ch < this.startPos.ch || this.cm.somethingSelected() ||\n          (pos.ch && this.options.closeCharacters.test(line.charAt(pos.ch - 1)))) {\n        this.close();\n      } else {\n        var self = this;\n        this.debounce = requestAnimationFrame(function() {self.update();});\n        if (this.widget) this.widget.disable();\n      }\n    },\n\n    update: function(first) {\n      if (this.tick == null) return\n      var self = this, myTick = ++this.tick\n      fetchHints(this.options.hint, this.cm, this.options, function(data) {\n        if (self.tick == myTick) self.finishUpdate(data, first)\n      })\n    },\n\n    finishUpdate: function(data, first) {\n      if (this.data) CodeMirror.signal(this.data, \"update\");\n\n      var picked = (this.widget && this.widget.picked) || (first && this.options.completeSingle);\n      if (this.widget) this.widget.close();\n\n      if (data && this.data && isNewCompletion(this.data, data)) return;\n      this.data = data;\n\n      if (data && data.list.length) {\n        if (picked && data.list.length == 1) {\n          this.pick(data, 0);\n        } else {\n          this.widget = new Widget(this, data);\n          CodeMirror.signal(data, \"shown\");\n        }\n      }\n    }\n  };\n\n  function isNewCompletion(old, nw) {\n    var moved = CodeMirror.cmpPos(nw.from, old.from)\n    return moved > 0 && old.to.ch - old.from.ch != nw.to.ch - nw.from.ch\n  }\n\n  function parseOptions(cm, pos, options) {\n    var editor = cm.options.hintOptions;\n    var out = {};\n    for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n    if (editor) for (var prop in editor)\n      if (editor[prop] !== undefined) out[prop] = editor[prop];\n    if (options) for (var prop in options)\n      if (options[prop] !== undefined) out[prop] = options[prop];\n    if (out.hint.resolve) out.hint = out.hint.resolve(cm, pos)\n    return out;\n  }\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.completion = completion;\n    this.data = data;\n    this.picked = false;\n    var widget = this, cm = completion.cm;\n\n    var hints = this.hints = document.createElement(\"ul\");\n    hints.className = \"CodeMirror-hints\";\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(document.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    hints.style.left = left + \"px\";\n    hints.style.top = top + \"px\";\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);\n    var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);\n    (completion.options.container || document.body).appendChild(hints);\n    var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;\n    var scrolls = hints.scrollHeight > hints.clientHeight + 1\n    var startScroll = cm.getScrollInfo();\n\n    if (overlapY > 0) {\n      var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n      if (curTop - height > 0) { // Fits above cursor\n        hints.style.top = (top = pos.top - height) + \"px\";\n        below = false;\n      } else if (height > winH) {\n        hints.style.height = (winH - 5) + \"px\";\n        hints.style.top = (top = pos.bottom - box.top) + \"px\";\n        var cursor = cm.getCursor();\n        if (data.from.ch != cursor.ch) {\n          pos = cm.cursorCoords(cursor);\n          hints.style.left = (left = pos.left) + \"px\";\n          box = hints.getBoundingClientRect();\n        }\n      }\n    }\n    var overlapX = box.right - winW;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = pos.left - overlapX) + \"px\";\n    }\n    if (scrolls) for (var node = hints.firstChild; node; node = node.nextSibling)\n      node.style.paddingRight = cm.display.nativeBarWidth + \"px\"\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    CodeMirror.signal(data, \"select\", completions[0], hints.firstChild);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    disable: function() {\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var widget = this;\n      this.keyMap = {Enter: function() { widget.picked = true; }};\n      this.completion.cm.addKeyMap(this.keyMap);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      if (node.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node.offsetTop - 3;\n      else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    }\n  };\n\n  function applicableHelpers(cm, helpers) {\n    if (!cm.somethingSelected()) return helpers\n    var result = []\n    for (var i = 0; i < helpers.length; i++)\n      if (helpers[i].supportsSelection) result.push(helpers[i])\n    return result\n  }\n\n  function fetchHints(hint, cm, options, callback) {\n    if (hint.async) {\n      hint(cm, callback, options)\n    } else {\n      var result = hint(cm, options)\n      if (result && result.then) result.then(callback)\n      else callback(result)\n    }\n  }\n\n  function resolveAutoHints(cm, pos) {\n    var helpers = cm.getHelpers(pos, \"hint\"), words\n    if (helpers.length) {\n      var resolved = function(cm, callback, options) {\n        var app = applicableHelpers(cm, helpers);\n        function run(i) {\n          if (i == app.length) return callback(null)\n          fetchHints(app[i], cm, options, function(result) {\n            if (result && result.list.length > 0) callback(result)\n            else run(i + 1)\n          })\n        }\n        run(0)\n      }\n      resolved.async = true\n      resolved.supportsSelection = true\n      return resolved\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      return function(cm) { return CodeMirror.hint.fromList(cm, {words: words}) }\n    } else if (CodeMirror.hint.anyword) {\n      return function(cm, options) { return CodeMirror.hint.anyword(cm, options) }\n    } else {\n      return function() {}\n    }\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", {\n    resolve: resolveAutoHints\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n    var to = CodeMirror.Pos(cur.line, token.end);\n    if (token.string && /\\w/.test(token.string[token.string.length - 1])) {\n      var term = token.string, from = CodeMirror.Pos(cur.line, token.start);\n    } else {\n      var term = \"\", from = to;\n    }\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, term.length) == term)\n        found.push(word);\n    }\n\n    if (found.length) return {list: found, from: from, to: to};\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnUnfocus: true,\n    completeOnSingleClick: true,\n    container: null,\n    customKeys: null,\n    extraKeys: null\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.runMode = function(string, modespec, callback, options) {\n  var mode = CodeMirror.getMode(CodeMirror.defaults, modespec);\n  var ie = /MSIE \\d/.test(navigator.userAgent);\n  var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);\n\n  if (callback.appendChild) {\n    var tabSize = (options && options.tabSize) || CodeMirror.defaults.tabSize;\n    var node = callback, col = 0;\n    node.innerHTML = \"\";\n    callback = function(text, style) {\n      if (text == \"\\n\") {\n        // Emitting LF or CRLF on IE8 or earlier results in an incorrect display.\n        // Emitting a carriage return makes everything ok.\n        node.appendChild(document.createTextNode(ie_lt9 ? '\\r' : text));\n        col = 0;\n        return;\n      }\n      var content = \"\";\n      // replace tabs\n      for (var pos = 0;;) {\n        var idx = text.indexOf(\"\\t\", pos);\n        if (idx == -1) {\n          content += text.slice(pos);\n          col += text.length - pos;\n          break;\n        } else {\n          col += idx - pos;\n          content += text.slice(pos, idx);\n          var size = tabSize - col % tabSize;\n          col += size;\n          for (var i = 0; i < size; ++i) content += \" \";\n          pos = idx + 1;\n        }\n      }\n\n      if (style) {\n        var sp = node.appendChild(document.createElement(\"span\"));\n        sp.className = \"cm-\" + style.replace(/ +/g, \" cm-\");\n        sp.appendChild(document.createTextNode(content));\n      } else {\n        node.appendChild(document.createTextNode(content));\n      }\n    };\n  }\n\n  var lines = CodeMirror.splitLines(string), state = (options && options.state) || CodeMirror.startState(mode);\n  for (var i = 0, e = lines.length; i < e; ++i) {\n    if (i) callback(\"\\n\");\n    var stream = new CodeMirror.StringStream(lines[i]);\n    if (!stream.string && mode.blankLine) mode.blankLine(state);\n    while (!stream.eol()) {\n      var style = mode.token(stream, state);\n      callback(stream.current(), style, i, stream.start, state);\n      stream.start = stream.pos;\n    }\n  }\n};\n\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var Pos = CodeMirror.Pos;\n\n  function SearchCursor(doc, query, pos, caseFold) {\n    this.atOccurrence = false; this.doc = doc;\n    if (caseFold == null && typeof query == \"string\") caseFold = false;\n\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0);\n    this.pos = {from: pos, to: pos};\n\n    // The matches method is filled in based on the type of query.\n    // It takes a position and a direction, and returns an object\n    // describing the next occurrence of the query, or null if no\n    // more matches were found.\n    if (typeof query != \"string\") { // Regexp match\n      if (!query.global) query = new RegExp(query.source, query.ignoreCase ? \"ig\" : \"g\");\n      this.matches = function(reverse, pos) {\n        if (reverse) {\n          query.lastIndex = 0;\n          var line = doc.getLine(pos.line).slice(0, pos.ch), cutOff = 0, match, start;\n          for (;;) {\n            query.lastIndex = cutOff;\n            var newMatch = query.exec(line);\n            if (!newMatch) break;\n            match = newMatch;\n            start = match.index;\n            cutOff = match.index + (match[0].length || 1);\n            if (cutOff == line.length) break;\n          }\n          var matchLen = (match && match[0].length) || 0;\n          if (!matchLen) {\n            if (start == 0 && line.length == 0) {match = undefined;}\n            else if (start != doc.getLine(pos.line).length) {\n              matchLen++;\n            }\n          }\n        } else {\n          query.lastIndex = pos.ch;\n          var line = doc.getLine(pos.line), match = query.exec(line);\n          var matchLen = (match && match[0].length) || 0;\n          var start = match && match.index;\n          if (start + matchLen != line.length && !matchLen) matchLen = 1;\n        }\n        if (match && matchLen)\n          return {from: Pos(pos.line, start),\n                  to: Pos(pos.line, start + matchLen),\n                  match: match};\n      };\n    } else { // String query\n      var origQuery = query;\n      if (caseFold) query = query.toLowerCase();\n      var fold = caseFold ? function(str){return str.toLowerCase();} : function(str){return str;};\n      var target = query.split(\"\\n\");\n      // Different methods for single-line and multi-line queries\n      if (target.length == 1) {\n        if (!query.length) {\n          // Empty string would match anything and never progress, so\n          // we define it to match nothing instead.\n          this.matches = function() {};\n        } else {\n          this.matches = function(reverse, pos) {\n            if (reverse) {\n              var orig = doc.getLine(pos.line).slice(0, pos.ch), line = fold(orig);\n              var match = line.lastIndexOf(query);\n              if (match > -1) {\n                match = adjustPos(orig, line, match);\n                return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n              }\n             } else {\n               var orig = doc.getLine(pos.line).slice(pos.ch), line = fold(orig);\n               var match = line.indexOf(query);\n               if (match > -1) {\n                 match = adjustPos(orig, line, match) + pos.ch;\n                 return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n               }\n            }\n          };\n        }\n      } else {\n        var origTarget = origQuery.split(\"\\n\");\n        this.matches = function(reverse, pos) {\n          var last = target.length - 1;\n          if (reverse) {\n            if (pos.line - (target.length - 1) < doc.firstLine()) return;\n            if (fold(doc.getLine(pos.line).slice(0, origTarget[last].length)) != target[target.length - 1]) return;\n            var to = Pos(pos.line, origTarget[last].length);\n            for (var ln = pos.line - 1, i = last - 1; i >= 1; --i, --ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            var line = doc.getLine(ln), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            return {from: Pos(ln, cut), to: to};\n          } else {\n            if (pos.line + (target.length - 1) > doc.lastLine()) return;\n            var line = doc.getLine(pos.line), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            var from = Pos(pos.line, cut);\n            for (var ln = pos.line + 1, i = 1; i < last; ++i, ++ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            if (fold(doc.getLine(ln).slice(0, origTarget[last].length)) != target[last]) return;\n            return {from: from, to: Pos(ln, origTarget[last].length)};\n          }\n        };\n      }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false);},\n    findPrevious: function() {return this.find(true);},\n\n    find: function(reverse) {\n      var self = this, pos = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n      function savePosAndFail(line) {\n        var pos = Pos(line, 0);\n        self.pos = {from: pos, to: pos};\n        self.atOccurrence = false;\n        return false;\n      }\n\n      for (;;) {\n        if (this.pos = this.matches(reverse, pos)) {\n          this.atOccurrence = true;\n          return this.pos.match || true;\n        }\n        if (reverse) {\n          if (!pos.line) return savePosAndFail(0);\n          pos = Pos(pos.line-1, this.doc.getLine(pos.line-1).length);\n        }\n        else {\n          var maxLine = this.doc.lineCount();\n          if (pos.line == maxLine - 1) return savePosAndFail(maxLine);\n          pos = Pos(pos.line + 1, 0);\n        }\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from;},\n    to: function() {if (this.atOccurrence) return this.pos.to;},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return;\n      var lines = CodeMirror.splitLines(newText);\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin);\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0));\n    }\n  };\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos) {\n    if (orig.length == folded.length) return pos;\n    for (var pos1 = Math.min(pos, orig.length);;) {\n      var len1 = orig.slice(0, pos1).toLowerCase().length;\n      if (len1 < pos) ++pos1;\n      else if (len1 > pos) --pos1;\n      else return pos1;\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold);\n  });\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold);\n  });\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = [];\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold);\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break;\n      ranges.push({anchor: cur.from(), head: cur.to()});\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0);\n  });\n});\n","\"use strict\"\n// Module export pattern from\n// https://github.com/umdjs/umd/blob/master/returnExports.js\n;(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.store = factory();\n  }\n}(this, function () {\n\t\n\t// Store.js\n\tvar store = {},\n\t\twin = (typeof window != 'undefined' ? window : global),\n\t\tdoc = win.document,\n\t\tlocalStorageName = 'localStorage',\n\t\tscriptTag = 'script',\n\t\tstorage\n\n\tstore.disabled = false\n\tstore.version = '1.3.20'\n\tstore.set = function(key, value) {}\n\tstore.get = function(key, defaultVal) {}\n\tstore.has = function(key) { return store.get(key) !== undefined }\n\tstore.remove = function(key) {}\n\tstore.clear = function() {}\n\tstore.transact = function(key, defaultVal, transactionFn) {\n\t\tif (transactionFn == null) {\n\t\t\ttransactionFn = defaultVal\n\t\t\tdefaultVal = null\n\t\t}\n\t\tif (defaultVal == null) {\n\t\t\tdefaultVal = {}\n\t\t}\n\t\tvar val = store.get(key, defaultVal)\n\t\ttransactionFn(val)\n\t\tstore.set(key, val)\n\t}\n\tstore.getAll = function() {}\n\tstore.forEach = function() {}\n\n\tstore.serialize = function(value) {\n\t\treturn JSON.stringify(value)\n\t}\n\tstore.deserialize = function(value) {\n\t\tif (typeof value != 'string') { return undefined }\n\t\ttry { return JSON.parse(value) }\n\t\tcatch(e) { return value || undefined }\n\t}\n\n\t// Functions to encapsulate questionable FireFox 3.6.13 behavior\n\t// when about.config::dom.storage.enabled === false\n\t// See https://github.com/marcuswestin/store.js/issues#issue/13\n\tfunction isLocalStorageNameSupported() {\n\t\ttry { return (localStorageName in win && win[localStorageName]) }\n\t\tcatch(err) { return false }\n\t}\n\n\tif (isLocalStorageNameSupported()) {\n\t\tstorage = win[localStorageName]\n\t\tstore.set = function(key, val) {\n\t\t\tif (val === undefined) { return store.remove(key) }\n\t\t\tstorage.setItem(key, store.serialize(val))\n\t\t\treturn val\n\t\t}\n\t\tstore.get = function(key, defaultVal) {\n\t\t\tvar val = store.deserialize(storage.getItem(key))\n\t\t\treturn (val === undefined ? defaultVal : val)\n\t\t}\n\t\tstore.remove = function(key) { storage.removeItem(key) }\n\t\tstore.clear = function() { storage.clear() }\n\t\tstore.getAll = function() {\n\t\t\tvar ret = {}\n\t\t\tstore.forEach(function(key, val) {\n\t\t\t\tret[key] = val\n\t\t\t})\n\t\t\treturn ret\n\t\t}\n\t\tstore.forEach = function(callback) {\n\t\t\tfor (var i=0; i<storage.length; i++) {\n\t\t\t\tvar key = storage.key(i)\n\t\t\t\tcallback(key, store.get(key))\n\t\t\t}\n\t\t}\n\t} else if (doc && doc.documentElement.addBehavior) {\n\t\tvar storageOwner,\n\t\t\tstorageContainer\n\t\t// Since #userData storage applies only to specific paths, we need to\n\t\t// somehow link our data to a specific path.  We choose /favicon.ico\n\t\t// as a pretty safe option, since all browsers already make a request to\n\t\t// this URL anyway and being a 404 will not hurt us here.  We wrap an\n\t\t// iframe pointing to the favicon in an ActiveXObject(htmlfile) object\n\t\t// (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)\n\t\t// since the iframe access rules appear to allow direct access and\n\t\t// manipulation of the document element, even for a 404 page.  This\n\t\t// document can be used instead of the current document (which would\n\t\t// have been limited to the current path) to perform #userData storage.\n\t\ttry {\n\t\t\tstorageContainer = new ActiveXObject('htmlfile')\n\t\t\tstorageContainer.open()\n\t\t\tstorageContainer.write('<'+scriptTag+'>document.w=window</'+scriptTag+'><iframe src=\"/favicon.ico\"></iframe>')\n\t\t\tstorageContainer.close()\n\t\t\tstorageOwner = storageContainer.w.frames[0].document\n\t\t\tstorage = storageOwner.createElement('div')\n\t\t} catch(e) {\n\t\t\t// somehow ActiveXObject instantiation failed (perhaps some special\n\t\t\t// security settings or otherwse), fall back to per-path storage\n\t\t\tstorage = doc.createElement('div')\n\t\t\tstorageOwner = doc.body\n\t\t}\n\t\tvar withIEStorage = function(storeFunction) {\n\t\t\treturn function() {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments, 0)\n\t\t\t\targs.unshift(storage)\n\t\t\t\t// See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx\n\t\t\t\t// and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx\n\t\t\t\tstorageOwner.appendChild(storage)\n\t\t\t\tstorage.addBehavior('#default#userData')\n\t\t\t\tstorage.load(localStorageName)\n\t\t\t\tvar result = storeFunction.apply(store, args)\n\t\t\t\tstorageOwner.removeChild(storage)\n\t\t\t\treturn result\n\t\t\t}\n\t\t}\n\n\t\t// In IE7, keys cannot start with a digit or contain certain chars.\n\t\t// See https://github.com/marcuswestin/store.js/issues/40\n\t\t// See https://github.com/marcuswestin/store.js/issues/83\n\t\tvar forbiddenCharsRegex = new RegExp(\"[!\\\"#$%&'()*+,/\\\\\\\\:;<=>?@[\\\\]^`{|}~]\", \"g\")\n\t\tvar ieKeyFix = function(key) {\n\t\t\treturn key.replace(/^d/, '___$&').replace(forbiddenCharsRegex, '___')\n\t\t}\n\t\tstore.set = withIEStorage(function(storage, key, val) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tif (val === undefined) { return store.remove(key) }\n\t\t\tstorage.setAttribute(key, store.serialize(val))\n\t\t\tstorage.save(localStorageName)\n\t\t\treturn val\n\t\t})\n\t\tstore.get = withIEStorage(function(storage, key, defaultVal) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tvar val = store.deserialize(storage.getAttribute(key))\n\t\t\treturn (val === undefined ? defaultVal : val)\n\t\t})\n\t\tstore.remove = withIEStorage(function(storage, key) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tstorage.removeAttribute(key)\n\t\t\tstorage.save(localStorageName)\n\t\t})\n\t\tstore.clear = withIEStorage(function(storage) {\n\t\t\tvar attributes = storage.XMLDocument.documentElement.attributes\n\t\t\tstorage.load(localStorageName)\n\t\t\tfor (var i=attributes.length-1; i>=0; i--) {\n\t\t\t\tstorage.removeAttribute(attributes[i].name)\n\t\t\t}\n\t\t\tstorage.save(localStorageName)\n\t\t})\n\t\tstore.getAll = function(storage) {\n\t\t\tvar ret = {}\n\t\t\tstore.forEach(function(key, val) {\n\t\t\t\tret[key] = val\n\t\t\t})\n\t\t\treturn ret\n\t\t}\n\t\tstore.forEach = withIEStorage(function(storage, callback) {\n\t\t\tvar attributes = storage.XMLDocument.documentElement.attributes\n\t\t\tfor (var i=0, attr; attr=attributes[i]; ++i) {\n\t\t\t\tcallback(attr.name, store.deserialize(storage.getAttribute(attr.name)))\n\t\t\t}\n\t\t})\n\t}\n\n\ttry {\n\t\tvar testKey = '__storejs__'\n\t\tstore.set(testKey, testKey)\n\t\tif (store.get(testKey) != testKey) { store.disabled = true }\n\t\tstore.remove(testKey)\n\t} catch(e) {\n\t\tstore.disabled = true\n\t}\n\tstore.enabled = !store.disabled\n\t\n\treturn store\n}));\n","module.exports={\n  \"_args\": [\n    [\n      \"yasgui-utils@^1.4.1\",\n      \"/home/lrd900/yasgui/yasqe\"\n    ]\n  ],\n  \"_from\": \"yasgui-utils@>=1.4.1 <2.0.0\",\n  \"_id\": \"yasgui-utils@1.6.0\",\n  \"_inCache\": true,\n  \"_installable\": true,\n  \"_location\": \"/yasgui-utils\",\n  \"_npmUser\": {\n    \"email\": \"laurens.rietveld@gmail.com\",\n    \"name\": \"laurens.rietveld\"\n  },\n  \"_npmVersion\": \"1.4.3\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"name\": \"yasgui-utils\",\n    \"raw\": \"yasgui-utils@^1.4.1\",\n    \"rawSpec\": \"^1.4.1\",\n    \"scope\": null,\n    \"spec\": \">=1.4.1 <2.0.0\",\n    \"type\": \"range\"\n  },\n  \"_requiredBy\": [\n    \"/\"\n  ],\n  \"_shrinkwrap\": null,\n  \"_spec\": \"yasgui-utils@^1.4.1\",\n  \"_where\": \"/home/lrd900/yasgui/yasqe\",\n  \"author\": {\n    \"name\": \"Laurens Rietveld\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/YASGUI/Utils/issues\"\n  },\n  \"dependencies\": {\n    \"store\": \"^1.3.14\"\n  },\n  \"description\": \"Utils for YASGUI libs\",\n  \"devDependencies\": {},\n  \"directories\": {},\n  \"dist\": {\n    \"shasum\": \"bcb9091109c233e3e82737c94c202e6512389c47\",\n    \"tarball\": \"http://registry.npmjs.org/yasgui-utils/-/yasgui-utils-1.6.0.tgz\"\n  },\n  \"homepage\": \"https://github.com/YASGUI/Utils\",\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://yasgui.github.io/license.txt\"\n    }\n  ],\n  \"main\": \"src/main.js\",\n  \"maintainers\": [\n    {\n      \"name\": \"laurens.rietveld\",\n      \"email\": \"laurens.rietveld@gmail.com\"\n    }\n  ],\n  \"name\": \"yasgui-utils\",\n  \"optionalDependencies\": {},\n  \"readme\": \"ERROR: No README data found!\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/YASGUI/Utils.git\"\n  },\n  \"version\": \"1.6.0\"\n}\n","window.console = window.console || {\"log\":function(){}};//make sure any console statements don't break IE\nmodule.exports = {\n\tstorage: require(\"./storage.js\"),\n\tsvg: require(\"./svg.js\"),\n\tversion: {\n\t\t\"yasgui-utils\" : require(\"../package.json\").version,\n\t},\n\tnestedExists : function(obj) {\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\n\t\tfor (var i = 0; i < args.length; i++) {\n\t\t\tif (!obj || !obj.hasOwnProperty(args[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tobj = obj[args[i]];\n\t\t}\n\t\treturn true;\n\t}\n};\n","var store = require(\"store\");\nvar times = {\n\tday: function() {\n\t\treturn 1000 * 3600 * 24;//millis to day\n\t},\n\tmonth: function() {\n\t\ttimes.day() * 30;\n\t},\n\tyear: function() {\n\t\ttimes.month() * 12;\n\t}\n};\n\nvar root = module.exports = {\n\tset : function(key, val, exp) {\n    if (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key && val !== undefined) {\n\t\t\tif (typeof exp == \"string\") {\n\t\t\t\texp = times[exp]();\n\t\t\t}\n\t\t\t//try to store string for dom objects (e.g. XML result). Otherwise, we might get a circular reference error when stringifying this\n\t\t\tif (val.documentElement) val = new XMLSerializer().serializeToString(val.documentElement);\n\t\t\tstore.set(key, {\n\t\t\t\tval : val,\n\t\t\t\texp : exp,\n\t\t\t\ttime : new Date().getTime()\n\t\t\t});\n\t\t}\n\t},\n\tremove: function(key) {\n\t\tif (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key) store.remove(key)\n\t},\n\tremoveAll: function(filter) {\n\t\tif (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (typeof filter === 'function') {\n\t\t\tfor (var key in store.getAll()) {\n\t\t\t\tif (filter(key, root.get(key))) root.remove(key);\n\t\t\t}\n\t\t}\n\t},\n\tget : function(key) {\n    if (!store.enabled) return null;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key) {\n\t\t\tvar info = store.get(key);\n\t\t\tif (!info) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (info.exp && new Date().getTime() - info.time > info.exp) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn info.val;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n};\n","module.exports = {\n\tdraw: function(parent, svgString) {\n\t\tif (!parent) return;\n\t\tvar el = module.exports.getElement(svgString);\n\t\tif (el) {\n\t\t\tif (parent.append) {\n\t\t\t\tparent.append(el);\n\t\t\t} else {\n\t\t\t\t//regular dom doc\n\t\t\t\tparent.appendChild(el);\n\t\t\t}\n\t\t}\n\t},\n\tgetElement: function(svgString) {\n\t\tif (svgString && svgString.indexOf(\"<svg\") == 0) {\n\t\t\t//no style passed via config. guess own styles\n\t\t\tvar parser = new DOMParser();\n\t\t\tvar dom = parser.parseFromString(svgString, \"text/xml\");\n\t\t\tvar svg = dom.documentElement;\n\t\t\t\n\t\t\tvar svgContainer = document.createElement(\"div\");\n\t\t\tsvgContainer.className = 'svgImg';\n\t\t\tsvgContainer.appendChild(svg);\n\t\t\treturn svgContainer;\n\t\t}\n\t\treturn false;\n\t}\n};","module.exports={\n  \"name\": \"yasgui-yasqe\",\n  \"description\": \"Yet Another SPARQL Query Editor\",\n  \"version\": \"2.10.1\",\n  \"main\": \"src/main.js\",\n  \"license\": \"MIT\",\n  \"author\": \"Laurens Rietveld\",\n  \"homepage\": \"http://yasqe.yasgui.org\",\n  \"scripts\": {\n    \"install\": \"gulp\",\n    \"dev\": \"gulp serve\",\n    \"build\": \"gulp\",\n    \"patch\": \"gulp patch\",\n    \"minor\": \"gulp minor\",\n    \"major\": \"gulp major\"\n  },\n  \"devDependencies\": {\n    \"gulp-bump\": \"^2.2.0\",\n    \"gulp-connect\": \"^4.2.0\",\n    \"gulp-embedlr\": \"^0.5.2\",\n    \"gulp-git\": \"^1.10.0\",\n    \"gulp-livereload\": \"^3.8.1\",\n    \"gulp-tag-version\": \"^1.3.0\",\n    \"watchify\": \"^3.7.0\"\n  },\n  \"bugs\": \"https://github.com/YASGUI/YASQE/issues/\",\n  \"keywords\": [\n    \"JavaScript\",\n    \"SPARQL\",\n    \"Editor\",\n    \"Semantic Web\",\n    \"Linked Data\"\n  ],\n  \"maintainers\": [\n    {\n      \"name\": \"Laurens Rietveld\",\n      \"email\": \"laurens.rietveld@gmail.com\",\n      \"web\": \"http://laurensrietveld.nl\"\n    }\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/YASGUI/YASQE.git\"\n  },\n  \"dependencies\": {\n    \"bootstrap-sass\": \"^3.3.7\",\n    \"browserify\": \"^13.1.0\",\n    \"browserify-transform-tools\": \"^1.6.0\",\n    \"exorcist\": \"^0.4.0\",\n    \"gulp-autoprefixer\": \"^3.1.0\",\n    \"gulp-concat\": \"^2.6.0\",\n    \"gulp-cssimport\": \"^3.1.0\",\n    \"gulp-cssnano\": \"^2.1.2\",\n    \"gulp-filter\": \"^4.0.0\",\n    \"gulp-jsvalidate\": \"^2.1.0\",\n    \"gulp-minify-css\": \"1.2.4\",\n    \"gulp-notify\": \"^2.2.0\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-sass\": \"^2.3.2\",\n    \"gulp-sourcemaps\": \"^1.6.0\",\n    \"gulp-streamify\": \"1.0.2\",\n    \"gulp-uglify\": \"^1.5.4\",\n    \"node-sass\": \"^3.8.0\",\n    \"require-dir\": \"^0.3.0\",\n    \"run-sequence\": \"^1.2.2\",\n    \"vinyl-buffer\": \"^1.0.0\",\n    \"vinyl-source-stream\": \"~1.1.0\",\n    \"vinyl-transform\": \"1.0.0\",\n    \"codemirror\": \"5.17.0\",\n    \"gulp\": \"^3.9.1\",\n    \"jquery\": \"~3.1.0\",\n    \"yasgui-utils\": \"^1.6.0\"\n  },\n  \"optionalShim\": {\n    \"codemirror\": {\n      \"require\": \"codemirror\",\n      \"global\": \"CodeMirror\"\n    },\n    \"jquery\": {\n      \"require\": \"jquery\",\n      \"global\": \"jQuery\"\n    },\n    \"../../lib/codemirror\": {\n      \"require\": \"codemirror\",\n      \"global\": \"CodeMirror\"\n    }\n  }\n}\n","'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n\tutils = require('../utils.js'),\n\tyutils = require('yasgui-utils'),\n\tTrie = require('../../lib/trie.js'),\n\tYASQE = require('../main.js');\n\nmodule.exports = function(YASQE, yasqe) {\n\tvar completionNotifications = {};\n\tvar completers = {};\n\tvar tries = {};\n\n\tyasqe.on('cursorActivity', function(yasqe, eventInfo) {\n\t\tautoComplete(true);\n\t});\n\tyasqe.on('change', function() {\n\t\tvar needPossibleAdjustment = [];\n\t\tfor (var notificationName in completionNotifications) {\n\t\t\tif (completionNotifications[notificationName].is(':visible')) {\n\t\t\t\tneedPossibleAdjustment.push(completionNotifications[notificationName]);\n\t\t\t}\n\t\t}\n\t\tif (needPossibleAdjustment.length > 0) {\n\t\t\t//position completion notifications\n\t\t\tvar scrollBar = $(yasqe.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\n\t\t\tvar offset = 0;\n\t\t\tif (scrollBar.is(\":visible\")) {\n\t\t\t\toffset = scrollBar.outerWidth();\n\t\t\t}\n\t\t\tneedPossibleAdjustment.forEach(function(notification) {\n\t\t\t\tnotification.css(\"right\", offset)\n\t\t\t});\n\t\t}\n\t});\n\n\n\n\t/**\n\t * Store bulk completions in memory as trie, and store these in localstorage as well (if enabled)\n\t * \n\t * @method doc.storeBulkCompletions\n\t * @param completions {array}\n\t */\n\tvar storeBulkCompletions = function(completer, completions) {\n\t\t// store array as trie\n\t\ttries[completer.name] = new Trie();\n\t\tfor (var i = 0; i < completions.length; i++) {\n\t\t\ttries[completer.name].insert(completions[i]);\n\t\t}\n\t\t// store in localstorage as well\n\t\tvar storageId = utils.getPersistencyId(yasqe, completer.persistent);\n\t\tif (storageId) yutils.storage.set(storageId, completions, \"month\");\n\t};\n\n\tvar initCompleter = function(name, completionInit) {\n\t\tvar completer = completers[name] = new completionInit(yasqe, name);\n\t\tcompleter.name = name;\n\t\tif (completer.bulk) {\n\t\t\tvar storeArrayAsBulk = function(suggestions) {\n\t\t\t\tif (suggestions && suggestions instanceof Array && suggestions.length > 0) {\n\t\t\t\t\tstoreBulkCompletions(completer, suggestions);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (completer.get instanceof Array) {\n\t\t\t\t// we don't care whether the completions are already stored in\n\t\t\t\t// localstorage. just use this one\n\t\t\t\tstoreArrayAsBulk(completer.get);\n\t\t\t} else {\n\t\t\t\t// if completions are defined in localstorage, use those! (calling the\n\t\t\t\t// function may come with overhead (e.g. async calls))\n\t\t\t\tvar completionsFromStorage = null;\n\t\t\t\tvar persistencyIdentifier = utils.getPersistencyId(yasqe, completer.persistent);\n\t\t\t\tif (persistencyIdentifier)\n\t\t\t\t\tcompletionsFromStorage = yutils.storage.get(persistencyIdentifier);\n\t\t\t\tif (completionsFromStorage && completionsFromStorage.length > 0) {\n\t\t\t\t\tstoreArrayAsBulk(completionsFromStorage);\n\t\t\t\t} else {\n\t\t\t\t\t// nothing in storage. check whether we have a function via which we\n\t\t\t\t\t// can get our prefixes\n\t\t\t\t\tif (completer.get instanceof Function) {\n\t\t\t\t\t\tif (completer.async) {\n\t\t\t\t\t\t\tcompleter.get(null, storeArrayAsBulk);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstoreArrayAsBulk(completer.get());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tvar autoComplete = function(fromAutoShow) {\n\t\tif (yasqe.somethingSelected())\n\t\t\treturn;\n\t\tvar tryHintType = function(completer) {\n\t\t\tif (fromAutoShow // from autoShow, i.e. this gets called each time the editor content changes\n\t\t\t\t&& (!completer.autoShow // autoshow for  this particular type of autocompletion is -not- enabled\n\t\t\t\t\t|| (!completer.bulk && completer.async)) // async is enabled (don't want to re-do ajax-like request for every editor change)\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar hintConfig = {\n\t\t\t\tcloseCharacters: /(?=a)b/,\n\t\t\t\tcompleteSingle: false\n\t\t\t};\n\t\t\tif (!completer.bulk && completer.async) {\n\t\t\t\thintConfig.async = true;\n\t\t\t}\n\t\t\tvar wrappedHintCallback = function(yasqe, callback) {\n\t\t\t\treturn getCompletionHintsObject(completer, callback);\n\t\t\t};\n\t\t\tvar result = YASQE.showHint(yasqe, wrappedHintCallback, hintConfig);\n\t\t\treturn true;\n\t\t};\n\t\tfor (var completerName in completers) {\n\t\t\tif ($.inArray(completerName, yasqe.options.autocompleters) == -1) continue; //this completer is disabled\n\t\t\tvar completer = completers[completerName];\n\t\t\tif (!completer.isValidCompletionPosition) continue; //no way to check whether we are in a valid position\n\n\t\t\tif (!completer.isValidCompletionPosition()) {\n\t\t\t\t//if needed, fire callbacks for when we are -not- in valid completion position\n\t\t\t\tif (completer.callbacks && completer.callbacks.invalidPosition) {\n\t\t\t\t\tcompleter.callbacks.invalidPosition(yasqe, completer);\n\t\t\t\t}\n\t\t\t\t//not in a valid position, so continue to next completion candidate type\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// run valid position handler, if there is one (if it returns false, stop the autocompletion!)\n\t\t\tif (completer.callbacks && completer.callbacks.validPosition) {\n\t\t\t\tif (completer.callbacks.validPosition(yasqe, completer) === false)\n\t\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvar success = tryHintType(completer);\n\t\t\tif (success)\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\n\n\tvar getCompletionHintsObject = function(completer, callback) {\n\t\tvar getSuggestionsFromToken = function(partialToken) {\n\t\t\tvar stringToAutocomplete = partialToken.autocompletionString || partialToken.string;\n\t\t\tvar suggestions = [];\n\t\t\tif (tries[completer.name]) {\n\t\t\t\tsuggestions = tries[completer.name].autoComplete(stringToAutocomplete);\n\t\t\t} else if (typeof completer.get == \"function\" && completer.async == false) {\n\t\t\t\tsuggestions = completer.get(stringToAutocomplete);\n\t\t\t} else if (typeof completer.get == \"object\") {\n\t\t\t\tvar partialTokenLength = stringToAutocomplete.length;\n\t\t\t\tfor (var i = 0; i < completer.get.length; i++) {\n\t\t\t\t\tvar completion = completer.get[i];\n\t\t\t\t\tif (completion.slice(0, partialTokenLength) == stringToAutocomplete) {\n\t\t\t\t\t\tsuggestions.push(completion);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn getSuggestionsAsHintObject(suggestions, completer, partialToken);\n\n\t\t};\n\n\n\t\tvar token = yasqe.getCompleteToken();\n\t\tif (completer.preProcessToken) {\n\t\t\ttoken = completer.preProcessToken(token);\n\t\t}\n\n\t\tif (token) {\n\t\t\t// use custom completionhint function, to avoid reaching a loop when the\n\t\t\t// completionhint is the same as the current token\n\t\t\t// regular behaviour would keep changing the codemirror dom, hence\n\t\t\t// constantly calling this callback\n\t\t\tif (!completer.bulk && completer.async) {\n\t\t\t\tvar wrappedCallback = function(suggestions) {\n\t\t\t\t\tcallback(getSuggestionsAsHintObject(suggestions, completer, token));\n\t\t\t\t};\n\t\t\t\tcompleter.get(token, wrappedCallback);\n\t\t\t} else {\n\t\t\t\treturn getSuggestionsFromToken(token);\n\n\t\t\t}\n\t\t}\n\t};\n\n\n\t/**\n\t *  get our array of suggestions (strings) in the codemirror hint format\n\t */\n\tvar getSuggestionsAsHintObject = function(suggestions, completer, token) {\n\t\tvar hintList = [];\n\t\tfor (var i = 0; i < suggestions.length; i++) {\n\t\t\tvar suggestedString = suggestions[i];\n\t\t\tif (completer.postProcessToken) {\n\t\t\t\tsuggestedString = completer.postProcessToken(token, suggestedString);\n\t\t\t}\n\t\t\thintList.push({\n\t\t\t\ttext: suggestedString,\n\t\t\t\tdisplayText: suggestedString,\n\t\t\t\thint: selectHint,\n\t\t\t});\n\t\t}\n\n\t\tvar cur = yasqe.getCursor();\n\t\tvar returnObj = {\n\t\t\tcompletionToken: token.string,\n\t\t\tlist: hintList,\n\t\t\tfrom: {\n\t\t\t\tline: cur.line,\n\t\t\t\tch: token.start\n\t\t\t},\n\t\t\tto: {\n\t\t\t\tline: cur.line,\n\t\t\t\tch: token.end\n\t\t\t}\n\t\t};\n\t\t//if we have some autocompletion handlers specified, add these these to the object. Codemirror will take care of firing these\n\t\tif (completer.callbacks) {\n\t\t\tfor (var callbackName in completer.callbacks) {\n\t\t\t\tif (completer.callbacks[callbackName]) {\n\t\t\t\t\tYASQE.on(returnObj, callbackName, completer.callbacks[callbackName]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn returnObj;\n\t};\n\n\treturn {\n\t\tinit: initCompleter,\n\t\tcompleters: completers,\n\t\tnotifications: {\n\t\t\tgetEl: function(completer) {\n\t\t\t\treturn $(completionNotifications[completer.name]);\n\t\t\t},\n\t\t\tshow: function(yasqe, completer) {\n\t\t\t\t//only draw when the user needs to use a keypress to summon autocompletions\n\t\t\t\tif (!completer.autoshow) {\n\t\t\t\t\tif (!completionNotifications[completer.name]) completionNotifications[completer.name] = $(\"<div class='completionNotification'></div>\");\n\t\t\t\t\tcompletionNotifications[completer.name]\n\t\t\t\t\t\t.show()\n\t\t\t\t\t\t.text(\"Press \" + (navigator.userAgent.indexOf('Mac OS X') != -1 ? \"CMD\" : \"CTRL\") + \" - <spacebar> to autocomplete\")\n\t\t\t\t\t\t.appendTo($(yasqe.getWrapperElement()));\n\t\t\t\t}\n\t\t\t},\n\t\t\thide: function(yasqe, completer) {\n\t\t\t\tif (completionNotifications[completer.name]) {\n\t\t\t\t\tcompletionNotifications[completer.name].hide();\n\t\t\t\t}\n\t\t\t}\n\n\t\t},\n\t\tautoComplete: autoComplete,\n\t\tgetTrie: function(completer) {\n\t\t\treturn (typeof completer == \"string\" ? tries[completer] : tries[completer.name]);\n\t\t}\n\t}\n};\n\n\n\n\n\n\n\n\n\n/**\n * function which fires after the user selects a completion. this function checks whether we actually need to store this one (if completion is same as current token, don't do anything)\n */\nvar selectHint = function(yasqe, data, completion) {\n\tif (completion.text != yasqe.getTokenAt(yasqe.getCursor()).string) {\n\t\tyasqe.replaceRange(completion.text, data.from, data.to);\n\t}\n};\n\n\n\n\n\n//\n//module.exports = {\n//\tpreprocessPrefixTokenForCompletion: preprocessPrefixTokenForCompletion,\n//\tpostprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion,\n//\tpreprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\n//\tshowCompletionNotification: showCompletionNotification,\n//\thideCompletionNotification: hideCompletionNotification,\n//\tautoComplete: autoComplete,\n//\tautocompleteVariables: autocompleteVariables,\n//\tfetchFromPrefixCc: fetchFromPrefixCc,\n//\tfetchFromLov: fetchFromLov,\n////\tstoreBulkCompletions: storeBulkCompletions,\n//\tloadBulkCompletions: loadBulkCompletions,\n//};","'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\nmodule.exports = function(yasqe, name) {\n\treturn {\n\t\tisValidCompletionPosition: function() {\n\t\t\treturn module.exports.isValidCompletionPosition(yasqe);\n\t\t},\n\t\tget: function(token, callback) {\n\t\t\treturn require('./utils').fetchFromLov(yasqe, this, token, callback);\n\t\t},\n\t\tpreProcessToken: function(token) {\n\t\t\treturn module.exports.preProcessToken(yasqe, token)\n\t\t},\n\t\tpostProcessToken: function(token, suggestedString) {\n\t\t\treturn module.exports.postProcessToken(yasqe, token, suggestedString);\n\t\t},\n\t\tasync: true,\n\t\tbulk: false,\n\t\tautoShow: false,\n\t\tpersistent: name,\n\t\tcallbacks: {\n\t\t\tvalidPosition: yasqe.autocompleters.notifications.show,\n\t\t\tinvalidPosition: yasqe.autocompleters.notifications.hide,\n\t\t}\n\t}\n};\n\nmodule.exports.isValidCompletionPosition = function(yasqe) {\n\tvar token = yasqe.getCompleteToken();\n\tif (token.string.indexOf(\"?\") == 0)\n\t\treturn false;\n\tvar cur = yasqe.getCursor();\n\tvar previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\n\tif (previousToken.string == \"a\")\n\t\treturn true;\n\tif (previousToken.string == \"rdf:type\")\n\t\treturn true;\n\tif (previousToken.string == \"rdfs:domain\")\n\t\treturn true;\n\tif (previousToken.string == \"rdfs:range\")\n\t\treturn true;\n\treturn false;\n};\nmodule.exports.preProcessToken = function(yasqe, token) {\n\treturn require('./utils.js').preprocessResourceTokenForCompletion(yasqe, token);\n};\nmodule.exports.postProcessToken = function(yasqe, token, suggestedString) {\n\treturn require('./utils.js').postprocessResourceTokenForCompletion(yasqe, token, suggestedString)\n};","'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\n//this is a mapping from the class names (generic ones, for compatability with codemirror themes), to what they -actually- represent\nvar tokenTypes = {\n\t\"string-2\": \"prefixed\",\n\t\"atom\": \"var\"\n};\n\nmodule.exports = function(yasqe, completerName) {\n\t//this autocompleter also fires on-change!\n\tyasqe.on(\"change\", function() {\n\t\tmodule.exports.appendPrefixIfNeeded(yasqe, completerName);\n\t});\n\n\n\treturn {\n\t\tisValidCompletionPosition: function() {\n\t\t\treturn module.exports.isValidCompletionPosition(yasqe);\n\t\t},\n\t\tget: function(token, callback) {\n\t\t\t$.get(module.exports.fetchFrom, function(data) {\n\t\t\t\tvar prefixArray = [];\n\t\t\t\tfor (var prefix in data) {\n\t\t\t\t\tif (prefix == \"bif\")\n\t\t\t\t\t\tcontinue; // skip this one! see #231\n\t\t\t\t\tvar completeString = prefix + \": <\" + data[prefix] + \">\";\n\t\t\t\t\tprefixArray.push(completeString); // the array we want to store in localstorage\n\t\t\t\t}\n\n\t\t\t\tprefixArray.sort();\n\t\t\t\tcallback(prefixArray);\n\t\t\t});\n\t\t},\n\t\tpreProcessToken: function(token) {\n\t\t\treturn module.exports.preprocessPrefixTokenForCompletion(yasqe, token)\n\t\t},\n\t\tasync: true,\n\t\tbulk: true,\n\t\tautoShow: true,\n\t\tpersistent: completerName,\n\t\tcallbacks: {\n\t\t\tpick: function() {\n\t\t\t\tyasqe.collapsePrefixes(false);\n\t\t\t}\n\t\t}\n\t};\n};\nmodule.exports.isValidCompletionPosition = function(yasqe) {\n\tvar cur = yasqe.getCursor(),\n\t\ttoken = yasqe.getTokenAt(cur);\n\n\t// not at end of line\n\tif (yasqe.getLine(cur.line).length > cur.ch)\n\t\treturn false;\n\n\tif (token.type != \"ws\") {\n\t\t// we want to complete token, e.g. when the prefix starts with an a\n\t\t// (treated as a token in itself..)\n\t\t// but we to avoid including the PREFIX tag. So when we have just\n\t\t// typed a space after the prefix tag, don't get the complete token\n\t\ttoken = yasqe.getCompleteToken();\n\t}\n\n\t// we shouldnt be at the uri part the prefix declaration\n\t// also check whether current token isnt 'a' (that makes codemirror\n\t// thing a namespace is a possiblecurrent\n\tif (!token.string.indexOf(\"a\") == 0 && $.inArray(\"PNAME_NS\", token.state.possibleCurrent) == -1)\n\t\treturn false;\n\n\t// First token of line needs to be PREFIX,\n\t// there should be no trailing text (otherwise, text is wrongly inserted\n\t// in between)\n\tvar previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\n\tif (!previousToken || previousToken.string.toUpperCase() != \"PREFIX\") return false;\n\treturn true;\n};\nmodule.exports.preprocessPrefixTokenForCompletion = function(yasqe, token) {\n\tvar previousToken = yasqe.getPreviousNonWsToken(yasqe.getCursor().line, token);\n\tif (previousToken && previousToken.string && previousToken.string.slice(-1) == \":\") {\n\t\t//combine both tokens! In this case we have the cursor at the end of line \"PREFIX bla: <\".\n\t\t//we want the token to be \"bla: <\", en not \"<\"\n\t\ttoken = {\n\t\t\tstart: previousToken.start,\n\t\t\tend: token.end,\n\t\t\tstring: previousToken.string + \" \" + token.string,\n\t\t\tstate: token.state\n\t\t};\n\t}\n\treturn token;\n};\n/**\n * Check whether typed prefix is declared. If not, automatically add declaration\n * using list from prefix.cc\n *\n * @param yasqe\n */\nmodule.exports.appendPrefixIfNeeded = function(yasqe, completerName) {\n\tif (!yasqe.autocompleters.getTrie(completerName))\n\t\treturn; // no prefixed defined. just stop\n\tif (!yasqe.options.autocompleters || yasqe.options.autocompleters.indexOf(completerName) == -1) return; //this autocompleter is disabled\n\tvar cur = yasqe.getCursor();\n\n\tvar token = yasqe.getTokenAt(cur);\n\tif (tokenTypes[token.type] == \"prefixed\") {\n\t\tvar colonIndex = token.string.indexOf(\":\");\n\t\tif (colonIndex !== -1) {\n\t\t\t// check previous token isnt PREFIX, or a '<'(which would mean we are in a uri)\n\t\t\t//\t\t\tvar firstTokenString = yasqe.getNextNonWsToken(cur.line).string.toUpperCase();\n\t\t\tvar lastNonWsTokenString = yasqe.getPreviousNonWsToken(cur.line, token).string.toUpperCase();\n\t\t\tvar previousToken = yasqe.getTokenAt({\n\t\t\t\tline: cur.line,\n\t\t\t\tch: token.start\n\t\t\t}); // needs to be null (beginning of line), or whitespace\n\t\t\tif (lastNonWsTokenString != \"PREFIX\" && (previousToken.type == \"ws\" || previousToken.type == null)) {\n\t\t\t\t// check whether it isnt defined already (saves us from looping\n\t\t\t\t// through the array)\n\t\t\t\tvar currentPrefix = token.string.substring(0, colonIndex + 1);\n\t\t\t\tvar queryPrefixes = yasqe.getPrefixesFromQuery();\n\t\t\t\tif (queryPrefixes[currentPrefix.slice(0, -1)] == null) {\n\t\t\t\t\t// ok, so it isnt added yet!\n\t\t\t\t\tvar completions = yasqe.autocompleters.getTrie(completerName).autoComplete(currentPrefix);\n\t\t\t\t\tif (completions.length > 0) {\n\t\t\t\t\t\tyasqe.addPrefixes(completions[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nmodule.exports.fetchFrom = (window.location.protocol.indexOf('http') === 0? '//': 'http://') + 'prefix.cc/popular/all.file.json'\n","'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\nmodule.exports = function(yasqe, name) {\n\treturn {\n\t\tisValidCompletionPosition: function() {\n\t\t\treturn module.exports.isValidCompletionPosition(yasqe);\n\t\t},\n\t\tget: function(token, callback) {\n\t\t\treturn require('./utils').fetchFromLov(yasqe, this, token, callback);\n\t\t},\n\t\tpreProcessToken: function(token) {\n\t\t\treturn module.exports.preProcessToken(yasqe, token)\n\t\t},\n\t\tpostProcessToken: function(token, suggestedString) {\n\t\t\treturn module.exports.postProcessToken(yasqe, token, suggestedString);\n\t\t},\n\t\tasync: true,\n\t\tbulk: false,\n\t\tautoShow: false,\n\t\tpersistent: name,\n\t\tcallbacks: {\n\t\t\tvalidPosition: yasqe.autocompleters.notifications.show,\n\t\t\tinvalidPosition: yasqe.autocompleters.notifications.hide,\n\t\t}\n\t}\n};\n\nmodule.exports.isValidCompletionPosition = function(yasqe) {\n\tvar token = yasqe.getCompleteToken();\n\tif (token.string.length == 0)\n\t\treturn false; //we want -something- to autocomplete\n\tif (token.string.indexOf(\"?\") == 0)\n\t\treturn false; // we are typing a var\n\tif ($.inArray(\"a\", token.state.possibleCurrent) >= 0)\n\t\treturn true; // predicate pos\n\tvar cur = yasqe.getCursor();\n\tvar previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\n\tif (previousToken.string == \"rdfs:subPropertyOf\")\n\t\treturn true;\n\n\t// hmm, we would like -better- checks here, e.g. checking whether we are\n\t// in a subject, and whether next item is a rdfs:subpropertyof.\n\t// difficult though... the grammar we use is unreliable when the query\n\t// is invalid (i.e. during typing), and often the predicate is not typed\n\t// yet, when we are busy writing the subject...\n\treturn false;\n};\nmodule.exports.preProcessToken = function(yasqe, token) {\n\treturn require('./utils.js').preprocessResourceTokenForCompletion(yasqe, token);\n};\nmodule.exports.postProcessToken = function(yasqe, token, suggestedString) {\n\treturn require('./utils.js').postprocessResourceTokenForCompletion(yasqe, token, suggestedString)\n};","'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n\tutils = require('./utils.js'),\n\tyutils = require('yasgui-utils');\n/**\n * Where the base class only contains functionality related to -all- completions, this class contains some utils used here and there in our autocompletions\n */\n\n\n\n/**\n * Converts rdf:type to http://.../type and converts <http://...> to http://...\n * Stores additional info such as the used namespace and prefix in the token object\n */\nvar preprocessResourceTokenForCompletion = function(yasqe, token) {\n\tvar queryPrefixes = yasqe.getPrefixesFromQuery();\n\tif (!token.string.indexOf(\"<\") == 0) {\n\t\ttoken.tokenPrefix = token.string.substring(0, token.string.indexOf(\":\") + 1);\n\n\t\tif (queryPrefixes[token.tokenPrefix.slice(0, -1)] != null) {\n\t\t\ttoken.tokenPrefixUri = queryPrefixes[token.tokenPrefix.slice(0, -1)];\n\t\t}\n\t}\n\n\ttoken.autocompletionString = token.string.trim();\n\tif (!token.string.indexOf(\"<\") == 0 && token.string.indexOf(\":\") > -1) {\n\t\t// hmm, the token is prefixed. We still need the complete uri for autocompletions. generate this!\n\t\tfor (var prefix in queryPrefixes) {\n\t\t\tif (token.string.indexOf(prefix) == 0) {\n\t\t\t\ttoken.autocompletionString = queryPrefixes[prefix];\n\t\t\t\ttoken.autocompletionString += token.string.substring(prefix.length + 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (token.autocompletionString.indexOf(\"<\") == 0) token.autocompletionString = token.autocompletionString.substring(1);\n\tif (token.autocompletionString.indexOf(\">\", token.length - 1) !== -1) token.autocompletionString = token.autocompletionString.substring(0, token.autocompletionString.length - 1);\n\treturn token;\n};\n\nvar postprocessResourceTokenForCompletion = function(yasqe, token, suggestedString) {\n\tif (token.tokenPrefix && token.autocompletionString && token.tokenPrefixUri) {\n\t\t// we need to get the suggested string back to prefixed form\n\t\tsuggestedString = token.tokenPrefix + suggestedString.substring(token.tokenPrefixUri.length);\n\t} else {\n\t\t// it is a regular uri. add '<' and '>' to string\n\t\tsuggestedString = \"<\" + suggestedString + \">\";\n\t}\n\treturn suggestedString;\n};\n\n//Use protocol relative request when served via http[s]*. Otherwise (e.g. file://, fetch via http)\nvar reqProtocol = (window.location.protocol.indexOf('http') === 0? '//': 'http://')\nvar fetchFromLov = function(yasqe, completer, token, callback) {\n\tif (!token || !token.string || token.string.trim().length == 0) {\n\t\tyasqe.autocompleters.notifications.getEl(completer)\n\t\t\t.empty()\n\t\t\t.append(\"Nothing to autocomplete yet!\");\n\t\treturn false;\n\t}\n\tvar maxResults = 50;\n\n\tvar args = {\n\t\tq: token.autocompletionString,\n\t\tpage: 1\n\t};\n\tif (completer.name == \"classes\") {\n\t\targs.type = \"class\";\n\t} else {\n\t\targs.type = \"property\";\n\t}\n\tvar results = [];\n\tvar url = \"\";\n\tvar updateUrl = function() {\n\t\turl = reqProtocol + \"lov.okfn.org/dataset/lov/api/v2/autocomplete/terms?\" + $.param(args);\n\t};\n\tupdateUrl();\n\tvar increasePage = function() {\n\t\targs.page++;\n\t\tupdateUrl();\n\t};\n\tvar doRequests = function() {\n\t\t$.get(\n\t\t\turl,\n\t\t\tfunction(data) {\n\t\t\t\tfor (var i = 0; i < data.results.length; i++) {\n\t\t\t\t\tif ($.isArray(data.results[i].uri) && data.results[i].uri.length > 0) {\n\t\t\t\t\t\tresults.push(data.results[i].uri[0]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresults.push(data.results[i].uri);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tif (results.length < data.total_results && results.length < maxResults) {\n\t\t\t\t\tincreasePage();\n\t\t\t\t\tdoRequests();\n\t\t\t\t} else {\n\t\t\t\t\t//if notification bar is there, show feedback, or close\n\t\t\t\t\tif (results.length > 0) {\n\t\t\t\t\t\tyasqe.autocompleters.notifications.hide(yasqe, completer)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tyasqe.autocompleters.notifications.getEl(completer).text(\"0 matches found...\");\n\t\t\t\t\t}\n\t\t\t\t\tcallback(results);\n\t\t\t\t\t// requests done! Don't call this function again\n\t\t\t\t}\n\t\t\t}).fail(function(jqXHR, textStatus, errorThrown) {\n\t\t\tyasqe.autocompleters.notifications.getEl(completer)\n\t\t\t\t.empty()\n\t\t\t\t.append(\"Failed fetching suggestions..\");\n\n\t\t});\n\t};\n\t//if notification bar is there, show a loader\n\tyasqe.autocompleters.notifications.getEl(completer)\n\t\t.empty()\n\t\t.append($(\"<span>Fetchting autocompletions &nbsp;</span>\"))\n\t\t.append($(yutils.svg.getElement(require('../imgs.js').loader)).addClass(\"notificationLoader\"));\n\tdoRequests();\n};\n\n\n\nmodule.exports = {\n\tfetchFromLov: fetchFromLov,\n\tpreprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\n\tpostprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion,\n};\n","'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\nmodule.exports = function(yasqe) {\n\treturn {\n\t\tisValidCompletionPosition: function() {\n\t\t\tvar token = yasqe.getTokenAt(yasqe.getCursor());\n\t\t\tif (token.type != \"ws\") {\n\t\t\t\ttoken = yasqe.getCompleteToken(token);\n\t\t\t\tif (token && token.string.indexOf(\"?\") == 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tget: function(token) {\n\t\t\tif (token.trim().length == 0) return []; //nothing to autocomplete\n\t\t\tvar distinctVars = {};\n\t\t\t//do this outside of codemirror. I expect jquery to be faster here (just finding dom elements with classnames)\n\t\t\t$(yasqe.getWrapperElement()).find(\".cm-atom\").each(function() {\n\t\t\t\tvar variable = this.innerHTML;\n\t\t\t\tif (variable.indexOf(\"?\") == 0) {\n\t\t\t\t\t//ok, lets check if the next element in the div is an atom as well. In that case, they belong together (may happen sometimes when query is not syntactically valid)\n\t\t\t\t\tvar nextEl = $(this).next();\n\t\t\t\t\tvar nextElClass = nextEl.attr('class');\n\t\t\t\t\tif (nextElClass && nextEl.attr('class').indexOf(\"cm-atom\") >= 0) {\n\t\t\t\t\t\tvariable += nextEl.text();\n\t\t\t\t\t}\n\n\t\t\t\t\t//skip single questionmarks\n\t\t\t\t\tif (variable.length <= 1) return;\n\n\t\t\t\t\t//it should match our token ofcourse\n\t\t\t\t\tif (variable.indexOf(token) !== 0) return;\n\n\t\t\t\t\t//skip exact matches\n\t\t\t\t\tif (variable == token) return;\n\n\t\t\t\t\t//store in map so we have a unique list \n\t\t\t\t\tdistinctVars[variable] = true;\n\n\n\t\t\t\t}\n\t\t\t});\n\t\t\tvar variables = [];\n\t\t\tfor (var variable in distinctVars) {\n\t\t\t\tvariables.push(variable);\n\t\t\t}\n\t\t\tvariables.sort();\n\t\t\treturn variables;\n\t\t},\n\t\tasync: false,\n\t\tbulk: false,\n\t\tautoShow: true,\n\t}\n};","var sparql = require('./sparql.js'),\n    $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\nvar quote = function(string) {\n  return \"'\" + string + \"'\";\n}\nmodule.exports = {\n  createCurlString : function(yasqe, config) {\n    var ajaxConfig = sparql.getAjaxConfig(yasqe, config);\n    var url = ajaxConfig.url;\n    if (ajaxConfig.url.indexOf('http') !== 0) {\n      //this is either a relative or absolute url, which is not supported by CURL.\n      //Add domain, schema, etc etc\n      var url = window.location.protocol + '//' + window.location.host;\n      if (ajaxConfig.url.indexOf('/') === 0) {\n        //its an absolute path\n        url += ajaxConfig.url;\n      } else {\n        //relative, so append current location to url first\n        url += window.location.pathname + ajaxConfig.url;\n      }\n    }\n    var cmds = [\n      'curl', url,\n      '-X', yasqe.options.sparql.requestMethod\n    ];\n    if (yasqe.options.sparql.requestMethod == 'POST') {\n      cmds.push('--data ' + quote($.param(ajaxConfig.data)));\n    }\n    for (var header in ajaxConfig.headers) {\n      cmds.push('-H ' + quote(header + ': ' + ajaxConfig.headers[header]));\n    }\n    return cmds.join(' ');\n  }\n}\n","/**\n * The default options of YASQE (check the CodeMirror documentation for even\n * more options, such as disabling line numbers, or changing keyboard shortcut\n * keys). Either change the default options by setting YASQE.defaults, or by\n * passing your own options as second argument to the YASQE constructor\n */\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n\tYASQE = require('./main.js');\nYASQE.defaults = $.extend(true, {}, YASQE.defaults, {\n\tmode: \"sparql11\",\n\t/**\n\t * Query string\n\t */\n\tvalue: \"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nSELECT * WHERE {\\n  ?sub ?pred ?obj .\\n} \\nLIMIT 10\",\n\thighlightSelectionMatches: {\n\t\tshowToken: /\\w/\n\t},\n\ttabMode: \"indent\",\n\tlineNumbers: true,\n\tlineWrapping: true,\n\tbackdrop: false,\n\tfoldGutter: {\n\t\trangeFinder: new YASQE.fold.combine(YASQE.fold.brace, YASQE.fold.prefix)\n\t},\n\tcollapsePrefixesOnLoad: false,\n\tgutters: [\"gutterErrorBar\", \"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\n\tmatchBrackets: true,\n\tfixedGutter: true,\n\tsyntaxErrorCheck: true,\n\t/**\n\t * Extra shortcut keys. Check the CodeMirror manual on how to add your own\n\t *\n\t * @property extraKeys\n\t * @type object\n\t */\n\textraKeys: {\n\t\t//\t\t\t\t\t\"Ctrl-Space\" : function(yasqe) {\n\t\t//\t\t\t\t\t\tYASQE.autoComplete(yasqe);\n\t\t//\t\t\t\t\t},\n\t\t\"Ctrl-Space\": YASQE.autoComplete,\n\n\t\t\"Cmd-Space\": YASQE.autoComplete,\n\t\t\"Ctrl-D\": YASQE.deleteLine,\n\t\t\"Ctrl-K\": YASQE.deleteLine,\n\t\t\"Cmd-D\": YASQE.deleteLine,\n\t\t\"Cmd-K\": YASQE.deleteLine,\n\t\t\"Ctrl-/\": YASQE.commentLines,\n\t\t\"Cmd-/\": YASQE.commentLines,\n\t\t\"Ctrl-Alt-Down\": YASQE.copyLineDown,\n\t\t\"Ctrl-Alt-Up\": YASQE.copyLineUp,\n\t\t\"Cmd-Alt-Down\": YASQE.copyLineDown,\n\t\t\"Cmd-Alt-Up\": YASQE.copyLineUp,\n\t\t\"Shift-Ctrl-F\": YASQE.doAutoFormat,\n\t\t\"Shift-Cmd-F\": YASQE.doAutoFormat,\n\t\t\"Ctrl-]\": YASQE.indentMore,\n\t\t\"Cmd-]\": YASQE.indentMore,\n\t\t\"Ctrl-[\": YASQE.indentLess,\n\t\t\"Cmd-[\": YASQE.indentLess,\n\t\t\"Ctrl-S\": YASQE.storeQuery,\n\t\t\"Cmd-S\": YASQE.storeQuery,\n\t\t\"Ctrl-Enter\": YASQE.executeQuery,\n\t\t\"Cmd-Enter\": YASQE.executeQuery,\n\t\t\"F11\": function(yasqe) {\n\t\t\tyasqe.setOption(\"fullScreen\", !yasqe.getOption(\"fullScreen\"));\n\t\t},\n\t\t\"Esc\": function(yasqe) {\n\t\t\tif (yasqe.getOption(\"fullScreen\")) yasqe.setOption(\"fullScreen\", false);\n\t\t}\n\t},\n\tcursorHeight: 0.9,\n\n\n\t/**\n\t * Show a button with which users can create a link to this query. Set this value to null to disable this functionality.\n\t * By default, this feature is enabled, and the only the query value is appended to the link.\n\t * ps. This function should return an object which is parseable by jQuery.param (http://api.jquery.com/jQuery.param/)\n\t */\n\tcreateShareLink: YASQE.createShareLink,\n\n\tcreateShortLink: null,\n\n\t/**\n\t * Consume links shared by others, by checking the url for arguments coming from a query link. Defaults by only checking the 'query=' argument in the url\n\t */\n\tconsumeShareLink: YASQE.consumeShareLink,\n\n\n\n\n\t/**\n\t * Change persistency settings for the YASQE query value. Setting the values\n\t * to null, will disable persistancy: nothing is stored between browser\n\t * sessions Setting the values to a string (or a function which returns a\n\t * string), will store the query in localstorage using the specified string.\n\t * By default, the ID is dynamically generated using the closest dom ID, to avoid collissions when using multiple YASQE items on one\n\t * page\n\t *\n\t * @type function|string\n\t */\n\tpersistent: function(yasqe) {\n\t\treturn \"yasqe_\" + $(yasqe.getWrapperElement()).closest('[id]').attr('id') + \"_queryVal\";\n\t},\n\n\n\t/**\n\t * Settings for querying sparql endpoints\n\t */\n\tsparql: {\n\t\tqueryName: function(yasqe) {return yasqe.getQueryMode()},\n\t\tshowQueryButton: false,\n\n\t\t/**f\n\t\t * Endpoint to query\n\t\t *\n\t\t * @property sparql.endpoint\n\t\t * @type String|function\n\t\t */\n\t\tendpoint: \"http://dbpedia.org/sparql\",\n\t\t/**\n\t\t * Request method via which to access SPARQL endpoint\n\t\t *\n\t\t * @property sparql.requestMethod\n\t\t * @type String|function\n\t\t */\n\t\trequestMethod: \"POST\",\n\n\t\t/**\n\t\t * @type String|function\n\t\t */\n\t\tacceptHeaderGraph: \"text/turtle,*/*;q=0.9\",\n\t\t/**\n\t\t * @type String|function\n\t\t */\n\t\tacceptHeaderSelect: \"application/sparql-results+json,*/*;q=0.9\",\n\t\t/**\n\t\t * @type String|function\n\t\t */\n\t\tacceptHeaderUpdate: \"text/plain,*/*;q=0.9\",\n\n\t\t/**\n\t\t * Named graphs to query.\n\t\t */\n\t\tnamedGraphs: [],\n\t\t/**\n\t\t * Default graphs to query.\n\t\t */\n\t\tdefaultGraphs: [],\n\n\t\t/**\n\t\t * Additional request arguments. Add them in the form: {name: \"name\", value: \"value\"}\n\t\t */\n\t\targs: [],\n\n\t\t/**\n\t\t * Additional request headers\n\t\t */\n\t\theaders: {},\n\n\t\tgetQueryForAjax: null,\n\t\t/**\n\t\t * Set of ajax callbacks\n\t\t */\n\t\tcallbacks: {\n\t\t\tbeforeSend: null,\n\t\t\tcomplete: null,\n\t\t\terror: null,\n\t\t\tsuccess: null\n\t\t},\n\t\thandlers: {} //keep here for backwards compatability\n\t},\n});\n","//this is the entry-point for browserify.\n//the current browserify version does not support require-ing js files which are used as entry-point\n//this way, we can still require our main.js file\nmodule.exports = require('./main.js');","'use strict';\nmodule.exports = {\n\tquery: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 80 80\" enable-background=\"new 0 0 80 80\" xml:space=\"preserve\"><g ></g><g >\t<path d=\"M64.622,2.411H14.995c-6.627,0-12,5.373-12,12v49.897c0,6.627,5.373,12,12,12h49.627c6.627,0,12-5.373,12-12V14.411   C76.622,7.783,71.249,2.411,64.622,2.411z M24.125,63.906V15.093L61,39.168L24.125,63.906z\"/></g></svg>',\n\tqueryInvalid: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"0 0 73.627 73.897\"   enable-background=\"new 0 0 80 80\"   xml:space=\"preserve\"      inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"warning.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"1855\"     inkscape:window-height=\"1056\"          showgrid=\"false\"     inkscape:zoom=\"3.1936344\"     inkscape:cx=\"36.8135\"     inkscape:cy=\"36.9485\"     inkscape:window-x=\"2625\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"1\"     inkscape:current-layer=\"svg2\" /><g     transform=\"translate(-2.995,-2.411)\"      /><g     transform=\"translate(-2.995,-2.411)\"     ><path       d=\"M 64.622,2.411 H 14.995 c -6.627,0 -12,5.373 -12,12 v 49.897 c 0,6.627 5.373,12 12,12 h 49.627 c 6.627,0 12,-5.373 12,-12 V 14.411 c 0,-6.628 -5.373,-12 -12,-12 z M 24.125,63.906 V 15.093 L 61,39.168 24.125,63.906 z\"       inkscape:connector-curvature=\"0\"        /></g><path     d=\"M 66.129381,65.903784 H 49.769875 c -1.64721,0 -2.889385,-0.581146 -3.498678,-1.63595 -0.609293,-1.055608 -0.491079,-2.422161 0.332391,-3.848223 l 8.179753,-14.167069 c 0.822934,-1.42633 1.9477,-2.211737 3.166018,-2.211737 1.218319,0 2.343086,0.785407 3.166019,2.211737 l 8.179751,14.167069 c 0.823472,1.426062 0.941686,2.792615 0.33239,3.848223 -0.609023,1.054804 -1.851197,1.63595 -3.498138,1.63595 z M 59.618815,60.91766 c 0,-0.850276 -0.68944,-1.539719 -1.539717,-1.539719 -0.850276,0 -1.539718,0.689443 -1.539718,1.539719 0,0.850277 0.689442,1.539718 1.539718,1.539718 0.850277,0 1.539717,-0.689441 1.539717,-1.539718 z m 0.04155,-9.265919 c 0,-0.873061 -0.707939,-1.580998 -1.580999,-1.580998 -0.873061,0 -1.580999,0.707937 -1.580999,1.580998 l 0.373403,5.610965 h 0.0051 c 0.05415,0.619747 0.568548,1.10761 1.202504,1.10761 0.586239,0 1.075443,-0.415756 1.188563,-0.968489 0.0092,-0.04476 0.0099,-0.09248 0.01392,-0.138854 h 0.01072 l 0.367776,-5.611232 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#aa8800\" /></svg>',\n\tdownload: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" baseProfile=\"tiny\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" xml:space=\"preserve\"><g ></g><g >\t<path fill-rule=\"evenodd\" fill=\"#000000\" d=\"M88,84v-2c0-2.961-0.859-4-4-4H16c-2.961,0-4,0.98-4,4v2c0,3.102,1.039,4,4,4h68   C87.02,88,88,87.039,88,84z M58,12H42c-5,0-6,0.941-6,6v22H16l34,34l34-34H64V18C64,12.941,62.939,12,58,12z\"/></g></svg>',\n\tshare: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"  x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" style=\"enable-background:new 0 0 100 100;\" xml:space=\"preserve\"><path d=\"M36.764,50c0,0.308-0.07,0.598-0.088,0.905l32.247,16.119c2.76-2.338,6.293-3.797,10.195-3.797  C87.89,63.228,95,70.338,95,79.109C95,87.89,87.89,95,79.118,95c-8.78,0-15.882-7.11-15.882-15.891c0-0.316,0.07-0.598,0.088-0.905  L31.077,62.085c-2.769,2.329-6.293,3.788-10.195,3.788C12.11,65.873,5,58.771,5,50c0-8.78,7.11-15.891,15.882-15.891  c3.902,0,7.427,1.468,10.195,3.797l32.247-16.119c-0.018-0.308-0.088-0.598-0.088-0.914C63.236,12.11,70.338,5,79.118,5  C87.89,5,95,12.11,95,20.873c0,8.78-7.11,15.891-15.882,15.891c-3.911,0-7.436-1.468-10.195-3.806L36.676,49.086  C36.693,49.394,36.764,49.684,36.764,50z\"/></svg>',\n\twarning: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   x=\"0px\"   y=\"0px\"   viewBox=\"0 0 66.399998 66.399998\"   enable-background=\"new 0 0 69.3 69.3\"   xml:space=\"preserve\"   height=\"100%\"   width=\"100%\"   inkscape:version=\"0.48.4 r9939\"   ><g      transform=\"translate(-1.5,-1.5)\"     style=\"fill:#ff0000\"><path       d=\"M 34.7,1.5 C 16.4,1.5 1.5,16.4 1.5,34.7 1.5,53 16.4,67.9 34.7,67.9 53,67.9 67.9,53 67.9,34.7 67.9,16.4 53,1.5 34.7,1.5 z m 0,59.4 C 20.2,60.9 8.5,49.1 8.5,34.7 8.5,20.2 20.3,8.5 34.7,8.5 c 14.4,0 26.2,11.8 26.2,26.2 0,14.4 -11.8,26.2 -26.2,26.2 z\"      inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /><path       d=\"m 34.6,47.1 c -1.4,0 -2.5,0.5 -3.5,1.5 -0.9,1 -1.4,2.2 -1.4,3.6 0,1.6 0.5,2.8 1.5,3.8 1,0.9 2.1,1.3 3.4,1.3 1.3,0 2.4,-0.5 3.4,-1.4 1,-0.9 1.5,-2.2 1.5,-3.7 0,-1.4 -0.5,-2.6 -1.4,-3.6 -0.9,-1 -2.1,-1.5 -3.5,-1.5 z\"       inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /><path       d=\"m 34.8,13.9 c -1.5,0 -2.8,0.5 -3.7,1.6 -0.9,1 -1.4,2.4 -1.4,4.2 0,1.1 0.1,2.9 0.2,5.6 l 0.8,13.1 c 0.2,1.8 0.4,3.2 0.9,4.1 0.5,1.2 1.5,1.8 2.9,1.8 1.3,0 2.3,-0.7 2.9,-1.9 0.5,-1 0.7,-2.3 0.9,-4 L 39.4,25 c 0.1,-1.3 0.2,-2.5 0.2,-3.8 0,-2.2 -0.3,-3.9 -0.8,-5.1 -0.5,-1 -1.6,-2.2 -4,-2.2 z\"       inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /></g></svg>',\n\tfullscreen: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"      x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"5 -10 74.074074 100\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"   inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"noun_2186_cc.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"640\"     inkscape:window-height=\"480\"          showgrid=\"false\"     fit-margin-top=\"0\"     fit-margin-left=\"0\"     fit-margin-right=\"0\"     fit-margin-bottom=\"0\"     inkscape:zoom=\"2.36\"     inkscape:cx=\"44.101509\"     inkscape:cy=\"31.481481\"     inkscape:window-x=\"65\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"0\"     inkscape:current-layer=\"Layer_1\" /><path     d=\"m -7.962963,-10 v 38.889 l 16.667,-16.667 16.667,16.667 5.555,-5.555 -16.667,-16.667 16.667,-16.667 h -38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 92.037037,-10 v 38.889 l -16.667,-16.667 -16.666,16.667 -5.556,-5.555 16.666,-16.667 -16.666,-16.667 h 38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"M -7.962963,90 V 51.111 l 16.667,16.666 16.667,-16.666 5.555,5.556 -16.667,16.666 16.667,16.667 h -38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"M 92.037037,90 V 51.111 l -16.667,16.666 -16.666,-16.666 -5.556,5.556 16.666,16.666 -16.666,16.667 h 38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /></svg>',\n\tsmallscreen: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"      x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"5 -10 74.074074 100\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"   inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"noun_2186_cc.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"1855\"     inkscape:window-height=\"1056\"          showgrid=\"false\"     fit-margin-top=\"0\"     fit-margin-left=\"0\"     fit-margin-right=\"0\"     fit-margin-bottom=\"0\"     inkscape:zoom=\"2.36\"     inkscape:cx=\"44.101509\"     inkscape:cy=\"31.481481\"     inkscape:window-x=\"65\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"1\"     inkscape:current-layer=\"Layer_1\" /><path     d=\"m 30.926037,28.889 0,-38.889 -16.667,16.667 -16.667,-16.667 -5.555,5.555 16.667,16.667 -16.667,16.667 38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 53.148037,28.889 0,-38.889 16.667,16.667 16.666,-16.667 5.556,5.555 -16.666,16.667 16.666,16.667 -38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 30.926037,51.111 0,38.889 -16.667,-16.666 -16.667,16.666 -5.555,-5.556 16.667,-16.666 -16.667,-16.667 38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 53.148037,51.111 0,38.889 16.667,-16.666 16.666,16.666 5.556,-5.556 -16.666,-16.666 16.666,-16.667 -38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /></svg>',\n};\n","'use strict';\n//make sure any console statements\nwindow.console = window.console || {\n\t\"log\": function() {}\n};\n\n/**\n * Load libraries\n */\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n\tCodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(),\n\tutils = require('./utils.js'),\n\tyutils = require('yasgui-utils'),\n\timgs = require('./imgs.js');\n\nrequire(\"../lib/deparam.js\");\nrequire('codemirror/addon/fold/foldcode.js');\nrequire('codemirror/addon/fold/foldgutter.js');\nrequire('codemirror/addon/fold/xml-fold.js');\nrequire('codemirror/addon/fold/brace-fold.js');\nrequire('./prefixFold.js');\nrequire('codemirror/addon/hint/show-hint.js');\nrequire('codemirror/addon/search/searchcursor.js');\nrequire('codemirror/addon/edit/matchbrackets.js');\nrequire('codemirror/addon/runmode/runmode.js');\nrequire('codemirror/addon/display/fullscreen.js');\nrequire('../lib/grammar/tokenizer.js');\n\n\n\n/**\n * Main YASQE constructor. Pass a DOM element as argument to append the editor to, and (optionally) pass along config settings (see the YASQE.defaults object below, as well as the regular CodeMirror documentation, for more information on configurability)\n *\n * @constructor\n * @param {DOM-Element} parent element to append editor to.\n * @param {object} settings\n * @class YASQE\n * @return {doc} YASQE document\n */\nvar root = module.exports = function(parent, config) {\n\tvar rootEl = $(\"<div>\", {\n\t\tclass: 'yasqe'\n\t}).appendTo($(parent));\n\tconfig = extendConfig(config);\n\tvar yasqe = extendCmInstance(CodeMirror(rootEl[0], config));\n\tpostProcessCmElement(yasqe);\n\treturn yasqe;\n};\n\n/**\n * Extend config object, which we will pass on to the CM constructor later on.\n * Need this, to make sure our own 'onBlur' etc events do not get overwritten by\n * people who add their own onblur events to the config Additionally, need this\n * to include the CM defaults ourselves. CodeMirror has a method for including\n * defaults, but we can't rely on that one: it assumes flat config object, where\n * we have nested objects (e.g. the persistency option)\n *\n * @private\n */\nvar extendConfig = function(config) {\n\tvar extendedConfig = $.extend(true, {}, root.defaults, config);\n\n\t// I know, codemirror deals with  default options as well.\n\t//However, it does not do this recursively (i.e. the persistency option)\n\n\n\treturn extendedConfig;\n};\n/**\n * Add extra functions to the CM document (i.e. the codemirror instantiated\n * object)\n *\n * @private\n */\nvar extendCmInstance = function(yasqe) {\n\t//instantiate autocompleters\n\tyasqe.autocompleters = require('./autocompleters/autocompleterBase.js')(root, yasqe);\n\tif (yasqe.options.autocompleters) {\n\t\tyasqe.options.autocompleters.forEach(function(name) {\n\t\t\tif (root.Autocompleters[name]) yasqe.autocompleters.init(name, root.Autocompleters[name]);\n\t\t})\n\t}\n\tyasqe.lastQueryDuration = null;\n\tyasqe.getCompleteToken = function(token, cur) {\n\t\treturn require('./tokenUtils.js').getCompleteToken(yasqe, token, cur);\n\t};\n\tyasqe.getPreviousNonWsToken = function(line, token) {\n\t\treturn require('./tokenUtils.js').getPreviousNonWsToken(yasqe, line, token);\n\t};\n\tyasqe.getNextNonWsToken = function(lineNumber, charNumber) {\n\t\treturn require('./tokenUtils.js').getNextNonWsToken(yasqe, lineNumber, charNumber);\n\t};\n\tyasqe.collapsePrefixes = function(collapse) {\n\t\tif (collapse === undefined) collapse = true;\n\t\tyasqe.foldCode(require('./prefixFold.js').findFirstPrefixLine(yasqe), root.fold.prefix, (collapse ? \"fold\" : \"unfold\"));\n\t};\n\tvar backdrop = null;\n\tvar animateSpeed = null;\n\tyasqe.setBackdrop = function(show) {\n\n\n\t\tif (yasqe.options.backdrop || yasqe.options.backdrop === 0 || yasqe.options.backdrop === '0') {\n\t\t\tif (animateSpeed === null) {\n\t\t\t\tanimateSpeed = +yasqe.options.backdrop;\n\t\t\t\tif (animateSpeed === 1) {\n\t\t\t\t\t//ah, yasqe.options.backdrop was 'true'. Set this to default animate speed 400\n\t\t\t\t\tanimateSpeed = 400;\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tif (!backdrop) {\n\t\t\t\tbackdrop = $('<div>', {\n\t\t\t\t\t\tclass: 'backdrop'\n\t\t\t\t\t})\n\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t$(this).hide();\n\t\t\t\t\t})\n\t\t\t\t\t.insertAfter($(yasqe.getWrapperElement()));\n\t\t\t}\n\t\t\tif (show) {\n\t\t\t\tbackdrop.show(animateSpeed);\n\t\t\t} else {\n\t\t\t\tbackdrop.hide(animateSpeed);\n\t\t\t}\n\t\t}\n\t};\n\t/**\n\t * Execute query. Pass a callback function, or a configuration object (see\n\t * default settings below for possible values) I.e., you can change the\n\t * query configuration by either changing the default settings, changing the\n\t * settings of this document, or by passing query settings to this function\n\t *\n\t * @method doc.query\n\t * @param function|object\n\t */\n\tyasqe.query = function(callbackOrConfig) {\n\t\troot.executeQuery(yasqe, callbackOrConfig);\n\t};\n\n\tyasqe.getUrlArguments = function(config) {\n\t\treturn root.getUrlArguments(yasqe, config);\n\t};\n\n\t/**\n\t * Fetch defined prefixes from query string\n\t *\n\t * @method doc.getPrefixesFromQuery\n\t * @return object\n\t */\n\tyasqe.getPrefixesFromQuery = function() {\n\t\treturn require('./prefixUtils.js').getPrefixesFromQuery(yasqe);\n\t};\n\n\tyasqe.addPrefixes = function(prefixes) {\n\t\treturn require('./prefixUtils.js').addPrefixes(yasqe, prefixes);\n\t};\n\tyasqe.removePrefixes = function(prefixes) {\n\t\treturn require('./prefixUtils.js').removePrefixes(yasqe, prefixes);\n\t};\n\n\tyasqe.getValueWithoutComments = function() {\n\t\tvar cleanedQuery = \"\";\n\t\troot.runMode(yasqe.getValue(), \"sparql11\", function(stringVal, className) {\n\t\t\tif (className != \"comment\") {\n\t\t\t\tcleanedQuery += stringVal;\n\t\t\t}\n\t\t});\n\t\treturn cleanedQuery;\n\t};\n\t/**\n\t * Fetch the query type (e.g., SELECT||DESCRIBE||INSERT||DELETE||ASK||CONSTRUCT)\n\t *\n\t * @method doc.getQueryType\n\t * @return string\n\t *\n\t */\n\tyasqe.getQueryType = function() {\n\t\treturn yasqe.queryType;\n\t};\n\t/**\n\t * Fetch the query mode: 'query' or 'update'\n\t *\n\t * @method doc.getQueryMode\n\t * @return string\n\t *\n\t */\n\tyasqe.getQueryMode = function() {\n\t\tvar type = yasqe.getQueryType();\n\t\tif (type == \"INSERT\" || type == \"DELETE\" || type == \"LOAD\" || type == \"CLEAR\" || type == \"CREATE\" || type == \"DROP\" || type == \"COPY\" || type == \"MOVE\" || type == \"ADD\") {\n\t\t\treturn \"update\";\n\t\t} else {\n\t\t\treturn \"query\";\n\t\t}\n\n\t};\n\n\tyasqe.setCheckSyntaxErrors = function(isEnabled) {\n\t\tyasqe.options.syntaxErrorCheck = isEnabled;\n\t\tcheckSyntax(yasqe);\n\t};\n\n\tyasqe.enableCompleter = function(name) {\n\t\taddCompleterToSettings(yasqe.options, name);\n\t\tif (root.Autocompleters[name]) yasqe.autocompleters.init(name, root.Autocompleters[name]);\n\t};\n\tyasqe.disableCompleter = function(name) {\n\t\tremoveCompleterFromSettings(yasqe.options, name);\n\t};\n\treturn yasqe;\n};\n\nvar addCompleterToSettings = function(settings, name) {\n\tif (!settings.autocompleters) settings.autocompleters = [];\n\tsettings.autocompleters.push(name);\n};\nvar removeCompleterFromSettings = function(settings, name) {\n\tif (typeof settings.autocompleters == \"object\") {\n\t\tvar index = $.inArray(name, settings.autocompleters);\n\t\tif (index >= 0) {\n\t\t\tsettings.autocompleters.splice(index, 1);\n\t\t\tremoveCompleterFromSettings(settings, name); //just in case. suppose 1 completer is listed twice\n\t\t}\n\t}\n};\nvar postProcessCmElement = function(yasqe) {\n\t/**\n\t * Set doc value\n\t */\n\tvar storageId = utils.getPersistencyId(yasqe, yasqe.options.persistent);\n\tif (storageId) {\n\t\tvar valueFromStorage = yutils.storage.get(storageId);\n\t\tif (valueFromStorage)\n\t\t\tyasqe.setValue(valueFromStorage);\n\t}\n\n\troot.drawButtons(yasqe);\n\n\t/**\n\t * Add event handlers\n\t */\n\tyasqe.on('blur', function(yasqe, eventInfo) {\n\t\troot.storeQuery(yasqe);\n\t});\n\tyasqe.on('change', function(yasqe, eventInfo) {\n\t\tcheckSyntax(yasqe);\n\t\troot.updateQueryButton(yasqe);\n\t\troot.positionButtons(yasqe);\n\t});\n\tyasqe.on('changes', function() {\n\t\t//e.g. on paste\n\t\tcheckSyntax(yasqe);\n\t\troot.updateQueryButton(yasqe);\n\t\troot.positionButtons(yasqe);\n\t});\n\n\tyasqe.on('cursorActivity', function(yasqe, eventInfo) {\n\t\tupdateButtonsTransparency(yasqe);\n\t});\n\tyasqe.prevQueryValid = false;\n\tcheckSyntax(yasqe); // on first load, check as well (our stored or default query might be incorrect)\n\troot.positionButtons(yasqe);\n\n\t$(yasqe.getWrapperElement()).on('mouseenter', '.cm-atom', function() {\n\t\tvar matchText = $(this).text();\n\t\t$(yasqe.getWrapperElement()).find('.cm-atom').filter(function() {\n\t\t\treturn $(this).text() === matchText;\n\t\t}).addClass('matchingVar');\n\t}).on('mouseleave', '.cm-atom', function() {\n\t\t$(yasqe.getWrapperElement()).find('.matchingVar').removeClass('matchingVar');\n\t});\n\t/**\n\t * check url args and modify yasqe settings if needed\n\t */\n\tif (yasqe.options.consumeShareLink) {\n\t\tyasqe.options.consumeShareLink(yasqe, getUrlParams());\n\t\t//and: add a hash listener!\n\t\twindow.addEventListener(\"hashchange\", function() {\n\t\t\tyasqe.options.consumeShareLink(yasqe, getUrlParams());\n\t\t});\n\t}\n\tif (yasqe.options.collapsePrefixesOnLoad) yasqe.collapsePrefixes(true);\n};\n\n/**\n * get url params. first try fetching using hash. If it fails, try the regular query parameters (for backwards compatability)\n */\nvar getUrlParams = function() {\n\t//first try hash\n\tvar urlParams = null;\n\tif (window.location.hash.length > 1) {\n\t\t//firefox does some decoding if we're using window.location.hash (e.g. the + sign in contentType settings)\n\t\t//Don't want this. So simply get the hash string ourselves\n\t\turlParams = $.deparam(location.href.split(\"#\")[1])\n\t}\n\tif ((!urlParams || !('query' in urlParams)) && window.location.search.length > 1) {\n\t\t//ok, then just try regular url params\n\t\turlParams = $.deparam(window.location.search.substring(1));\n\t}\n\treturn urlParams;\n};\n\n\n\n/**\n * Update transparency of buttons. Increase transparency when cursor is below buttons\n */\n\nvar updateButtonsTransparency = function(yasqe) {\n\tyasqe.cursor = $(\".CodeMirror-cursor\");\n\tif (yasqe.buttons && yasqe.buttons.is(\":visible\") && yasqe.cursor.length > 0) {\n\t\tif (utils.elementsOverlap(yasqe.cursor, yasqe.buttons)) {\n\t\t\tyasqe.buttons.find(\"svg\").attr(\"opacity\", \"0.2\");\n\t\t} else {\n\t\t\tyasqe.buttons.find(\"svg\").attr(\"opacity\", \"1.0\");\n\t\t}\n\t}\n};\n\n\n\n\n\n\n\n\n\nvar clearError = null;\nvar checkSyntax = function(yasqe, deepcheck) {\n\n\tyasqe.queryValid = true;\n\n\tyasqe.clearGutter(\"gutterErrorBar\");\n\n\tvar state = null;\n\tfor (var l = 0; l < yasqe.lineCount(); ++l) {\n\t\tvar precise = false;\n\t\tif (!yasqe.prevQueryValid) {\n\t\t\t// we don't want cached information in this case, otherwise the\n\t\t\t// previous error sign might still show up,\n\t\t\t// even though the syntax error might be gone already\n\t\t\tprecise = true;\n\t\t}\n\n\t\tvar token = yasqe.getTokenAt({\n\t\t\tline: l,\n\t\t\tch: yasqe.getLine(l).length\n\t\t}, precise);\n\t\tvar state = token.state;\n\t\tyasqe.queryType = state.queryType;\n\t\tif (state.OK == false) {\n\t\t\tif (!yasqe.options.syntaxErrorCheck) {\n\t\t\t\t//the library we use already marks everything as being an error. Overwrite this class attribute.\n\t\t\t\t$(yasqe.getWrapperElement).find(\".sp-error\").css(\"color\", \"black\");\n\t\t\t\t//we don't want to gutter error, so return\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar warningEl = yutils.svg.getElement(imgs.warning);\n\t\t\tif (state.possibleCurrent && state.possibleCurrent.length > 0) {\n\t\t\t\t//\t\t\t\twarningEl.style.zIndex = \"99999999\";\n\t\t\t\trequire('./tooltip')(yasqe, warningEl, function() {\n\t\t\t\t\tvar expectedEncoded = [];\n\t\t\t\t\tstate.possibleCurrent.forEach(function(expected) {\n\t\t\t\t\t\texpectedEncoded.push(\"<strong style='text-decoration:underline'>\" + $(\"<div/>\").text(expected).html() + \"</strong>\");\n\t\t\t\t\t});\n\t\t\t\t\treturn \"This line is invalid. Expected: \" + expectedEncoded.join(\", \");\n\t\t\t\t});\n\t\t\t}\n\t\t\twarningEl.style.marginTop = \"2px\";\n\t\t\twarningEl.style.marginLeft = \"2px\";\n\t\t\twarningEl.className = 'parseErrorIcon';\n\t\t\tyasqe.setGutterMarker(l, \"gutterErrorBar\", warningEl);\n\n\t\t\tyasqe.queryValid = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tyasqe.prevQueryValid = yasqe.queryValid;\n\tif (deepcheck) {\n\t\tif (state != null && state.stack != undefined) {\n\t\t\tvar stack = state.stack,\n\t\t\t\tlen = state.stack.length;\n\t\t\t// Because incremental parser doesn't receive end-of-input\n\t\t\t// it can't clear stack, so we have to check that whatever\n\t\t\t// is left on the stack is nillable\n\t\t\tif (len > 1)\n\t\t\t\tyasqe.queryValid = false;\n\t\t\telse if (len == 1) {\n\t\t\t\tif (stack[0] != \"solutionModifier\" && stack[0] != \"?limitOffsetClauses\" && stack[0] != \"?offsetClause\")\n\t\t\t\t\tyasqe.queryValid = false;\n\t\t\t}\n\t\t}\n\t}\n};\n/**\n * Static Utils\n */\n// first take all CodeMirror references and store them in the YASQE object\n$.extend(root, CodeMirror);\n\n\n//add registrar for autocompleters\nroot.Autocompleters = {};\nroot.registerAutocompleter = function(name, constructor) {\n\troot.Autocompleters[name] = constructor;\n\taddCompleterToSettings(root.defaults, name);\n}\n\nroot.autoComplete = function(yasqe) {\n\t//this function gets called when pressing the keyboard shortcut. I.e., autoShow = false\n\tyasqe.autocompleters.autoComplete(false);\n};\n//include the autocompleters we provide out-of-the-box\nroot.registerAutocompleter(\"prefixes\", require(\"./autocompleters/prefixes.js\"));\nroot.registerAutocompleter(\"properties\", require(\"./autocompleters/properties.js\"));\nroot.registerAutocompleter(\"classes\", require(\"./autocompleters/classes.js\"));\nroot.registerAutocompleter(\"variables\", require(\"./autocompleters/variables.js\"));\n\n\nroot.positionButtons = function(yasqe) {\n\tvar scrollBar = $(yasqe.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\n\tvar offset = 0;\n\tif (scrollBar.is(\":visible\")) {\n\t\toffset = scrollBar.outerWidth();\n\t}\n\tif (yasqe.buttons.is(\":visible\")) yasqe.buttons.css(\"right\", offset + 4);\n};\n\n/**\n * Create a share link\n *\n * @method YASQE.createShareLink\n * @param {doc} YASQE document\n * @default {query: doc.getValue()}\n * @return object\n */\nroot.createShareLink = function(yasqe) {\n\t//extend existing link, so first fetch current arguments\n\tvar urlParams = {};\n\tif (window.location.hash.length > 1) urlParams = $.deparam(window.location.hash.substring(1));\n\turlParams['query'] = yasqe.getValue();\n\treturn urlParams;\n};\nroot.getAsCurl = function(yasqe, ajaxConfig) {\n\tvar curl = require('./curl.js');\n\treturn curl.createCurlString(yasqe, ajaxConfig);\n};\n/**\n * Consume the share link, by parsing the document URL for possible yasqe arguments, and setting the appropriate values in the YASQE doc\n *\n * @method YASQE.consumeShareLink\n * @param {doc} YASQE document\n */\nroot.consumeShareLink = function(yasqe, urlParams) {\n\tif (urlParams && urlParams.query) {\n\t\tyasqe.setValue(urlParams.query);\n\t}\n};\nroot.drawButtons = function(yasqe) {\n\tyasqe.buttons = $(\"<div class='yasqe_buttons'></div>\").appendTo($(yasqe.getWrapperElement()));\n\n\t/**\n\t * draw share link button\n\t */\n\tif (yasqe.options.createShareLink) {\n\n\t\tvar svgShare = $(yutils.svg.getElement(imgs.share));\n\t\tsvgShare.click(function(event) {\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tvar popup = $(\"<div class='yasqe_sharePopup'></div>\").appendTo(yasqe.buttons);\n\t\t\t\t$('html').click(function() {\n\t\t\t\t\tif (popup) popup.remove();\n\t\t\t\t});\n\n\t\t\t\tpopup.click(function(event) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t});\n\t\t\t\tvar $input = $(\"<input>\").val(location.protocol + '//' + location.host + location.pathname + location.search + \"#\" + $.param(yasqe.options.createShareLink(yasqe)));\n\n\t\t\t\t$input.focus(function() {\n\t\t\t\t\tvar $this = $(this);\n\t\t\t\t\t$this.select();\n\n\t\t\t\t\t// Work around Chrome's little problem\n\t\t\t\t\t$this.mouseup(function() {\n\t\t\t\t\t\t// Prevent further mouseup intervention\n\t\t\t\t\t\t$this.unbind(\"mouseup\");\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tpopup.empty().append($('<div>', {class:'inputWrapper'}).append($input));\n\t\t\t\tif (yasqe.options.createShortLink) {\n\t\t\t\t\tpopup.addClass('enableShort');\n\t\t\t\t\t$('<button>Shorten</button>')\n\t\t\t\t\t\t.addClass('yasqe_btn yasqe_btn-sm yasqe_btn-primary')\n\t\t\t\t\t\t.click(function() {\n\t\t\t\t\t\t\t$(this).parent().find('button').attr('disabled', 'disabled');\n\t\t\t\t\t\t\tyasqe.options.createShortLink($input.val(), function(errString, shortLink) {\n\t\t\t\t\t\t\t\tif (errString) {\n\t\t\t\t\t\t\t\t\t$input.remove();\n\t\t\t\t\t\t\t\t\tpopup.find('.inputWrapper').append($('<span>', {class:\"shortlinkErr\"}).text(errString));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$input.val(shortLink).focus();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}).appendTo(popup);\n\t\t\t\t}\n\t\t\t\t$('<button>CURL</button>')\n\t\t\t\t\t.addClass('yasqe_btn yasqe_btn-sm yasqe_btn-primary')\n\t\t\t\t\t.click(function() {\n\n\t\t\t\t\t\t$(this).parent().find('button').attr('disabled', 'disabled');\n\t\t\t\t\t\t$input.val(root.getAsCurl(yasqe)).focus();\n\t\t\t\t\t}).appendTo(popup);\n\t\t\t\tvar positions = svgShare.position();\n\t\t\t\tpopup.css(\"top\", (positions.top + svgShare.outerHeight() + parseInt(popup.css('padding-top')) ) + \"px\").css(\"left\", ((positions.left + svgShare.outerWidth()) - popup.outerWidth()) + \"px\");\n\t\t\t\t$input.focus();\n\t\t\t})\n\t\t\t.addClass(\"yasqe_share\")\n\t\t\t.attr(\"title\", \"Share your query\")\n\t\t\t.appendTo(yasqe.buttons);\n\n\t}\n\n\n\t/**\n\t * draw fullscreen button\n\t */\n\n\tvar toggleFullscreen = $('<div>', {\n\t\t\tclass: 'fullscreenToggleBtns'\n\t\t})\n\t\t.append($(yutils.svg.getElement(imgs.fullscreen))\n\t\t\t.addClass(\"yasqe_fullscreenBtn\")\n\t\t\t.attr(\"title\", \"Set editor full screen\")\n\t\t\t.click(function() {\n\t\t\t\tyasqe.setOption(\"fullScreen\", true);\n\t\t\t}))\n\t\t.append($(yutils.svg.getElement(imgs.smallscreen))\n\t\t\t.addClass(\"yasqe_smallscreenBtn\")\n\t\t\t.attr(\"title\", \"Set editor to normale size\")\n\t\t\t.click(function() {\n\t\t\t\tyasqe.setOption(\"fullScreen\", false);\n\t\t\t}))\n\tyasqe.buttons.append(toggleFullscreen);\n\n\n\tif (yasqe.options.sparql.showQueryButton) {\n\t\t$(\"<div>\", {\n\t\t\t\tclass: 'yasqe_queryButton'\n\t\t\t})\n\t\t\t.click(function() {\n\t\t\t\tif ($(this).hasClass(\"query_busy\")) {\n\t\t\t\t\tif (yasqe.xhr) yasqe.xhr.abort();\n\t\t\t\t\troot.updateQueryButton(yasqe);\n\t\t\t\t} else {\n\t\t\t\t\tyasqe.query();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.appendTo(yasqe.buttons);\n\t\troot.updateQueryButton(yasqe);\n\t}\n\n};\n\n\nvar queryButtonIds = {\n\t\"busy\": \"loader\",\n\t\"valid\": \"query\",\n\t\"error\": \"queryInvalid\"\n};\n\n/**\n * Update the query button depending on current query status. If no query status is passed via the parameter, it auto-detects the current query status\n *\n * @param {doc} YASQE document\n * @param status {string|null, \"busy\"|\"valid\"|\"error\"}\n */\nroot.updateQueryButton = function(yasqe, status) {\n\tvar queryButton = $(yasqe.getWrapperElement()).find(\".yasqe_queryButton\");\n\tif (queryButton.length == 0) return; //no query button drawn\n\n\t//detect status\n\tif (!status) {\n\t\tstatus = \"valid\";\n\t\tif (yasqe.queryValid === false) status = \"error\";\n\t}\n\n\tif (status != yasqe.queryStatus) {\n\t\tqueryButton\n\t\t\t.empty()\n\t\t\t.removeClass(function(index, classNames) {\n\t\t\t\treturn classNames.split(\" \").filter(function(c) {\n\t\t\t\t\t//remove classname from previous status\n\t\t\t\t\treturn c.indexOf(\"query_\") == 0;\n\t\t\t\t}).join(\" \");\n\t\t\t});\n\n\t\tif (status == \"busy\") {\n\t\t\tqueryButton.append($('<div>', {\n\t\t\t\tclass: 'loader',\n\t\t\t}));\n\t\t\tyasqe.queryStatus = status;\n\t\t} else if (status == \"valid\" || status == \"error\") {\n\t\t\tqueryButton.addClass(\"query_\" + status);\n\t\t\tyutils.svg.draw(queryButton, imgs[queryButtonIds[status]]);\n\t\t\tyasqe.queryStatus = status;\n\t\t}\n\t}\n};\n/**\n * Initialize YASQE from an existing text area (see http://codemirror.net/doc/manual.html#fromTextArea for more info)\n *\n * @method YASQE.fromTextArea\n * @param textArea {DOM element}\n * @param config {object}\n * @returns {doc} YASQE document\n */\nroot.fromTextArea = function(textAreaEl, config) {\n\tconfig = extendConfig(config);\n\t//add yasqe div as parent (needed for styles to be manageable and scoped).\n\t//In this case, I -also- put it as parent el of the text area. This is wrapped in a div now\n\tvar rootEl = $(\"<div>\", {\n\t\tclass: 'yasqe'\n\t}).insertBefore($(textAreaEl)).append($(textAreaEl));\n\tvar yasqe = extendCmInstance(CodeMirror.fromTextArea(textAreaEl, config));\n\tpostProcessCmElement(yasqe);\n\treturn yasqe;\n};\n\n\nroot.storeQuery = function(yasqe) {\n\tvar storageId = utils.getPersistencyId(yasqe, yasqe.options.persistent);\n\tif (storageId) {\n\t\tyutils.storage.set(storageId, yasqe.getValue(), \"month\");\n\t}\n};\nroot.commentLines = function(yasqe) {\n\tvar startLine = yasqe.getCursor(true).line;\n\tvar endLine = yasqe.getCursor(false).line;\n\tvar min = Math.min(startLine, endLine);\n\tvar max = Math.max(startLine, endLine);\n\n\t// if all lines start with #, remove this char. Otherwise add this char\n\tvar linesAreCommented = true;\n\tfor (var i = min; i <= max; i++) {\n\t\tvar line = yasqe.getLine(i);\n\t\tif (line.length == 0 || line.substring(0, 1) != \"#\") {\n\t\t\tlinesAreCommented = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (var i = min; i <= max; i++) {\n\t\tif (linesAreCommented) {\n\t\t\t// lines are commented, so remove comments\n\t\t\tyasqe.replaceRange(\"\", {\n\t\t\t\tline: i,\n\t\t\t\tch: 0\n\t\t\t}, {\n\t\t\t\tline: i,\n\t\t\t\tch: 1\n\t\t\t});\n\t\t} else {\n\t\t\t// Not all lines are commented, so add comments\n\t\t\tyasqe.replaceRange(\"#\", {\n\t\t\t\tline: i,\n\t\t\t\tch: 0\n\t\t\t});\n\t\t}\n\n\t}\n};\n\nroot.copyLineUp = function(yasqe) {\n\tvar cursor = yasqe.getCursor();\n\tvar lineCount = yasqe.lineCount();\n\t// First create new empty line at end of text\n\tyasqe.replaceRange(\"\\n\", {\n\t\tline: lineCount - 1,\n\t\tch: yasqe.getLine(lineCount - 1).length\n\t});\n\t// Copy all lines to their next line\n\tfor (var i = lineCount; i > cursor.line; i--) {\n\t\tvar line = yasqe.getLine(i - 1);\n\t\tyasqe.replaceRange(line, {\n\t\t\tline: i,\n\t\t\tch: 0\n\t\t}, {\n\t\t\tline: i,\n\t\t\tch: yasqe.getLine(i).length\n\t\t});\n\t}\n};\nroot.copyLineDown = function(yasqe) {\n\troot.copyLineUp(yasqe);\n\t// Make sure cursor goes one down (we are copying downwards)\n\tvar cursor = yasqe.getCursor();\n\tcursor.line++;\n\tyasqe.setCursor(cursor);\n};\nroot.doAutoFormat = function(yasqe) {\n\tif (yasqe.somethingSelected()) {\n\t\tvar to = {\n\t\t\tline: yasqe.getCursor(false).line,\n\t\t\tch: yasqe.getSelection().length\n\t\t};\n\t\tautoFormatRange(yasqe, yasqe.getCursor(true), to);\n\t} else {\n\t\tvar totalLines = yasqe.lineCount();\n\t\tvar totalChars = yasqe.getTextArea().value.length;\n\t\tautoFormatRange(yasqe, {\n\t\t\tline: 0,\n\t\t\tch: 0\n\t\t}, {\n\t\t\tline: totalLines,\n\t\t\tch: totalChars\n\t\t});\n\t}\n\n};\n\n\nvar autoFormatRange = function(yasqe, from, to) {\n\tvar absStart = yasqe.indexFromPos(from);\n\tvar absEnd = yasqe.indexFromPos(to);\n\t// Insert additional line breaks where necessary according to the\n\t// mode's syntax\n\tvar res = autoFormatLineBreaks(yasqe.getValue(), absStart, absEnd);\n\n\t// Replace and auto-indent the range\n\tyasqe.operation(function() {\n\t\tyasqe.replaceRange(res, from, to);\n\t\tvar startLine = yasqe.posFromIndex(absStart).line;\n\t\tvar endLine = yasqe.posFromIndex(absStart + res.length).line;\n\t\tfor (var i = startLine; i <= endLine; i++) {\n\t\t\tyasqe.indentLine(i, \"smart\");\n\t\t}\n\t});\n};\n\nvar autoFormatLineBreaks = function(text, start, end) {\n\ttext = text.substring(start, end);\n\tvar breakAfterArray = [\n\t\t[\"keyword\", \"ws\", \"prefixed\", \"ws\", \"uri\"], // i.e. prefix declaration\n\t\t[\"keyword\", \"ws\", \"uri\"] // i.e. base\n\t];\n\tvar breakAfterCharacters = [\"{\", \".\", \";\"];\n\tvar breakBeforeCharacters = [\"}\"];\n\tvar getBreakType = function(stringVal, type) {\n\t\tfor (var i = 0; i < breakAfterArray.length; i++) {\n\t\t\tif (stackTrace.valueOf().toString() == breakAfterArray[i].valueOf()\n\t\t\t\t.toString()) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0; i < breakAfterCharacters.length; i++) {\n\t\t\tif (stringVal == breakAfterCharacters[i]) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0; i < breakBeforeCharacters.length; i++) {\n\t\t\t// don't want to issue 'breakbefore' AND 'breakafter', so check\n\t\t\t// current line\n\t\t\tif ($.trim(currentLine) != '' && stringVal == breakBeforeCharacters[i]) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t};\n\tvar formattedQuery = \"\";\n\tvar currentLine = \"\";\n\tvar stackTrace = [];\n\tCodeMirror.runMode(text, \"sparql11\", function(stringVal, type) {\n\t\tstackTrace.push(type);\n\t\tvar breakType = getBreakType(stringVal, type);\n\t\tif (breakType != 0) {\n\t\t\tif (breakType == 1) {\n\t\t\t\tformattedQuery += stringVal + \"\\n\";\n\t\t\t\tcurrentLine = \"\";\n\t\t\t} else { // (-1)\n\t\t\t\tformattedQuery += \"\\n\" + stringVal;\n\t\t\t\tcurrentLine = stringVal;\n\t\t\t}\n\t\t\tstackTrace = [];\n\t\t} else {\n\t\t\tcurrentLine += stringVal;\n\t\t\tformattedQuery += stringVal;\n\t\t}\n\t\tif (stackTrace.length == 1 && stackTrace[0] == \"sp-ws\")\n\t\t\tstackTrace = [];\n\t});\n\treturn $.trim(formattedQuery.replace(/\\n\\s*\\n/g, '\\n'));\n};\n\nrequire('./sparql.js'),\n\trequire('./defaults.js');\nroot.$ = $;\nroot.version = {\n\t\"CodeMirror\": CodeMirror.version,\n\t\"YASQE\": require(\"../package.json\").version,\n\t\"jquery\": $.fn.jquery,\n\t\"yasgui-utils\": yutils.version\n};\n","var CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(),\n\ttokenUtils = require('./tokenUtils.js');\n\n\"use strict\";\nvar lookFor = \"PREFIX\";\nmodule.exports = {\n\tfindFirstPrefixLine: function(cm) {\n\t\tvar lastLine = cm.lastLine();\n\t\tfor (var i = 0; i <= lastLine; ++i) {\n\t\t\tif (findFirstPrefix(cm, i) >= 0) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction findFirstPrefix(cm, line, ch, lineText) {\n\tif (!ch) ch = 0;\n\tif (!lineText) lineText = cm.getLine(line);\n\tlineText = lineText.toUpperCase();\n\tfor (var at = ch, pass = 0;;) {\n\t\tvar found = lineText.indexOf(lookFor, at);\n\t\tif (found == -1) {\n\t\t\tif (pass == 1)\n\t\t\t\tbreak;\n\t\t\tpass = 1;\n\t\t\tat = lineText.length;\n\t\t\tcontinue;\n\t\t}\n\t\tif (pass == 1 && found < ch)\n\t\t\tbreak;\n\t\ttokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n\t\tif (!/^(comment|string)/.test(tokenType))\n\t\t\treturn found + 1;\n\t\tat = found - 1;\n\t}\n}\n\nCodeMirror.registerHelper(\"fold\", \"prefix\", function(cm, start) {\n\tvar line = start.line,\n\t\tlineText = cm.getLine(line);\n\n\tvar startCh, tokenType;\n\n\tfunction hasPreviousPrefix() {\n\t\tvar hasPreviousPrefix = false;\n\t\tfor (var i = line - 1; i >= 0; i--) {\n\t\t\tif (cm.getLine(i).toUpperCase().indexOf(lookFor) >= 0) {\n\t\t\t\thasPreviousPrefix = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn hasPreviousPrefix;\n\t}\n\n\n\tfunction findOpening(openCh) {\n\t\tfor (var at = start.ch, pass = 0;;) {\n\t\t\tvar found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n\t\t\tif (found == -1) {\n\t\t\t\tif (pass == 1)\n\t\t\t\t\tbreak;\n\t\t\t\tpass = 1;\n\t\t\t\tat = lineText.length;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (pass == 1 && found < start.ch)\n\t\t\t\tbreak;\n\t\t\ttokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n\t\t\tif (!/^(comment|string)/.test(tokenType))\n\t\t\t\treturn found + 1;\n\t\t\tat = found - 1;\n\t\t}\n\t}\n\tvar getLastPrefixPos = function(line, ch) {\n\t\tvar prefixKeywordToken = cm.getTokenAt(CodeMirror.Pos(line, ch + 1));\n\t\tif (!prefixKeywordToken || prefixKeywordToken.type != \"keyword\") return -1;\n\t\tvar prefixShortname = tokenUtils.getNextNonWsToken(cm, line, prefixKeywordToken.end + 1);\n\t\tif (!prefixShortname || prefixShortname.type != \"string-2\") return -1; //missing prefix keyword shortname\n\t\tvar prefixUri = tokenUtils.getNextNonWsToken(cm, line, prefixShortname.end + 1);\n\t\tif (!prefixUri || prefixUri.type != \"variable-3\") return -1; //missing prefix uri\n\t\treturn prefixUri.end;\n\t}\n\n\t//only use opening prefix declaration\n\tif (hasPreviousPrefix())\n\t\treturn;\n\tvar prefixStart = findFirstPrefix(cm, line, start.ch, lineText);\n\n\tif (prefixStart == null)\n\t\treturn;\n\tvar stopAt = '{'; //if this char is there, we won't have a chance of finding more prefixes\n\tvar stopAtNextLine = false;\n\tvar count = 1,\n\t\tlastLine = cm.lastLine(),\n\t\tend, endCh;\n\tvar prefixEndChar = getLastPrefixPos(line, prefixStart);\n\tvar prefixEndLine = line;\n\n\touter: for (var i = line; i <= lastLine; ++i) {\n\t\tif (stopAtNextLine)\n\t\t\tbreak;\n\t\tvar text = cm.getLine(i),\n\t\t\tpos = i == line ? prefixStart + 1 : 0;\n\n\t\tfor (;;) {\n\t\t\tif (!stopAtNextLine && text.indexOf(stopAt) >= 0)\n\t\t\t\tstopAtNextLine = true;\n\n\t\t\tvar nextPrefixDeclaration = text.toUpperCase()\n\t\t\t\t.indexOf(lookFor, pos);\n\n\t\t\tif (nextPrefixDeclaration >= 0) {\n\t\t\t\tif ((endCh = getLastPrefixPos(i, nextPrefixDeclaration)) > 0) {\n\t\t\t\t\tprefixEndChar = endCh;\n\t\t\t\t\tprefixEndLine = i;\n\t\t\t\t\tpos = prefixEndChar;\n\t\t\t\t}\n\t\t\t\tpos++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\tfrom: CodeMirror.Pos(line, prefixStart + lookFor.length),\n\t\tto: CodeMirror.Pos(prefixEndLine, prefixEndChar)\n\t};\n});","'use strict';\n/**\n * Append prefix declaration to list of prefixes in query window.\n * \n * @param yasqe\n * @param prefix\n */\nvar addPrefixes = function(yasqe, prefixes) {\n\tvar existingPrefixes = yasqe.getPrefixesFromQuery();\n\t//for backwards compatability, we stil support prefixes value as string (e.g. 'rdf: <http://fbfgfgf>'\n\tif (typeof prefixes == \"string\") {\n\t\taddPrefixAsString(yasqe, prefixes);\n\t} else {\n\t\tfor (var pref in prefixes) {\n\t\t\tif (!(pref in existingPrefixes))\n\t\t\t\taddPrefixAsString(yasqe, pref + \": <\" + prefixes[pref] + \">\");\n\t\t}\n\t}\n\tyasqe.collapsePrefixes(false);\n};\n\nvar addPrefixAsString = function(yasqe, prefixString) {\n\tvar lastPrefix = null;\n\tvar lastPrefixLine = 0;\n\tvar numLines = yasqe.lineCount();\n\tfor (var i = 0; i < numLines; i++) {\n\t\tvar firstToken = yasqe.getNextNonWsToken(i);\n\t\tif (firstToken != null && (firstToken.string == \"PREFIX\" || firstToken.string == \"BASE\")) {\n\t\t\tlastPrefix = firstToken;\n\t\t\tlastPrefixLine = i;\n\t\t}\n\t}\n\n\tif (lastPrefix == null) {\n\t\tyasqe.replaceRange(\"PREFIX \" + prefixString + \"\\n\", {\n\t\t\tline: 0,\n\t\t\tch: 0\n\t\t});\n\t} else {\n\t\tvar previousIndent = getIndentFromLine(yasqe, lastPrefixLine);\n\t\tyasqe.replaceRange(\"\\n\" + previousIndent + \"PREFIX \" + prefixString, {\n\t\t\tline: lastPrefixLine\n\t\t});\n\t}\n\tyasqe.collapsePrefixes(false);\n};\nvar removePrefixes = function(yasqe, prefixes) {\n\tvar escapeRegex = function(string) {\n\t\t//taken from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript/3561711#3561711\n\t\treturn string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\t}\n\tfor (var pref in prefixes) {\n\t\tyasqe.setValue(yasqe.getValue().replace(new RegExp(\"PREFIX\\\\s*\" + pref + \":\\\\s*\" + escapeRegex(\"<\" + prefixes[pref] + \">\") + \"\\\\s*\", \"ig\"), ''));\n\t}\n\tyasqe.collapsePrefixes(false);\n\n};\n\n/**\n * Get defined prefixes from query as array, in format {\"prefix:\" \"uri\"}\n * \n * @param cm\n * @returns {Array}\n */\nvar getPrefixesFromQuery = function(yasqe) {\n\tvar queryPrefixes = {};\n\tvar shouldContinue = true;\n\tvar getPrefixesFromLine = function(lineOffset, colOffset) {\n\t\tif (!shouldContinue) return;\n\t\tif (!colOffset) colOffset = 1;\n\t\tvar token = yasqe.getNextNonWsToken(i, colOffset);\n\t\tif (token) {\n\t\t\tif (token.state.possibleCurrent.indexOf(\"PREFIX\") == -1 && token.state.possibleNext.indexOf(\"PREFIX\") == -1) shouldContinue = false; //we are beyond the place in the query where we can enter prefixes\n\t\t\tif (token.string.toUpperCase() == \"PREFIX\") {\n\t\t\t\tvar prefix = yasqe.getNextNonWsToken(i, token.end + 1);\n\t\t\t\tif (prefix) {\n\t\t\t\t\tvar uri = yasqe.getNextNonWsToken(i, prefix.end + 1);\n\t\t\t\t\tif (uri) {\n\t\t\t\t\t\tvar uriString = uri.string;\n\t\t\t\t\t\tif (uriString.indexOf(\"<\") == 0)\n\t\t\t\t\t\t\turiString = uriString.substring(1);\n\t\t\t\t\t\tif (uriString.slice(-1) == \">\")\n\t\t\t\t\t\t\turiString = uriString\n\t\t\t\t\t\t\t.substring(0, uriString.length - 1);\n\t\t\t\t\t\tqueryPrefixes[prefix.string.slice(0, -1)] = uriString;\n\n\t\t\t\t\t\tgetPrefixesFromLine(lineOffset, uri.end + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgetPrefixesFromLine(lineOffset, prefix.end + 1);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tgetPrefixesFromLine(lineOffset, token.end + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgetPrefixesFromLine(lineOffset, token.end + 1);\n\t\t\t}\n\t\t}\n\t};\n\n\n\tvar numLines = yasqe.lineCount();\n\tfor (var i = 0; i < numLines; i++) {\n\t\tif (!shouldContinue) break;\n\t\tgetPrefixesFromLine(i);\n\n\t}\n\treturn queryPrefixes;\n};\n\n/**\n * Get the used indentation for a certain line\n * \n * @param yasqe\n * @param line\n * @param charNumber\n * @returns\n */\nvar getIndentFromLine = function(yasqe, line, charNumber) {\n\tif (charNumber == undefined)\n\t\tcharNumber = 1;\n\tvar token = yasqe.getTokenAt({\n\t\tline: line,\n\t\tch: charNumber\n\t});\n\tif (token == null || token == undefined || token.type != \"ws\") {\n\t\treturn \"\";\n\t} else {\n\t\treturn token.string + getIndentFromLine(yasqe, line, token.end + 1);\n\t};\n};\n\nmodule.exports = {\n\taddPrefixes: addPrefixes,\n\tgetPrefixesFromQuery: getPrefixesFromQuery,\n\tremovePrefixes: removePrefixes\n};","'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n\tutils = require('./utils.js'),\n\tYASQE = require('./main.js');\n\nYASQE.getAjaxConfig = function(yasqe, callbackOrConfig) {\n\tvar callback = (typeof callbackOrConfig == \"function\" ? callbackOrConfig : null);\n\tvar config = (typeof callbackOrConfig == \"object\" ? callbackOrConfig : {});\n\n\tif (yasqe.options.sparql)\n\t\tconfig = $.extend({}, yasqe.options.sparql, config);\n\n\t//for backwards compatability, make sure we copy sparql handlers to sparql callbacks\n\tif (config.handlers)\n\t\t$.extend(true, config.callbacks, config.handlers);\n\n\n\tif (!config.endpoint || config.endpoint.length == 0)\n\t\treturn; // nothing to query!\n\n\t/**\n\t * initialize ajax config\n\t */\n\tvar ajaxConfig = {\n\t\turl: (typeof config.endpoint == \"function\" ? config.endpoint(yasqe) : config.endpoint),\n\t\ttype: (typeof config.requestMethod == \"function\" ? config.requestMethod(yasqe) : config.requestMethod),\n\t\theaders: {\n\t\t\tAccept: getAcceptHeader(yasqe, config),\n\t\t}\n\t};\n\tif (config.xhrFields) ajaxConfig.xhrFields = config.xhrFields;\n\t/**\n\t * add complete, beforesend, etc callbacks (if specified)\n\t */\n\tvar handlerDefined = false;\n\tif (config.callbacks) {\n\t\tfor (var handler in config.callbacks) {\n\t\t\tif (config.callbacks[handler]) {\n\t\t\t\thandlerDefined = true;\n\t\t\t\tajaxConfig[handler] = config.callbacks[handler];\n\t\t\t}\n\t\t}\n\t}\n\tif (ajaxConfig.type === 'GET') {\n\t\t//we need to do encoding ourselve, as jquery does not properly encode the url string\n\t\t//https://github.com/OpenTriply/YASGUI/issues/75\n\t\tvar first = true;\n\t\t$.each(yasqe.getUrlArguments(config), function(key, val) {\n\t\t\tajaxConfig.url += (first?'?': '&') + val.name + '=' + encodeURIComponent(val.value);\n\t\t\tfirst = false;\n\t\t});\n\t} else {\n\t\tajaxConfig.data = yasqe.getUrlArguments(config);\n\t}\n\tif (!handlerDefined && !callback)\n\t\treturn; // ok, we can query, but have no callbacks. just stop now\n\n\t// if only callback is passed as arg, add that on as 'onComplete' callback\n\tif (callback)\n\t\tajaxConfig.complete = callback;\n\n\n\n\t/**\n\t * merge additional request headers\n\t */\n\tif (config.headers && !$.isEmptyObject(config.headers))\n\t\t$.extend(ajaxConfig.headers, config.headers);\n\n\n\tvar queryStart = new Date();\n\tvar updateYasqe = function() {\n\t\tyasqe.lastQueryDuration = new Date() - queryStart;\n\t\tYASQE.updateQueryButton(yasqe);\n\t\tyasqe.setBackdrop(false);\n\t};\n\t//Make sure the query button is updated again on complete\n\tvar completeCallbacks = [\n\t\tfunction(){require('./main.js').signal(yasqe, 'queryFinish', arguments)},\n\t\tupdateYasqe\n\t];\n\n\tif (ajaxConfig.complete) {\n\t\tcompleteCallbacks.push(ajaxConfig.complete);\n\t}\n\tajaxConfig.complete = completeCallbacks;\n\treturn ajaxConfig;\n};\n\n\n\nYASQE.executeQuery = function(yasqe, callbackOrConfig) {\n\tYASQE.signal(yasqe, 'query', yasqe, callbackOrConfig);\n\tYASQE.updateQueryButton(yasqe, \"busy\");\n\tyasqe.setBackdrop(true);\n\tyasqe.xhr = $.ajax(YASQE.getAjaxConfig(yasqe, callbackOrConfig));\n};\n\n\nYASQE.getUrlArguments = function(yasqe, config) {\n\tvar queryMode = yasqe.getQueryMode();\n\tvar data = [{\n\t\tname: utils.getString(yasqe, yasqe.options.sparql.queryName),\n\t\tvalue: (config.getQueryForAjax? config.getQueryForAjax(yasqe): yasqe.getValue())\n\t}];\n\n\t/**\n\t * add named graphs to ajax config\n\t */\n\tif (config.namedGraphs && config.namedGraphs.length > 0) {\n\t\tvar argName = (queryMode == \"query\" ? \"named-graph-uri\" : \"using-named-graph-uri \");\n\t\tfor (var i = 0; i < config.namedGraphs.length; i++)\n\t\t\tdata.push({\n\t\t\t\tname: argName,\n\t\t\t\tvalue: config.namedGraphs[i]\n\t\t\t});\n\t}\n\t/**\n\t * add default graphs to ajax config\n\t */\n\tif (config.defaultGraphs && config.defaultGraphs.length > 0) {\n\t\tvar argName = (queryMode == \"query\" ? \"default-graph-uri\" : \"using-graph-uri \");\n\t\tfor (var i = 0; i < config.defaultGraphs.length; i++)\n\t\t\tdata.push({\n\t\t\t\tname: argName,\n\t\t\t\tvalue: config.defaultGraphs[i]\n\t\t\t});\n\t}\n\n\t/**\n\t * add additional request args\n\t */\n\tif (config.args && config.args.length > 0) $.merge(data, config.args);\n\n\treturn data;\n}\nvar getAcceptHeader = function(yasqe, config) {\n\tvar acceptHeader = null;\n\tif (config.acceptHeader && !config.acceptHeaderGraph && !config.acceptHeaderSelect && !config.acceptHeaderUpdate) {\n\t\t//this is the old config. For backwards compatability, keep supporting it\n\t\tif (typeof config.acceptHeader == \"function\") {\n\t\t\tacceptHeader = config.acceptHeader(yasqe);\n\t\t} else {\n\t\t\tacceptHeader = config.acceptHeader;\n\t\t}\n\t} else {\n\t\tif (yasqe.getQueryMode() == \"update\") {\n\t\t\tacceptHeader = (typeof config.acceptHeader == \"function\" ? config.acceptHeaderUpdate(yasqe) : config.acceptHeaderUpdate);\n\t\t} else {\n\t\t\tvar qType = yasqe.getQueryType();\n\t\t\tif (qType == \"DESCRIBE\" || qType == \"CONSTRUCT\") {\n\t\t\t\tacceptHeader = (typeof config.acceptHeaderGraph == \"function\" ? config.acceptHeaderGraph(yasqe) : config.acceptHeaderGraph);\n\t\t\t} else {\n\t\t\t\tacceptHeader = (typeof config.acceptHeaderSelect == \"function\" ? config.acceptHeaderSelect(yasqe) : config.acceptHeaderSelect);\n\t\t\t}\n\t\t}\n\t}\n\treturn acceptHeader;\n};\n\nmodule.exports = {\n\tgetAjaxConfig: YASQE.getAjaxConfig\n}\n","'use strict';\n/**\n * When typing a query, this query is sometimes syntactically invalid, causing\n * the current tokens to be incorrect This causes problem for autocompletion.\n * http://bla might result in two tokens: http:// and bla. We'll want to combine\n * these\n * \n * @param yasqe {doc}\n * @param token {object}\n * @param cursor {object}\n * @return token {object}\n * @method YASQE.getCompleteToken\n */\nvar getCompleteToken = function(yasqe, token, cur) {\n\tif (!cur) {\n\t\tcur = yasqe.getCursor();\n\t}\n\tif (!token) {\n\t\ttoken = yasqe.getTokenAt(cur);\n\t}\n\tvar prevToken = yasqe.getTokenAt({\n\t\tline: cur.line,\n\t\tch: token.start\n\t});\n\t// not start of line, and not whitespace\n\tif (\n\t\tprevToken.type != null && prevToken.type != \"ws\" && token.type != null && token.type != \"ws\"\n\t) {\n\t\ttoken.start = prevToken.start;\n\t\ttoken.string = prevToken.string + token.string;\n\t\treturn getCompleteToken(yasqe, token, {\n\t\t\tline: cur.line,\n\t\t\tch: prevToken.start\n\t\t}); // recursively, might have multiple tokens which it should include\n\t} else if (token.type != null && token.type == \"ws\") {\n\t\t//always keep 1 char of whitespace between tokens. Otherwise, autocompletions might end up next to the previous node, without whitespace between them\n\t\ttoken.start = token.start + 1;\n\t\ttoken.string = token.string.substring(1);\n\t\treturn token;\n\t} else {\n\t\treturn token;\n\t}\n};\nvar getPreviousNonWsToken = function(yasqe, line, token) {\n\tvar previousToken = yasqe.getTokenAt({\n\t\tline: line,\n\t\tch: token.start\n\t});\n\tif (previousToken != null && previousToken.type == \"ws\") {\n\t\tpreviousToken = getPreviousNonWsToken(yasqe, line, previousToken);\n\t}\n\treturn previousToken;\n}\nvar getNextNonWsToken = function(yasqe, lineNumber, charNumber) {\n\tif (charNumber == undefined)\n\t\tcharNumber = 1;\n\tvar token = yasqe.getTokenAt({\n\t\tline: lineNumber,\n\t\tch: charNumber\n\t});\n\tif (token == null || token == undefined || token.end < charNumber) {\n\t\treturn null;\n\t}\n\tif (token.type == \"ws\") {\n\t\treturn getNextNonWsToken(yasqe, lineNumber, token.end + 1);\n\t}\n\treturn token;\n};\n\nmodule.exports = {\n\tgetPreviousNonWsToken: getPreviousNonWsToken,\n\tgetCompleteToken: getCompleteToken,\n\tgetNextNonWsToken: getNextNonWsToken,\n};","'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\n\tutils = require('./utils.js');\n\n/**\n * Write our own tooltip, to avoid loading another library for just this functionality. For now, we only use tooltip for showing parse errors, so this is quite a tailored solution\n * Requirements: \n * \t\tposition tooltip within codemirror frame as much as possible, to avoid z-index issues with external things on page\n * \t\tuse html as content\n */\nmodule.exports = function(yasqe, parent, html) {\n\tvar parent = $(parent);\n\tvar tooltip;\n\tparent.hover(function() {\n\t\t\tif (typeof html == \"function\") html = html();\n\t\t\ttooltip = $(\"<div>\").addClass('yasqe_tooltip').html(html).appendTo(parent);\n\t\t\trepositionTooltip();\n\t\t},\n\t\tfunction() {\n\t\t\t$(\".yasqe_tooltip\").remove();\n\t\t});\n\n\n\n\t/**\n\t * only need to take into account top and bottom offset for this usecase\n\t */\n\tvar repositionTooltip = function() {\n\t\tif ($(yasqe.getWrapperElement()).offset().top >= tooltip.offset().top) {\n\t\t\t//shit, move the tooltip down. The tooltip now hovers over the top edge of the yasqe instance\n\t\t\ttooltip.css('bottom', 'auto');\n\t\t\ttooltip.css('top', '26px');\n\t\t}\n\t};\n};","'use strict';\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\n\nvar keyExists = function(objectToTest, key) {\n\tvar exists = false;\n\ttry {\n\t\tif (objectToTest[key] !== undefined)\n\t\t\texists = true;\n\t} catch (e) {}\n\treturn exists;\n};\n\nvar getPersistencyId = function(yasqe, persistentIdCreator) {\n\tvar persistencyId = null;\n\n\tif (persistentIdCreator) {\n\t\tif (typeof persistentIdCreator == \"string\") {\n\t\t\tpersistencyId = persistentIdCreator;\n\t\t} else {\n\t\t\tpersistencyId = persistentIdCreator(yasqe);\n\t\t}\n\t}\n\treturn persistencyId;\n};\n\nvar elementsOverlap = (function() {\n\tfunction getPositions(elem) {\n\t\tvar pos, width, height;\n\t\tpos = $(elem).offset();\n\t\twidth = $(elem).width();\n\t\theight = $(elem).height();\n\t\treturn [\n\t\t\t[pos.left, pos.left + width],\n\t\t\t[pos.top, pos.top + height]\n\t\t];\n\t}\n\n\tfunction comparePositions(p1, p2) {\n\t\tvar r1, r2;\n\t\tr1 = p1[0] < p2[0] ? p1 : p2;\n\t\tr2 = p1[0] < p2[0] ? p2 : p1;\n\t\treturn r1[1] > r2[0] || r1[0] === r2[0];\n\t}\n\n\treturn function(a, b) {\n\t\tvar pos1 = getPositions(a),\n\t\t\tpos2 = getPositions(b);\n\t\treturn comparePositions(pos1[0], pos2[0]) && comparePositions(pos1[1], pos2[1]);\n\t};\n})();\n\nvar getString = function(yasqe, item) {\n\tif (typeof item == \"function\") {\n\t\treturn item(yasqe);\n\t} else {\n\t\treturn item;\n\t}\n}\nmodule.exports = {\n\tkeyExists: keyExists,\n\tgetPersistencyId: getPersistencyId,\n\telementsOverlap: elementsOverlap,\n\tgetString:getString\n};\n"],"sourceRoot":"/source/"}